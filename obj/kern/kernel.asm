
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 d0 17 00 	lgdtl  0x17d018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

    # Leave a few words on the stack for the user trap frame
	#2024: this line is changed since the trapframe is move to the user kernel stack of each process
	#movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
	movl	$(ptr_stack_top),%esp
f0100033:	bc 00 d0 17 f0       	mov    $0xf017d000,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 b0 8f 55 f0 01 	movl   $0x1,0xf0558fb0
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 04 8f 55 f0 01 	movl   $0x1,0xf0558f04
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
//=======================================

//First ever function called in FOS kernel
bool autograde ;
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 28             	sub    $0x28,%esp
	//cprintf("*	1) Global data (BSS) section...");
	{
		// Before doing anything else,
		// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
		// This ensures that all static/global variables start with zero value.
		memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba a8 b9 57 f0       	mov    $0xf057b9a8,%edx
f010006a:	b8 b2 57 55 f0       	mov    $0xf05557b2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b2 57 55 f0       	push   $0xf05557b2
f010007e:	e8 1a 24 02 00       	call   f012249d <memset>
f0100083:	83 c4 10             	add    $0x10,%esp
	//cprintf("[DONE]\n");

	{
		// Initialize the console.
		// Can't call cprintf until after we do this!
		cons_init();
f0100086:	e8 8d 0d 00 00       	call   f0100e18 <cons_init>
		//print welcome message
		print_welcome_message();
f010008b:	e8 11 02 00 00       	call   f01002a1 <print_welcome_message>
	}

	cprintf("\n********************************************************************\n");
f0100090:	83 ec 0c             	sub    $0xc,%esp
f0100093:	68 c0 35 12 f0       	push   $0xf01235c0
f0100098:	e8 cf 0e 00 00       	call   f0100f6c <cprintf>
f010009d:	83 c4 10             	add    $0x10,%esp
	cprintf("* INITIALIZATIONS:\n");
f01000a0:	83 ec 0c             	sub    $0xc,%esp
f01000a3:	68 07 36 12 f0       	push   $0xf0123607
f01000a8:	e8 bf 0e 00 00       	call   f0100f6c <cprintf>
f01000ad:	83 c4 10             	add    $0x10,%esp
	cprintf("*=================\n");
f01000b0:	83 ec 0c             	sub    $0xc,%esp
f01000b3:	68 1b 36 12 f0       	push   $0xf012361b
f01000b8:	e8 af 0e 00 00       	call   f0100f6c <cprintf>
f01000bd:	83 c4 10             	add    $0x10,%esp

	cprintf("* 1) CPU...");
f01000c0:	83 ec 0c             	sub    $0xc,%esp
f01000c3:	68 2f 36 12 f0       	push   $0xf012362f
f01000c8:	e8 9f 0e 00 00       	call   f0100f6c <cprintf>
f01000cd:	83 c4 10             	add    $0x10,%esp
	{
		//Initialize the Main CPU
		cpu_init(0);
f01000d0:	83 ec 0c             	sub    $0xc,%esp
f01000d3:	6a 00                	push   $0x0
f01000d5:	e8 2d 70 00 00       	call   f0107107 <cpu_init>
f01000da:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("[DONE]\n");
f01000dd:	83 ec 0c             	sub    $0xc,%esp
f01000e0:	68 3b 36 12 f0       	push   $0xf012363b
f01000e5:	e8 82 0e 00 00       	call   f0100f6c <cprintf>
f01000ea:	83 c4 10             	add    $0x10,%esp

	cprintf("* 2) MEMORY:\n");
f01000ed:	83 ec 0c             	sub    $0xc,%esp
f01000f0:	68 43 36 12 f0       	push   $0xf0123643
f01000f5:	e8 72 0e 00 00       	call   f0100f6c <cprintf>
f01000fa:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 2 memory management initialization functions
		detect_memory();
f01000fd:	e8 65 79 00 00       	call   f0107a67 <detect_memory>
		initialize_kernel_VM();
f0100102:	e8 13 75 00 00       	call   f010761a <initialize_kernel_VM>
		initialize_paging();
f0100107:	e8 e0 7c 00 00       	call   f0107dec <initialize_paging>
		initialize_kheap_dynamic_allocator(KERNEL_HEAP_START, PAGE_SIZE, KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE);
#endif
		//	page_check();
		//setPageReplacmentAlgorithmNchanceCLOCK();
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
		setPageReplacmentAlgorithmFIFO();
f010010c:	e8 6d e5 00 00       	call   f010e67e <setPageReplacmentAlgorithmFIFO>
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);

		setUHeapPlacementStrategyFIRSTFIT();
f0100111:	e8 39 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
		setKHeapPlacementStrategyFIRSTFIT();
f0100116:	e8 24 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

		enableBuffering(0);
f010011b:	83 ec 0c             	sub    $0xc,%esp
f010011e:	6a 00                	push   $0x0
f0100120:	e8 56 e6 00 00       	call   f010e77b <enableBuffering>
f0100125:	83 c4 10             	add    $0x10,%esp
		//enableModifiedBuffer(1) ;
		enableModifiedBuffer(0) ;
f0100128:	83 ec 0c             	sub    $0xc,%esp
f010012b:	6a 00                	push   $0x0
f010012d:	e8 31 e6 00 00       	call   f010e763 <enableModifiedBuffer>
f0100132:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(1000);
f0100135:	83 ec 0c             	sub    $0xc,%esp
f0100138:	68 e8 03 00 00       	push   $0x3e8
f010013d:	e8 51 e6 00 00       	call   f010e793 <setModifiedBufferLength>
f0100142:	83 c4 10             	add    $0x10,%esp

		ide_init();
f0100145:	e8 aa 28 02 00       	call   f01229f4 <ide_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 3) USER ENVs...");
f010014a:	83 ec 0c             	sub    $0xc,%esp
f010014d:	68 51 36 12 f0       	push   $0xf0123651
f0100152:	e8 15 0e 00 00       	call   f0100f6c <cprintf>
f0100157:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 3 user environment initialization functions
		env_init();
f010015a:	e8 c3 96 00 00       	call   f0109822 <env_init>
		ts_init();
f010015f:	e8 30 bf 00 00       	call   f010c094 <ts_init>
		//2024: removed. called inside cpuinit()
		//idt_init();
	}
	cprintf("[DONE]\n");
f0100164:	83 ec 0c             	sub    $0xc,%esp
f0100167:	68 3b 36 12 f0       	push   $0xf012363b
f010016c:	e8 fb 0d 00 00       	call   f0100f6c <cprintf>
f0100171:	83 c4 10             	add    $0x10,%esp

	cprintf("* 4) PROGRAMMABLE INTERRUPT CONTROLLER:\n");
f0100174:	83 ec 0c             	sub    $0xc,%esp
f0100177:	68 64 36 12 f0       	push   $0xf0123664
f010017c:	e8 eb 0d 00 00       	call   f0100f6c <cprintf>
f0100181:	83 c4 10             	add    $0x10,%esp
	{
		pic_init();
f0100184:	e8 6a 6c 00 00       	call   f0106df3 <pic_init>
		cprintf("*	PIC is initialized\n");
f0100189:	83 ec 0c             	sub    $0xc,%esp
f010018c:	68 8d 36 12 f0       	push   $0xf012368d
f0100191:	e8 d6 0d 00 00       	call   f0100f6c <cprintf>
f0100196:	83 c4 10             	add    $0x10,%esp
		//Enable Clock Interrupt
		irq_clear_mask(0);
f0100199:	83 ec 0c             	sub    $0xc,%esp
f010019c:	6a 00                	push   $0x0
f010019e:	e8 42 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001a3:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ0 (Clock): is Enabled\n");
f01001a6:	83 ec 0c             	sub    $0xc,%esp
f01001a9:	68 a3 36 12 f0       	push   $0xf01236a3
f01001ae:	e8 b9 0d 00 00       	call   f0100f6c <cprintf>
f01001b3:	83 c4 10             	add    $0x10,%esp
		//Enable KB Interrupt
		irq_clear_mask(1);
f01001b6:	83 ec 0c             	sub    $0xc,%esp
f01001b9:	6a 01                	push   $0x1
f01001bb:	e8 25 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001c0:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ1 (Keyboard): is Enabled\n");
f01001c3:	83 ec 0c             	sub    $0xc,%esp
f01001c6:	68 c0 36 12 f0       	push   $0xf01236c0
f01001cb:	e8 9c 0d 00 00       	call   f0100f6c <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
		//Enable COM1 Interrupt
		irq_clear_mask(4);
f01001d3:	83 ec 0c             	sub    $0xc,%esp
f01001d6:	6a 04                	push   $0x4
f01001d8:	e8 08 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001dd:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ4 (COM1): is Enabled\n");
f01001e0:	83 ec 0c             	sub    $0xc,%esp
f01001e3:	68 df 36 12 f0       	push   $0xf01236df
f01001e8:	e8 7f 0d 00 00       	call   f0100f6c <cprintf>
f01001ed:	83 c4 10             	add    $0x10,%esp
		//Enable Primary ATA Hard Disk Interrupt
//		irq_clear_mask(14);
//		cprintf("*	IRQ14 (Primary ATA Hard Disk): is Enabled\n");
	}
	cprintf("* 5) SCHEDULER & MULTI-TASKING:\n");
f01001f0:	83 ec 0c             	sub    $0xc,%esp
f01001f3:	68 fc 36 12 f0       	push   $0xf01236fc
f01001f8:	e8 6f 0d 00 00       	call   f0100f6c <cprintf>
f01001fd:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 4 multitasking initialization functions
		kclock_init();
f0100200:	e8 c1 49 00 00       	call   f0104bc6 <kclock_init>
		sched_init() ;
f0100205:	e8 44 65 00 00       	call   f010674e <sched_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 6) ESP to SCHED KERN STACK:\n");
f010020a:	83 ec 0c             	sub    $0xc,%esp
f010020d:	68 20 37 12 f0       	push   $0xf0123720
f0100212:	e8 55 0d 00 00       	call   f0100f6c <cprintf>
f0100217:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f010021a:	89 e0                	mov    %esp,%eax
f010021c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010021f:	8b 45 e8             	mov    -0x18(%ebp),%eax
	{
		//Relocate SP to its corresponding location in the specific stack area below KERN_BASE (SCHD_KERN_STACK_TOP)
		uint32 old_sp = read_esp();
f0100222:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 sp_offset = (uint32)ptr_stack_top - old_sp ;
f0100225:	b8 00 d0 17 f0       	mov    $0xf017d000,%eax
f010022a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010022d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 new_sp = KERN_STACK_TOP - sp_offset;
f0100230:	b8 00 00 c0 ef       	mov    $0xefc00000,%eax
f0100235:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0100238:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010023b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010023e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0100241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100244:	89 c4                	mov    %eax,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100246:	89 e0                	mov    %esp,%eax
f0100248:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return esp;
f010024b:	8b 45 e0             	mov    -0x20(%ebp),%eax
		write_esp(new_sp);
		cprintf("*	old SP = %x - updated SP = %x\n", old_sp, read_esp());
f010024e:	83 ec 04             	sub    $0x4,%esp
f0100251:	50                   	push   %eax
f0100252:	ff 75 f4             	pushl  -0xc(%ebp)
f0100255:	68 40 37 12 f0       	push   $0xf0123740
f010025a:	e8 0d 0d 00 00       	call   f0100f6c <cprintf>
f010025f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("********************************************************************\n");
f0100262:	83 ec 0c             	sub    $0xc,%esp
f0100265:	68 64 37 12 f0       	push   $0xf0123764
f010026a:	e8 fd 0c 00 00       	call   f0100f6c <cprintf>
f010026f:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	autograde = 0;
f0100272:	c7 05 dc 91 55 f0 00 	movl   $0x0,0xf05591dc
f0100279:	00 00 00 
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010027c:	83 ec 0c             	sub    $0xc,%esp
f010027f:	68 ac 37 12 f0       	push   $0xf01237ac
f0100284:	e8 e3 0c 00 00       	call   f0100f6c <cprintf>
f0100289:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010028c:	83 ec 0c             	sub    $0xc,%esp
f010028f:	68 d8 37 12 f0       	push   $0xf01237d8
f0100294:	e8 d3 0c 00 00       	call   f0100f6c <cprintf>
f0100299:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f010029c:	e8 02 1b 00 00       	call   f0101da3 <get_into_prompt>

f01002a1 <print_welcome_message>:
	}
}


void print_welcome_message()
{
f01002a1:	55                   	push   %ebp
f01002a2:	89 e5                	mov    %esp,%ebp
f01002a4:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f01002a7:	83 ec 0c             	sub    $0xc,%esp
f01002aa:	68 fd 37 12 f0       	push   $0xf01237fd
f01002af:	e8 b8 0c 00 00       	call   f0100f6c <cprintf>
f01002b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002b7:	83 ec 0c             	sub    $0xc,%esp
f01002ba:	68 04 38 12 f0       	push   $0xf0123804
f01002bf:	e8 a8 0c 00 00       	call   f0100f6c <cprintf>
f01002c4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002c7:	83 ec 0c             	sub    $0xc,%esp
f01002ca:	68 4c 38 12 f0       	push   $0xf012384c
f01002cf:	e8 98 0c 00 00       	call   f0100f6c <cprintf>
f01002d4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01002d7:	83 ec 0c             	sub    $0xc,%esp
f01002da:	68 94 38 12 f0       	push   $0xf0123894
f01002df:	e8 88 0c 00 00       	call   f0100f6c <cprintf>
f01002e4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002e7:	83 ec 0c             	sub    $0xc,%esp
f01002ea:	68 4c 38 12 f0       	push   $0xf012384c
f01002ef:	e8 78 0c 00 00       	call   f0100f6c <cprintf>
f01002f4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002f7:	83 ec 0c             	sub    $0xc,%esp
f01002fa:	68 04 38 12 f0       	push   $0xf0123804
f01002ff:	e8 68 0c 00 00       	call   f0100f6c <cprintf>
f0100304:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100307:	83 ec 0c             	sub    $0xc,%esp
f010030a:	68 d9 38 12 f0       	push   $0xf01238d9
f010030f:	e8 58 0c 00 00       	call   f0100f6c <cprintf>
f0100314:	83 c4 10             	add    $0x10,%esp
}
f0100317:	90                   	nop
f0100318:	c9                   	leave  
f0100319:	c3                   	ret    

f010031a <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f010031a:	55                   	push   %ebp
f010031b:	89 e5                	mov    %esp,%ebp
f010031d:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f0100320:	e8 4b a4 00 00       	call   f010a770 <get_cpu_proc>
f0100325:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100328:	8b 45 10             	mov    0x10(%ebp),%eax
f010032b:	a3 c0 57 55 f0       	mov    %eax,0xf05557c0

	va_start(ap, fmt);
f0100330:	8d 45 10             	lea    0x10(%ebp),%eax
f0100333:	83 c0 04             	add    $0x4,%eax
f0100336:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\nkernel [EVAL_FINAL]panic at %s:%d: ", file, line);
f0100339:	83 ec 04             	sub    $0x4,%esp
f010033c:	ff 75 0c             	pushl  0xc(%ebp)
f010033f:	ff 75 08             	pushl  0x8(%ebp)
f0100342:	68 e0 38 12 f0       	push   $0xf01238e0
f0100347:	e8 20 0c 00 00       	call   f0100f6c <cprintf>
f010034c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010034f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100352:	83 ec 08             	sub    $0x8,%esp
f0100355:	ff 75 f0             	pushl  -0x10(%ebp)
f0100358:	50                   	push   %eax
f0100359:	e8 e5 0b 00 00       	call   f0100f43 <vcprintf>
f010035e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100361:	83 ec 0c             	sub    $0xc,%esp
f0100364:	68 05 39 12 f0       	push   $0xf0123905
f0100369:	e8 fe 0b 00 00       	call   f0100f6c <cprintf>
f010036e:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f0100371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100375:	74 10                	je     f0100387 <_panic+0x6d>
f0100377:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010037a:	8b 40 18             	mov    0x18(%eax),%eax
f010037d:	83 f8 02             	cmp    $0x2,%eax
f0100380:	75 05                	jne    f0100387 <_panic+0x6d>
	{
		//cprintf("\n>>>>>>>>>>> exiting the cur env<<<<<<<<<<<<\n");
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f0100382:	e8 a7 a3 00 00       	call   f010a72e <env_exit>

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100387:	89 e0                	mov    %esp,%eax
f0100389:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010038c:	8b 45 e8             	mov    -0x18(%ebp),%eax
	}
	//else //2024: panic from Kernel and no current running env
	{
		char* esp = (char*)read_esp();
f010038f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cprintf("esp = %x\n", esp);
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 ec             	pushl  -0x14(%ebp)
f0100398:	68 07 39 12 f0       	push   $0xf0123907
f010039d:	e8 ca 0b 00 00       	call   f0100f6c <cprintf>
f01003a2:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f01003a5:	e8 f9 19 00 00       	call   f0101da3 <get_into_prompt>

f01003aa <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01003aa:	55                   	push   %ebp
f01003ab:	89 e5                	mov    %esp,%ebp
f01003ad:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01003b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01003b3:	a3 c0 57 55 f0       	mov    %eax,0xf05557c0

	va_start(ap, fmt);
f01003b8:	8d 45 10             	lea    0x10(%ebp),%eax
f01003bb:	83 c0 04             	add    $0x4,%eax
f01003be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01003c1:	83 ec 04             	sub    $0x4,%esp
f01003c4:	ff 75 0c             	pushl  0xc(%ebp)
f01003c7:	ff 75 08             	pushl  0x8(%ebp)
f01003ca:	68 11 39 12 f0       	push   $0xf0123911
f01003cf:	e8 98 0b 00 00       	call   f0100f6c <cprintf>
f01003d4:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01003da:	83 ec 08             	sub    $0x8,%esp
f01003dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01003e0:	50                   	push   %eax
f01003e1:	e8 5d 0b 00 00       	call   f0100f43 <vcprintf>
f01003e6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003e9:	83 ec 0c             	sub    $0xc,%esp
f01003ec:	68 05 39 12 f0       	push   $0xf0123905
f01003f1:	e8 76 0b 00 00       	call   f0100f6c <cprintf>
f01003f6:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the command prompt */
	pushcli();
f01003f9:	e8 c2 6d 00 00       	call   f01071c0 <pushcli>
	struct cpu *c = mycpu();
f01003fe:	e8 fa 6c 00 00       	call   f01070fd <mycpu>
f0100403:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int sched_stat = c->scheduler_status;
f0100406:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100409:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f010040f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	popcli();
f0100412:	e8 fb 6d 00 00       	call   f0107212 <popcli>
	/*2022*///Check if the scheduler is successfully initialized or not
	if (sched_stat != SCH_UNINITIALIZED)
f0100417:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
f010041b:	74 23                	je     f0100440 <_panic_all+0x96>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f010041d:	e8 b2 60 00 00       	call   f01064d4 <sched_exit_all_ready_envs>
		struct Env* cur_env = get_cpu_proc();
f0100422:	e8 49 a3 00 00       	call   f010a770 <get_cpu_proc>
f0100427:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010042a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010042e:	74 10                	je     f0100440 <_panic_all+0x96>
f0100430:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100433:	8b 40 18             	mov    0x18(%eax),%eax
f0100436:	83 f8 02             	cmp    $0x2,%eax
f0100439:	75 05                	jne    f0100440 <_panic_all+0x96>
		{
			//cprintf("exit curenv...........\n");
			//Place the running env into the exit queue then switch to the scheduler
			env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f010043b:	e8 ee a2 00 00       	call   f010a72e <env_exit>
		}
	}
	//else //2024: panic from Kernel and no current running env
	{
		get_into_prompt();
f0100440:	e8 5e 19 00 00       	call   f0101da3 <get_into_prompt>

f0100445 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100445:	55                   	push   %ebp
f0100446:	89 e5                	mov    %esp,%ebp
f0100448:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010044b:	8b 45 10             	mov    0x10(%ebp),%eax
f010044e:	a3 c0 57 55 f0       	mov    %eax,0xf05557c0

	va_start(ap, fmt);
f0100453:	8d 45 10             	lea    0x10(%ebp),%eax
f0100456:	83 c0 04             	add    $0x4,%eax
f0100459:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010045c:	83 ec 04             	sub    $0x4,%esp
f010045f:	ff 75 0c             	pushl  0xc(%ebp)
f0100462:	ff 75 08             	pushl  0x8(%ebp)
f0100465:	68 11 39 12 f0       	push   $0xf0123911
f010046a:	e8 fd 0a 00 00       	call   f0100f6c <cprintf>
f010046f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100472:	8b 45 10             	mov    0x10(%ebp),%eax
f0100475:	83 ec 08             	sub    $0x8,%esp
f0100478:	ff 75 f4             	pushl  -0xc(%ebp)
f010047b:	50                   	push   %eax
f010047c:	e8 c2 0a 00 00       	call   f0100f43 <vcprintf>
f0100481:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100484:	83 ec 0c             	sub    $0xc,%esp
f0100487:	68 05 39 12 f0       	push   $0xf0123905
f010048c:	e8 db 0a 00 00       	call   f0100f6c <cprintf>
f0100491:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

//	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	struct Env* cur_env = get_cpu_proc();
f0100494:	e8 d7 a2 00 00       	call   f010a770 <get_cpu_proc>
f0100499:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010049c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01004a0:	74 10                	je     f01004b2 <_panic_into_prompt+0x6d>
f01004a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004a5:	8b 40 18             	mov    0x18(%eax),%eax
f01004a8:	83 f8 02             	cmp    $0x2,%eax
f01004ab:	75 05                	jne    f01004b2 <_panic_into_prompt+0x6d>
	{
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f01004ad:	e8 7c a2 00 00       	call   f010a72e <env_exit>
	}

	get_into_prompt();
f01004b2:	e8 ec 18 00 00       	call   f0101da3 <get_into_prompt>

f01004b7 <_warn>:
}


/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01004b7:	55                   	push   %ebp
f01004b8:	89 e5                	mov    %esp,%ebp
f01004ba:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01004bd:	8d 45 10             	lea    0x10(%ebp),%eax
f01004c0:	83 c0 04             	add    $0x4,%eax
f01004c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01004c6:	83 ec 04             	sub    $0x4,%esp
f01004c9:	ff 75 0c             	pushl  0xc(%ebp)
f01004cc:	ff 75 08             	pushl  0x8(%ebp)
f01004cf:	68 2a 39 12 f0       	push   $0xf012392a
f01004d4:	e8 93 0a 00 00       	call   f0100f6c <cprintf>
f01004d9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01004dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01004df:	83 ec 08             	sub    $0x8,%esp
f01004e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01004e5:	50                   	push   %eax
f01004e6:	e8 58 0a 00 00       	call   f0100f43 <vcprintf>
f01004eb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01004ee:	83 ec 0c             	sub    $0xc,%esp
f01004f1:	68 05 39 12 f0       	push   $0xf0123905
f01004f6:	e8 71 0a 00 00       	call   f0100f6c <cprintf>
f01004fb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01004fe:	90                   	nop
f01004ff:	c9                   	leave  
f0100500:	c3                   	ret    

f0100501 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100501:	55                   	push   %ebp
f0100502:	89 e5                	mov    %esp,%ebp
f0100504:	83 ec 10             	sub    $0x10,%esp
f0100507:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010050e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100517:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f010051a:	0f b6 c0             	movzbl %al,%eax
f010051d:	83 e0 01             	and    $0x1,%eax
f0100520:	85 c0                	test   %eax,%eax
f0100522:	75 07                	jne    f010052b <serial_proc_data+0x2a>
		return -1;
f0100524:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100529:	eb 16                	jmp    f0100541 <serial_proc_data+0x40>
f010052b:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100532:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100535:	89 c2                	mov    %eax,%edx
f0100537:	ec                   	in     (%dx),%al
f0100538:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010053b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010053e:	0f b6 c0             	movzbl %al,%eax
}
f0100541:	c9                   	leave  
f0100542:	c3                   	ret    

f0100543 <serial_intr>:

void
serial_intr(void)
{
f0100543:	55                   	push   %ebp
f0100544:	89 e5                	mov    %esp,%ebp
f0100546:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100549:	a1 e4 57 55 f0       	mov    0xf05557e4,%eax
f010054e:	85 c0                	test   %eax,%eax
f0100550:	74 10                	je     f0100562 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100552:	83 ec 0c             	sub    $0xc,%esp
f0100555:	68 01 05 10 f0       	push   $0xf0100501
f010055a:	e8 9d 07 00 00       	call   f0100cfc <cons_intr>
f010055f:	83 c4 10             	add    $0x10,%esp
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <serial_interrupt_handler>:

void serial_interrupt_handler(struct Trapframe* tf)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 08             	sub    $0x8,%esp
	cprintf("\nserial interrupt\n");
f010056b:	83 ec 0c             	sub    $0xc,%esp
f010056e:	68 48 39 12 f0       	push   $0xf0123948
f0100573:	e8 f4 09 00 00       	call   f0100f6c <cprintf>
f0100578:	83 c4 10             	add    $0x10,%esp
	serial_intr();
f010057b:	e8 c3 ff ff ff       	call   f0100543 <serial_intr>
}
f0100580:	90                   	nop
f0100581:	c9                   	leave  
f0100582:	c3                   	ret    

f0100583 <serial_init>:

void
serial_init(void)
{
f0100583:	55                   	push   %ebp
f0100584:	89 e5                	mov    %esp,%ebp
f0100586:	83 ec 48             	sub    $0x48,%esp
f0100589:	c7 45 f4 fa 03 00 00 	movl   $0x3fa,-0xc(%ebp)
f0100590:	c6 45 c6 00          	movb   $0x0,-0x3a(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100594:	8a 45 c6             	mov    -0x3a(%ebp),%al
f0100597:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010059a:	ee                   	out    %al,(%dx)
f010059b:	c7 45 f0 fb 03 00 00 	movl   $0x3fb,-0x10(%ebp)
f01005a2:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
f01005a6:	8a 45 c7             	mov    -0x39(%ebp),%al
f01005a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005ac:	ee                   	out    %al,(%dx)
f01005ad:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%ebp)
f01005b4:	c6 45 c8 0c          	movb   $0xc,-0x38(%ebp)
f01005b8:	8a 45 c8             	mov    -0x38(%ebp),%al
f01005bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01005be:	ee                   	out    %al,(%dx)
f01005bf:	c7 45 e8 f9 03 00 00 	movl   $0x3f9,-0x18(%ebp)
f01005c6:	c6 45 c9 00          	movb   $0x0,-0x37(%ebp)
f01005ca:	8a 45 c9             	mov    -0x37(%ebp),%al
f01005cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005d0:	ee                   	out    %al,(%dx)
f01005d1:	c7 45 e4 fb 03 00 00 	movl   $0x3fb,-0x1c(%ebp)
f01005d8:	c6 45 ca 03          	movb   $0x3,-0x36(%ebp)
f01005dc:	8a 45 ca             	mov    -0x36(%ebp),%al
f01005df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01005e2:	ee                   	out    %al,(%dx)
f01005e3:	c7 45 e0 fc 03 00 00 	movl   $0x3fc,-0x20(%ebp)
f01005ea:	c6 45 cb 00          	movb   $0x0,-0x35(%ebp)
f01005ee:	8a 45 cb             	mov    -0x35(%ebp),%al
f01005f1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01005f4:	ee                   	out    %al,(%dx)
f01005f5:	c7 45 dc f9 03 00 00 	movl   $0x3f9,-0x24(%ebp)
f01005fc:	c6 45 cc 01          	movb   $0x1,-0x34(%ebp)
f0100600:	8a 45 cc             	mov    -0x34(%ebp),%al
f0100603:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0100606:	ee                   	out    %al,(%dx)
f0100607:	c7 45 d8 fd 03 00 00 	movl   $0x3fd,-0x28(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010060e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100611:	89 c2                	mov    %eax,%edx
f0100613:	ec                   	in     (%dx),%al
f0100614:	88 45 cd             	mov    %al,-0x33(%ebp)
	return data;
f0100617:	8a 45 cd             	mov    -0x33(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f010061a:	3c ff                	cmp    $0xff,%al
f010061c:	0f 95 c0             	setne  %al
f010061f:	0f b6 c0             	movzbl %al,%eax
f0100622:	a3 e4 57 55 f0       	mov    %eax,0xf05557e4
f0100627:	c7 45 d4 fa 03 00 00 	movl   $0x3fa,-0x2c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010062e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0100631:	89 c2                	mov    %eax,%edx
f0100633:	ec                   	in     (%dx),%al
f0100634:	88 45 ce             	mov    %al,-0x32(%ebp)
f0100637:	c7 45 d0 f8 03 00 00 	movl   $0x3f8,-0x30(%ebp)
f010063e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0100641:	89 c2                	mov    %eax,%edx
f0100643:	ec                   	in     (%dx),%al
f0100644:	88 45 cf             	mov    %al,-0x31(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

	irq_install_handler(4, &serial_interrupt_handler);
f0100647:	83 ec 08             	sub    $0x8,%esp
f010064a:	68 65 05 10 f0       	push   $0xf0100565
f010064f:	6a 04                	push   $0x4
f0100651:	e8 42 cd 00 00       	call   f010d398 <irq_install_handler>
f0100656:	83 c4 10             	add    $0x10,%esp

}
f0100659:	90                   	nop
f010065a:	c9                   	leave  
f010065b:	c3                   	ret    

f010065c <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f010065c:	55                   	push   %ebp
f010065d:	89 e5                	mov    %esp,%ebp
f010065f:	83 ec 20             	sub    $0x20,%esp
f0100662:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100669:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066c:	89 c2                	mov    %eax,%edx
f010066e:	ec                   	in     (%dx),%al
f010066f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100672:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100679:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010067c:	89 c2                	mov    %eax,%edx
f010067e:	ec                   	in     (%dx),%al
f010067f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100682:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010068c:	89 c2                	mov    %eax,%edx
f010068e:	ec                   	in     (%dx),%al
f010068f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100692:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100699:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010069c:	89 c2                	mov    %eax,%edx
f010069e:	ec                   	in     (%dx),%al
f010069f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01006a2:	90                   	nop
f01006a3:	c9                   	leave  
f01006a4:	c3                   	ret    

f01006a5 <lpt_putc>:

static void
lpt_putc(int c)
{
f01006a5:	55                   	push   %ebp
f01006a6:	89 e5                	mov    %esp,%ebp
f01006a8:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01006b2:	eb 08                	jmp    f01006bc <lpt_putc+0x17>
		delay();
f01006b4:	e8 a3 ff ff ff       	call   f010065c <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006b9:	ff 45 fc             	incl   -0x4(%ebp)
f01006bc:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01006c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006c6:	89 c2                	mov    %eax,%edx
f01006c8:	ec                   	in     (%dx),%al
f01006c9:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01006cc:	8a 45 eb             	mov    -0x15(%ebp),%al
f01006cf:	84 c0                	test   %al,%al
f01006d1:	78 09                	js     f01006dc <lpt_putc+0x37>
f01006d3:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01006da:	7e d8                	jle    f01006b4 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01006dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01006df:	0f b6 c0             	movzbl %al,%eax
f01006e2:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01006e9:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006ec:	8a 45 e8             	mov    -0x18(%ebp),%al
f01006ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006f2:	ee                   	out    %al,(%dx)
f01006f3:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01006fa:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01006fe:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100704:	ee                   	out    %al,(%dx)
f0100705:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f010070c:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100710:	8a 45 ea             	mov    -0x16(%ebp),%al
f0100713:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100716:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100717:	90                   	nop
f0100718:	c9                   	leave  
f0100719:	c3                   	ret    

f010071a <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f010071a:	55                   	push   %ebp
f010071b:	89 e5                	mov    %esp,%ebp
f010071d:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100720:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100727:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010072a:	66 8b 00             	mov    (%eax),%ax
f010072d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100731:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100734:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010073c:	66 8b 00             	mov    (%eax),%ax
f010073f:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100743:	74 13                	je     f0100758 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100745:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f010074c:	c7 05 e8 57 55 f0 b4 	movl   $0x3b4,0xf05557e8
f0100753:	03 00 00 
f0100756:	eb 14                	jmp    f010076c <cga_init+0x52>
	} else {
		*cp = was;
f0100758:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010075b:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010075f:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100762:	c7 05 e8 57 55 f0 d4 	movl   $0x3d4,0xf05557e8
f0100769:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010076c:	a1 e8 57 55 f0       	mov    0xf05557e8,%eax
f0100771:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100774:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100778:	8a 45 e0             	mov    -0x20(%ebp),%al
f010077b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010077e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010077f:	a1 e8 57 55 f0       	mov    0xf05557e8,%eax
f0100784:	40                   	inc    %eax
f0100785:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100788:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010078b:	89 c2                	mov    %eax,%edx
f010078d:	ec                   	in     (%dx),%al
f010078e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100791:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100794:	0f b6 c0             	movzbl %al,%eax
f0100797:	c1 e0 08             	shl    $0x8,%eax
f010079a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010079d:	a1 e8 57 55 f0       	mov    0xf05557e8,%eax
f01007a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007a5:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007a9:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007af:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01007b0:	a1 e8 57 55 f0       	mov    0xf05557e8,%eax
f01007b5:	40                   	inc    %eax
f01007b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01007b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01007bc:	89 c2                	mov    %eax,%edx
f01007be:	ec                   	in     (%dx),%al
f01007bf:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01007c2:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01007c5:	0f b6 c0             	movzbl %al,%eax
f01007c8:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01007cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01007ce:	a3 ec 57 55 f0       	mov    %eax,0xf05557ec
	crt_pos = pos;
f01007d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01007d6:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
}
f01007dc:	90                   	nop
f01007dd:	c9                   	leave  
f01007de:	c3                   	ret    

f01007df <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01007df:	55                   	push   %ebp
f01007e0:	89 e5                	mov    %esp,%ebp
f01007e2:	53                   	push   %ebx
f01007e3:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01007e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007e9:	b0 00                	mov    $0x0,%al
f01007eb:	85 c0                	test   %eax,%eax
f01007ed:	75 07                	jne    f01007f6 <cga_putc+0x17>
		c |= 0x0700;
f01007ef:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01007f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007f9:	0f b6 c0             	movzbl %al,%eax
f01007fc:	83 f8 0a             	cmp    $0xa,%eax
f01007ff:	74 77                	je     f0100878 <cga_putc+0x99>
f0100801:	83 f8 0a             	cmp    $0xa,%eax
f0100804:	7f 13                	jg     f0100819 <cga_putc+0x3a>
f0100806:	83 f8 08             	cmp    $0x8,%eax
f0100809:	74 2e                	je     f0100839 <cga_putc+0x5a>
f010080b:	83 f8 09             	cmp    $0x9,%eax
f010080e:	0f 84 a8 00 00 00    	je     f01008bc <cga_putc+0xdd>
f0100814:	e9 22 01 00 00       	jmp    f010093b <cga_putc+0x15c>
f0100819:	3d e4 00 00 00       	cmp    $0xe4,%eax
f010081e:	0f 84 de 00 00 00    	je     f0100902 <cga_putc+0x123>
f0100824:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100829:	0f 84 f1 00 00 00    	je     f0100920 <cga_putc+0x141>
f010082f:	83 f8 0d             	cmp    $0xd,%eax
f0100832:	74 5d                	je     f0100891 <cga_putc+0xb2>
f0100834:	e9 02 01 00 00       	jmp    f010093b <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100839:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f010083f:	66 85 c0             	test   %ax,%ax
f0100842:	0f 84 4f 01 00 00    	je     f0100997 <cga_putc+0x1b8>
			crt_pos--;
f0100848:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f010084e:	48                   	dec    %eax
f010084f:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100855:	8b 15 ec 57 55 f0    	mov    0xf05557ec,%edx
f010085b:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100861:	0f b7 c0             	movzwl %ax,%eax
f0100864:	01 c0                	add    %eax,%eax
f0100866:	01 c2                	add    %eax,%edx
f0100868:	8b 45 08             	mov    0x8(%ebp),%eax
f010086b:	b0 00                	mov    $0x0,%al
f010086d:	83 c8 20             	or     $0x20,%eax
f0100870:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100873:	e9 1f 01 00 00       	jmp    f0100997 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100878:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f010087e:	83 c0 50             	add    $0x50,%eax
f0100881:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
		text_length = 0;
f0100887:	c7 05 e0 57 55 f0 00 	movl   $0x0,0xf05557e0
f010088e:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100891:	66 8b 0d f0 57 55 f0 	mov    0xf05557f0,%cx
f0100898:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f010089e:	bb 50 00 00 00       	mov    $0x50,%ebx
f01008a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01008a8:	66 f7 f3             	div    %bx
f01008ab:	89 d0                	mov    %edx,%eax
f01008ad:	29 c1                	sub    %eax,%ecx
f01008af:	89 c8                	mov    %ecx,%eax
f01008b1:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
		break;
f01008b7:	e9 e5 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01008bc:	83 ec 0c             	sub    $0xc,%esp
f01008bf:	6a 20                	push   $0x20
f01008c1:	e8 30 05 00 00       	call   f0100df6 <cons_putc>
f01008c6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008c9:	83 ec 0c             	sub    $0xc,%esp
f01008cc:	6a 20                	push   $0x20
f01008ce:	e8 23 05 00 00       	call   f0100df6 <cons_putc>
f01008d3:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008d6:	83 ec 0c             	sub    $0xc,%esp
f01008d9:	6a 20                	push   $0x20
f01008db:	e8 16 05 00 00       	call   f0100df6 <cons_putc>
f01008e0:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008e3:	83 ec 0c             	sub    $0xc,%esp
f01008e6:	6a 20                	push   $0x20
f01008e8:	e8 09 05 00 00       	call   f0100df6 <cons_putc>
f01008ed:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008f0:	83 ec 0c             	sub    $0xc,%esp
f01008f3:	6a 20                	push   $0x20
f01008f5:	e8 fc 04 00 00       	call   f0100df6 <cons_putc>
f01008fa:	83 c4 10             	add    $0x10,%esp
		break;
f01008fd:	e9 9f 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case 228:
		if(crt_pos>0)
f0100902:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100908:	66 85 c0             	test   %ax,%ax
f010090b:	0f 84 89 00 00 00    	je     f010099a <cga_putc+0x1bb>
			crt_pos--;
f0100911:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100917:	48                   	dec    %eax
f0100918:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
		break;
f010091e:	eb 7a                	jmp    f010099a <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100920:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100926:	66 3d cf 07          	cmp    $0x7cf,%ax
f010092a:	77 71                	ja     f010099d <cga_putc+0x1be>
			crt_pos++;
f010092c:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100932:	40                   	inc    %eax
f0100933:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
		break;
f0100939:	eb 62                	jmp    f010099d <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f010093b:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100942:	74 5c                	je     f01009a0 <cga_putc+0x1c1>
f0100944:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f010094b:	74 53                	je     f01009a0 <cga_putc+0x1c1>
			crt_buf[crt_pos++] = c;		/* write the character */
f010094d:	8b 0d ec 57 55 f0    	mov    0xf05557ec,%ecx
f0100953:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100959:	8d 50 01             	lea    0x1(%eax),%edx
f010095c:	66 89 15 f0 57 55 f0 	mov    %dx,0xf05557f0
f0100963:	0f b7 c0             	movzwl %ax,%eax
f0100966:	01 c0                	add    %eax,%eax
f0100968:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010096b:	8b 45 08             	mov    0x8(%ebp),%eax
f010096e:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100971:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100977:	0f b7 c0             	movzwl %ax,%eax
f010097a:	8b 15 e0 57 55 f0    	mov    0xf05557e0,%edx
f0100980:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100986:	39 d0                	cmp    %edx,%eax
f0100988:	7e 16                	jle    f01009a0 <cga_putc+0x1c1>
				text_length++;
f010098a:	a1 e0 57 55 f0       	mov    0xf05557e0,%eax
f010098f:	40                   	inc    %eax
f0100990:	a3 e0 57 55 f0       	mov    %eax,0xf05557e0
		}
		break;
f0100995:	eb 09                	jmp    f01009a0 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f0100997:	90                   	nop
f0100998:	eb 07                	jmp    f01009a1 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
		if(crt_pos>0)
			crt_pos--;
		break;
f010099a:	90                   	nop
f010099b:	eb 04                	jmp    f01009a1 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			crt_pos++;
		break;
f010099d:	90                   	nop
f010099e:	eb 01                	jmp    f01009a1 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
			crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01009a0:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01009a1:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f01009a7:	66 3d cf 07          	cmp    $0x7cf,%ax
f01009ab:	76 58                	jbe    f0100a05 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01009ad:	a1 ec 57 55 f0       	mov    0xf05557ec,%eax
f01009b2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01009b8:	a1 ec 57 55 f0       	mov    0xf05557ec,%eax
f01009bd:	83 ec 04             	sub    $0x4,%esp
f01009c0:	68 00 0f 00 00       	push   $0xf00
f01009c5:	52                   	push   %edx
f01009c6:	50                   	push   %eax
f01009c7:	e8 01 1b 02 00       	call   f01224cd <memcpy>
f01009cc:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009cf:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01009d6:	eb 15                	jmp    f01009ed <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01009d8:	8b 15 ec 57 55 f0    	mov    0xf05557ec,%edx
f01009de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01009e1:	01 c0                	add    %eax,%eax
f01009e3:	01 d0                	add    %edx,%eax
f01009e5:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009ea:	ff 45 f4             	incl   -0xc(%ebp)
f01009ed:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01009f4:	7e e2                	jle    f01009d8 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01009f6:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f01009fc:	83 e8 50             	sub    $0x50,%eax
f01009ff:	66 a3 f0 57 55 f0    	mov    %ax,0xf05557f0
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100a05:	a1 e8 57 55 f0       	mov    0xf05557e8,%eax
f0100a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100a0d:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a11:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100a14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100a17:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100a18:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100a1e:	66 c1 e8 08          	shr    $0x8,%ax
f0100a22:	0f b6 c0             	movzbl %al,%eax
f0100a25:	8b 15 e8 57 55 f0    	mov    0xf05557e8,%edx
f0100a2b:	42                   	inc    %edx
f0100a2c:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100a2f:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100a32:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100a38:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100a39:	a1 e8 57 55 f0       	mov    0xf05557e8,%eax
f0100a3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a41:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100a45:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100a48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a4b:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100a4c:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100a52:	0f b6 c0             	movzbl %al,%eax
f0100a55:	8b 15 e8 57 55 f0    	mov    0xf05557e8,%edx
f0100a5b:	42                   	inc    %edx
f0100a5c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100a5f:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100a62:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100a65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100a68:	ee                   	out    %al,(%dx)
}
f0100a69:	90                   	nop
f0100a6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100a6d:	c9                   	leave  
f0100a6e:	c3                   	ret    

f0100a6f <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100a6f:	55                   	push   %ebp
f0100a70:	89 e5                	mov    %esp,%ebp
f0100a72:	83 ec 28             	sub    $0x28,%esp
f0100a75:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100a7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100a7f:	89 c2                	mov    %eax,%edx
f0100a81:	ec                   	in     (%dx),%al
f0100a82:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0100a85:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100a88:	0f b6 c0             	movzbl %al,%eax
f0100a8b:	83 e0 01             	and    $0x1,%eax
f0100a8e:	85 c0                	test   %eax,%eax
f0100a90:	75 0a                	jne    f0100a9c <kbd_proc_data+0x2d>
		return -1;
f0100a92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100a97:	e9 2a 02 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
f0100a9c:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100aa6:	89 c2                	mov    %eax,%edx
f0100aa8:	ec                   	in     (%dx),%al
f0100aa9:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100aac:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100aaf:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100ab2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100ab6:	75 17                	jne    f0100acf <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100ab8:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100abd:	83 c8 40             	or     $0x40,%eax
f0100ac0:	a3 08 5a 55 f0       	mov    %eax,0xf0555a08
		return 0;
f0100ac5:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aca:	e9 f7 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100acf:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ad2:	84 c0                	test   %al,%al
f0100ad4:	79 44                	jns    f0100b1a <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100ad6:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100adb:	83 e0 40             	and    $0x40,%eax
f0100ade:	85 c0                	test   %eax,%eax
f0100ae0:	75 08                	jne    f0100aea <kbd_proc_data+0x7b>
f0100ae2:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ae5:	83 e0 7f             	and    $0x7f,%eax
f0100ae8:	eb 03                	jmp    f0100aed <kbd_proc_data+0x7e>
f0100aea:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100aed:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100af0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100af4:	8a 80 20 d0 17 f0    	mov    -0xfe82fe0(%eax),%al
f0100afa:	83 c8 40             	or     $0x40,%eax
f0100afd:	0f b6 c0             	movzbl %al,%eax
f0100b00:	f7 d0                	not    %eax
f0100b02:	89 c2                	mov    %eax,%edx
f0100b04:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100b09:	21 d0                	and    %edx,%eax
f0100b0b:	a3 08 5a 55 f0       	mov    %eax,0xf0555a08
		return 0;
f0100b10:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b15:	e9 ac 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100b1a:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100b1f:	83 e0 40             	and    $0x40,%eax
f0100b22:	85 c0                	test   %eax,%eax
f0100b24:	74 11                	je     f0100b37 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100b26:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100b2a:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100b2f:	83 e0 bf             	and    $0xffffffbf,%eax
f0100b32:	a3 08 5a 55 f0       	mov    %eax,0xf0555a08
	}

	shift |= shiftcode[data];
f0100b37:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b3b:	8a 80 20 d0 17 f0    	mov    -0xfe82fe0(%eax),%al
f0100b41:	0f b6 d0             	movzbl %al,%edx
f0100b44:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100b49:	09 d0                	or     %edx,%eax
f0100b4b:	a3 08 5a 55 f0       	mov    %eax,0xf0555a08
	shift ^= togglecode[data];
f0100b50:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b54:	8a 80 20 d1 17 f0    	mov    -0xfe82ee0(%eax),%al
f0100b5a:	0f b6 d0             	movzbl %al,%edx
f0100b5d:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100b62:	31 d0                	xor    %edx,%eax
f0100b64:	a3 08 5a 55 f0       	mov    %eax,0xf0555a08

	c = charcode[shift & (CTL | SHIFT)][data];
f0100b69:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100b6e:	83 e0 03             	and    $0x3,%eax
f0100b71:	8b 14 85 20 d5 17 f0 	mov    -0xfe82ae0(,%eax,4),%edx
f0100b78:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b7c:	01 d0                	add    %edx,%eax
f0100b7e:	8a 00                	mov    (%eax),%al
f0100b80:	0f b6 c0             	movzbl %al,%eax
f0100b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100b86:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b8d:	0f 85 9c 00 00 00    	jne    f0100c2f <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100b93:	a1 e0 57 55 f0       	mov    0xf05557e0,%eax
f0100b98:	85 c0                	test   %eax,%eax
f0100b9a:	0f 8e 85 00 00 00    	jle    f0100c25 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100ba0:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100ba6:	0f b7 c0             	movzwl %ax,%eax
f0100ba9:	8b 15 e0 57 55 f0    	mov    0xf05557e0,%edx
f0100baf:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100bb5:	39 d0                	cmp    %edx,%eax
f0100bb7:	75 0a                	jne    f0100bc3 <kbd_proc_data+0x154>
				return 0;
f0100bb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bbe:	e9 03 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			else {
				text_length--;
f0100bc3:	a1 e0 57 55 f0       	mov    0xf05557e0,%eax
f0100bc8:	48                   	dec    %eax
f0100bc9:	a3 e0 57 55 f0       	mov    %eax,0xf05557e0
				int crt_pos_Length = crt_pos - 1925;
f0100bce:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100bd4:	0f b7 c0             	movzwl %ax,%eax
f0100bd7:	2d 85 07 00 00       	sub    $0x785,%eax
f0100bdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100bdf:	66 a1 f0 57 55 f0    	mov    0xf05557f0,%ax
f0100be5:	0f b7 c0             	movzwl %ax,%eax
f0100be8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100beb:	eb 26                	jmp    f0100c13 <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100bed:	8b 15 ec 57 55 f0    	mov    0xf05557ec,%edx
f0100bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100bf6:	01 c0                	add    %eax,%eax
f0100bf8:	01 c2                	add    %eax,%edx
f0100bfa:	a1 ec 57 55 f0       	mov    0xf05557ec,%eax
f0100bff:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100c02:	41                   	inc    %ecx
f0100c03:	01 c9                	add    %ecx,%ecx
f0100c05:	01 c8                	add    %ecx,%eax
f0100c07:	66 8b 00             	mov    (%eax),%ax
f0100c0a:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100c0d:	ff 45 e8             	incl   -0x18(%ebp)
f0100c10:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100c13:	a1 e0 57 55 f0       	mov    0xf05557e0,%eax
f0100c18:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100c1b:	7e d0                	jle    f0100bed <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c20:	e9 a1 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100c25:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c2a:	e9 97 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100c2f:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100c34:	83 e0 08             	and    $0x8,%eax
f0100c37:	85 c0                	test   %eax,%eax
f0100c39:	74 22                	je     f0100c5d <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100c3b:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100c3f:	7e 0c                	jle    f0100c4d <kbd_proc_data+0x1de>
f0100c41:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100c45:	7f 06                	jg     f0100c4d <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100c47:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100c4b:	eb 10                	jmp    f0100c5d <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100c4d:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100c51:	7e 0a                	jle    f0100c5d <kbd_proc_data+0x1ee>
f0100c53:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100c57:	7f 04                	jg     f0100c5d <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100c59:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100c5d:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100c62:	83 f8 10             	cmp    $0x10,%eax
f0100c65:	75 13                	jne    f0100c7a <kbd_proc_data+0x20b>
f0100c67:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100c6b:	7e 0d                	jle    f0100c7a <kbd_proc_data+0x20b>
f0100c6d:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100c71:	7f 07                	jg     f0100c7a <kbd_proc_data+0x20b>
		return 0;
f0100c73:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c78:	eb 4c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	if (c == 255)
f0100c7a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100c81:	75 07                	jne    f0100c8a <kbd_proc_data+0x21b>
		return 0;
f0100c83:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c88:	eb 3c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100c8a:	a1 08 5a 55 f0       	mov    0xf0555a08,%eax
f0100c8f:	f7 d0                	not    %eax
f0100c91:	83 e0 06             	and    $0x6,%eax
f0100c94:	85 c0                	test   %eax,%eax
f0100c96:	75 2b                	jne    f0100cc3 <kbd_proc_data+0x254>
f0100c98:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100c9f:	75 22                	jne    f0100cc3 <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100ca1:	83 ec 0c             	sub    $0xc,%esp
f0100ca4:	68 5b 39 12 f0       	push   $0xf012395b
f0100ca9:	e8 be 02 00 00       	call   f0100f6c <cprintf>
f0100cae:	83 c4 10             	add    $0x10,%esp
f0100cb1:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100cb8:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100cbc:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100cbf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100cc2:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cc6:	c9                   	leave  
f0100cc7:	c3                   	ret    

f0100cc8 <kbd_intr>:

void
kbd_intr(void)
{
f0100cc8:	55                   	push   %ebp
f0100cc9:	89 e5                	mov    %esp,%ebp
f0100ccb:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100cce:	83 ec 0c             	sub    $0xc,%esp
f0100cd1:	68 6f 0a 10 f0       	push   $0xf0100a6f
f0100cd6:	e8 21 00 00 00       	call   f0100cfc <cons_intr>
f0100cdb:	83 c4 10             	add    $0x10,%esp
}
f0100cde:	90                   	nop
f0100cdf:	c9                   	leave  
f0100ce0:	c3                   	ret    

f0100ce1 <kbd_init>:

void
kbd_init(void)
{
f0100ce1:	55                   	push   %ebp
f0100ce2:	89 e5                	mov    %esp,%ebp
f0100ce4:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(1, &keyboard_interrupt_handler);
f0100ce7:	83 ec 08             	sub    $0x8,%esp
f0100cea:	68 83 0e 10 f0       	push   $0xf0100e83
f0100cef:	6a 01                	push   $0x1
f0100cf1:	e8 a2 c6 00 00       	call   f010d398 <irq_install_handler>
f0100cf6:	83 c4 10             	add    $0x10,%esp
	}
	else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&KBDsem, 0, "keyboard semaphore");
	}
}
f0100cf9:	90                   	nop
f0100cfa:	c9                   	leave  
f0100cfb:	c3                   	ret    

f0100cfc <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100cfc:	55                   	push   %ebp
f0100cfd:	89 e5                	mov    %esp,%ebp
f0100cff:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100d02:	eb 35                	jmp    f0100d39 <cons_intr+0x3d>
		if (c == 0)
f0100d04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d08:	75 02                	jne    f0100d0c <cons_intr+0x10>
			continue;
f0100d0a:	eb 2d                	jmp    f0100d39 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100d0c:	a1 04 5a 55 f0       	mov    0xf0555a04,%eax
f0100d11:	8d 50 01             	lea    0x1(%eax),%edx
f0100d14:	89 15 04 5a 55 f0    	mov    %edx,0xf0555a04
f0100d1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100d1d:	88 90 00 58 55 f0    	mov    %dl,-0xfaaa800(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100d23:	a1 04 5a 55 f0       	mov    0xf0555a04,%eax
f0100d28:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d2d:	75 0a                	jne    f0100d39 <cons_intr+0x3d>
			cons.wpos = 0;
f0100d2f:	c7 05 04 5a 55 f0 00 	movl   $0x0,0xf0555a04
f0100d36:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d3c:	ff d0                	call   *%eax
f0100d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d41:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100d45:	75 bd                	jne    f0100d04 <cons_intr+0x8>
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;

		//cprintf("\nCHAR %d is written into cons.buf\n", c);
	}
}
f0100d47:	90                   	nop
f0100d48:	c9                   	leave  
f0100d49:	c3                   	ret    

f0100d4a <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100d4a:	55                   	push   %ebp
f0100d4b:	89 e5                	mov    %esp,%ebp
f0100d4d:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100d50:	e8 ee f7 ff ff       	call   f0100543 <serial_intr>
	kbd_intr();
f0100d55:	e8 6e ff ff ff       	call   f0100cc8 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100d5a:	8b 15 00 5a 55 f0    	mov    0xf0555a00,%edx
f0100d60:	a1 04 5a 55 f0       	mov    0xf0555a04,%eax
f0100d65:	39 c2                	cmp    %eax,%edx
f0100d67:	74 35                	je     f0100d9e <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100d69:	a1 00 5a 55 f0       	mov    0xf0555a00,%eax
f0100d6e:	8d 50 01             	lea    0x1(%eax),%edx
f0100d71:	89 15 00 5a 55 f0    	mov    %edx,0xf0555a00
f0100d77:	8a 80 00 58 55 f0    	mov    -0xfaaa800(%eax),%al
f0100d7d:	0f b6 c0             	movzbl %al,%eax
f0100d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100d83:	a1 00 5a 55 f0       	mov    0xf0555a00,%eax
f0100d88:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d8d:	75 0a                	jne    f0100d99 <cons_getc+0x4f>
			cons.rpos = 0;
f0100d8f:	c7 05 00 5a 55 f0 00 	movl   $0x0,0xf0555a00
f0100d96:	00 00 00 
		return c;
f0100d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100d9c:	eb 05                	jmp    f0100da3 <cons_getc+0x59>
	}
	return 0;
f0100d9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100da3:	c9                   	leave  
f0100da4:	c3                   	ret    

f0100da5 <cons_getc2>:

//// return the next input character from the console buffer, or 0 if none
int
cons_getc2(void)
{
f0100da5:	55                   	push   %ebp
f0100da6:	89 e5                	mov    %esp,%ebp
f0100da8:	83 ec 10             	sub    $0x10,%esp
	int c;
	// grab the next character from the input buffer (if any).
	if (cons.rpos != cons.wpos) {
f0100dab:	8b 15 00 5a 55 f0    	mov    0xf0555a00,%edx
f0100db1:	a1 04 5a 55 f0       	mov    0xf0555a04,%eax
f0100db6:	39 c2                	cmp    %eax,%edx
f0100db8:	74 35                	je     f0100def <cons_getc2+0x4a>
		c = cons.buf[cons.rpos++];
f0100dba:	a1 00 5a 55 f0       	mov    0xf0555a00,%eax
f0100dbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100dc2:	89 15 00 5a 55 f0    	mov    %edx,0xf0555a00
f0100dc8:	8a 80 00 58 55 f0    	mov    -0xfaaa800(%eax),%al
f0100dce:	0f b6 c0             	movzbl %al,%eax
f0100dd1:	89 45 fc             	mov    %eax,-0x4(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100dd4:	a1 00 5a 55 f0       	mov    0xf0555a00,%eax
f0100dd9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100dde:	75 0a                	jne    f0100dea <cons_getc2+0x45>
			cons.rpos = 0;
f0100de0:	c7 05 00 5a 55 f0 00 	movl   $0x0,0xf0555a00
f0100de7:	00 00 00 
		return c;
f0100dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100ded:	eb 05                	jmp    f0100df4 <cons_getc2+0x4f>
	}
	return 0;
f0100def:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df4:	c9                   	leave  
f0100df5:	c3                   	ret    

f0100df6 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100df6:	55                   	push   %ebp
f0100df7:	89 e5                	mov    %esp,%ebp
f0100df9:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100dfc:	ff 75 08             	pushl  0x8(%ebp)
f0100dff:	e8 a1 f8 ff ff       	call   f01006a5 <lpt_putc>
f0100e04:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100e07:	83 ec 0c             	sub    $0xc,%esp
f0100e0a:	ff 75 08             	pushl  0x8(%ebp)
f0100e0d:	e8 cd f9 ff ff       	call   f01007df <cga_putc>
f0100e12:	83 c4 10             	add    $0x10,%esp
}
f0100e15:	90                   	nop
f0100e16:	c9                   	leave  
f0100e17:	c3                   	ret    

f0100e18 <cons_init>:

// initialize the console devices
void
cons_init(void)
{
f0100e18:	55                   	push   %ebp
f0100e19:	89 e5                	mov    %esp,%ebp
f0100e1b:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100e1e:	e8 f7 f8 ff ff       	call   f010071a <cga_init>
	kbd_init();
f0100e23:	e8 b9 fe ff ff       	call   f0100ce1 <kbd_init>
	serial_init();
f0100e28:	e8 56 f7 ff ff       	call   f0100583 <serial_init>

	if (!serial_exists)
f0100e2d:	a1 e4 57 55 f0       	mov    0xf05557e4,%eax
f0100e32:	85 c0                	test   %eax,%eax
f0100e34:	75 10                	jne    f0100e46 <cons_init+0x2e>
		cprintf("Serial port does not exist!\n");
f0100e36:	83 ec 0c             	sub    $0xc,%esp
f0100e39:	68 67 39 12 f0       	push   $0xf0123967
f0100e3e:	e8 29 01 00 00       	call   f0100f6c <cprintf>
f0100e43:	83 c4 10             	add    $0x10,%esp
	}
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&conssem, 1, "console semaphore");
	}
}
f0100e46:	90                   	nop
f0100e47:	c9                   	leave  
f0100e48:	c3                   	ret    

f0100e49 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf from KERNEL side

void
cputchar(int c)
{
f0100e49:	55                   	push   %ebp
f0100e4a:	89 e5                	mov    %esp,%ebp
f0100e4c:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100e4f:	83 ec 0c             	sub    $0xc,%esp
f0100e52:	ff 75 08             	pushl  0x8(%ebp)
f0100e55:	e8 9c ff ff ff       	call   f0100df6 <cons_putc>
f0100e5a:	83 c4 10             	add    $0x10,%esp
}
f0100e5d:	90                   	nop
f0100e5e:	c9                   	leave  
f0100e5f:	c3                   	ret    

f0100e60 <getchar>:

int
getchar(void)
{
f0100e60:	55                   	push   %ebp
f0100e61:	89 e5                	mov    %esp,%ebp
f0100e63:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100e66:	e8 df fe ff ff       	call   f0100d4a <cons_getc>
f0100e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e72:	74 f2                	je     f0100e66 <getchar+0x6>
		/* do nothing */;
	return c;
f0100e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e77:	c9                   	leave  
f0100e78:	c3                   	ret    

f0100e79 <iscons>:

int
iscons(int fdnum)
{
f0100e79:	55                   	push   %ebp
f0100e7a:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100e7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100e81:	5d                   	pop    %ebp
f0100e82:	c3                   	ret    

f0100e83 <keyboard_interrupt_handler>:

/*Keyboard Interrupt Service Routine */
void keyboard_interrupt_handler()
{
f0100e83:	55                   	push   %ebp
f0100e84:	89 e5                	mov    %esp,%ebp
f0100e86:	83 ec 08             	sub    $0x8,%esp
	//	char scanCode = inb(0x60) & 0x7F; //What key is pressed
	//	char press = inb(0x60) & 0x80; //Press down, or released
	//
	//	cprintf("Scan code: %d, Press: %d\n", scanCode, press);
	//cprintf("char is pressed\n");
	kbd_intr();
f0100e89:	e8 3a fe ff ff       	call   f0100cc8 <kbd_intr>
		else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
		{
			signal_ksemaphore(&KBDsem);
		}
	}
}
f0100e8e:	90                   	nop
f0100e8f:	c9                   	leave  
f0100e90:	c3                   	ret    

f0100e91 <cons_lock>:

void cons_lock(void)
{
f0100e91:	55                   	push   %ebp
f0100e92:	89 e5                	mov    %esp,%ebp
f0100e94:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100e97:	e8 ec 3d 00 00       	call   f0104c88 <kclock_stop>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0100e9c:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100e9d:	e8 ce 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100ea5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ea9:	75 17                	jne    f0100ec2 <cons_lock+0x31>
		{
			panic("cons_lock: no running process to block");
f0100eab:	83 ec 04             	sub    $0x4,%esp
f0100eae:	68 84 39 12 f0       	push   $0xf0123984
f0100eb3:	68 2d 02 00 00       	push   $0x22d
f0100eb8:	68 ab 39 12 f0       	push   $0xf01239ab
f0100ebd:	e8 58 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags &= ~FL_IF ;
f0100ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ec5:	8b 00                	mov    (%eax),%eax
f0100ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100eca:	8b 12                	mov    (%edx),%edx
f0100ecc:	8b 52 38             	mov    0x38(%edx),%edx
f0100ecf:	80 e6 fd             	and    $0xfd,%dh
f0100ed2:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		wait_ksemaphore(&conssem);
	}

}
f0100ed5:	90                   	nop
f0100ed6:	c9                   	leave  
f0100ed7:	c3                   	ret    

f0100ed8 <cons_unlock>:

void cons_unlock(void)
{
f0100ed8:	55                   	push   %ebp
f0100ed9:	89 e5                	mov    %esp,%ebp
f0100edb:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100ede:	e8 a5 3d 00 00       	call   f0104c88 <kclock_stop>
f0100ee3:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100ee4:	e8 87 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ee9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100eec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ef0:	75 17                	jne    f0100f09 <cons_unlock+0x31>
		{
			panic("cons_unlock: no running process to block");
f0100ef2:	83 ec 04             	sub    $0x4,%esp
f0100ef5:	68 c0 39 12 f0       	push   $0xf01239c0
f0100efa:	68 46 02 00 00       	push   $0x246
f0100eff:	68 ab 39 12 f0       	push   $0xf01239ab
f0100f04:	e8 11 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags |= FL_IF ;
f0100f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f0c:	8b 00                	mov    (%eax),%eax
f0100f0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f11:	8b 12                	mov    (%edx),%edx
f0100f13:	8b 52 38             	mov    0x38(%edx),%edx
f0100f16:	80 ce 02             	or     $0x2,%dh
f0100f19:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		signal_ksemaphore(&conssem);
	}

}
f0100f1c:	90                   	nop
f0100f1d:	c9                   	leave  
f0100f1e:	c3                   	ret    

f0100f1f <putch>:
#include <kern/cpu/cpu.h>


static void
putch(int ch, int *cnt)
{
f0100f1f:	55                   	push   %ebp
f0100f20:	89 e5                	mov    %esp,%ebp
f0100f22:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100f25:	83 ec 0c             	sub    $0xc,%esp
f0100f28:	ff 75 08             	pushl  0x8(%ebp)
f0100f2b:	e8 19 ff ff ff       	call   f0100e49 <cputchar>
f0100f30:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100f33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f36:	8b 00                	mov    (%eax),%eax
f0100f38:	8d 50 01             	lea    0x1(%eax),%edx
f0100f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f3e:	89 10                	mov    %edx,(%eax)
}
f0100f40:	90                   	nop
f0100f41:	c9                   	leave  
f0100f42:	c3                   	ret    

f0100f43 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100f43:	55                   	push   %ebp
f0100f44:	89 e5                	mov    %esp,%ebp
f0100f46:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100f49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100f50:	ff 75 0c             	pushl  0xc(%ebp)
f0100f53:	ff 75 08             	pushl  0x8(%ebp)
f0100f56:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100f59:	50                   	push   %eax
f0100f5a:	68 1f 0f 10 f0       	push   $0xf0100f1f
f0100f5f:	e8 89 0c 02 00       	call   f0121bed <vprintfmt>
f0100f64:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100f6a:	c9                   	leave  
f0100f6b:	c3                   	ret    

f0100f6c <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100f6c:	55                   	push   %ebp
f0100f6d:	89 e5                	mov    %esp,%ebp
f0100f6f:	83 ec 18             	sub    $0x18,%esp
	//2024 - better to use locks instead (to support multiprocessors)
	int cnt;
	pushcli();	//disable interrupts
f0100f72:	e8 49 62 00 00       	call   f01071c0 <pushcli>
	{
		va_list ap;

		va_start(ap, fmt);
f0100f77:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cnt = vcprintf(fmt, ap);
f0100f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f80:	83 ec 08             	sub    $0x8,%esp
f0100f83:	ff 75 f4             	pushl  -0xc(%ebp)
f0100f86:	50                   	push   %eax
f0100f87:	e8 b7 ff ff ff       	call   f0100f43 <vcprintf>
f0100f8c:	83 c4 10             	add    $0x10,%esp
f0100f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		va_end(ap);
	}
	popcli();	//enable interrupts
f0100f92:	e8 7b 62 00 00       	call   f0107212 <popcli>

	return cnt;
f0100f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100f9a:	c9                   	leave  
f0100f9b:	c3                   	ret    

f0100f9c <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100f9c:	55                   	push   %ebp
f0100f9d:	89 e5                	mov    %esp,%ebp
f0100f9f:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fa9:	eb 10                	jmp    f0100fbb <clearandwritecommand+0x1f>
		cputchar('\b');
f0100fab:	83 ec 0c             	sub    $0xc,%esp
f0100fae:	6a 08                	push   $0x8
f0100fb0:	e8 94 fe ff ff       	call   f0100e49 <cputchar>
f0100fb5:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100fb8:	ff 45 f4             	incl   -0xc(%ebp)
f0100fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fbe:	8b 00                	mov    (%eax),%eax
f0100fc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100fc3:	7f e6                	jg     f0100fab <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fc8:	c1 e0 0a             	shl    $0xa,%eax
f0100fcb:	05 a0 22 57 f0       	add    $0xf05722a0,%eax
f0100fd0:	83 ec 0c             	sub    $0xc,%esp
f0100fd3:	50                   	push   %eax
f0100fd4:	e8 d6 12 02 00       	call   f01222af <strlen>
f0100fd9:	83 c4 10             	add    $0x10,%esp
f0100fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100fdf:	83 ec 04             	sub    $0x4,%esp
f0100fe2:	68 00 04 00 00       	push   $0x400
f0100fe7:	68 c0 72 57 f0       	push   $0xf05772c0
f0100fec:	ff 75 10             	pushl  0x10(%ebp)
f0100fef:	e8 d9 14 02 00       	call   f01224cd <memcpy>
f0100ff4:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ffa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0101000:	eb 52                	jmp    f0101054 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0101002:	8b 45 08             	mov    0x8(%ebp),%eax
f0101005:	8b 00                	mov    (%eax),%eax
f0101007:	8b 55 0c             	mov    0xc(%ebp),%edx
f010100a:	c1 e2 0a             	shl    $0xa,%edx
f010100d:	01 d0                	add    %edx,%eax
f010100f:	05 a0 22 57 f0       	add    $0xf05722a0,%eax
f0101014:	8a 00                	mov    (%eax),%al
f0101016:	0f be c0             	movsbl %al,%eax
f0101019:	83 ec 0c             	sub    $0xc,%esp
f010101c:	50                   	push   %eax
f010101d:	e8 27 fe ff ff       	call   f0100e49 <cputchar>
f0101022:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0101025:	8b 45 08             	mov    0x8(%ebp),%eax
f0101028:	8b 00                	mov    (%eax),%eax
f010102a:	89 c2                	mov    %eax,%edx
f010102c:	8b 45 10             	mov    0x10(%ebp),%eax
f010102f:	01 c2                	add    %eax,%edx
f0101031:	8b 45 08             	mov    0x8(%ebp),%eax
f0101034:	8b 00                	mov    (%eax),%eax
f0101036:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0101039:	c1 e1 0a             	shl    $0xa,%ecx
f010103c:	01 c8                	add    %ecx,%eax
f010103e:	05 a0 22 57 f0       	add    $0xf05722a0,%eax
f0101043:	8a 00                	mov    (%eax),%al
f0101045:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0101047:	8b 45 08             	mov    0x8(%ebp),%eax
f010104a:	8b 00                	mov    (%eax),%eax
f010104c:	8d 50 01             	lea    0x1(%eax),%edx
f010104f:	8b 45 08             	mov    0x8(%ebp),%eax
f0101052:	89 10                	mov    %edx,(%eax)
f0101054:	8b 45 08             	mov    0x8(%ebp),%eax
f0101057:	8b 00                	mov    (%eax),%eax
f0101059:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010105c:	7c a4                	jl     f0101002 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f010105e:	8b 45 14             	mov    0x14(%ebp),%eax
f0101061:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101064:	89 10                	mov    %edx,(%eax)
}
f0101066:	90                   	nop
f0101067:	c9                   	leave  
f0101068:	c3                   	ret    

f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0101069:	55                   	push   %ebp
f010106a:	89 e5                	mov    %esp,%ebp
f010106c:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f010106f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101076:	eb 10                	jmp    f0101088 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0101078:	83 ec 0c             	sub    $0xc,%esp
f010107b:	6a 08                	push   $0x8
f010107d:	e8 c7 fd ff ff       	call   f0100e49 <cputchar>
f0101082:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0101085:	ff 45 f4             	incl   -0xc(%ebp)
f0101088:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010108b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010108e:	7c e8                	jl     f0101078 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 14 12 02 00       	call   f01222af <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f01010a1:	83 ec 04             	sub    $0x4,%esp
f01010a4:	68 00 04 00 00       	push   $0x400
f01010a9:	68 c0 72 57 f0       	push   $0xf05772c0
f01010ae:	ff 75 10             	pushl  0x10(%ebp)
f01010b1:	e8 17 14 02 00       	call   f01224cd <memcpy>
f01010b6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f01010b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01010bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01010c2:	eb 46                	jmp    f010110a <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f01010c4:	8b 45 14             	mov    0x14(%ebp),%eax
f01010c7:	8b 00                	mov    (%eax),%eax
f01010c9:	89 c2                	mov    %eax,%edx
f01010cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010ce:	01 d0                	add    %edx,%eax
f01010d0:	8a 00                	mov    (%eax),%al
f01010d2:	0f be c0             	movsbl %al,%eax
f01010d5:	83 ec 0c             	sub    $0xc,%esp
f01010d8:	50                   	push   %eax
f01010d9:	e8 6b fd ff ff       	call   f0100e49 <cputchar>
f01010de:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f01010e1:	8b 45 14             	mov    0x14(%ebp),%eax
f01010e4:	8b 00                	mov    (%eax),%eax
f01010e6:	89 c2                	mov    %eax,%edx
f01010e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01010eb:	01 c2                	add    %eax,%edx
f01010ed:	8b 45 14             	mov    0x14(%ebp),%eax
f01010f0:	8b 00                	mov    (%eax),%eax
f01010f2:	89 c1                	mov    %eax,%ecx
f01010f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010f7:	01 c8                	add    %ecx,%eax
f01010f9:	8a 00                	mov    (%eax),%al
f01010fb:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f01010fd:	8b 45 14             	mov    0x14(%ebp),%eax
f0101100:	8b 00                	mov    (%eax),%eax
f0101102:	8d 50 01             	lea    0x1(%eax),%edx
f0101105:	8b 45 14             	mov    0x14(%ebp),%eax
f0101108:	89 10                	mov    %edx,(%eax)
f010110a:	8b 45 14             	mov    0x14(%ebp),%eax
f010110d:	8b 00                	mov    (%eax),%eax
f010110f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101112:	7c b0                	jl     f01010c4 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0101114:	8b 45 18             	mov    0x18(%ebp),%eax
f0101117:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010111a:	89 10                	mov    %edx,(%eax)
}
f010111c:	90                   	nop
f010111d:	c9                   	leave  
f010111e:	c3                   	ret    

f010111f <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f010111f:	55                   	push   %ebp
f0101120:	89 e5                	mov    %esp,%ebp
f0101122:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0101125:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010112c:	eb 21                	jmp    f010114f <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f010112e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101131:	c1 e0 0a             	shl    $0xa,%eax
f0101134:	05 a0 92 55 f0       	add    $0xf05592a0,%eax
f0101139:	83 ec 04             	sub    $0x4,%esp
f010113c:	68 00 04 00 00       	push   $0x400
f0101141:	6a 00                	push   $0x0
f0101143:	50                   	push   %eax
f0101144:	e8 54 13 02 00       	call   f012249d <memset>
f0101149:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f010114c:	ff 45 f4             	incl   -0xc(%ebp)
f010114f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0101153:	7e d9                	jle    f010112e <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101155:	90                   	nop
f0101156:	c9                   	leave  
f0101157:	c3                   	ret    

f0101158 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101158:	55                   	push   %ebp
f0101159:	89 e5                	mov    %esp,%ebp
f010115b:	57                   	push   %edi
f010115c:	53                   	push   %ebx
f010115d:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0101163:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101167:	74 13                	je     f010117c <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101169:	83 ec 08             	sub    $0x8,%esp
f010116c:	ff 75 08             	pushl  0x8(%ebp)
f010116f:	68 ec 39 12 f0       	push   $0xf01239ec
f0101174:	e8 f3 fd ff ff       	call   f0100f6c <cprintf>
f0101179:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f010117c:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101181:	40                   	inc    %eax
f0101182:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101185:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f010118c:	00 00 00 
f010118f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101195:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010119b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f01011a4:	83 ec 0c             	sub    $0xc,%esp
f01011a7:	6a 00                	push   $0x0
f01011a9:	e8 cb fc ff ff       	call   f0100e79 <iscons>
f01011ae:	83 c4 10             	add    $0x10,%esp
f01011b1:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f01011b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f01011bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f01011c2:	e8 99 fc ff ff       	call   f0100e60 <getchar>
f01011c7:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f01011ca:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01011d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011d6:	39 c2                	cmp    %eax,%edx
f01011d8:	7e 0c                	jle    f01011e6 <command_prompt_readline+0x8e>
			lastIndex = i;
f01011da:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01011e0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01011e6:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01011ea:	79 22                	jns    f010120e <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01011ec:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01011f0:	0f 84 94 0a 00 00    	je     f0101c8a <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01011f6:	83 ec 08             	sub    $0x8,%esp
f01011f9:	ff 75 94             	pushl  -0x6c(%ebp)
f01011fc:	68 ef 39 12 f0       	push   $0xf01239ef
f0101201:	e8 66 fd ff ff       	call   f0100f6c <cprintf>
f0101206:	83 c4 10             	add    $0x10,%esp
			return;
f0101209:	e9 7c 0a 00 00       	jmp    f0101c8a <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f010120e:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f0101215:	75 2a                	jne    f0101241 <command_prompt_readline+0xe9>
			if (commandidx)
f0101217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010121b:	74 03                	je     f0101220 <command_prompt_readline+0xc8>
				commandidx--;
f010121d:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101220:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101226:	50                   	push   %eax
f0101227:	ff 75 0c             	pushl  0xc(%ebp)
f010122a:	ff 75 f4             	pushl  -0xc(%ebp)
f010122d:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101233:	50                   	push   %eax
f0101234:	e8 63 fd ff ff       	call   f0100f9c <clearandwritecommand>
f0101239:	83 c4 10             	add    $0x10,%esp
f010123c:	e9 32 0a 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f0101241:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101248:	75 3b                	jne    f0101285 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f010124a:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f010124f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101252:	7d 03                	jge    f0101257 <command_prompt_readline+0xff>
				commandidx++;
f0101254:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101257:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f010125c:	85 c0                	test   %eax,%eax
f010125e:	0f 88 0f 0a 00 00    	js     f0101c73 <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101264:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010126a:	50                   	push   %eax
f010126b:	ff 75 0c             	pushl  0xc(%ebp)
f010126e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101271:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101277:	50                   	push   %eax
f0101278:	e8 1f fd ff ff       	call   f0100f9c <clearandwritecommand>
f010127d:	83 c4 10             	add    $0x10,%esp
f0101280:	e9 ee 09 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101285:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101289:	0f 85 6d 07 00 00    	jne    f01019fc <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010128f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101293:	0f 84 fc 06 00 00    	je     f0101995 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101299:	83 ec 08             	sub    $0x8,%esp
f010129c:	6a 64                	push   $0x64
f010129e:	68 a0 92 55 f0       	push   $0xf05592a0
f01012a3:	e8 77 fe ff ff       	call   f010111f <clear_prefix_list>
f01012a8:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f01012ab:	83 ec 0c             	sub    $0xc,%esp
f01012ae:	ff 75 0c             	pushl  0xc(%ebp)
f01012b1:	e8 f9 0f 02 00       	call   f01222af <strlen>
f01012b6:	83 c4 10             	add    $0x10,%esp
f01012b9:	85 c0                	test   %eax,%eax
f01012bb:	0f 84 bd 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
f01012c1:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f01012c8:	0f 84 b0 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f01012ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01012d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01012d8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f01012de:	83 ec 08             	sub    $0x8,%esp
f01012e1:	ff 75 0c             	pushl  0xc(%ebp)
f01012e4:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01012ea:	50                   	push   %eax
f01012eb:	e8 0e 10 02 00       	call   f01222fe <strcpy>
f01012f0:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01012f3:	83 ec 0c             	sub    $0xc,%esp
f01012f6:	ff 75 0c             	pushl  0xc(%ebp)
f01012f9:	e8 b1 0f 02 00       	call   f01222af <strlen>
f01012fe:	83 c4 10             	add    $0x10,%esp
f0101301:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f0101304:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101307:	8d 50 ff             	lea    -0x1(%eax),%edx
f010130a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130d:	01 d0                	add    %edx,%eax
f010130f:	8a 00                	mov    (%eax),%al
f0101311:	3c 20                	cmp    $0x20,%al
f0101313:	0f 84 6b 09 00 00    	je     f0101c84 <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f0101319:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f0101326:	50                   	push   %eax
f0101327:	68 ff 39 12 f0       	push   $0xf01239ff
f010132c:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101332:	50                   	push   %eax
f0101333:	e8 8c 15 02 00       	call   f01228c4 <strsplit>
f0101338:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f010133b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f0101342:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101348:	83 f8 01             	cmp    $0x1,%eax
f010134b:	0f 8e 28 01 00 00    	jle    f0101479 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f0101351:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101357:	83 ec 08             	sub    $0x8,%esp
f010135a:	68 04 3a 12 f0       	push   $0xf0123a04
f010135f:	50                   	push   %eax
f0101360:	e8 56 10 02 00       	call   f01223bb <strcmp>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	85 c0                	test   %eax,%eax
f010136a:	74 3c                	je     f01013a8 <command_prompt_readline+0x250>
f010136c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101372:	83 ec 08             	sub    $0x8,%esp
f0101375:	68 08 3a 12 f0       	push   $0xf0123a08
f010137a:	50                   	push   %eax
f010137b:	e8 3b 10 02 00       	call   f01223bb <strcmp>
f0101380:	83 c4 10             	add    $0x10,%esp
f0101383:	85 c0                	test   %eax,%eax
f0101385:	74 21                	je     f01013a8 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101387:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010138d:	83 ec 08             	sub    $0x8,%esp
f0101390:	68 0d 3a 12 f0       	push   $0xf0123a0d
f0101395:	50                   	push   %eax
f0101396:	e8 20 10 02 00       	call   f01223bb <strcmp>
f010139b:	83 c4 10             	add    $0x10,%esp
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	74 06                	je     f01013a8 <command_prompt_readline+0x250>
						continue;
f01013a2:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01013a3:	e9 d6 08 00 00       	jmp    f0101c7e <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f01013a8:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f01013ae:	83 ec 08             	sub    $0x8,%esp
f01013b1:	68 0d 3a 12 f0       	push   $0xf0123a0d
f01013b6:	50                   	push   %eax
f01013b7:	e8 ff 0f 02 00       	call   f01223bb <strcmp>
f01013bc:	83 c4 10             	add    $0x10,%esp
f01013bf:	85 c0                	test   %eax,%eax
f01013c1:	75 09                	jne    f01013cc <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f01013c3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f01013ca:	eb 07                	jmp    f01013d3 <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f01013cc:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f01013d3:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013da:	00 00 00 
f01013dd:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013e3:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01013ed:	89 d7                	mov    %edx,%edi
f01013ef:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01013f1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01013f7:	48                   	dec    %eax
f01013f8:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01013ff:	83 ec 0c             	sub    $0xc,%esp
f0101402:	50                   	push   %eax
f0101403:	e8 a7 0e 02 00       	call   f01222af <strlen>
f0101408:	83 c4 10             	add    $0x10,%esp
f010140b:	8b 55 90             	mov    -0x70(%ebp),%edx
f010140e:	29 c2                	sub    %eax,%edx
f0101410:	89 d0                	mov    %edx,%eax
f0101412:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101415:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010141c:	eb 1d                	jmp    f010143b <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f010141e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101421:	8d 50 01             	lea    0x1(%eax),%edx
f0101424:	89 55 dc             	mov    %edx,-0x24(%ebp)
f0101427:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f010142a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010142d:	01 ca                	add    %ecx,%edx
f010142f:	8a 12                	mov    (%edx),%dl
f0101431:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101438:	ff 45 d8             	incl   -0x28(%ebp)
f010143b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010143e:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0101441:	7c db                	jl     f010141e <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101443:	83 ec 08             	sub    $0x8,%esp
f0101446:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010144c:	50                   	push   %eax
f010144d:	ff 75 0c             	pushl  0xc(%ebp)
f0101450:	e8 a9 0e 02 00       	call   f01222fe <strcpy>
f0101455:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101458:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010145e:	48                   	dec    %eax
f010145f:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101466:	83 ec 08             	sub    $0x8,%esp
f0101469:	50                   	push   %eax
f010146a:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101470:	50                   	push   %eax
f0101471:	e8 88 0e 02 00       	call   f01222fe <strcpy>
f0101476:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101479:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f0101480:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101486:	83 f8 01             	cmp    $0x1,%eax
f0101489:	0f 85 30 01 00 00    	jne    f01015bf <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010148f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101496:	e9 0f 01 00 00       	jmp    f01015aa <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f010149b:	83 ec 0c             	sub    $0xc,%esp
f010149e:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014a4:	50                   	push   %eax
f01014a5:	e8 05 0e 02 00       	call   f01222af <strlen>
f01014aa:	83 c4 10             	add    $0x10,%esp
f01014ad:	89 c1                	mov    %eax,%ecx
f01014af:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01014b2:	89 d0                	mov    %edx,%eax
f01014b4:	01 c0                	add    %eax,%eax
f01014b6:	01 d0                	add    %edx,%eax
f01014b8:	c1 e0 03             	shl    $0x3,%eax
f01014bb:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01014c0:	8b 00                	mov    (%eax),%eax
f01014c2:	83 ec 04             	sub    $0x4,%esp
f01014c5:	51                   	push   %ecx
f01014c6:	50                   	push   %eax
f01014c7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014cd:	50                   	push   %eax
f01014ce:	e8 20 0f 02 00       	call   f01223f3 <strncmp>
f01014d3:	83 c4 10             	add    $0x10,%esp
f01014d6:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f01014d9:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f01014dd:	0f 85 c4 00 00 00    	jne    f01015a7 <command_prompt_readline+0x44f>
							it_str = -1;
f01014e3:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01014ea:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014f1:	00 00 00 
f01014f4:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014fa:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101504:	89 d7                	mov    %edx,%edi
f0101506:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101508:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010150f:	eb 2d                	jmp    f010153e <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f0101511:	ff 45 dc             	incl   -0x24(%ebp)
f0101514:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101517:	89 d0                	mov    %edx,%eax
f0101519:	01 c0                	add    %eax,%eax
f010151b:	01 d0                	add    %edx,%eax
f010151d:	c1 e0 03             	shl    $0x3,%eax
f0101520:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0101525:	8b 10                	mov    (%eax),%edx
f0101527:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010152a:	01 d0                	add    %edx,%eax
f010152c:	8a 00                	mov    (%eax),%al
f010152e:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101534:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101537:	01 ca                	add    %ecx,%edx
f0101539:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010153b:	ff 45 cc             	incl   -0x34(%ebp)
f010153e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101541:	89 d0                	mov    %edx,%eax
f0101543:	01 c0                	add    %eax,%eax
f0101545:	01 d0                	add    %edx,%eax
f0101547:	c1 e0 03             	shl    $0x3,%eax
f010154a:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f010154f:	8b 00                	mov    (%eax),%eax
f0101551:	83 ec 0c             	sub    $0xc,%esp
f0101554:	50                   	push   %eax
f0101555:	e8 55 0d 02 00       	call   f01222af <strlen>
f010155a:	83 c4 10             	add    $0x10,%esp
f010155d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0101560:	7f af                	jg     f0101511 <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101562:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101565:	c1 e0 0a             	shl    $0xa,%eax
f0101568:	05 a0 92 55 f0       	add    $0xf05592a0,%eax
f010156d:	83 ec 04             	sub    $0x4,%esp
f0101570:	68 00 04 00 00       	push   $0x400
f0101575:	6a 00                	push   $0x0
f0101577:	50                   	push   %eax
f0101578:	e8 20 0f 02 00       	call   f012249d <memset>
f010157d:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101580:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101583:	40                   	inc    %eax
f0101584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101587:	c1 e2 0a             	shl    $0xa,%edx
f010158a:	81 c2 a0 92 55 f0    	add    $0xf05592a0,%edx
f0101590:	83 ec 04             	sub    $0x4,%esp
f0101593:	50                   	push   %eax
f0101594:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010159a:	50                   	push   %eax
f010159b:	52                   	push   %edx
f010159c:	e8 8b 0d 02 00       	call   f012232c <strncpy>
f01015a1:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01015a4:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01015a7:	ff 45 d0             	incl   -0x30(%ebp)
f01015aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01015ad:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01015b2:	39 c2                	cmp    %eax,%edx
f01015b4:	0f 82 e1 fe ff ff    	jb     f010149b <command_prompt_readline+0x343>
f01015ba:	e9 fe 02 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f01015bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01015c3:	0f 84 7b 01 00 00    	je     f0101744 <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015c9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01015d0:	e9 5c 01 00 00       	jmp    f0101731 <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f01015d5:	83 ec 0c             	sub    $0xc,%esp
f01015d8:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01015de:	50                   	push   %eax
f01015df:	e8 cb 0c 02 00       	call   f01222af <strlen>
f01015e4:	83 c4 10             	add    $0x10,%esp
f01015e7:	89 c1                	mov    %eax,%ecx
f01015e9:	8b 1d a4 dc 17 f0    	mov    0xf017dca4,%ebx
f01015ef:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01015f2:	89 d0                	mov    %edx,%eax
f01015f4:	01 c0                	add    %eax,%eax
f01015f6:	01 d0                	add    %edx,%eax
f01015f8:	c1 e0 02             	shl    $0x2,%eax
f01015fb:	01 d8                	add    %ebx,%eax
f01015fd:	8b 00                	mov    (%eax),%eax
f01015ff:	83 ec 04             	sub    $0x4,%esp
f0101602:	51                   	push   %ecx
f0101603:	50                   	push   %eax
f0101604:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010160a:	50                   	push   %eax
f010160b:	e8 e3 0d 02 00       	call   f01223f3 <strncmp>
f0101610:	83 c4 10             	add    $0x10,%esp
f0101613:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f0101616:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f010161a:	0f 85 0e 01 00 00    	jne    f010172e <command_prompt_readline+0x5d6>
								it_str = -1;
f0101620:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101627:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010162e:	00 00 00 
f0101631:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101637:	b9 ff 00 00 00       	mov    $0xff,%ecx
f010163c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101641:	89 d7                	mov    %edx,%edi
f0101643:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101645:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010164b:	83 f8 01             	cmp    $0x1,%eax
f010164e:	7e 39                	jle    f0101689 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101650:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101657:	eb 1d                	jmp    f0101676 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101659:	ff 45 dc             	incl   -0x24(%ebp)
f010165c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010165f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101662:	01 d0                	add    %edx,%eax
f0101664:	8a 00                	mov    (%eax),%al
f0101666:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f010166c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010166f:	01 ca                	add    %ecx,%edx
f0101671:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101673:	ff 45 c4             	incl   -0x3c(%ebp)
f0101676:	83 ec 0c             	sub    $0xc,%esp
f0101679:	ff 75 0c             	pushl  0xc(%ebp)
f010167c:	e8 2e 0c 02 00       	call   f01222af <strlen>
f0101681:	83 c4 10             	add    $0x10,%esp
f0101684:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101687:	7f d0                	jg     f0101659 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101689:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0101690:	eb 30                	jmp    f01016c2 <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f0101692:	ff 45 dc             	incl   -0x24(%ebp)
f0101695:	8b 0d a4 dc 17 f0    	mov    0xf017dca4,%ecx
f010169b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010169e:	89 d0                	mov    %edx,%eax
f01016a0:	01 c0                	add    %eax,%eax
f01016a2:	01 d0                	add    %edx,%eax
f01016a4:	c1 e0 02             	shl    $0x2,%eax
f01016a7:	01 c8                	add    %ecx,%eax
f01016a9:	8b 10                	mov    (%eax),%edx
f01016ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01016ae:	01 d0                	add    %edx,%eax
f01016b0:	8a 00                	mov    (%eax),%al
f01016b2:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016bb:	01 ca                	add    %ecx,%edx
f01016bd:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01016bf:	ff 45 c0             	incl   -0x40(%ebp)
f01016c2:	8b 0d a4 dc 17 f0    	mov    0xf017dca4,%ecx
f01016c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01016cb:	89 d0                	mov    %edx,%eax
f01016cd:	01 c0                	add    %eax,%eax
f01016cf:	01 d0                	add    %edx,%eax
f01016d1:	c1 e0 02             	shl    $0x2,%eax
f01016d4:	01 c8                	add    %ecx,%eax
f01016d6:	8b 00                	mov    (%eax),%eax
f01016d8:	83 ec 0c             	sub    $0xc,%esp
f01016db:	50                   	push   %eax
f01016dc:	e8 ce 0b 02 00       	call   f01222af <strlen>
f01016e1:	83 c4 10             	add    $0x10,%esp
f01016e4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01016e7:	7f a9                	jg     f0101692 <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01016e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016ec:	c1 e0 0a             	shl    $0xa,%eax
f01016ef:	05 a0 92 55 f0       	add    $0xf05592a0,%eax
f01016f4:	83 ec 04             	sub    $0x4,%esp
f01016f7:	68 00 04 00 00       	push   $0x400
f01016fc:	6a 00                	push   $0x0
f01016fe:	50                   	push   %eax
f01016ff:	e8 99 0d 02 00       	call   f012249d <memset>
f0101704:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101707:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010170a:	40                   	inc    %eax
f010170b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010170e:	c1 e2 0a             	shl    $0xa,%edx
f0101711:	81 c2 a0 92 55 f0    	add    $0xf05592a0,%edx
f0101717:	83 ec 04             	sub    $0x4,%esp
f010171a:	50                   	push   %eax
f010171b:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101721:	50                   	push   %eax
f0101722:	52                   	push   %edx
f0101723:	e8 04 0c 02 00       	call   f012232c <strncpy>
f0101728:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f010172b:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f010172e:	ff 45 c8             	incl   -0x38(%ebp)
f0101731:	a1 a8 dc 17 f0       	mov    0xf017dca8,%eax
f0101736:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f0101739:	0f 8c 96 fe ff ff    	jl     f01015d5 <command_prompt_readline+0x47d>
f010173f:	e9 79 01 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f0101744:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101748:	0f 84 6f 01 00 00    	je     f01018bd <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f010174e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101755:	e9 53 01 00 00       	jmp    f01018ad <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f010175a:	83 ec 0c             	sub    $0xc,%esp
f010175d:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101763:	50                   	push   %eax
f0101764:	e8 46 0b 02 00       	call   f01222af <strlen>
f0101769:	83 c4 10             	add    $0x10,%esp
f010176c:	89 c1                	mov    %eax,%ecx
f010176e:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101771:	89 d0                	mov    %edx,%eax
f0101773:	01 c0                	add    %eax,%eax
f0101775:	01 d0                	add    %edx,%eax
f0101777:	c1 e0 02             	shl    $0x2,%eax
f010177a:	05 c0 dc 17 f0       	add    $0xf017dcc0,%eax
f010177f:	8b 00                	mov    (%eax),%eax
f0101781:	83 ec 04             	sub    $0x4,%esp
f0101784:	51                   	push   %ecx
f0101785:	50                   	push   %eax
f0101786:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010178c:	50                   	push   %eax
f010178d:	e8 61 0c 02 00       	call   f01223f3 <strncmp>
f0101792:	83 c4 10             	add    $0x10,%esp
f0101795:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101798:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f010179c:	0f 85 08 01 00 00    	jne    f01018aa <command_prompt_readline+0x752>
								it_str = -1;
f01017a2:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01017a9:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01017b0:	00 00 00 
f01017b3:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01017b9:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01017be:	b8 00 00 00 00       	mov    $0x0,%eax
f01017c3:	89 d7                	mov    %edx,%edi
f01017c5:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f01017c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01017cd:	83 f8 01             	cmp    $0x1,%eax
f01017d0:	7e 39                	jle    f010180b <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017d2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01017d9:	eb 1d                	jmp    f01017f8 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f01017db:	ff 45 dc             	incl   -0x24(%ebp)
f01017de:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01017e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017e4:	01 d0                	add    %edx,%eax
f01017e6:	8a 00                	mov    (%eax),%al
f01017e8:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01017ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01017f1:	01 ca                	add    %ecx,%edx
f01017f3:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017f5:	ff 45 b8             	incl   -0x48(%ebp)
f01017f8:	83 ec 0c             	sub    $0xc,%esp
f01017fb:	ff 75 0c             	pushl  0xc(%ebp)
f01017fe:	e8 ac 0a 02 00       	call   f01222af <strlen>
f0101803:	83 c4 10             	add    $0x10,%esp
f0101806:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0101809:	7f d0                	jg     f01017db <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010180b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f0101812:	eb 2d                	jmp    f0101841 <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f0101814:	ff 45 dc             	incl   -0x24(%ebp)
f0101817:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010181a:	89 d0                	mov    %edx,%eax
f010181c:	01 c0                	add    %eax,%eax
f010181e:	01 d0                	add    %edx,%eax
f0101820:	c1 e0 02             	shl    $0x2,%eax
f0101823:	05 c0 dc 17 f0       	add    $0xf017dcc0,%eax
f0101828:	8b 10                	mov    (%eax),%edx
f010182a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010182d:	01 d0                	add    %edx,%eax
f010182f:	8a 00                	mov    (%eax),%al
f0101831:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101837:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010183a:	01 ca                	add    %ecx,%edx
f010183c:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010183e:	ff 45 b4             	incl   -0x4c(%ebp)
f0101841:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101844:	89 d0                	mov    %edx,%eax
f0101846:	01 c0                	add    %eax,%eax
f0101848:	01 d0                	add    %edx,%eax
f010184a:	c1 e0 02             	shl    $0x2,%eax
f010184d:	05 c0 dc 17 f0       	add    $0xf017dcc0,%eax
f0101852:	8b 00                	mov    (%eax),%eax
f0101854:	83 ec 0c             	sub    $0xc,%esp
f0101857:	50                   	push   %eax
f0101858:	e8 52 0a 02 00       	call   f01222af <strlen>
f010185d:	83 c4 10             	add    $0x10,%esp
f0101860:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0101863:	7f af                	jg     f0101814 <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101865:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101868:	c1 e0 0a             	shl    $0xa,%eax
f010186b:	05 a0 92 55 f0       	add    $0xf05592a0,%eax
f0101870:	83 ec 04             	sub    $0x4,%esp
f0101873:	68 00 04 00 00       	push   $0x400
f0101878:	6a 00                	push   $0x0
f010187a:	50                   	push   %eax
f010187b:	e8 1d 0c 02 00       	call   f012249d <memset>
f0101880:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101883:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101886:	40                   	inc    %eax
f0101887:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010188a:	c1 e2 0a             	shl    $0xa,%edx
f010188d:	81 c2 a0 92 55 f0    	add    $0xf05592a0,%edx
f0101893:	83 ec 04             	sub    $0x4,%esp
f0101896:	50                   	push   %eax
f0101897:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010189d:	50                   	push   %eax
f010189e:	52                   	push   %edx
f010189f:	e8 88 0a 02 00       	call   f012232c <strncpy>
f01018a4:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01018a7:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f01018aa:	ff 45 bc             	incl   -0x44(%ebp)
f01018ad:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01018b0:	a1 74 dd 17 f0       	mov    0xf017dd74,%eax
f01018b5:	39 c2                	cmp    %eax,%edx
f01018b7:	0f 82 9d fe ff ff    	jb     f010175a <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f01018bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01018c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f01018c3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01018c7:	0f 84 a6 03 00 00    	je     f0101c73 <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f01018cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01018d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018da:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f01018e1:	eb 1f                	jmp    f0101902 <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f01018e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018e6:	8d 50 01             	lea    0x1(%eax),%edx
f01018e9:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01018ec:	89 c2                	mov    %eax,%edx
f01018ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f1:	01 c2                	add    %eax,%edx
f01018f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01018f6:	05 a0 92 55 f0       	add    $0xf05592a0,%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018ff:	ff 45 b0             	incl   -0x50(%ebp)
f0101902:	83 ec 0c             	sub    $0xc,%esp
f0101905:	68 a0 92 55 f0       	push   $0xf05592a0
f010190a:	e8 a0 09 02 00       	call   f01222af <strlen>
f010190f:	83 c4 10             	add    $0x10,%esp
f0101912:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0101915:	7f cc                	jg     f01018e3 <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101917:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f010191e:	eb 10                	jmp    f0101930 <command_prompt_readline+0x7d8>
						cputchar('\b');}
f0101920:	83 ec 0c             	sub    $0xc,%esp
f0101923:	6a 08                	push   $0x8
f0101925:	e8 1f f5 ff ff       	call   f0100e49 <cputchar>
f010192a:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f010192d:	ff 45 ac             	incl   -0x54(%ebp)
f0101930:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0101933:	3b 45 90             	cmp    -0x70(%ebp),%eax
f0101936:	7c e8                	jl     f0101920 <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101938:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f010193f:	eb 1c                	jmp    f010195d <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f0101941:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0101944:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101947:	01 d0                	add    %edx,%eax
f0101949:	8a 00                	mov    (%eax),%al
f010194b:	0f be c0             	movsbl %al,%eax
f010194e:	83 ec 0c             	sub    $0xc,%esp
f0101951:	50                   	push   %eax
f0101952:	e8 f2 f4 ff ff       	call   f0100e49 <cputchar>
f0101957:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010195a:	ff 45 a8             	incl   -0x58(%ebp)
f010195d:	83 ec 0c             	sub    $0xc,%esp
f0101960:	ff 75 0c             	pushl  0xc(%ebp)
f0101963:	e8 47 09 02 00       	call   f01222af <strlen>
f0101968:	83 c4 10             	add    $0x10,%esp
f010196b:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010196e:	7f d1                	jg     f0101941 <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101970:	83 ec 0c             	sub    $0xc,%esp
f0101973:	ff 75 0c             	pushl  0xc(%ebp)
f0101976:	e8 34 09 02 00       	call   f01222af <strlen>
f010197b:	83 c4 10             	add    $0x10,%esp
f010197e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101984:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010198a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101990:	e9 de 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101995:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101999:	0f 8e d4 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
f010199f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019a2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f01019a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019ab:	40                   	inc    %eax
f01019ac:	99                   	cltd   
f01019ad:	f7 7d ec             	idivl  -0x14(%ebp)
f01019b0:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f01019b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019b6:	c1 e0 0a             	shl    $0xa,%eax
f01019b9:	8d 98 a0 92 55 f0    	lea    -0xfaa6d60(%eax),%ebx
f01019bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01019c5:	c1 e0 0a             	shl    $0xa,%eax
f01019c8:	05 a0 92 55 f0       	add    $0xf05592a0,%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 d9 08 02 00       	call   f01222af <strlen>
f01019d6:	83 c4 10             	add    $0x10,%esp
f01019d9:	83 ec 0c             	sub    $0xc,%esp
f01019dc:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f01019e2:	52                   	push   %edx
f01019e3:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01019e9:	52                   	push   %edx
f01019ea:	ff 75 0c             	pushl  0xc(%ebp)
f01019ed:	53                   	push   %ebx
f01019ee:	50                   	push   %eax
f01019ef:	e8 75 f6 ff ff       	call   f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>
f01019f4:	83 c4 20             	add    $0x20,%esp
f01019f7:	e9 77 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01019fc:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101a03:	75 2e                	jne    f0101a33 <command_prompt_readline+0x8db>
			if (i > 0) {
f0101a05:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a0b:	85 c0                	test   %eax,%eax
f0101a0d:	0f 8e 60 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
				i--;
f0101a13:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a19:	48                   	dec    %eax
f0101a1a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a20:	83 ec 0c             	sub    $0xc,%esp
f0101a23:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a26:	e8 1e f4 ff ff       	call   f0100e49 <cputchar>
f0101a2b:	83 c4 10             	add    $0x10,%esp
f0101a2e:	e9 40 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f0101a33:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101a3a:	75 34                	jne    f0101a70 <command_prompt_readline+0x918>
			if (i < lastIndex) {
f0101a3c:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f0101a42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a48:	39 c2                	cmp    %eax,%edx
f0101a4a:	0f 8d 23 02 00 00    	jge    f0101c73 <command_prompt_readline+0xb1b>
				i++;
f0101a50:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a56:	40                   	inc    %eax
f0101a57:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a5d:	83 ec 0c             	sub    $0xc,%esp
f0101a60:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a63:	e8 e1 f3 ff ff       	call   f0100e49 <cputchar>
f0101a68:	83 c4 10             	add    $0x10,%esp
f0101a6b:	e9 03 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f0101a70:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101a77:	75 4c                	jne    f0101ac5 <command_prompt_readline+0x96d>
f0101a79:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a7f:	85 c0                	test   %eax,%eax
f0101a81:	7e 42                	jle    f0101ac5 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f0101a83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a89:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101a8c:	eb 1a                	jmp    f0101aa8 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101a8e:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	01 c2                	add    %eax,%edx
f0101a96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101a99:	8d 48 01             	lea    0x1(%eax),%ecx
f0101a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a9f:	01 c8                	add    %ecx,%eax
f0101aa1:	8a 00                	mov    (%eax),%al
f0101aa3:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101aa5:	ff 45 a4             	incl   -0x5c(%ebp)
f0101aa8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101aae:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f0101ab1:	7e db                	jle    f0101a8e <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101ab3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101ab9:	48                   	dec    %eax
f0101aba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101ac0:	e9 ae 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101ac5:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101ac9:	7e 60                	jle    f0101b2b <command_prompt_readline+0x9d3>
f0101acb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101ad1:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101ad6:	7f 53                	jg     f0101b2b <command_prompt_readline+0x9d3>
f0101ad8:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101adf:	74 4a                	je     f0101b2b <command_prompt_readline+0x9d3>
f0101ae1:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101ae8:	74 41                	je     f0101b2b <command_prompt_readline+0x9d3>
			if (echoing)
f0101aea:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101aee:	74 0e                	je     f0101afe <command_prompt_readline+0x9a6>
				cputchar(c);
f0101af0:	83 ec 0c             	sub    $0xc,%esp
f0101af3:	ff 75 94             	pushl  -0x6c(%ebp)
f0101af6:	e8 4e f3 ff ff       	call   f0100e49 <cputchar>
f0101afb:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101afe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b04:	8d 50 01             	lea    0x1(%eax),%edx
f0101b07:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f0101b0d:	89 c2                	mov    %eax,%edx
f0101b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b12:	01 d0                	add    %edx,%eax
f0101b14:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0101b17:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101b19:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101b1f:	40                   	inc    %eax
f0101b20:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101b26:	e9 48 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f0101b2b:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f0101b2f:	75 60                	jne    f0101b91 <command_prompt_readline+0xa39>
f0101b31:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b37:	85 c0                	test   %eax,%eax
f0101b39:	7e 56                	jle    f0101b91 <command_prompt_readline+0xa39>

			if (echoing)
f0101b3b:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101b3f:	74 0e                	je     f0101b4f <command_prompt_readline+0x9f7>
				cputchar(c);
f0101b41:	83 ec 0c             	sub    $0xc,%esp
f0101b44:	ff 75 94             	pushl  -0x6c(%ebp)
f0101b47:	e8 fd f2 ff ff       	call   f0100e49 <cputchar>
f0101b4c:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101b4f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b55:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101b58:	eb 1a                	jmp    f0101b74 <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101b5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101b5d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101b60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b63:	01 c2                	add    %eax,%edx
f0101b65:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101b68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b6b:	01 c8                	add    %ecx,%eax
f0101b6d:	8a 00                	mov    (%eax),%al
f0101b6f:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101b71:	ff 45 a0             	incl   -0x60(%ebp)
f0101b74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b7a:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101b7d:	7e db                	jle    f0101b5a <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101b7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b85:	48                   	dec    %eax
f0101b86:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101b8c:	e9 e2 00 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101b91:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101b95:	74 0a                	je     f0101ba1 <command_prompt_readline+0xa49>
f0101b97:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101b9b:	0f 85 d2 00 00 00    	jne    f0101c73 <command_prompt_readline+0xb1b>

			if (echoing)
f0101ba1:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101ba5:	74 0e                	je     f0101bb5 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	ff 75 94             	pushl  -0x6c(%ebp)
f0101bad:	e8 97 f2 ff ff       	call   f0100e49 <cputchar>
f0101bb2:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101bb5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101bbb:	89 c2                	mov    %eax,%edx
f0101bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc0:	01 d0                	add    %edx,%eax
f0101bc2:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101bc5:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101bca:	83 f8 13             	cmp    $0x13,%eax
f0101bcd:	75 56                	jne    f0101c25 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101bcf:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101bd6:	eb 2d                	jmp    f0101c05 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101bd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101bdb:	40                   	inc    %eax
f0101bdc:	c1 e0 0a             	shl    $0xa,%eax
f0101bdf:	8d 90 a0 22 57 f0    	lea    -0xfa8dd60(%eax),%edx
f0101be5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101be8:	c1 e0 0a             	shl    $0xa,%eax
f0101beb:	05 a0 22 57 f0       	add    $0xf05722a0,%eax
f0101bf0:	83 ec 04             	sub    $0x4,%esp
f0101bf3:	68 00 04 00 00       	push   $0x400
f0101bf8:	52                   	push   %edx
f0101bf9:	50                   	push   %eax
f0101bfa:	e8 ce 08 02 00       	call   f01224cd <memcpy>
f0101bff:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101c02:	ff 45 9c             	incl   -0x64(%ebp)
f0101c05:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101c09:	7e cd                	jle    f0101bd8 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101c0b:	83 ec 04             	sub    $0x4,%esp
f0101c0e:	68 00 04 00 00       	push   $0x400
f0101c13:	ff 75 0c             	pushl  0xc(%ebp)
f0101c16:	68 a0 6e 57 f0       	push   $0xf0576ea0
f0101c1b:	e8 ad 08 02 00       	call   f01224cd <memcpy>
f0101c20:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c23:	eb 68                	jmp    f0101c8d <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101c25:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101c2a:	c1 e0 0a             	shl    $0xa,%eax
f0101c2d:	05 a0 22 57 f0       	add    $0xf05722a0,%eax
f0101c32:	83 ec 08             	sub    $0x8,%esp
f0101c35:	ff 75 0c             	pushl  0xc(%ebp)
f0101c38:	50                   	push   %eax
f0101c39:	e8 7d 07 02 00       	call   f01223bb <strcmp>
f0101c3e:	83 c4 10             	add    $0x10,%esp
f0101c41:	85 c0                	test   %eax,%eax
f0101c43:	74 48                	je     f0101c8d <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101c45:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101c4a:	40                   	inc    %eax
f0101c4b:	a3 30 d5 17 f0       	mov    %eax,0xf017d530
f0101c50:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101c55:	c1 e0 0a             	shl    $0xa,%eax
f0101c58:	05 a0 22 57 f0       	add    $0xf05722a0,%eax
f0101c5d:	83 ec 04             	sub    $0x4,%esp
f0101c60:	68 00 04 00 00       	push   $0x400
f0101c65:	ff 75 0c             	pushl  0xc(%ebp)
f0101c68:	50                   	push   %eax
f0101c69:	e8 5f 08 02 00       	call   f01224cd <memcpy>
f0101c6e:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101c71:	eb 1a                	jmp    f0101c8d <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101c73:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101c79:	e9 44 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101c7e:	90                   	nop
f0101c7f:	e9 3e f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101c84:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101c85:	e9 38 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101c8a:	90                   	nop
f0101c8b:	eb 01                	jmp    f0101c8e <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c8d:	90                   	nop

		}
		last_c = c;
	}
}
f0101c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101c91:	5b                   	pop    %ebx
f0101c92:	5f                   	pop    %edi
f0101c93:	5d                   	pop    %ebp
f0101c94:	c3                   	ret    

f0101c95 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

extern bool autograde ;
void run_command_prompt()
{
f0101c95:	55                   	push   %ebp
f0101c96:	89 e5                	mov    %esp,%ebp
f0101c98:	57                   	push   %edi
f0101c99:	56                   	push   %esi
f0101c9a:	53                   	push   %ebx
f0101c9b:	81 ec 0c 10 00 00    	sub    $0x100c,%esp
	if (autograde)
f0101ca1:	a1 dc 91 55 f0       	mov    0xf05591dc,%eax
f0101ca6:	85 c0                	test   %eax,%eax
f0101ca8:	0f 84 85 00 00 00    	je     f0101d33 <run_command_prompt+0x9e>
	{
		char cmd1_2[BUFLEN] = "tst bsd_nice 0";
f0101cae:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
f0101cb4:	bb 17 3a 12 f0       	mov    $0xf0123a17,%ebx
f0101cb9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101cbe:	89 c7                	mov    %eax,%edi
f0101cc0:	89 de                	mov    %ebx,%esi
f0101cc2:	89 d1                	mov    %edx,%ecx
f0101cc4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cc6:	8d 95 f7 ef ff ff    	lea    -0x1009(%ebp),%edx
f0101ccc:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cd1:	b0 00                	mov    $0x0,%al
f0101cd3:	89 d7                	mov    %edx,%edi
f0101cd5:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd2_2[BUFLEN] = "tst bsd_nice 1";
f0101cd7:	8d 85 e8 f3 ff ff    	lea    -0xc18(%ebp),%eax
f0101cdd:	bb 17 3e 12 f0       	mov    $0xf0123e17,%ebx
f0101ce2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101ce7:	89 c7                	mov    %eax,%edi
f0101ce9:	89 de                	mov    %ebx,%esi
f0101ceb:	89 d1                	mov    %edx,%ecx
f0101ced:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cef:	8d 95 f7 f3 ff ff    	lea    -0xc09(%ebp),%edx
f0101cf5:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cfa:	b0 00                	mov    $0x0,%al
f0101cfc:	89 d7                	mov    %edx,%edi
f0101cfe:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd3_2[BUFLEN] = "tst bsd_nice 2";
f0101d00:	8d 85 e8 f7 ff ff    	lea    -0x818(%ebp),%eax
f0101d06:	bb 17 42 12 f0       	mov    $0xf0124217,%ebx
f0101d0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101d10:	89 c7                	mov    %eax,%edi
f0101d12:	89 de                	mov    %ebx,%esi
f0101d14:	89 d1                	mov    %edx,%ecx
f0101d16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101d18:	8d 95 f7 f7 ff ff    	lea    -0x809(%ebp),%edx
f0101d1e:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101d23:	b0 00                	mov    $0x0,%al
f0101d25:	89 d7                	mov    %edx,%edi
f0101d27:	f3 aa                	rep stos %al,%es:(%edi)
		//execute_command(cmd3_2);
		autograde = 0;
f0101d29:	c7 05 dc 91 55 f0 00 	movl   $0x0,0xf05591dc
f0101d30:	00 00 00 
	}
	/*2024*/
	LIST_INIT(&foundCommands);
f0101d33:	c7 05 6c 91 55 f0 00 	movl   $0x0,0xf055916c
f0101d3a:	00 00 00 
f0101d3d:	c7 05 70 91 55 f0 00 	movl   $0x0,0xf0559170
f0101d44:	00 00 00 
f0101d47:	c7 05 78 91 55 f0 00 	movl   $0x0,0xf0559178
f0101d4e:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101d51:	83 ec 04             	sub    $0x4,%esp
f0101d54:	68 00 04 00 00       	push   $0x400
f0101d59:	6a 00                	push   $0x0
f0101d5b:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d61:	50                   	push   %eax
f0101d62:	e8 36 07 02 00       	call   f012249d <memset>
f0101d67:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101d6a:	83 ec 08             	sub    $0x8,%esp
f0101d6d:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d73:	50                   	push   %eax
f0101d74:	68 11 3a 12 f0       	push   $0xf0123a11
f0101d79:	e8 da f3 ff ff       	call   f0101158 <command_prompt_readline>
f0101d7e:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101d81:	83 ec 0c             	sub    $0xc,%esp
f0101d84:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 4c 01 00 00       	call   f0101edc <execute_command>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	85 c0                	test   %eax,%eax
f0101d95:	78 02                	js     f0101d99 <run_command_prompt+0x104>
				break;
	}
f0101d97:	eb b8                	jmp    f0101d51 <run_command_prompt+0xbc>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101d99:	90                   	nop
	}
}
f0101d9a:	90                   	nop
f0101d9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0101d9e:	5b                   	pop    %ebx
f0101d9f:	5e                   	pop    %esi
f0101da0:	5f                   	pop    %edi
f0101da1:	5d                   	pop    %ebp
f0101da2:	c3                   	ret    

f0101da3 <get_into_prompt>:
 * They're placed globally (instead of locally) to avoid clearing them while they're in use [el7 :)]
 */
int m;
char *p ;
void get_into_prompt()
{
f0101da3:	55                   	push   %ebp
f0101da4:	89 e5                	mov    %esp,%ebp
f0101da6:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0101da9:	9c                   	pushf  
f0101daa:	58                   	pop    %eax
f0101dab:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f0101dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
	while (1)
	{
		//disable interrupt if it's already enabled
		if (read_eflags() & FL_IF)
f0101db1:	25 00 02 00 00       	and    $0x200,%eax
f0101db6:	85 c0                	test   %eax,%eax
f0101db8:	74 01                	je     f0101dbb <get_into_prompt+0x18>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0101dba:	fa                   	cli    
			cli();

		//Switch to the kernel virtual memory
		switchkvm();
f0101dbb:	e8 49 8c 00 00       	call   f010aa09 <switchkvm>

		//Reset current CPU
		struct cpu *c = mycpu();
f0101dc0:	e8 38 53 00 00       	call   f01070fd <mycpu>
f0101dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		c->ncli = 0;
f0101dc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dcb:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f0101dd2:	00 00 00 
		c->intena = 0;
f0101dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd8:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f0101ddf:	00 00 00 
		c->scheduler = NULL;
f0101de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		c->scheduler_status = SCH_STOPPED ;
f0101dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101def:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0101df6:	00 00 00 
		c->proc = NULL;
f0101df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dfc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f0101e03:	00 00 00 

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0101e06:	89 e0                	mov    %esp,%eax
f0101e08:	89 45 dc             	mov    %eax,-0x24(%ebp)
        return esp;
f0101e0b:	8b 45 dc             	mov    -0x24(%ebp),%eax

		//Read current ESP
		uint32 cur_esp = read_esp();
f0101e0e:	89 45 e8             	mov    %eax,-0x18(%ebp)

//		//Make sure it's in the correct stack (i.e. KERN STACK below KERN_BASE)
//		assert(cur_esp < SCHD_KERN_STACK_TOP && cur_esp >= SCHD_KERN_STACK_TOP - KERNEL_STACK_SIZE);

		//Reset ESP to the beginning of the SCHED KERNEL STACK of this CPU before getting into the cmd prmpt
		uint32 cpuStackTop = (uint32)c->stack + KERNEL_STACK_SIZE;
f0101e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e14:	8b 40 08             	mov    0x8(%eax),%eax
f0101e17:	05 00 80 00 00       	add    $0x8000,%eax
f0101e1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 cpuStackBottom = (uint32)c->stack + PAGE_SIZE/*GUARD Page*/;
f0101e1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e22:	8b 40 08             	mov    0x8(%eax),%eax
f0101e25:	05 00 10 00 00       	add    $0x1000,%eax
f0101e2a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e30:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0101e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e36:	89 c4                	mov    %eax,%esp
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e3b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e3e:	73 44                	jae    f0101e84 <get_into_prompt+0xe1>
f0101e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e43:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0101e46:	72 3c                	jb     f0101e84 <get_into_prompt+0xe1>
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
f0101e48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e4b:	a3 80 92 55 f0       	mov    %eax,0xf0559280
			m = cpuStackTop - cur_esp;
f0101e50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e53:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0101e56:	a3 a0 72 57 f0       	mov    %eax,0xf05772a0
			while (--m >= 0)
f0101e5b:	eb 11                	jmp    f0101e6e <get_into_prompt+0xcb>
				*p++ = 0;
f0101e5d:	a1 80 92 55 f0       	mov    0xf0559280,%eax
f0101e62:	8d 50 01             	lea    0x1(%eax),%edx
f0101e65:	89 15 80 92 55 f0    	mov    %edx,0xf0559280
f0101e6b:	c6 00 00             	movb   $0x0,(%eax)
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
			m = cpuStackTop - cur_esp;
			while (--m >= 0)
f0101e6e:	a1 a0 72 57 f0       	mov    0xf05772a0,%eax
f0101e73:	48                   	dec    %eax
f0101e74:	a3 a0 72 57 f0       	mov    %eax,0xf05772a0
f0101e79:	a1 a0 72 57 f0       	mov    0xf05772a0,%eax
f0101e7e:	85 c0                	test   %eax,%eax
f0101e80:	79 db                	jns    f0101e5d <get_into_prompt+0xba>
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e82:	eb 3a                	jmp    f0101ebe <get_into_prompt+0x11b>
				*p++ = 0;
		}
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
f0101e84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e87:	a3 80 92 55 f0       	mov    %eax,0xf0559280
			m = cpuStackTop - cpuStackBottom;
f0101e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e8f:	2b 45 e0             	sub    -0x20(%ebp),%eax
f0101e92:	a3 a0 72 57 f0       	mov    %eax,0xf05772a0
			while (--m >= 0)
f0101e97:	eb 11                	jmp    f0101eaa <get_into_prompt+0x107>
				*p++ = 0;
f0101e99:	a1 80 92 55 f0       	mov    0xf0559280,%eax
f0101e9e:	8d 50 01             	lea    0x1(%eax),%edx
f0101ea1:	89 15 80 92 55 f0    	mov    %edx,0xf0559280
f0101ea7:	c6 00 00             	movb   $0x0,(%eax)
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
			m = cpuStackTop - cpuStackBottom;
			while (--m >= 0)
f0101eaa:	a1 a0 72 57 f0       	mov    0xf05772a0,%eax
f0101eaf:	48                   	dec    %eax
f0101eb0:	a3 a0 72 57 f0       	mov    %eax,0xf05772a0
f0101eb5:	a1 a0 72 57 f0       	mov    0xf05772a0,%eax
f0101eba:	85 c0                	test   %eax,%eax
f0101ebc:	79 db                	jns    f0101e99 <get_into_prompt+0xf6>
f0101ebe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
}

static __inline void
write_ebp(uint32 ebp)
{
	__asm __volatile("movl %0,%%ebp" : : "r" (ebp) );
f0101ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ec8:	89 c5                	mov    %eax,%ebp

		//Reset EBP to ZERO so that when calling the run_command_prompt() it pushes ZERO into the stack
		write_ebp(0);

		//Get into the prompt (should NOT return)
		run_command_prompt(NULL);
f0101eca:	83 ec 0c             	sub    $0xc,%esp
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	e8 c1 fd ff ff       	call   f0101c95 <run_command_prompt>
f0101ed4:	83 c4 10             	add    $0x10,%esp
	}
f0101ed7:	e9 cd fe ff ff       	jmp    f0101da9 <get_into_prompt+0x6>

f0101edc <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101edc:	55                   	push   %ebp
f0101edd:	89 e5                	mov    %esp,%ebp
f0101edf:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101ee5:	50                   	push   %eax
f0101ee6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101ee9:	50                   	push   %eax
f0101eea:	68 ff 39 12 f0       	push   $0xf01239ff
f0101eef:	ff 75 08             	pushl  0x8(%ebp)
f0101ef2:	e8 cd 09 02 00       	call   f01228c4 <strsplit>
f0101ef7:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101efa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101efd:	85 c0                	test   %eax,%eax
f0101eff:	75 0a                	jne    f0101f0b <execute_command+0x2f>
		return 0;
f0101f01:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f06:	e9 a4 02 00 00       	jmp    f01021af <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101f0e:	83 ec 08             	sub    $0x8,%esp
f0101f11:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101f14:	52                   	push   %edx
f0101f15:	50                   	push   %eax
f0101f16:	e8 96 02 00 00       	call   f01021b1 <process_command>
f0101f1b:	83 c4 10             	add    $0x10,%esp
f0101f1e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101f21:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101f25:	75 19                	jne    f0101f40 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101f27:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101f2a:	83 ec 08             	sub    $0x8,%esp
f0101f2d:	50                   	push   %eax
f0101f2e:	68 17 46 12 f0       	push   $0xf0124617
f0101f33:	e8 34 f0 ff ff       	call   f0100f6c <cprintf>
f0101f38:	83 c4 10             	add    $0x10,%esp
f0101f3b:	e9 6a 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101f40:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101f44:	75 4f                	jne    f0101f95 <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101f46:	a1 78 91 55 f0       	mov    0xf0559178,%eax
f0101f4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101f4e:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101f52:	74 17                	je     f0101f6b <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101f54:	83 ec 04             	sub    $0x4,%esp
f0101f57:	68 30 46 12 f0       	push   $0xf0124630
f0101f5c:	68 8b 01 00 00       	push   $0x18b
f0101f61:	68 81 46 12 f0       	push   $0xf0124681
f0101f66:	e8 af e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101f6b:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f0101f70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101f73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f76:	8b 50 04             	mov    0x4(%eax),%edx
f0101f79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f7c:	8b 00                	mov    (%eax),%eax
f0101f7e:	83 ec 04             	sub    $0x4,%esp
f0101f81:	52                   	push   %edx
f0101f82:	50                   	push   %eax
f0101f83:	68 9c 46 12 f0       	push   $0xf012469c
f0101f88:	e8 df ef ff ff       	call   f0100f6c <cprintf>
f0101f8d:	83 c4 10             	add    $0x10,%esp
f0101f90:	e9 15 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101f95:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101f99:	0f 85 e6 01 00 00    	jne    f0102185 <execute_command+0x2a9>
	{
		int i = 1;
f0101f9f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101fa6:	a1 78 91 55 f0       	mov    0xf0559178,%eax
f0101fab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101fae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101fb2:	75 17                	jne    f0101fcb <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101fb4:	83 ec 04             	sub    $0x4,%esp
f0101fb7:	68 cc 46 12 f0       	push   $0xf01246cc
f0101fbc:	68 96 01 00 00       	push   $0x196
f0101fc1:	68 81 46 12 f0       	push   $0xf0124681
f0101fc6:	e8 4f e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = NULL;
f0101fcb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101fd2:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f0101fd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101fda:	eb 28                	jmp    f0102004 <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdf:	8b 10                	mov    (%eax),%edx
f0101fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fe4:	8d 48 01             	lea    0x1(%eax),%ecx
f0101fe7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101fea:	83 ec 04             	sub    $0x4,%esp
f0101fed:	52                   	push   %edx
f0101fee:	50                   	push   %eax
f0101fef:	68 f6 46 12 f0       	push   $0xf01246f6
f0101ff4:	e8 73 ef ff ff       	call   f0100f6c <cprintf>
f0101ff9:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ffc:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0102001:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102004:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102008:	74 08                	je     f0102012 <execute_command+0x136>
f010200a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010200d:	8b 40 10             	mov    0x10(%eax),%eax
f0102010:	eb 05                	jmp    f0102017 <execute_command+0x13b>
f0102012:	b8 00 00 00 00       	mov    $0x0,%eax
f0102017:	a3 74 91 55 f0       	mov    %eax,0xf0559174
f010201c:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0102021:	85 c0                	test   %eax,%eax
f0102023:	75 b7                	jne    f0101fdc <execute_command+0x100>
f0102025:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102029:	75 b1                	jne    f0101fdc <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f010202b:	83 ec 08             	sub    $0x8,%esp
f010202e:	ff 75 dc             	pushl  -0x24(%ebp)
f0102031:	68 00 47 12 f0       	push   $0xf0124700
f0102036:	e8 31 ef ff ff       	call   f0100f6c <cprintf>
f010203b:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f010203e:	e8 1d ee ff ff       	call   f0100e60 <getchar>
f0102043:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0102046:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	50                   	push   %eax
f010204e:	e8 f6 ed ff ff       	call   f0100e49 <cputchar>
f0102053:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0102056:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f010205d:	eb 40                	jmp    f010209f <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f010205f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0102062:	89 d0                	mov    %edx,%eax
f0102064:	c1 e0 02             	shl    $0x2,%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	01 c0                	add    %eax,%eax
f010206b:	89 c2                	mov    %eax,%edx
f010206d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102071:	83 e8 30             	sub    $0x30,%eax
f0102074:	01 d0                	add    %edx,%eax
f0102076:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0102079:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010207d:	7e 2c                	jle    f01020ab <execute_command+0x1cf>
f010207f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102082:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0102085:	7f 24                	jg     f01020ab <execute_command+0x1cf>
				break;

			Chose = getchar();
f0102087:	e8 d4 ed ff ff       	call   f0100e60 <getchar>
f010208c:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f010208f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102093:	83 ec 0c             	sub    $0xc,%esp
f0102096:	50                   	push   %eax
f0102097:	e8 ad ed ff ff       	call   f0100e49 <cputchar>
f010209c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f010209f:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f01020a3:	7e 06                	jle    f01020ab <execute_command+0x1cf>
f01020a5:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f01020a9:	7e b4                	jle    f010205f <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f01020ab:	83 ec 0c             	sub    $0xc,%esp
f01020ae:	6a 0a                	push   $0xa
f01020b0:	e8 94 ed ff ff       	call   f0100e49 <cputchar>
f01020b5:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f01020b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01020bc:	0f 8e e8 00 00 00    	jle    f01021aa <execute_command+0x2ce>
f01020c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01020c5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01020c8:	0f 8f dc 00 00 00    	jg     f01021aa <execute_command+0x2ce>
		{
			int c = 1;
f01020ce:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f01020d5:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f01020da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01020dd:	eb 75                	jmp    f0102154 <execute_command+0x278>
			{
				if (c++ == selection)
f01020df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01020e2:	8d 50 01             	lea    0x1(%eax),%edx
f01020e5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01020e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01020eb:	75 5f                	jne    f010214c <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f01020ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01020f3:	85 c0                	test   %eax,%eax
f01020f5:	75 31                	jne    f0102128 <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f01020f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020fa:	8b 00                	mov    (%eax),%eax
f01020fc:	83 ec 08             	sub    $0x8,%esp
f01020ff:	50                   	push   %eax
f0102100:	68 63 47 12 f0       	push   $0xf0124763
f0102105:	e8 62 ee ff ff       	call   f0100f6c <cprintf>
f010210a:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f010210d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102110:	8b 40 08             	mov    0x8(%eax),%eax
f0102113:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0102116:	83 ec 08             	sub    $0x8,%esp
f0102119:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f010211c:	51                   	push   %ecx
f010211d:	52                   	push   %edx
f010211e:	ff d0                	call   *%eax
f0102120:	83 c4 10             	add    $0x10,%esp
f0102123:	e9 87 00 00 00       	jmp    f01021af <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0102128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010212b:	8b 50 04             	mov    0x4(%eax),%edx
f010212e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102131:	8b 00                	mov    (%eax),%eax
f0102133:	83 ec 04             	sub    $0x4,%esp
f0102136:	52                   	push   %edx
f0102137:	50                   	push   %eax
f0102138:	68 6c 47 12 f0       	push   $0xf012476c
f010213d:	e8 2a ee ff ff       	call   f0100f6c <cprintf>
f0102142:	83 c4 10             	add    $0x10,%esp
						return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
f010214a:	eb 63                	jmp    f01021af <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f010214c:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0102151:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102154:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102158:	74 08                	je     f0102162 <execute_command+0x286>
f010215a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010215d:	8b 40 10             	mov    0x10(%eax),%eax
f0102160:	eb 05                	jmp    f0102167 <execute_command+0x28b>
f0102162:	b8 00 00 00 00       	mov    $0x0,%eax
f0102167:	a3 74 91 55 f0       	mov    %eax,0xf0559174
f010216c:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 85 66 ff ff ff    	jne    f01020df <execute_command+0x203>
f0102179:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010217d:	0f 85 5c ff ff ff    	jne    f01020df <execute_command+0x203>
f0102183:	eb 25                	jmp    f01021aa <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0102185:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102188:	89 d0                	mov    %edx,%eax
f010218a:	01 c0                	add    %eax,%eax
f010218c:	01 d0                	add    %edx,%eax
f010218e:	c1 e0 03             	shl    $0x3,%eax
f0102191:	05 48 d5 17 f0       	add    $0xf017d548,%eax
f0102196:	8b 00                	mov    (%eax),%eax
f0102198:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010219b:	83 ec 08             	sub    $0x8,%esp
f010219e:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f01021a1:	51                   	push   %ecx
f01021a2:	52                   	push   %edx
f01021a3:	ff d0                	call   *%eax
f01021a5:	83 c4 10             	add    $0x10,%esp
f01021a8:	eb 05                	jmp    f01021af <execute_command+0x2d3>
	}
	return 0;
f01021aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021af:	c9                   	leave  
f01021b0:	c3                   	ret    

f01021b1 <process_command>:


int process_command(int number_of_arguments, char** arguments)
{
f01021b1:	55                   	push   %ebp
f01021b2:	89 e5                	mov    %esp,%ebp
f01021b4:	83 ec 28             	sub    $0x28,%esp
    struct Command * element = NULL;
f01021b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    LIST_FOREACH(element, &foundCommands)
f01021be:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f01021c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01021c6:	e9 90 00 00 00       	jmp    f010225b <process_command+0xaa>
    {
        LIST_REMOVE(&foundCommands,element);
f01021cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01021cf:	75 17                	jne    f01021e8 <process_command+0x37>
f01021d1:	83 ec 04             	sub    $0x4,%esp
f01021d4:	68 74 47 12 f0       	push   $0xf0124774
f01021d9:	68 cd 01 00 00       	push   $0x1cd
f01021de:	68 81 46 12 f0       	push   $0xf0124681
f01021e3:	e8 32 e1 ff ff       	call   f010031a <_panic>
f01021e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021eb:	8b 40 10             	mov    0x10(%eax),%eax
f01021ee:	85 c0                	test   %eax,%eax
f01021f0:	74 11                	je     f0102203 <process_command+0x52>
f01021f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021f5:	8b 40 10             	mov    0x10(%eax),%eax
f01021f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01021fb:	8b 52 14             	mov    0x14(%edx),%edx
f01021fe:	89 50 14             	mov    %edx,0x14(%eax)
f0102201:	eb 0b                	jmp    f010220e <process_command+0x5d>
f0102203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102206:	8b 40 14             	mov    0x14(%eax),%eax
f0102209:	a3 70 91 55 f0       	mov    %eax,0xf0559170
f010220e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102211:	8b 40 14             	mov    0x14(%eax),%eax
f0102214:	85 c0                	test   %eax,%eax
f0102216:	74 11                	je     f0102229 <process_command+0x78>
f0102218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010221b:	8b 40 14             	mov    0x14(%eax),%eax
f010221e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102221:	8b 52 10             	mov    0x10(%edx),%edx
f0102224:	89 50 10             	mov    %edx,0x10(%eax)
f0102227:	eb 0b                	jmp    f0102234 <process_command+0x83>
f0102229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010222c:	8b 40 10             	mov    0x10(%eax),%eax
f010222f:	a3 6c 91 55 f0       	mov    %eax,0xf055916c
f0102234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102237:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010223e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102241:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0102248:	a1 78 91 55 f0       	mov    0xf0559178,%eax
f010224d:	48                   	dec    %eax
f010224e:	a3 78 91 55 f0       	mov    %eax,0xf0559178


int process_command(int number_of_arguments, char** arguments)
{
    struct Command * element = NULL;
    LIST_FOREACH(element, &foundCommands)
f0102253:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0102258:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010225b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010225f:	74 08                	je     f0102269 <process_command+0xb8>
f0102261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102264:	8b 40 10             	mov    0x10(%eax),%eax
f0102267:	eb 05                	jmp    f010226e <process_command+0xbd>
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
f010226e:	a3 74 91 55 f0       	mov    %eax,0xf0559174
f0102273:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0102278:	85 c0                	test   %eax,%eax
f010227a:	0f 85 4b ff ff ff    	jne    f01021cb <process_command+0x1a>
f0102280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102284:	0f 85 41 ff ff ff    	jne    f01021cb <process_command+0x1a>
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
f010228a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0102291:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0102298:	e9 42 02 00 00       	jmp    f01024df <process_command+0x32e>
    {
        if (strcmp(arguments[0], commands[i].name) == 0)
f010229d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022a0:	89 d0                	mov    %edx,%eax
f01022a2:	01 c0                	add    %eax,%eax
f01022a4:	01 d0                	add    %edx,%eax
f01022a6:	c1 e0 03             	shl    $0x3,%eax
f01022a9:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01022ae:	8b 10                	mov    (%eax),%edx
f01022b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022b3:	8b 00                	mov    (%eax),%eax
f01022b5:	83 ec 08             	sub    $0x8,%esp
f01022b8:	52                   	push   %edx
f01022b9:	50                   	push   %eax
f01022ba:	e8 fc 00 02 00       	call   f01223bb <strcmp>
f01022bf:	83 c4 10             	add    $0x10,%esp
f01022c2:	85 c0                	test   %eax,%eax
f01022c4:	0f 85 1e 01 00 00    	jne    f01023e8 <process_command+0x237>
        {
            cprintf("%d %d \n",commands[i].num_of_args,number_of_arguments-1);
f01022ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01022cd:	8d 48 ff             	lea    -0x1(%eax),%ecx
f01022d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022d3:	89 d0                	mov    %edx,%eax
f01022d5:	01 c0                	add    %eax,%eax
f01022d7:	01 d0                	add    %edx,%eax
f01022d9:	c1 e0 03             	shl    $0x3,%eax
f01022dc:	05 4c d5 17 f0       	add    $0xf017d54c,%eax
f01022e1:	8b 00                	mov    (%eax),%eax
f01022e3:	83 ec 04             	sub    $0x4,%esp
f01022e6:	51                   	push   %ecx
f01022e7:	50                   	push   %eax
f01022e8:	68 92 47 12 f0       	push   $0xf0124792
f01022ed:	e8 7a ec ff ff       	call   f0100f6c <cprintf>
f01022f2:	83 c4 10             	add    $0x10,%esp
            if(commands[i].num_of_args != number_of_arguments-1)
f01022f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022f8:	89 d0                	mov    %edx,%eax
f01022fa:	01 c0                	add    %eax,%eax
f01022fc:	01 d0                	add    %edx,%eax
f01022fe:	c1 e0 03             	shl    $0x3,%eax
f0102301:	05 4c d5 17 f0       	add    $0xf017d54c,%eax
f0102306:	8b 00                	mov    (%eax),%eax
f0102308:	8b 55 08             	mov    0x8(%ebp),%edx
f010230b:	4a                   	dec    %edx
f010230c:	39 d0                	cmp    %edx,%eax
f010230e:	0f 84 cc 00 00 00    	je     f01023e0 <process_command+0x22f>
            {
                if (commands[i].num_of_args == -1 && number_of_arguments-1 > 0)
f0102314:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102317:	89 d0                	mov    %edx,%eax
f0102319:	01 c0                	add    %eax,%eax
f010231b:	01 d0                	add    %edx,%eax
f010231d:	c1 e0 03             	shl    $0x3,%eax
f0102320:	05 4c d5 17 f0       	add    $0xf017d54c,%eax
f0102325:	8b 00                	mov    (%eax),%eax
f0102327:	83 f8 ff             	cmp    $0xffffffff,%eax
f010232a:	75 10                	jne    f010233c <process_command+0x18b>
f010232c:	8b 45 08             	mov    0x8(%ebp),%eax
f010232f:	48                   	dec    %eax
f0102330:	85 c0                	test   %eax,%eax
f0102332:	7e 08                	jle    f010233c <process_command+0x18b>
                {
                    return i;
f0102334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102337:	e9 c5 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
                else
                {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010233c:	8b 15 6c 91 55 f0    	mov    0xf055916c,%edx
f0102342:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102345:	89 c8                	mov    %ecx,%eax
f0102347:	01 c0                	add    %eax,%eax
f0102349:	01 c8                	add    %ecx,%eax
f010234b:	c1 e0 03             	shl    $0x3,%eax
f010234e:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102353:	89 10                	mov    %edx,(%eax)
f0102355:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102358:	89 d0                	mov    %edx,%eax
f010235a:	01 c0                	add    %eax,%eax
f010235c:	01 d0                	add    %edx,%eax
f010235e:	c1 e0 03             	shl    $0x3,%eax
f0102361:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102366:	8b 00                	mov    (%eax),%eax
f0102368:	85 c0                	test   %eax,%eax
f010236a:	74 1c                	je     f0102388 <process_command+0x1d7>
f010236c:	8b 15 6c 91 55 f0    	mov    0xf055916c,%edx
f0102372:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102375:	89 c8                	mov    %ecx,%eax
f0102377:	01 c0                	add    %eax,%eax
f0102379:	01 c8                	add    %ecx,%eax
f010237b:	c1 e0 03             	shl    $0x3,%eax
f010237e:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102383:	89 42 14             	mov    %eax,0x14(%edx)
f0102386:	eb 16                	jmp    f010239e <process_command+0x1ed>
f0102388:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010238b:	89 d0                	mov    %edx,%eax
f010238d:	01 c0                	add    %eax,%eax
f010238f:	01 d0                	add    %edx,%eax
f0102391:	c1 e0 03             	shl    $0x3,%eax
f0102394:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102399:	a3 70 91 55 f0       	mov    %eax,0xf0559170
f010239e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023a1:	89 d0                	mov    %edx,%eax
f01023a3:	01 c0                	add    %eax,%eax
f01023a5:	01 d0                	add    %edx,%eax
f01023a7:	c1 e0 03             	shl    $0x3,%eax
f01023aa:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01023af:	a3 6c 91 55 f0       	mov    %eax,0xf055916c
f01023b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023b7:	89 d0                	mov    %edx,%eax
f01023b9:	01 c0                	add    %eax,%eax
f01023bb:	01 d0                	add    %edx,%eax
f01023bd:	c1 e0 03             	shl    $0x3,%eax
f01023c0:	05 54 d5 17 f0       	add    $0xf017d554,%eax
f01023c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01023cb:	a1 78 91 55 f0       	mov    0xf0559178,%eax
f01023d0:	40                   	inc    %eax
f01023d1:	a3 78 91 55 f0       	mov    %eax,0xf0559178
                return CMD_INV_NUM_ARGS;
f01023d6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01023db:	e9 21 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
            }
            else
            {
            return i;
f01023e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01023e3:	e9 19 01 00 00       	jmp    f0102501 <process_command+0x350>
            }
        }
        else
        {
            const char* ptr1 = arguments[0];
f01023e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023eb:	8b 00                	mov    (%eax),%eax
f01023ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
            const char* ptr2 = commands[i].name;
f01023f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023f3:	89 d0                	mov    %edx,%eax
f01023f5:	01 c0                	add    %eax,%eax
f01023f7:	01 d0                	add    %edx,%eax
f01023f9:	c1 e0 03             	shl    $0x3,%eax
f01023fc:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102401:	8b 00                	mov    (%eax),%eax
f0102403:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            while (*ptr1 != '\0' && *ptr2 != '\0')
f0102406:	eb 14                	jmp    f010241c <process_command+0x26b>
            {
                if (*ptr1 == *ptr2)
f0102408:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010240b:	8a 10                	mov    (%eax),%dl
f010240d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102410:	8a 00                	mov    (%eax),%al
f0102412:	38 c2                	cmp    %al,%dl
f0102414:	75 03                	jne    f0102419 <process_command+0x268>
                {
                    ptr1++;
f0102416:	ff 45 e8             	incl   -0x18(%ebp)
                }
                ptr2++;
f0102419:	ff 45 e4             	incl   -0x1c(%ebp)
        }
        else
        {
            const char* ptr1 = arguments[0];
            const char* ptr2 = commands[i].name;
            while (*ptr1 != '\0' && *ptr2 != '\0')
f010241c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010241f:	8a 00                	mov    (%eax),%al
f0102421:	84 c0                	test   %al,%al
f0102423:	74 09                	je     f010242e <process_command+0x27d>
f0102425:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102428:	8a 00                	mov    (%eax),%al
f010242a:	84 c0                	test   %al,%al
f010242c:	75 da                	jne    f0102408 <process_command+0x257>
                {
                    ptr1++;
                }
                ptr2++;
            }
            if (*ptr1 == '\0')
f010242e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	84 c0                	test   %al,%al
f0102435:	0f 85 a1 00 00 00    	jne    f01024dc <process_command+0x32b>
            {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010243b:	8b 15 6c 91 55 f0    	mov    0xf055916c,%edx
f0102441:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102444:	89 c8                	mov    %ecx,%eax
f0102446:	01 c0                	add    %eax,%eax
f0102448:	01 c8                	add    %ecx,%eax
f010244a:	c1 e0 03             	shl    $0x3,%eax
f010244d:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102452:	89 10                	mov    %edx,(%eax)
f0102454:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102457:	89 d0                	mov    %edx,%eax
f0102459:	01 c0                	add    %eax,%eax
f010245b:	01 d0                	add    %edx,%eax
f010245d:	c1 e0 03             	shl    $0x3,%eax
f0102460:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102465:	8b 00                	mov    (%eax),%eax
f0102467:	85 c0                	test   %eax,%eax
f0102469:	74 1c                	je     f0102487 <process_command+0x2d6>
f010246b:	8b 15 6c 91 55 f0    	mov    0xf055916c,%edx
f0102471:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102474:	89 c8                	mov    %ecx,%eax
f0102476:	01 c0                	add    %eax,%eax
f0102478:	01 c8                	add    %ecx,%eax
f010247a:	c1 e0 03             	shl    $0x3,%eax
f010247d:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102482:	89 42 14             	mov    %eax,0x14(%edx)
f0102485:	eb 16                	jmp    f010249d <process_command+0x2ec>
f0102487:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010248a:	89 d0                	mov    %edx,%eax
f010248c:	01 c0                	add    %eax,%eax
f010248e:	01 d0                	add    %edx,%eax
f0102490:	c1 e0 03             	shl    $0x3,%eax
f0102493:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102498:	a3 70 91 55 f0       	mov    %eax,0xf0559170
f010249d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024a0:	89 d0                	mov    %edx,%eax
f01024a2:	01 c0                	add    %eax,%eax
f01024a4:	01 d0                	add    %edx,%eax
f01024a6:	c1 e0 03             	shl    $0x3,%eax
f01024a9:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01024ae:	a3 6c 91 55 f0       	mov    %eax,0xf055916c
f01024b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024b6:	89 d0                	mov    %edx,%eax
f01024b8:	01 c0                	add    %eax,%eax
f01024ba:	01 d0                	add    %edx,%eax
f01024bc:	c1 e0 03             	shl    $0x3,%eax
f01024bf:	05 54 d5 17 f0       	add    $0xf017d554,%eax
f01024c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01024ca:	a1 78 91 55 f0       	mov    0xf0559178,%eax
f01024cf:	40                   	inc    %eax
f01024d0:	a3 78 91 55 f0       	mov    %eax,0xf0559178
                x=1;
f01024d5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    LIST_FOREACH(element, &foundCommands)
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f01024dc:	ff 45 ec             	incl   -0x14(%ebp)
f01024df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024e2:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01024e7:	39 c2                	cmp    %eax,%edx
f01024e9:	0f 82 ae fd ff ff    	jb     f010229d <process_command+0xec>
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
                x=1;
            }
        }
    }
    if (x==1)
f01024ef:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01024f3:	75 07                	jne    f01024fc <process_command+0x34b>
    {
        return CMD_MATCHED;
f01024f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01024fa:	eb 05                	jmp    f0102501 <process_command+0x350>
    }
    return CMD_INVALID;
f01024fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
f0102501:	c9                   	leave  
f0102502:	c3                   	ret    

f0102503 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102503:	55                   	push   %ebp
f0102504:	89 e5                	mov    %esp,%ebp
f0102506:	c7 05 b0 8f 55 f0 00 	movl   $0x0,0xf0558fb0
f010250d:	00 00 00 
f0102510:	90                   	nop
f0102511:	5d                   	pop    %ebp
f0102512:	c3                   	ret    

f0102513 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102513:	55                   	push   %ebp
f0102514:	89 e5                	mov    %esp,%ebp
f0102516:	c7 05 b0 8f 55 f0 01 	movl   $0x1,0xf0558fb0
f010251d:	00 00 00 
f0102520:	90                   	nop
f0102521:	5d                   	pop    %ebp
f0102522:	c3                   	ret    

f0102523 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102523:	55                   	push   %ebp
f0102524:	89 e5                	mov    %esp,%ebp
f0102526:	c7 05 b0 8f 55 f0 02 	movl   $0x2,0xf0558fb0
f010252d:	00 00 00 
f0102530:	90                   	nop
f0102531:	5d                   	pop    %ebp
f0102532:	c3                   	ret    

f0102533 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102533:	55                   	push   %ebp
f0102534:	89 e5                	mov    %esp,%ebp
f0102536:	c7 05 b0 8f 55 f0 03 	movl   $0x3,0xf0558fb0
f010253d:	00 00 00 
f0102540:	90                   	nop
f0102541:	5d                   	pop    %ebp
f0102542:	c3                   	ret    

f0102543 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102543:	55                   	push   %ebp
f0102544:	89 e5                	mov    %esp,%ebp
f0102546:	c7 05 b0 8f 55 f0 04 	movl   $0x4,0xf0558fb0
f010254d:	00 00 00 
f0102550:	90                   	nop
f0102551:	5d                   	pop    %ebp
f0102552:	c3                   	ret    

f0102553 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102553:	55                   	push   %ebp
f0102554:	89 e5                	mov    %esp,%ebp
f0102556:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f010255b:	85 c0                	test   %eax,%eax
f010255d:	75 04                	jne    f0102563 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010255f:	b0 01                	mov    $0x1,%al
f0102561:	eb 02                	jmp    f0102565 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0102563:	b0 00                	mov    $0x0,%al
f0102565:	5d                   	pop    %ebp
f0102566:	c3                   	ret    

f0102567 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102567:	55                   	push   %ebp
f0102568:	89 e5                	mov    %esp,%ebp
f010256a:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f010256f:	83 f8 01             	cmp    $0x1,%eax
f0102572:	75 04                	jne    f0102578 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0102574:	b0 01                	mov    $0x1,%al
f0102576:	eb 02                	jmp    f010257a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0102578:	b0 00                	mov    $0x0,%al
f010257a:	5d                   	pop    %ebp
f010257b:	c3                   	ret    

f010257c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010257c:	55                   	push   %ebp
f010257d:	89 e5                	mov    %esp,%ebp
f010257f:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f0102584:	83 f8 02             	cmp    $0x2,%eax
f0102587:	75 04                	jne    f010258d <isKHeapPlacementStrategyBESTFIT+0x11>
f0102589:	b0 01                	mov    $0x1,%al
f010258b:	eb 02                	jmp    f010258f <isKHeapPlacementStrategyBESTFIT+0x13>
f010258d:	b0 00                	mov    $0x0,%al
f010258f:	5d                   	pop    %ebp
f0102590:	c3                   	ret    

f0102591 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0102591:	55                   	push   %ebp
f0102592:	89 e5                	mov    %esp,%ebp
f0102594:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f0102599:	83 f8 03             	cmp    $0x3,%eax
f010259c:	75 04                	jne    f01025a2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010259e:	b0 01                	mov    $0x1,%al
f01025a0:	eb 02                	jmp    f01025a4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01025a2:	b0 00                	mov    $0x0,%al
f01025a4:	5d                   	pop    %ebp
f01025a5:	c3                   	ret    

f01025a6 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01025a6:	55                   	push   %ebp
f01025a7:	89 e5                	mov    %esp,%ebp
f01025a9:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f01025ae:	83 f8 04             	cmp    $0x4,%eax
f01025b1:	75 04                	jne    f01025b7 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01025b3:	b0 01                	mov    $0x1,%al
f01025b5:	eb 02                	jmp    f01025b9 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01025b7:	b0 00                	mov    $0x0,%al
f01025b9:	5d                   	pop    %ebp
f01025ba:	c3                   	ret    

f01025bb <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01025bb:	55                   	push   %ebp
f01025bc:	89 e5                	mov    %esp,%ebp
f01025be:	c7 05 04 8f 55 f0 01 	movl   $0x1,0xf0558f04
f01025c5:	00 00 00 
f01025c8:	90                   	nop
f01025c9:	5d                   	pop    %ebp
f01025ca:	c3                   	ret    

f01025cb <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01025cb:	55                   	push   %ebp
f01025cc:	89 e5                	mov    %esp,%ebp
f01025ce:	c7 05 04 8f 55 f0 02 	movl   $0x2,0xf0558f04
f01025d5:	00 00 00 
f01025d8:	90                   	nop
f01025d9:	5d                   	pop    %ebp
f01025da:	c3                   	ret    

f01025db <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	c7 05 04 8f 55 f0 03 	movl   $0x3,0xf0558f04
f01025e5:	00 00 00 
f01025e8:	90                   	nop
f01025e9:	5d                   	pop    %ebp
f01025ea:	c3                   	ret    

f01025eb <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f01025eb:	55                   	push   %ebp
f01025ec:	89 e5                	mov    %esp,%ebp
f01025ee:	c7 05 04 8f 55 f0 04 	movl   $0x4,0xf0558f04
f01025f5:	00 00 00 
f01025f8:	90                   	nop
f01025f9:	5d                   	pop    %ebp
f01025fa:	c3                   	ret    

f01025fb <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01025fb:	55                   	push   %ebp
f01025fc:	89 e5                	mov    %esp,%ebp
f01025fe:	a1 04 8f 55 f0       	mov    0xf0558f04,%eax
f0102603:	83 f8 01             	cmp    $0x1,%eax
f0102606:	75 04                	jne    f010260c <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102608:	b0 01                	mov    $0x1,%al
f010260a:	eb 02                	jmp    f010260e <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010260c:	b0 00                	mov    $0x0,%al
f010260e:	5d                   	pop    %ebp
f010260f:	c3                   	ret    

f0102610 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0102610:	55                   	push   %ebp
f0102611:	89 e5                	mov    %esp,%ebp
f0102613:	a1 04 8f 55 f0       	mov    0xf0558f04,%eax
f0102618:	83 f8 02             	cmp    $0x2,%eax
f010261b:	75 04                	jne    f0102621 <isUHeapPlacementStrategyBESTFIT+0x11>
f010261d:	b0 01                	mov    $0x1,%al
f010261f:	eb 02                	jmp    f0102623 <isUHeapPlacementStrategyBESTFIT+0x13>
f0102621:	b0 00                	mov    $0x0,%al
f0102623:	5d                   	pop    %ebp
f0102624:	c3                   	ret    

f0102625 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102625:	55                   	push   %ebp
f0102626:	89 e5                	mov    %esp,%ebp
f0102628:	a1 04 8f 55 f0       	mov    0xf0558f04,%eax
f010262d:	83 f8 03             	cmp    $0x3,%eax
f0102630:	75 04                	jne    f0102636 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102632:	b0 01                	mov    $0x1,%al
f0102634:	eb 02                	jmp    f0102638 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102636:	b0 00                	mov    $0x0,%al
f0102638:	5d                   	pop    %ebp
f0102639:	c3                   	ret    

f010263a <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010263a:	55                   	push   %ebp
f010263b:	89 e5                	mov    %esp,%ebp
f010263d:	a1 04 8f 55 f0       	mov    0xf0558f04,%eax
f0102642:	83 f8 04             	cmp    $0x4,%eax
f0102645:	75 04                	jne    f010264b <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102647:	b0 01                	mov    $0x1,%al
f0102649:	eb 02                	jmp    f010264d <isUHeapPlacementStrategyWORSTFIT+0x13>
f010264b:	b0 00                	mov    $0x0,%al
f010264d:	5d                   	pop    %ebp
f010264e:	c3                   	ret    

f010264f <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010264f:	55                   	push   %ebp
f0102650:	89 e5                	mov    %esp,%ebp
f0102652:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102655:	8b 45 08             	mov    0x8(%ebp),%eax
f0102658:	c1 e8 0c             	shr    $0xc,%eax
f010265b:	89 c2                	mov    %eax,%edx
f010265d:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0102662:	39 c2                	cmp    %eax,%edx
f0102664:	72 14                	jb     f010267a <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102666:	83 ec 04             	sub    $0x4,%esp
f0102669:	68 9c 47 12 f0       	push   $0xf012479c
f010266e:	6a 55                	push   $0x55
f0102670:	68 c4 47 12 f0       	push   $0xf01247c4
f0102675:	e8 a0 dc ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f010267a:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f0102680:	8b 45 08             	mov    0x8(%ebp),%eax
f0102683:	c1 e8 0c             	shr    $0xc,%eax
f0102686:	89 c1                	mov    %eax,%ecx
f0102688:	89 c8                	mov    %ecx,%eax
f010268a:	01 c0                	add    %eax,%eax
f010268c:	01 c8                	add    %ecx,%eax
f010268e:	c1 e0 03             	shl    $0x3,%eax
f0102691:	01 d0                	add    %edx,%eax
}
f0102693:	c9                   	leave  
f0102694:	c3                   	ret    

f0102695 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0102695:	55                   	push   %ebp
f0102696:	89 e5                	mov    %esp,%ebp
f0102698:	53                   	push   %ebx
f0102699:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010269c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01026a3:	eb 3b                	jmp    f01026e0 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01026a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026a8:	89 d0                	mov    %edx,%eax
f01026aa:	01 c0                	add    %eax,%eax
f01026ac:	01 d0                	add    %edx,%eax
f01026ae:	c1 e0 03             	shl    $0x3,%eax
f01026b1:	05 44 d5 17 f0       	add    $0xf017d544,%eax
f01026b6:	8b 10                	mov    (%eax),%edx
f01026b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01026bb:	89 c8                	mov    %ecx,%eax
f01026bd:	01 c0                	add    %eax,%eax
f01026bf:	01 c8                	add    %ecx,%eax
f01026c1:	c1 e0 03             	shl    $0x3,%eax
f01026c4:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01026c9:	8b 00                	mov    (%eax),%eax
f01026cb:	83 ec 04             	sub    $0x4,%esp
f01026ce:	52                   	push   %edx
f01026cf:	50                   	push   %eax
f01026d0:	68 47 50 12 f0       	push   $0xf0125047
f01026d5:	e8 92 e8 ff ff       	call   f0100f6c <cprintf>
f01026da:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01026dd:	ff 45 f4             	incl   -0xc(%ebp)
f01026e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026e3:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01026e8:	39 c2                	cmp    %eax,%edx
f01026ea:	72 b9                	jb     f01026a5 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01026ec:	83 ec 0c             	sub    $0xc,%esp
f01026ef:	68 50 50 12 f0       	push   $0xf0125050
f01026f4:	e8 73 e8 ff ff       	call   f0100f6c <cprintf>
f01026f9:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01026fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102703:	eb 42                	jmp    f0102747 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0102705:	8b 0d a4 dc 17 f0    	mov    0xf017dca4,%ecx
f010270b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010270e:	89 d0                	mov    %edx,%eax
f0102710:	01 c0                	add    %eax,%eax
f0102712:	01 d0                	add    %edx,%eax
f0102714:	c1 e0 02             	shl    $0x2,%eax
f0102717:	01 c8                	add    %ecx,%eax
f0102719:	8b 50 04             	mov    0x4(%eax),%edx
f010271c:	8b 1d a4 dc 17 f0    	mov    0xf017dca4,%ebx
f0102722:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102725:	89 c8                	mov    %ecx,%eax
f0102727:	01 c0                	add    %eax,%eax
f0102729:	01 c8                	add    %ecx,%eax
f010272b:	c1 e0 02             	shl    $0x2,%eax
f010272e:	01 d8                	add    %ebx,%eax
f0102730:	8b 00                	mov    (%eax),%eax
f0102732:	83 ec 04             	sub    $0x4,%esp
f0102735:	52                   	push   %edx
f0102736:	50                   	push   %eax
f0102737:	68 65 50 12 f0       	push   $0xf0125065
f010273c:	e8 2b e8 ff ff       	call   f0100f6c <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102744:	ff 45 f4             	incl   -0xc(%ebp)
f0102747:	a1 a8 dc 17 f0       	mov    0xf017dca8,%eax
f010274c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010274f:	7c b4                	jl     f0102705 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0102751:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102756:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102759:	c9                   	leave  
f010275a:	c3                   	ret    

f010275b <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010275b:	55                   	push   %ebp
f010275c:	89 e5                	mov    %esp,%ebp
f010275e:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 81 50 12 f0       	push   $0xf0125081
f0102769:	e8 fe e7 ff ff       	call   f0100f6c <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0102771:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102776:	83 ec 04             	sub    $0x4,%esp
f0102779:	50                   	push   %eax
f010277a:	68 0c 00 10 f0       	push   $0xf010000c
f010277f:	68 9c 50 12 f0       	push   $0xf012509c
f0102784:	e8 e3 e7 ff ff       	call   f0100f6c <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010278c:	b8 bd 35 12 00       	mov    $0x1235bd,%eax
f0102791:	83 ec 04             	sub    $0x4,%esp
f0102794:	50                   	push   %eax
f0102795:	68 bd 35 12 f0       	push   $0xf01235bd
f010279a:	68 d8 50 12 f0       	push   $0xf01250d8
f010279f:	e8 c8 e7 ff ff       	call   f0100f6c <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01027a7:	b8 b2 57 55 00       	mov    $0x5557b2,%eax
f01027ac:	83 ec 04             	sub    $0x4,%esp
f01027af:	50                   	push   %eax
f01027b0:	68 b2 57 55 f0       	push   $0xf05557b2
f01027b5:	68 14 51 12 f0       	push   $0xf0125114
f01027ba:	e8 ad e7 ff ff       	call   f0100f6c <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01027c2:	b8 a8 b9 57 00       	mov    $0x57b9a8,%eax
f01027c7:	83 ec 04             	sub    $0x4,%esp
f01027ca:	50                   	push   %eax
f01027cb:	68 a8 b9 57 f0       	push   $0xf057b9a8
f01027d0:	68 5c 51 12 f0       	push   $0xf012515c
f01027d5:	e8 92 e7 ff ff       	call   f0100f6c <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01027dd:	b8 a8 b9 57 f0       	mov    $0xf057b9a8,%eax
f01027e2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01027e8:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01027ed:	29 c2                	sub    %eax,%edx
f01027ef:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01027f1:	85 c0                	test   %eax,%eax
f01027f3:	79 05                	jns    f01027fa <command_kernel_info+0x9f>
f01027f5:	05 ff 03 00 00       	add    $0x3ff,%eax
f01027fa:	c1 f8 0a             	sar    $0xa,%eax
f01027fd:	83 ec 08             	sub    $0x8,%esp
f0102800:	50                   	push   %eax
f0102801:	68 98 51 12 f0       	push   $0xf0125198
f0102806:	e8 61 e7 ff ff       	call   f0100f6c <cprintf>
f010280b:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010280e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102813:	c9                   	leave  
f0102814:	c3                   	ret    

f0102815 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0102815:	55                   	push   %ebp
f0102816:	89 e5                	mov    %esp,%ebp
f0102818:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010281b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010281f:	75 37                	jne    f0102858 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102821:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102824:	83 c0 04             	add    $0x4,%eax
f0102827:	8b 00                	mov    (%eax),%eax
f0102829:	83 ec 04             	sub    $0x4,%esp
f010282c:	6a 10                	push   $0x10
f010282e:	6a 00                	push   $0x0
f0102830:	50                   	push   %eax
f0102831:	e8 d9 fd 01 00       	call   f012260f <strtol>
f0102836:	83 c4 10             	add    $0x10,%esp
f0102839:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f010283c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010283f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0102842:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102845:	83 c0 08             	add    $0x8,%eax
f0102848:	8b 00                	mov    (%eax),%eax
f010284a:	8a 00                	mov    (%eax),%al
f010284c:	88 c2                	mov    %al,%dl
f010284e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102851:	88 10                	mov    %dl,(%eax)
f0102853:	e9 b9 00 00 00       	jmp    f0102911 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102858:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010285c:	0f 85 9f 00 00 00    	jne    f0102901 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102862:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102865:	83 c0 04             	add    $0x4,%eax
f0102868:	8b 00                	mov    (%eax),%eax
f010286a:	83 ec 04             	sub    $0x4,%esp
f010286d:	6a 0a                	push   $0xa
f010286f:	6a 00                	push   $0x0
f0102871:	50                   	push   %eax
f0102872:	e8 98 fd 01 00       	call   f012260f <strtol>
f0102877:	83 c4 10             	add    $0x10,%esp
f010287a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010287d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102884:	83 ec 04             	sub    $0x4,%esp
f0102887:	6a 00                	push   $0x0
f0102889:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010288c:	50                   	push   %eax
f010288d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102890:	e8 2b 7f 00 00       	call   f010a7c0 <envid2env>
f0102895:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102898:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289b:	83 c0 08             	add    $0x8,%eax
f010289e:	8b 00                	mov    (%eax),%eax
f01028a0:	83 ec 04             	sub    $0x4,%esp
f01028a3:	6a 10                	push   $0x10
f01028a5:	6a 00                	push   $0x0
f01028a7:	50                   	push   %eax
f01028a8:	e8 62 fd 01 00       	call   f012260f <strtol>
f01028ad:	83 c4 10             	add    $0x10,%esp
f01028b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01028b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028b6:	85 c0                	test   %eax,%eax
f01028b8:	75 07                	jne    f01028c1 <command_writeusermem+0xac>
f01028ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01028bf:	eb 55                	jmp    f0102916 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01028c1:	0f 20 d8             	mov    %cr3,%eax
f01028c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01028c7:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01028ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01028cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028d0:	8b 40 68             	mov    0x68(%eax),%eax
f01028d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01028d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01028d9:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01028dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01028df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01028e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e5:	83 c0 0c             	add    $0xc,%eax
f01028e8:	8b 00                	mov    (%eax),%eax
f01028ea:	8a 00                	mov    (%eax),%al
f01028ec:	88 c2                	mov    %al,%dl
f01028ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01028f1:	88 10                	mov    %dl,(%eax)
f01028f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01028f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01028fc:	0f 22 d8             	mov    %eax,%cr3
f01028ff:	eb 10                	jmp    f0102911 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0102901:	83 ec 0c             	sub    $0xc,%esp
f0102904:	68 c4 51 12 f0       	push   $0xf01251c4
f0102909:	e8 5e e6 ff ff       	call   f0100f6c <cprintf>
f010290e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102911:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102916:	c9                   	leave  
f0102917:	c3                   	ret    

f0102918 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102918:	55                   	push   %ebp
f0102919:	89 e5                	mov    %esp,%ebp
f010291b:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010291e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102921:	83 c0 04             	add    $0x4,%eax
f0102924:	8b 00                	mov    (%eax),%eax
f0102926:	83 ec 04             	sub    $0x4,%esp
f0102929:	6a 10                	push   $0x10
f010292b:	6a 00                	push   $0x0
f010292d:	50                   	push   %eax
f010292e:	e8 dc fc 01 00       	call   f012260f <strtol>
f0102933:	83 c4 10             	add    $0x10,%esp
f0102936:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010293b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f010293e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102945:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102948:	83 c0 08             	add    $0x8,%eax
f010294b:	8b 00                	mov    (%eax),%eax
f010294d:	83 ec 0c             	sub    $0xc,%esp
f0102950:	50                   	push   %eax
f0102951:	e8 59 f9 01 00       	call   f01222af <strlen>
f0102956:	83 c4 10             	add    $0x10,%esp
f0102959:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010295c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102963:	eb 1c                	jmp    f0102981 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102965:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102968:	83 c0 08             	add    $0x8,%eax
f010296b:	8b 10                	mov    (%eax),%edx
f010296d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102970:	01 d0                	add    %edx,%eax
f0102972:	8a 00                	mov    (%eax),%al
f0102974:	88 c2                	mov    %al,%dl
f0102976:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102979:	88 10                	mov    %dl,(%eax)
		address++;
f010297b:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010297e:	ff 45 f0             	incl   -0x10(%ebp)
f0102981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102984:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102987:	7c dc                	jl     f0102965 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102989:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010298e:	c9                   	leave  
f010298f:	c3                   	ret    

f0102990 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0102990:	55                   	push   %ebp
f0102991:	89 e5                	mov    %esp,%ebp
f0102993:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102996:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010299a:	75 42                	jne    f01029de <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010299c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299f:	83 c0 04             	add    $0x4,%eax
f01029a2:	8b 00                	mov    (%eax),%eax
f01029a4:	83 ec 04             	sub    $0x4,%esp
f01029a7:	6a 10                	push   $0x10
f01029a9:	6a 00                	push   $0x0
f01029ab:	50                   	push   %eax
f01029ac:	e8 5e fc 01 00       	call   f012260f <strtol>
f01029b1:	83 c4 10             	add    $0x10,%esp
f01029b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01029b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01029ba:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01029bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c0:	8a 00                	mov    (%eax),%al
f01029c2:	0f b6 c0             	movzbl %al,%eax
f01029c5:	83 ec 04             	sub    $0x4,%esp
f01029c8:	50                   	push   %eax
f01029c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01029cc:	68 ee 51 12 f0       	push   $0xf01251ee
f01029d1:	e8 96 e5 ff ff       	call   f0100f6c <cprintf>
f01029d6:	83 c4 10             	add    $0x10,%esp
f01029d9:	e9 c4 00 00 00       	jmp    f0102aa2 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01029de:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01029e2:	0f 85 aa 00 00 00    	jne    f0102a92 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01029e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029eb:	83 c0 04             	add    $0x4,%eax
f01029ee:	8b 00                	mov    (%eax),%eax
f01029f0:	83 ec 04             	sub    $0x4,%esp
f01029f3:	6a 0a                	push   $0xa
f01029f5:	6a 00                	push   $0x0
f01029f7:	50                   	push   %eax
f01029f8:	e8 12 fc 01 00       	call   f012260f <strtol>
f01029fd:	83 c4 10             	add    $0x10,%esp
f0102a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102a03:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102a0a:	83 ec 04             	sub    $0x4,%esp
f0102a0d:	6a 00                	push   $0x0
f0102a0f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102a12:	50                   	push   %eax
f0102a13:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a16:	e8 a5 7d 00 00       	call   f010a7c0 <envid2env>
f0102a1b:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a21:	83 c0 08             	add    $0x8,%eax
f0102a24:	8b 00                	mov    (%eax),%eax
f0102a26:	83 ec 04             	sub    $0x4,%esp
f0102a29:	6a 10                	push   $0x10
f0102a2b:	6a 00                	push   $0x0
f0102a2d:	50                   	push   %eax
f0102a2e:	e8 dc fb 01 00       	call   f012260f <strtol>
f0102a33:	83 c4 10             	add    $0x10,%esp
f0102a36:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a3c:	85 c0                	test   %eax,%eax
f0102a3e:	75 07                	jne    f0102a47 <command_readusermem+0xb7>
f0102a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a45:	eb 60                	jmp    f0102aa7 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102a47:	0f 20 d8             	mov    %cr3,%eax
f0102a4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102a50:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102a53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a56:	8b 40 68             	mov    0x68(%eax),%eax
f0102a59:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102a5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102a5f:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102a65:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0102a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a6b:	8a 00                	mov    (%eax),%al
f0102a6d:	0f b6 c0             	movzbl %al,%eax
f0102a70:	83 ec 04             	sub    $0x4,%esp
f0102a73:	50                   	push   %eax
f0102a74:	ff 75 f0             	pushl  -0x10(%ebp)
f0102a77:	68 ee 51 12 f0       	push   $0xf01251ee
f0102a7c:	e8 eb e4 ff ff       	call   f0100f6c <cprintf>
f0102a81:	83 c4 10             	add    $0x10,%esp
f0102a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a87:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102a8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102a8d:	0f 22 d8             	mov    %eax,%cr3
f0102a90:	eb 10                	jmp    f0102aa2 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102a92:	83 ec 0c             	sub    $0xc,%esp
f0102a95:	68 08 52 12 f0       	push   $0xf0125208
f0102a9a:	e8 cd e4 ff ff       	call   f0100f6c <cprintf>
f0102a9f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102aa2:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102aa7:	c9                   	leave  
f0102aa8:	c3                   	ret    

f0102aa9 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102aa9:	55                   	push   %ebp
f0102aaa:	89 e5                	mov    %esp,%ebp
f0102aac:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab2:	83 c0 04             	add    $0x4,%eax
f0102ab5:	8b 00                	mov    (%eax),%eax
f0102ab7:	83 ec 04             	sub    $0x4,%esp
f0102aba:	6a 10                	push   $0x10
f0102abc:	6a 00                	push   $0x0
f0102abe:	50                   	push   %eax
f0102abf:	e8 4b fb 01 00       	call   f012260f <strtol>
f0102ac4:	83 c4 10             	add    $0x10,%esp
f0102ac7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102acf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ad9:	8a 00                	mov    (%eax),%al
f0102adb:	0f b6 c0             	movzbl %al,%eax
f0102ade:	83 ec 08             	sub    $0x8,%esp
f0102ae1:	50                   	push   %eax
f0102ae2:	68 32 52 12 f0       	push   $0xf0125232
f0102ae7:	e8 80 e4 ff ff       	call   f0100f6c <cprintf>
f0102aec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102aef:	83 ec 0c             	sub    $0xc,%esp
f0102af2:	68 35 52 12 f0       	push   $0xf0125235
f0102af7:	e8 70 e4 ff ff       	call   f0100f6c <cprintf>
f0102afc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b04:	c9                   	leave  
f0102b05:	c3                   	ret    

f0102b06 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102b06:	55                   	push   %ebp
f0102b07:	89 e5                	mov    %esp,%ebp
f0102b09:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 04             	sub    $0x4,%esp
f0102b17:	6a 0a                	push   $0xa
f0102b19:	6a 00                	push   $0x0
f0102b1b:	50                   	push   %eax
f0102b1c:	e8 ee fa 01 00       	call   f012260f <strtol>
f0102b21:	83 c4 10             	add    $0x10,%esp
f0102b24:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102b27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0102b2e:	83 ec 04             	sub    $0x4,%esp
f0102b31:	6a 00                	push   $0x0
f0102b33:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102b36:	50                   	push   %eax
f0102b37:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b3a:	e8 81 7c 00 00       	call   f010a7c0 <envid2env>
f0102b3f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b45:	83 c0 08             	add    $0x8,%eax
f0102b48:	8b 00                	mov    (%eax),%eax
f0102b4a:	83 ec 04             	sub    $0x4,%esp
f0102b4d:	6a 10                	push   $0x10
f0102b4f:	6a 00                	push   $0x0
f0102b51:	50                   	push   %eax
f0102b52:	e8 b8 fa 01 00       	call   f012260f <strtol>
f0102b57:	83 c4 10             	add    $0x10,%esp
f0102b5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0102b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b60:	83 c0 0c             	add    $0xc,%eax
f0102b63:	8b 00                	mov    (%eax),%eax
f0102b65:	83 ec 04             	sub    $0x4,%esp
f0102b68:	6a 0a                	push   $0xa
f0102b6a:	6a 00                	push   $0x0
f0102b6c:	50                   	push   %eax
f0102b6d:	e8 9d fa 01 00       	call   f012260f <strtol>
f0102b72:	83 c4 10             	add    $0x10,%esp
f0102b75:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102b78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0102b7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b81:	85 c0                	test   %eax,%eax
f0102b83:	75 07                	jne    f0102b8c <command_readuserblock+0x86>
f0102b85:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b8a:	eb 65                	jmp    f0102bf1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102b8c:	0f 20 d8             	mov    %cr3,%eax
f0102b8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102b92:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102b95:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102b98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b9b:	8b 40 68             	mov    0x68(%eax),%eax
f0102b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102ba1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102ba4:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0102ba7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102bae:	eb 28                	jmp    f0102bd8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bb3:	8a 00                	mov    (%eax),%al
f0102bb5:	0f b6 d0             	movzbl %al,%edx
f0102bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bbb:	8a 00                	mov    (%eax),%al
f0102bbd:	0f b6 c0             	movzbl %al,%eax
f0102bc0:	52                   	push   %edx
f0102bc1:	50                   	push   %eax
f0102bc2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102bc5:	68 37 52 12 f0       	push   $0xf0125237
f0102bca:	e8 9d e3 ff ff       	call   f0100f6c <cprintf>
f0102bcf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102bd2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102bd5:	ff 45 f0             	incl   -0x10(%ebp)
f0102bd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102bdb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102bde:	7c d0                	jl     f0102bb0 <command_readuserblock+0xaa>
f0102be0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102be3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102be6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102be9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102bec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf1:	c9                   	leave  
f0102bf2:	c3                   	ret    

f0102bf3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102bf3:	55                   	push   %ebp
f0102bf4:	89 e5                	mov    %esp,%ebp
f0102bf6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bfc:	83 c0 04             	add    $0x4,%eax
f0102bff:	8b 00                	mov    (%eax),%eax
f0102c01:	83 ec 04             	sub    $0x4,%esp
f0102c04:	6a 0a                	push   $0xa
f0102c06:	6a 00                	push   $0x0
f0102c08:	50                   	push   %eax
f0102c09:	e8 01 fa 01 00       	call   f012260f <strtol>
f0102c0e:	83 c4 10             	add    $0x10,%esp
f0102c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102c14:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102c1b:	83 ec 04             	sub    $0x4,%esp
f0102c1e:	6a 00                	push   $0x0
f0102c20:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102c23:	50                   	push   %eax
f0102c24:	ff 75 f4             	pushl  -0xc(%ebp)
f0102c27:	e8 94 7b 00 00       	call   f010a7c0 <envid2env>
f0102c2c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102c2f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c32:	85 c0                	test   %eax,%eax
f0102c34:	75 0a                	jne    f0102c40 <command_remove_table+0x4d>
f0102c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c3b:	e9 a1 00 00 00       	jmp    f0102ce1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102c40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c43:	83 c0 08             	add    $0x8,%eax
f0102c46:	8b 00                	mov    (%eax),%eax
f0102c48:	83 ec 04             	sub    $0x4,%esp
f0102c4b:	6a 10                	push   $0x10
f0102c4d:	6a 00                	push   $0x0
f0102c4f:	50                   	push   %eax
f0102c50:	e8 ba f9 01 00       	call   f012260f <strtol>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102c61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c64:	8b 40 64             	mov    0x64(%eax),%eax
f0102c67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c6a:	c1 ea 16             	shr    $0x16,%edx
f0102c6d:	c1 e2 02             	shl    $0x2,%edx
f0102c70:	01 d0                	add    %edx,%eax
f0102c72:	8b 00                	mov    (%eax),%eax
f0102c74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c79:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102c7c:	83 ec 0c             	sub    $0xc,%esp
f0102c7f:	ff 75 e8             	pushl  -0x18(%ebp)
f0102c82:	e8 c8 f9 ff ff       	call   f010264f <to_frame_info>
f0102c87:	83 c4 10             	add    $0x10,%esp
f0102c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102c90:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102c96:	83 ec 0c             	sub    $0xc,%esp
f0102c99:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102c9c:	e8 83 56 00 00       	call   f0108324 <free_frame>
f0102ca1:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102ca4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ca7:	c1 e8 16             	shr    $0x16,%eax
f0102caa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102cad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cb0:	8b 40 64             	mov    0x64(%eax),%eax
f0102cb3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102cb6:	c1 e2 02             	shl    $0x2,%edx
f0102cb9:	01 c2                	add    %eax,%edx
f0102cbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cbe:	8b 40 64             	mov    0x64(%eax),%eax
f0102cc1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102cc4:	c1 e1 02             	shl    $0x2,%ecx
f0102cc7:	01 c8                	add    %ecx,%eax
f0102cc9:	8b 00                	mov    (%eax),%eax
f0102ccb:	83 e0 fe             	and    $0xfffffffe,%eax
f0102cce:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102cd0:	0f 20 d8             	mov    %cr3,%eax
f0102cd3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102cd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102cd9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ce1:	c9                   	leave  
f0102ce2:	c3                   	ret    

f0102ce3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102ce3:	55                   	push   %ebp
f0102ce4:	89 e5                	mov    %esp,%ebp
f0102ce6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102ce9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ced:	7e 06                	jle    f0102cf5 <command_allocuserpage+0x12>
f0102cef:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102cf3:	7e 1a                	jle    f0102d0f <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102cf5:	83 ec 0c             	sub    $0xc,%esp
f0102cf8:	68 48 52 12 f0       	push   $0xf0125248
f0102cfd:	e8 6a e2 ff ff       	call   f0100f6c <cprintf>
f0102d02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d0a:	e9 46 01 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d12:	83 c0 04             	add    $0x4,%eax
f0102d15:	8b 00                	mov    (%eax),%eax
f0102d17:	83 ec 04             	sub    $0x4,%esp
f0102d1a:	6a 0a                	push   $0xa
f0102d1c:	6a 00                	push   $0x0
f0102d1e:	50                   	push   %eax
f0102d1f:	e8 eb f8 01 00       	call   f012260f <strtol>
f0102d24:	83 c4 10             	add    $0x10,%esp
f0102d27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102d2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102d31:	83 ec 04             	sub    $0x4,%esp
f0102d34:	6a 00                	push   $0x0
f0102d36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102d39:	50                   	push   %eax
f0102d3a:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d3d:	e8 7e 7a 00 00       	call   f010a7c0 <envid2env>
f0102d42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102d45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102d48:	85 c0                	test   %eax,%eax
f0102d4a:	75 0a                	jne    f0102d56 <command_allocuserpage+0x73>
f0102d4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d51:	e9 ff 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102d56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d59:	83 c0 08             	add    $0x8,%eax
f0102d5c:	8b 00                	mov    (%eax),%eax
f0102d5e:	83 ec 04             	sub    $0x4,%esp
f0102d61:	6a 10                	push   $0x10
f0102d63:	6a 00                	push   $0x0
f0102d65:	50                   	push   %eax
f0102d66:	e8 a4 f8 01 00       	call   f012260f <strtol>
f0102d6b:	83 c4 10             	add    $0x10,%esp
f0102d6e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102d71:	83 ec 0c             	sub    $0xc,%esp
f0102d74:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102d77:	50                   	push   %eax
f0102d78:	e8 53 54 00 00       	call   f01081d0 <allocate_frame>
f0102d7d:	83 c4 10             	add    $0x10,%esp
f0102d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102d83:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102d87:	75 1a                	jne    f0102da3 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102d89:	83 ec 0c             	sub    $0xc,%esp
f0102d8c:	68 72 52 12 f0       	push   $0xf0125272
f0102d91:	e8 d6 e1 ff ff       	call   f0100f6c <cprintf>
f0102d96:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d99:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d9e:	e9 b2 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0102da3:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da7:	75 1d                	jne    f0102dc6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102da9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102daf:	8b 40 64             	mov    0x64(%eax),%eax
f0102db2:	6a 06                	push   $0x6
f0102db4:	ff 75 ec             	pushl  -0x14(%ebp)
f0102db7:	52                   	push   %edx
f0102db8:	50                   	push   %eax
f0102db9:	e8 28 58 00 00       	call   f01085e6 <map_frame>
f0102dbe:	83 c4 10             	add    $0x10,%esp
f0102dc1:	e9 8a 00 00 00       	jmp    f0102e50 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0102dc6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102dca:	0f 85 80 00 00 00    	jne    f0102e50 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102dd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd3:	83 c0 0c             	add    $0xc,%eax
f0102dd6:	8b 00                	mov    (%eax),%eax
f0102dd8:	8a 00                	mov    (%eax),%al
f0102dda:	3c 72                	cmp    $0x72,%al
f0102ddc:	74 0e                	je     f0102dec <command_allocuserpage+0x109>
f0102dde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de1:	83 c0 0c             	add    $0xc,%eax
f0102de4:	8b 00                	mov    (%eax),%eax
f0102de6:	8a 00                	mov    (%eax),%al
f0102de8:	3c 52                	cmp    $0x52,%al
f0102dea:	75 09                	jne    f0102df5 <command_allocuserpage+0x112>
			rw = 0 ;
f0102dec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102df3:	eb 3c                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102df5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df8:	83 c0 0c             	add    $0xc,%eax
f0102dfb:	8b 00                	mov    (%eax),%eax
f0102dfd:	8a 00                	mov    (%eax),%al
f0102dff:	3c 77                	cmp    $0x77,%al
f0102e01:	74 0e                	je     f0102e11 <command_allocuserpage+0x12e>
f0102e03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e06:	83 c0 0c             	add    $0xc,%eax
f0102e09:	8b 00                	mov    (%eax),%eax
f0102e0b:	8a 00                	mov    (%eax),%al
f0102e0d:	3c 57                	cmp    $0x57,%al
f0102e0f:	75 09                	jne    f0102e1a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0102e11:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102e18:	eb 17                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102e1a:	83 ec 0c             	sub    $0xc,%esp
f0102e1d:	68 8c 52 12 f0       	push   $0xf012528c
f0102e22:	e8 45 e1 ff ff       	call   f0100f6c <cprintf>
f0102e27:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102e2a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e34:	83 c8 04             	or     $0x4,%eax
f0102e37:	89 c1                	mov    %eax,%ecx
f0102e39:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102e3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102e3f:	8b 40 64             	mov    0x64(%eax),%eax
f0102e42:	51                   	push   %ecx
f0102e43:	ff 75 ec             	pushl  -0x14(%ebp)
f0102e46:	52                   	push   %edx
f0102e47:	50                   	push   %eax
f0102e48:	e8 99 57 00 00       	call   f01085e6 <map_frame>
f0102e4d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e55:	c9                   	leave  
f0102e56:	c3                   	ret    

f0102e57 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102e57:	55                   	push   %ebp
f0102e58:	89 e5                	mov    %esp,%ebp
f0102e5a:	56                   	push   %esi
f0102e5b:	53                   	push   %ebx
f0102e5c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102e5f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102e62:	83 ec 0c             	sub    $0xc,%esp
f0102e65:	50                   	push   %eax
f0102e66:	e8 33 5a 00 00       	call   f010889e <calculate_available_frames>
f0102e6b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102e71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102e74:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102e77:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102e7a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102e7d:	01 de                	add    %ebx,%esi
f0102e7f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e82:	01 f3                	add    %esi,%ebx
f0102e84:	83 ec 0c             	sub    $0xc,%esp
f0102e87:	51                   	push   %ecx
f0102e88:	52                   	push   %edx
f0102e89:	50                   	push   %eax
f0102e8a:	53                   	push   %ebx
f0102e8b:	68 d0 52 12 f0       	push   $0xf01252d0
f0102e90:	e8 d7 e0 ff ff       	call   f0100f6c <cprintf>
f0102e95:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102e98:	a1 d0 90 55 f0       	mov    0xf05590d0,%eax
f0102e9d:	83 ec 08             	sub    $0x8,%esp
f0102ea0:	50                   	push   %eax
f0102ea1:	68 28 53 12 f0       	push   $0xf0125328
f0102ea6:	e8 c1 e0 ff ff       	call   f0100f6c <cprintf>
f0102eab:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102eb6:	5b                   	pop    %ebx
f0102eb7:	5e                   	pop    %esi
f0102eb8:	5d                   	pop    %ebp
f0102eb9:	c3                   	ret    

f0102eba <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102eba:	55                   	push   %ebp
f0102ebb:	89 e5                	mov    %esp,%ebp
f0102ebd:	83 ec 28             	sub    $0x28,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102ec0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102ece:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int BSDSchedNiceVal = -100;				//arg#5 default
f0102ed5:	c7 45 e8 9c ff ff ff 	movl   $0xffffff9c,-0x18(%ebp)
//			assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
//		}
	}
#else
	{
		switch (number_of_arguments)
f0102edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0102edf:	83 f8 02             	cmp    $0x2,%eax
f0102ee2:	74 3c                	je     f0102f20 <CreateEnv+0x66>
f0102ee4:	83 f8 03             	cmp    $0x3,%eax
f0102ee7:	75 1d                	jne    f0102f06 <CreateEnv+0x4c>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eec:	83 c0 08             	add    $0x8,%eax
f0102eef:	8b 00                	mov    (%eax),%eax
f0102ef1:	83 ec 04             	sub    $0x4,%esp
f0102ef4:	6a 0a                	push   $0xa
f0102ef6:	6a 00                	push   $0x0
f0102ef8:	50                   	push   %eax
f0102ef9:	e8 11 f7 01 00       	call   f012260f <strtol>
f0102efe:	83 c4 10             	add    $0x10,%esp
f0102f01:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102f04:	eb 1b                	jmp    f0102f21 <CreateEnv+0x67>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102f06:	83 ec 0c             	sub    $0xc,%esp
f0102f09:	68 64 53 12 f0       	push   $0xf0125364
f0102f0e:	e8 59 e0 ff ff       	call   f0100f6c <cprintf>
f0102f13:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102f16:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f1b:	e9 a7 00 00 00       	jmp    f0102fc7 <CreateEnv+0x10d>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102f20:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102f21:	83 ec 0c             	sub    $0xc,%esp
f0102f24:	6a 02                	push   $0x2
f0102f26:	e8 9b b7 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0102f2b:	83 c4 10             	add    $0x10,%esp
f0102f2e:	85 c0                	test   %eax,%eax
f0102f30:	74 07                	je     f0102f39 <CreateEnv+0x7f>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102f32:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102f39:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102f3d:	76 19                	jbe    f0102f58 <CreateEnv+0x9e>
f0102f3f:	68 d4 53 12 f0       	push   $0xf01253d4
f0102f44:	68 19 54 12 f0       	push   $0xf0125419
f0102f49:	68 c0 01 00 00       	push   $0x1c0
f0102f4e:	68 2e 54 12 f0       	push   $0xf012542e
f0102f53:	e8 c2 d3 ff ff       	call   f010031a <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f5b:	83 c0 04             	add    $0x4,%eax
f0102f5e:	8b 00                	mov    (%eax),%eax
f0102f60:	ff 75 f0             	pushl  -0x10(%ebp)
f0102f63:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f66:	ff 75 ec             	pushl  -0x14(%ebp)
f0102f69:	50                   	push   %eax
f0102f6a:	e8 01 6b 00 00       	call   f0109a70 <env_create>
f0102f6f:	83 c4 10             	add    $0x10,%esp
f0102f72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (BSDSchedNiceVal != -100)
f0102f75:	83 7d e8 9c          	cmpl   $0xffffff9c,-0x18(%ebp)
f0102f79:	74 49                	je     f0102fc4 <CreateEnv+0x10a>
	{
		cprintf("nice value = %d\n", BSDSchedNiceVal);
f0102f7b:	83 ec 08             	sub    $0x8,%esp
f0102f7e:	ff 75 e8             	pushl  -0x18(%ebp)
f0102f81:	68 42 54 12 f0       	push   $0xf0125442
f0102f86:	e8 e1 df ff ff       	call   f0100f6c <cprintf>
f0102f8b:	83 c4 10             	add    $0x10,%esp
		assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
f0102f8e:	83 7d e8 ec          	cmpl   $0xffffffec,-0x18(%ebp)
f0102f92:	7c 06                	jl     f0102f9a <CreateEnv+0xe0>
f0102f94:	83 7d e8 14          	cmpl   $0x14,-0x18(%ebp)
f0102f98:	7e 19                	jle    f0102fb3 <CreateEnv+0xf9>
f0102f9a:	68 54 54 12 f0       	push   $0xf0125454
f0102f9f:	68 19 54 12 f0       	push   $0xf0125419
f0102fa4:	68 c5 01 00 00       	push   $0x1c5
f0102fa9:	68 2e 54 12 f0       	push   $0xf012542e
f0102fae:	e8 67 d3 ff ff       	call   f010031a <_panic>
		env_set_nice(env, BSDSchedNiceVal);
f0102fb3:	83 ec 08             	sub    $0x8,%esp
f0102fb6:	ff 75 e8             	pushl  -0x18(%ebp)
f0102fb9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102fbc:	e8 e6 36 00 00       	call   f01066a7 <env_set_nice>
f0102fc1:	83 c4 10             	add    $0x10,%esp
	}
	return env;
f0102fc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0102fc7:	c9                   	leave  
f0102fc8:	c3                   	ret    

f0102fc9 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102fc9:	55                   	push   %ebp
f0102fca:	89 e5                	mov    %esp,%ebp
f0102fcc:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102fcf:	83 ec 08             	sub    $0x8,%esp
f0102fd2:	ff 75 0c             	pushl  0xc(%ebp)
f0102fd5:	ff 75 08             	pushl  0x8(%ebp)
f0102fd8:	e8 dd fe ff ff       	call   f0102eba <CreateEnv>
f0102fdd:	83 c4 10             	add    $0x10,%esp
f0102fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102fe3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe7:	75 07                	jne    f0102ff0 <command_run_program+0x27>
f0102fe9:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fee:	eb 46                	jmp    f0103036 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ff3:	8b 40 10             	mov    0x10(%eax),%eax
f0102ff6:	83 ec 08             	sub    $0x8,%esp
f0102ff9:	50                   	push   %eax
f0102ffa:	68 84 54 12 f0       	push   $0xf0125484
f0102fff:	e8 68 df ff ff       	call   f0100f6c <cprintf>
f0103004:	83 c4 10             	add    $0x10,%esp

	//[2] Place it in the NEW queue
	sched_new_env(env);
f0103007:	83 ec 0c             	sub    $0xc,%esp
f010300a:	ff 75 f4             	pushl  -0xc(%ebp)
f010300d:	e8 93 26 00 00       	call   f01056a5 <sched_new_env>
f0103012:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0103015:	c7 05 d0 90 55 f0 00 	movl   $0x0,0xf05590d0
f010301c:	00 00 00 

	//[3] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_run_env(env->env_id);
f010301f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103022:	8b 40 10             	mov    0x10(%eax),%eax
f0103025:	83 ec 0c             	sub    $0xc,%esp
f0103028:	50                   	push   %eax
f0103029:	e8 cd 26 00 00       	call   f01056fb <sched_run_env>
f010302e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103031:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103036:	c9                   	leave  
f0103037:	c3                   	ret    

f0103038 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0103038:	55                   	push   %ebp
f0103039:	89 e5                	mov    %esp,%ebp
f010303b:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010303e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103041:	83 c0 04             	add    $0x4,%eax
f0103044:	8b 00                	mov    (%eax),%eax
f0103046:	83 ec 04             	sub    $0x4,%esp
f0103049:	6a 0a                	push   $0xa
f010304b:	6a 00                	push   $0x0
f010304d:	50                   	push   %eax
f010304e:	e8 bc f5 01 00       	call   f012260f <strtol>
f0103053:	83 c4 10             	add    $0x10,%esp
f0103056:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0103059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010305c:	83 ec 0c             	sub    $0xc,%esp
f010305f:	50                   	push   %eax
f0103060:	e8 fe 29 00 00       	call   f0105a63 <sched_kill_env>
f0103065:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103068:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010306d:	c9                   	leave  
f010306e:	c3                   	ret    

f010306f <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010306f:	55                   	push   %ebp
f0103070:	89 e5                	mov    %esp,%ebp
f0103072:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0103075:	83 ec 08             	sub    $0x8,%esp
f0103078:	ff 75 0c             	pushl  0xc(%ebp)
f010307b:	ff 75 08             	pushl  0x8(%ebp)
f010307e:	e8 37 fe ff ff       	call   f0102eba <CreateEnv>
f0103083:	83 c4 10             	add    $0x10,%esp
f0103086:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0103089:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010308d:	75 07                	jne    f0103096 <commnad_load_env+0x27>
		return 0 ;
f010308f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103094:	eb 2a                	jmp    f01030c0 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0103096:	83 ec 0c             	sub    $0xc,%esp
f0103099:	ff 75 f4             	pushl  -0xc(%ebp)
f010309c:	e8 04 26 00 00       	call   f01056a5 <sched_new_env>
f01030a1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01030a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030a7:	8b 40 10             	mov    0x10(%eax),%eax
f01030aa:	83 ec 08             	sub    $0x8,%esp
f01030ad:	50                   	push   %eax
f01030ae:	68 84 54 12 f0       	push   $0xf0125484
f01030b3:	e8 b4 de ff ff       	call   f0100f6c <cprintf>
f01030b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c0:	c9                   	leave  
f01030c1:	c3                   	ret    

f01030c2 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f01030c2:	55                   	push   %ebp
f01030c3:	89 e5                	mov    %esp,%ebp
f01030c5:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f01030c8:	c7 05 d0 90 55 f0 00 	movl   $0x0,0xf05590d0
f01030cf:	00 00 00 
	sched_run_all();
f01030d2:	e8 7b 2f 00 00       	call   f0106052 <sched_run_all>

	return 0 ;
f01030d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030dc:	c9                   	leave  
f01030dd:	c3                   	ret    

f01030de <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f01030de:	55                   	push   %ebp
f01030df:	89 e5                	mov    %esp,%ebp
f01030e1:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f01030e4:	e8 38 2d 00 00       	call   f0105e21 <sched_print_all>

	return 0 ;
f01030e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030ee:	c9                   	leave  
f01030ef:	c3                   	ret    

f01030f0 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f01030f0:	55                   	push   %ebp
f01030f1:	89 e5                	mov    %esp,%ebp
f01030f3:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f01030f6:	e8 ec 2f 00 00       	call   f01060e7 <sched_kill_all>

	return 0 ;
f01030fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103100:	c9                   	leave  
f0103101:	c3                   	ret    

f0103102 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0103102:	55                   	push   %ebp
f0103103:	89 e5                	mov    %esp,%ebp
f0103105:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0103108:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010310c:	7f 1a                	jg     f0103128 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010310e:	83 ec 0c             	sub    $0xc,%esp
f0103111:	68 9c 54 12 f0       	push   $0xf012549c
f0103116:	e8 51 de ff ff       	call   f0100f6c <cprintf>
f010311b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010311e:	b8 00 00 00 00       	mov    $0x0,%eax
f0103123:	e9 83 00 00 00       	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0103128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010312b:	83 c0 04             	add    $0x4,%eax
f010312e:	8b 00                	mov    (%eax),%eax
f0103130:	83 ec 04             	sub    $0x4,%esp
f0103133:	6a 0a                	push   $0xa
f0103135:	6a 00                	push   $0x0
f0103137:	50                   	push   %eax
f0103138:	e8 d2 f4 01 00       	call   f012260f <strtol>
f010313d:	83 c4 10             	add    $0x10,%esp
f0103140:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0103143:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103147:	75 20                	jne    f0103169 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0103149:	83 ec 0c             	sub    $0xc,%esp
f010314c:	ff 75 f4             	pushl  -0xc(%ebp)
f010314f:	e8 e7 b4 00 00       	call   f010e63b <setPageReplacmentAlgorithmLRU>
f0103154:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0103157:	83 ec 0c             	sub    $0xc,%esp
f010315a:	68 fc 54 12 f0       	push   $0xf01254fc
f010315f:	e8 08 de ff ff       	call   f0100f6c <cprintf>
f0103164:	83 c4 10             	add    $0x10,%esp
f0103167:	eb 3d                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0103169:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010316d:	75 20                	jne    f010318f <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f010316f:	83 ec 0c             	sub    $0xc,%esp
f0103172:	ff 75 f4             	pushl  -0xc(%ebp)
f0103175:	e8 c1 b4 00 00       	call   f010e63b <setPageReplacmentAlgorithmLRU>
f010317a:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f010317d:	83 ec 0c             	sub    $0xc,%esp
f0103180:	68 40 55 12 f0       	push   $0xf0125540
f0103185:	e8 e2 dd ff ff       	call   f0100f6c <cprintf>
f010318a:	83 c4 10             	add    $0x10,%esp
f010318d:	eb 17                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010318f:	83 ec 0c             	sub    $0xc,%esp
f0103192:	68 80 55 12 f0       	push   $0xf0125580
f0103197:	e8 d0 dd ff ff       	call   f0100f6c <cprintf>
f010319c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010319f:	b8 00 00 00 00       	mov    $0x0,%eax
f01031a4:	eb 05                	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f01031a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031ab:	c9                   	leave  
f01031ac:	c3                   	ret    

f01031ad <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f01031ad:	55                   	push   %ebp
f01031ae:	89 e5                	mov    %esp,%ebp
f01031b0:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f01031b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031b6:	83 c0 04             	add    $0x4,%eax
f01031b9:	8b 00                	mov    (%eax),%eax
f01031bb:	83 ec 04             	sub    $0x4,%esp
f01031be:	6a 0a                	push   $0xa
f01031c0:	6a 00                	push   $0x0
f01031c2:	50                   	push   %eax
f01031c3:	e8 47 f4 01 00       	call   f012260f <strtol>
f01031c8:	83 c4 10             	add    $0x10,%esp
f01031cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f01031ce:	83 ec 0c             	sub    $0xc,%esp
f01031d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01031d4:	e8 d5 b4 00 00       	call   f010e6ae <setPageReplacmentAlgorithmNchanceCLOCK>
f01031d9:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f01031dc:	83 ec 0c             	sub    $0xc,%esp
f01031df:	68 d4 55 12 f0       	push   $0xf01255d4
f01031e4:	e8 83 dd ff ff       	call   f0100f6c <cprintf>
f01031e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01031ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031f1:	c9                   	leave  
f01031f2:	c3                   	ret    

f01031f3 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f01031f3:	55                   	push   %ebp
f01031f4:	89 e5                	mov    %esp,%ebp
f01031f6:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f01031f9:	e8 70 b4 00 00       	call   f010e66e <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f01031fe:	83 ec 0c             	sub    $0xc,%esp
f0103201:	68 08 56 12 f0       	push   $0xf0125608
f0103206:	e8 61 dd ff ff       	call   f0100f6c <cprintf>
f010320b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010320e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103213:	c9                   	leave  
f0103214:	c3                   	ret    

f0103215 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0103215:	55                   	push   %ebp
f0103216:	89 e5                	mov    %esp,%ebp
f0103218:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f010321b:	e8 5e b4 00 00       	call   f010e67e <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0103220:	83 ec 0c             	sub    $0xc,%esp
f0103223:	68 34 56 12 f0       	push   $0xf0125634
f0103228:	e8 3f dd ff ff       	call   f0100f6c <cprintf>
f010322d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103230:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103235:	c9                   	leave  
f0103236:	c3                   	ret    

f0103237 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0103237:	55                   	push   %ebp
f0103238:	89 e5                	mov    %esp,%ebp
f010323a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f010323d:	e8 4c b4 00 00       	call   f010e68e <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	68 5c 56 12 f0       	push   $0xf012565c
f010324a:	e8 1d dd ff ff       	call   f0100f6c <cprintf>
f010324f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103252:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103257:	c9                   	leave  
f0103258:	c3                   	ret    

f0103259 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0103259:	55                   	push   %ebp
f010325a:	89 e5                	mov    %esp,%ebp
f010325c:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f010325f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103262:	83 c0 04             	add    $0x4,%eax
f0103265:	8b 00                	mov    (%eax),%eax
f0103267:	83 ec 04             	sub    $0x4,%esp
f010326a:	6a 0a                	push   $0xa
f010326c:	6a 00                	push   $0x0
f010326e:	50                   	push   %eax
f010326f:	e8 9b f3 01 00       	call   f012260f <strtol>
f0103274:	83 c4 10             	add    $0x10,%esp
f0103277:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f010327a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010327e:	83 ec 0c             	sub    $0xc,%esp
f0103281:	50                   	push   %eax
f0103282:	e8 4e 37 00 00       	call   f01069d5 <sched_init_RR>
f0103287:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f010328a:	a0 e4 8d 55 f0       	mov    0xf0558de4,%al
f010328f:	0f b6 c0             	movzbl %al,%eax
f0103292:	83 ec 08             	sub    $0x8,%esp
f0103295:	50                   	push   %eax
f0103296:	68 90 56 12 f0       	push   $0xf0125690
f010329b:	e8 cc dc ff ff       	call   f0100f6c <cprintf>
f01032a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01032a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01032a8:	c9                   	leave  
f01032a9:	c3                   	ret    

f01032aa <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f01032aa:	55                   	push   %ebp
f01032ab:	89 e5                	mov    %esp,%ebp
f01032ad:	53                   	push   %ebx
f01032ae:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01032b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032b4:	83 c0 04             	add    $0x4,%eax
f01032b7:	8b 00                	mov    (%eax),%eax
f01032b9:	83 ec 04             	sub    $0x4,%esp
f01032bc:	6a 0a                	push   $0xa
f01032be:	6a 00                	push   $0x0
f01032c0:	50                   	push   %eax
f01032c1:	e8 49 f3 01 00       	call   f012260f <strtol>
f01032c6:	83 c4 10             	add    $0x10,%esp
f01032c9:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01032cc:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01032d3:	eb 2e                	jmp    f0103303 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8d 58 fe             	lea    -0x2(%eax),%ebx
f01032db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032e8:	01 d0                	add    %edx,%eax
f01032ea:	8b 00                	mov    (%eax),%eax
f01032ec:	83 ec 04             	sub    $0x4,%esp
f01032ef:	6a 0a                	push   $0xa
f01032f1:	6a 00                	push   $0x0
f01032f3:	50                   	push   %eax
f01032f4:	e8 16 f3 01 00       	call   f012260f <strtol>
f01032f9:	83 c4 10             	add    $0x10,%esp
f01032fc:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103300:	ff 45 f4             	incl   -0xc(%ebp)
f0103303:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103306:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103309:	7c ca                	jl     f01032d5 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010330b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0103315:	52                   	push   %edx
f0103316:	50                   	push   %eax
f0103317:	e8 32 37 00 00       	call   f0106a4e <sched_init_MLFQ>
f010331c:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010331f:	83 ec 0c             	sub    $0xc,%esp
f0103322:	68 c8 56 12 f0       	push   $0xf01256c8
f0103327:	e8 40 dc ff ff       	call   f0100f6c <cprintf>
f010332c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010332f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103336:	eb 21                	jmp    f0103359 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103338:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010333b:	05 e4 8d 55 f0       	add    $0xf0558de4,%eax
f0103340:	8a 00                	mov    (%eax),%al
f0103342:	0f b6 c0             	movzbl %al,%eax
f0103345:	83 ec 08             	sub    $0x8,%esp
f0103348:	50                   	push   %eax
f0103349:	68 f5 56 12 f0       	push   $0xf01256f5
f010334e:	e8 19 dc ff ff       	call   f0100f6c <cprintf>
f0103353:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103356:	ff 45 f0             	incl   -0x10(%ebp)
f0103359:	a0 60 91 55 f0       	mov    0xf0559160,%al
f010335e:	0f b6 c0             	movzbl %al,%eax
f0103361:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0103364:	7f d2                	jg     f0103338 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103366:	83 ec 0c             	sub    $0xc,%esp
f0103369:	68 35 52 12 f0       	push   $0xf0125235
f010336e:	e8 f9 db ff ff       	call   f0100f6c <cprintf>
f0103373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010337e:	c9                   	leave  
f010337f:	c3                   	ret    

f0103380 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f0103380:	55                   	push   %ebp
f0103381:	89 e5                	mov    %esp,%ebp
f0103383:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103386:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103389:	83 c0 04             	add    $0x4,%eax
f010338c:	8b 00                	mov    (%eax),%eax
f010338e:	83 ec 04             	sub    $0x4,%esp
f0103391:	6a 0a                	push   $0xa
f0103393:	6a 00                	push   $0x0
f0103395:	50                   	push   %eax
f0103396:	e8 74 f2 01 00       	call   f012260f <strtol>
f010339b:	83 c4 10             	add    $0x10,%esp
f010339e:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01033a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a4:	83 c0 08             	add    $0x8,%eax
f01033a7:	8b 00                	mov    (%eax),%eax
f01033a9:	83 ec 04             	sub    $0x4,%esp
f01033ac:	6a 0a                	push   $0xa
f01033ae:	6a 00                	push   $0x0
f01033b0:	50                   	push   %eax
f01033b1:	e8 59 f2 01 00       	call   f012260f <strtol>
f01033b6:	83 c4 10             	add    $0x10,%esp
f01033b9:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01033bc:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033c0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033c4:	83 ec 08             	sub    $0x8,%esp
f01033c7:	52                   	push   %edx
f01033c8:	50                   	push   %eax
f01033c9:	e8 a8 36 00 00       	call   f0106a76 <sched_init_BSD>
f01033ce:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01033d1:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033d5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033d9:	83 ec 04             	sub    $0x4,%esp
f01033dc:	52                   	push   %edx
f01033dd:	50                   	push   %eax
f01033de:	68 fc 56 12 f0       	push   $0xf01256fc
f01033e3:	e8 84 db ff ff       	call   f0100f6c <cprintf>
f01033e8:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01033eb:	83 ec 0c             	sub    $0xc,%esp
f01033ee:	68 35 52 12 f0       	push   $0xf0125235
f01033f3:	e8 74 db ff ff       	call   f0100f6c <cprintf>
f01033f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103400:	c9                   	leave  
f0103401:	c3                   	ret    

f0103402 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0103402:	55                   	push   %ebp
f0103403:	89 e5                	mov    %esp,%ebp
f0103405:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103408:	e8 0b 33 00 00       	call   f0106718 <isSchedMethodMLFQ>
f010340d:	85 c0                	test   %eax,%eax
f010340f:	74 59                	je     f010346a <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0103411:	83 ec 0c             	sub    $0xc,%esp
f0103414:	68 38 57 12 f0       	push   $0xf0125738
f0103419:	e8 4e db ff ff       	call   f0100f6c <cprintf>
f010341e:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103428:	eb 21                	jmp    f010344b <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f010342a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010342d:	05 e4 8d 55 f0       	add    $0xf0558de4,%eax
f0103432:	8a 00                	mov    (%eax),%al
f0103434:	0f b6 c0             	movzbl %al,%eax
f0103437:	83 ec 08             	sub    $0x8,%esp
f010343a:	50                   	push   %eax
f010343b:	68 f5 56 12 f0       	push   $0xf01256f5
f0103440:	e8 27 db ff ff       	call   f0100f6c <cprintf>
f0103445:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103448:	ff 45 f4             	incl   -0xc(%ebp)
f010344b:	a0 60 91 55 f0       	mov    0xf0559160,%al
f0103450:	0f b6 c0             	movzbl %al,%eax
f0103453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103456:	7f d2                	jg     f010342a <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103458:	83 ec 0c             	sub    $0xc,%esp
f010345b:	68 35 52 12 f0       	push   $0xf0125235
f0103460:	e8 07 db ff ff       	call   f0100f6c <cprintf>
f0103465:	83 c4 10             	add    $0x10,%esp
f0103468:	eb 61                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f010346a:	e8 8f 32 00 00       	call   f01066fe <isSchedMethodRR>
f010346f:	85 c0                	test   %eax,%eax
f0103471:	74 1b                	je     f010348e <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0103473:	a0 e4 8d 55 f0       	mov    0xf0558de4,%al
f0103478:	0f b6 c0             	movzbl %al,%eax
f010347b:	83 ec 08             	sub    $0x8,%esp
f010347e:	50                   	push   %eax
f010347f:	68 6c 57 12 f0       	push   $0xf012576c
f0103484:	e8 e3 da ff ff       	call   f0100f6c <cprintf>
f0103489:	83 c4 10             	add    $0x10,%esp
f010348c:	eb 3d                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f010348e:	e8 a0 32 00 00       	call   f0106733 <isSchedMethodBSD>
f0103493:	85 c0                	test   %eax,%eax
f0103495:	74 24                	je     f01034bb <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0103497:	a0 e4 8d 55 f0       	mov    0xf0558de4,%al
f010349c:	0f b6 d0             	movzbl %al,%edx
f010349f:	a0 60 91 55 f0       	mov    0xf0559160,%al
f01034a4:	0f b6 c0             	movzbl %al,%eax
f01034a7:	83 ec 04             	sub    $0x4,%esp
f01034aa:	52                   	push   %edx
f01034ab:	50                   	push   %eax
f01034ac:	68 fc 56 12 f0       	push   $0xf01256fc
f01034b1:	e8 b6 da ff ff       	call   f0100f6c <cprintf>
f01034b6:	83 c4 10             	add    $0x10,%esp
f01034b9:	eb 10                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01034bb:	83 ec 0c             	sub    $0xc,%esp
f01034be:	68 a8 57 12 f0       	push   $0xf01257a8
f01034c3:	e8 a4 da ff ff       	call   f0100f6c <cprintf>
f01034c8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01034cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d0:	c9                   	leave  
f01034d1:	c3                   	ret    

f01034d2 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01034d2:	55                   	push   %ebp
f01034d3:	89 e5                	mov    %esp,%ebp
f01034d5:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01034d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034db:	83 c0 04             	add    $0x4,%eax
f01034de:	8b 00                	mov    (%eax),%eax
f01034e0:	83 ec 04             	sub    $0x4,%esp
f01034e3:	6a 0a                	push   $0xa
f01034e5:	6a 00                	push   $0x0
f01034e7:	50                   	push   %eax
f01034e8:	e8 22 f1 01 00       	call   f012260f <strtol>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01034f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f6:	0f b6 c0             	movzbl %al,%eax
f01034f9:	83 ec 0c             	sub    $0xc,%esp
f01034fc:	50                   	push   %eax
f01034fd:	e8 0a df 01 00       	call   f012140c <chksch>
f0103502:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0103505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103509:	75 12                	jne    f010351d <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010350b:	83 ec 0c             	sub    $0xc,%esp
f010350e:	68 d0 57 12 f0       	push   $0xf01257d0
f0103513:	e8 54 da ff ff       	call   f0100f6c <cprintf>
f0103518:	83 c4 10             	add    $0x10,%esp
f010351b:	eb 16                	jmp    f0103533 <command_sch_test+0x61>
	else if (status == 1)
f010351d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103521:	75 10                	jne    f0103533 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0103523:	83 ec 0c             	sub    $0xc,%esp
f0103526:	68 f8 57 12 f0       	push   $0xf01257f8
f010352b:	e8 3c da ff ff       	call   f0100f6c <cprintf>
f0103530:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103533:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103538:	c9                   	leave  
f0103539:	c3                   	ret    

f010353a <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010353a:	55                   	push   %ebp
f010353b:	89 e5                	mov    %esp,%ebp
f010353d:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103540:	e8 97 b1 00 00       	call   f010e6dc <isPageReplacmentAlgorithmCLOCK>
f0103545:	85 c0                	test   %eax,%eax
f0103547:	74 15                	je     f010355e <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103549:	83 ec 0c             	sub    $0xc,%esp
f010354c:	68 1c 58 12 f0       	push   $0xf012581c
f0103551:	e8 16 da ff ff       	call   f0100f6c <cprintf>
f0103556:	83 c4 10             	add    $0x10,%esp
f0103559:	e9 8c 00 00 00       	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010355e:	83 ec 0c             	sub    $0xc,%esp
f0103561:	6a 01                	push   $0x1
f0103563:	e8 5e b1 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0103568:	83 c4 10             	add    $0x10,%esp
f010356b:	85 c0                	test   %eax,%eax
f010356d:	74 12                	je     f0103581 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010356f:	83 ec 0c             	sub    $0xc,%esp
f0103572:	68 44 58 12 f0       	push   $0xf0125844
f0103577:	e8 f0 d9 ff ff       	call   f0100f6c <cprintf>
f010357c:	83 c4 10             	add    $0x10,%esp
f010357f:	eb 69                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0103581:	83 ec 0c             	sub    $0xc,%esp
f0103584:	6a 02                	push   $0x2
f0103586:	e8 3b b1 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010358b:	83 c4 10             	add    $0x10,%esp
f010358e:	85 c0                	test   %eax,%eax
f0103590:	74 12                	je     f01035a4 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0103592:	83 ec 0c             	sub    $0xc,%esp
f0103595:	68 84 58 12 f0       	push   $0xf0125884
f010359a:	e8 cd d9 ff ff       	call   f0100f6c <cprintf>
f010359f:	83 c4 10             	add    $0x10,%esp
f01035a2:	eb 46                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01035a4:	e8 4e b1 00 00       	call   f010e6f7 <isPageReplacmentAlgorithmFIFO>
f01035a9:	85 c0                	test   %eax,%eax
f01035ab:	74 12                	je     f01035bf <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01035ad:	83 ec 0c             	sub    $0xc,%esp
f01035b0:	68 c0 58 12 f0       	push   $0xf01258c0
f01035b5:	e8 b2 d9 ff ff       	call   f0100f6c <cprintf>
f01035ba:	83 c4 10             	add    $0x10,%esp
f01035bd:	eb 2b                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01035bf:	e8 4e b1 00 00       	call   f010e712 <isPageReplacmentAlgorithmModifiedCLOCK>
f01035c4:	85 c0                	test   %eax,%eax
f01035c6:	74 12                	je     f01035da <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01035c8:	83 ec 0c             	sub    $0xc,%esp
f01035cb:	68 e4 58 12 f0       	push   $0xf01258e4
f01035d0:	e8 97 d9 ff ff       	call   f0100f6c <cprintf>
f01035d5:	83 c4 10             	add    $0x10,%esp
f01035d8:	eb 10                	jmp    f01035ea <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01035da:	83 ec 0c             	sub    $0xc,%esp
f01035dd:	68 14 59 12 f0       	push   $0xf0125914
f01035e2:	e8 85 d9 ff ff       	call   f0100f6c <cprintf>
f01035e7:	83 c4 10             	add    $0x10,%esp

	return 0;
f01035ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035ef:	c9                   	leave  
f01035f0:	c3                   	ret    

f01035f1 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01035f1:	55                   	push   %ebp
f01035f2:	89 e5                	mov    %esp,%ebp
f01035f4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01035f7:	e8 bf ef ff ff       	call   f01025bb <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01035fc:	83 ec 0c             	sub    $0xc,%esp
f01035ff:	68 40 59 12 f0       	push   $0xf0125940
f0103604:	e8 63 d9 ff ff       	call   f0100f6c <cprintf>
f0103609:	83 c4 10             	add    $0x10,%esp
	return 0;
f010360c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103611:	c9                   	leave  
f0103612:	c3                   	ret    

f0103613 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103613:	55                   	push   %ebp
f0103614:	89 e5                	mov    %esp,%ebp
f0103616:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103619:	e8 ad ef ff ff       	call   f01025cb <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010361e:	83 ec 0c             	sub    $0xc,%esp
f0103621:	68 70 59 12 f0       	push   $0xf0125970
f0103626:	e8 41 d9 ff ff       	call   f0100f6c <cprintf>
f010362b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010362e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103633:	c9                   	leave  
f0103634:	c3                   	ret    

f0103635 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103635:	55                   	push   %ebp
f0103636:	89 e5                	mov    %esp,%ebp
f0103638:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010363b:	e8 9b ef ff ff       	call   f01025db <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103640:	83 ec 0c             	sub    $0xc,%esp
f0103643:	68 a0 59 12 f0       	push   $0xf01259a0
f0103648:	e8 1f d9 ff ff       	call   f0100f6c <cprintf>
f010364d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103650:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103655:	c9                   	leave  
f0103656:	c3                   	ret    

f0103657 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103657:	55                   	push   %ebp
f0103658:	89 e5                	mov    %esp,%ebp
f010365a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010365d:	e8 89 ef ff ff       	call   f01025eb <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0103662:	83 ec 0c             	sub    $0xc,%esp
f0103665:	68 d0 59 12 f0       	push   $0xf01259d0
f010366a:	e8 fd d8 ff ff       	call   f0100f6c <cprintf>
f010366f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103672:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103677:	c9                   	leave  
f0103678:	c3                   	ret    

f0103679 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0103679:	55                   	push   %ebp
f010367a:	89 e5                	mov    %esp,%ebp
f010367c:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010367f:	e8 77 ef ff ff       	call   f01025fb <isUHeapPlacementStrategyFIRSTFIT>
f0103684:	84 c0                	test   %al,%al
f0103686:	74 12                	je     f010369a <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103688:	83 ec 0c             	sub    $0xc,%esp
f010368b:	68 00 5a 12 f0       	push   $0xf0125a00
f0103690:	e8 d7 d8 ff ff       	call   f0100f6c <cprintf>
f0103695:	83 c4 10             	add    $0x10,%esp
f0103698:	eb 61                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010369a:	e8 71 ef ff ff       	call   f0102610 <isUHeapPlacementStrategyBESTFIT>
f010369f:	84 c0                	test   %al,%al
f01036a1:	74 12                	je     f01036b5 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01036a3:	83 ec 0c             	sub    $0xc,%esp
f01036a6:	68 2c 5a 12 f0       	push   $0xf0125a2c
f01036ab:	e8 bc d8 ff ff       	call   f0100f6c <cprintf>
f01036b0:	83 c4 10             	add    $0x10,%esp
f01036b3:	eb 46                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01036b5:	e8 6b ef ff ff       	call   f0102625 <isUHeapPlacementStrategyNEXTFIT>
f01036ba:	84 c0                	test   %al,%al
f01036bc:	74 12                	je     f01036d0 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01036be:	83 ec 0c             	sub    $0xc,%esp
f01036c1:	68 58 5a 12 f0       	push   $0xf0125a58
f01036c6:	e8 a1 d8 ff ff       	call   f0100f6c <cprintf>
f01036cb:	83 c4 10             	add    $0x10,%esp
f01036ce:	eb 2b                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01036d0:	e8 65 ef ff ff       	call   f010263a <isUHeapPlacementStrategyWORSTFIT>
f01036d5:	84 c0                	test   %al,%al
f01036d7:	74 12                	je     f01036eb <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01036d9:	83 ec 0c             	sub    $0xc,%esp
f01036dc:	68 84 5a 12 f0       	push   $0xf0125a84
f01036e1:	e8 86 d8 ff ff       	call   f0100f6c <cprintf>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	eb 10                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01036eb:	83 ec 0c             	sub    $0xc,%esp
f01036ee:	68 b0 5a 12 f0       	push   $0xf0125ab0
f01036f3:	e8 74 d8 ff ff       	call   f0100f6c <cprintf>
f01036f8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01036fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103700:	c9                   	leave  
f0103701:	c3                   	ret    

f0103702 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0103702:	55                   	push   %ebp
f0103703:	89 e5                	mov    %esp,%ebp
f0103705:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103708:	e8 f6 ed ff ff       	call   f0102503 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010370d:	83 ec 0c             	sub    $0xc,%esp
f0103710:	68 dc 5a 12 f0       	push   $0xf0125adc
f0103715:	e8 52 d8 ff ff       	call   f0100f6c <cprintf>
f010371a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010371d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103722:	c9                   	leave  
f0103723:	c3                   	ret    

f0103724 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0103724:	55                   	push   %ebp
f0103725:	89 e5                	mov    %esp,%ebp
f0103727:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010372a:	e8 e4 ed ff ff       	call   f0102513 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010372f:	83 ec 0c             	sub    $0xc,%esp
f0103732:	68 dc 5a 12 f0       	push   $0xf0125adc
f0103737:	e8 30 d8 ff ff       	call   f0100f6c <cprintf>
f010373c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010373f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103744:	c9                   	leave  
f0103745:	c3                   	ret    

f0103746 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103746:	55                   	push   %ebp
f0103747:	89 e5                	mov    %esp,%ebp
f0103749:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010374c:	e8 d2 ed ff ff       	call   f0102523 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0103751:	83 ec 0c             	sub    $0xc,%esp
f0103754:	68 10 5b 12 f0       	push   $0xf0125b10
f0103759:	e8 0e d8 ff ff       	call   f0100f6c <cprintf>
f010375e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103761:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103766:	c9                   	leave  
f0103767:	c3                   	ret    

f0103768 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103768:	55                   	push   %ebp
f0103769:	89 e5                	mov    %esp,%ebp
f010376b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010376e:	e8 c0 ed ff ff       	call   f0102533 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0103773:	83 ec 0c             	sub    $0xc,%esp
f0103776:	68 40 5b 12 f0       	push   $0xf0125b40
f010377b:	e8 ec d7 ff ff       	call   f0100f6c <cprintf>
f0103780:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103783:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103788:	c9                   	leave  
f0103789:	c3                   	ret    

f010378a <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010378a:	55                   	push   %ebp
f010378b:	89 e5                	mov    %esp,%ebp
f010378d:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0103790:	e8 ae ed ff ff       	call   f0102543 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103795:	83 ec 0c             	sub    $0xc,%esp
f0103798:	68 70 5b 12 f0       	push   $0xf0125b70
f010379d:	e8 ca d7 ff ff       	call   f0100f6c <cprintf>
f01037a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037aa:	c9                   	leave  
f01037ab:	c3                   	ret    

f01037ac <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01037ac:	55                   	push   %ebp
f01037ad:	89 e5                	mov    %esp,%ebp
f01037af:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01037b2:	e8 9c ed ff ff       	call   f0102553 <isKHeapPlacementStrategyCONTALLOC>
f01037b7:	84 c0                	test   %al,%al
f01037b9:	74 12                	je     f01037cd <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01037bb:	83 ec 0c             	sub    $0xc,%esp
f01037be:	68 a4 5b 12 f0       	push   $0xf0125ba4
f01037c3:	e8 a4 d7 ff ff       	call   f0100f6c <cprintf>
f01037c8:	83 c4 10             	add    $0x10,%esp
f01037cb:	eb 7c                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01037cd:	e8 95 ed ff ff       	call   f0102567 <isKHeapPlacementStrategyFIRSTFIT>
f01037d2:	84 c0                	test   %al,%al
f01037d4:	74 12                	je     f01037e8 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01037d6:	83 ec 0c             	sub    $0xc,%esp
f01037d9:	68 e0 5b 12 f0       	push   $0xf0125be0
f01037de:	e8 89 d7 ff ff       	call   f0100f6c <cprintf>
f01037e3:	83 c4 10             	add    $0x10,%esp
f01037e6:	eb 61                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01037e8:	e8 8f ed ff ff       	call   f010257c <isKHeapPlacementStrategyBESTFIT>
f01037ed:	84 c0                	test   %al,%al
f01037ef:	74 12                	je     f0103803 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01037f1:	83 ec 0c             	sub    $0xc,%esp
f01037f4:	68 10 5c 12 f0       	push   $0xf0125c10
f01037f9:	e8 6e d7 ff ff       	call   f0100f6c <cprintf>
f01037fe:	83 c4 10             	add    $0x10,%esp
f0103801:	eb 46                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0103803:	e8 89 ed ff ff       	call   f0102591 <isKHeapPlacementStrategyNEXTFIT>
f0103808:	84 c0                	test   %al,%al
f010380a:	74 12                	je     f010381e <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010380c:	83 ec 0c             	sub    $0xc,%esp
f010380f:	68 3c 5c 12 f0       	push   $0xf0125c3c
f0103814:	e8 53 d7 ff ff       	call   f0100f6c <cprintf>
f0103819:	83 c4 10             	add    $0x10,%esp
f010381c:	eb 2b                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010381e:	e8 83 ed ff ff       	call   f01025a6 <isKHeapPlacementStrategyWORSTFIT>
f0103823:	84 c0                	test   %al,%al
f0103825:	74 12                	je     f0103839 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103827:	83 ec 0c             	sub    $0xc,%esp
f010382a:	68 68 5c 12 f0       	push   $0xf0125c68
f010382f:	e8 38 d7 ff ff       	call   f0100f6c <cprintf>
f0103834:	83 c4 10             	add    $0x10,%esp
f0103837:	eb 10                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103839:	83 ec 0c             	sub    $0xc,%esp
f010383c:	68 98 5c 12 f0       	push   $0xf0125c98
f0103841:	e8 26 d7 ff ff       	call   f0100f6c <cprintf>
f0103846:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103849:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010384e:	c9                   	leave  
f010384f:	c3                   	ret    

f0103850 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103850:	55                   	push   %ebp
f0103851:	89 e5                	mov    %esp,%ebp
f0103853:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103856:	e8 2e af 00 00       	call   f010e789 <isBufferingEnabled>
f010385b:	84 c0                	test   %al,%al
f010385d:	75 12                	jne    f0103871 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010385f:	83 ec 0c             	sub    $0xc,%esp
f0103862:	68 c8 5c 12 f0       	push   $0xf0125cc8
f0103867:	e8 00 d7 ff ff       	call   f0100f6c <cprintf>
f010386c:	83 c4 10             	add    $0x10,%esp
f010386f:	eb 1d                	jmp    f010388e <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0103871:	83 ec 0c             	sub    $0xc,%esp
f0103874:	6a 00                	push   $0x0
f0103876:	e8 e8 ae 00 00       	call   f010e763 <enableModifiedBuffer>
f010387b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010387e:	83 ec 0c             	sub    $0xc,%esp
f0103881:	68 04 5d 12 f0       	push   $0xf0125d04
f0103886:	e8 e1 d6 ff ff       	call   f0100f6c <cprintf>
f010388b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010388e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103893:	c9                   	leave  
f0103894:	c3                   	ret    

f0103895 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103895:	55                   	push   %ebp
f0103896:	89 e5                	mov    %esp,%ebp
f0103898:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010389b:	e8 e9 ae 00 00       	call   f010e789 <isBufferingEnabled>
f01038a0:	84 c0                	test   %al,%al
f01038a2:	75 12                	jne    f01038b6 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01038a4:	83 ec 0c             	sub    $0xc,%esp
f01038a7:	68 c8 5c 12 f0       	push   $0xf0125cc8
f01038ac:	e8 bb d6 ff ff       	call   f0100f6c <cprintf>
f01038b1:	83 c4 10             	add    $0x10,%esp
f01038b4:	eb 1d                	jmp    f01038d3 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01038b6:	83 ec 0c             	sub    $0xc,%esp
f01038b9:	6a 01                	push   $0x1
f01038bb:	e8 a3 ae 00 00       	call   f010e763 <enableModifiedBuffer>
f01038c0:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01038c3:	83 ec 0c             	sub    $0xc,%esp
f01038c6:	68 28 5d 12 f0       	push   $0xf0125d28
f01038cb:	e8 9c d6 ff ff       	call   f0100f6c <cprintf>
f01038d0:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01038d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01038d8:	c9                   	leave  
f01038d9:	c3                   	ret    

f01038da <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01038da:	55                   	push   %ebp
f01038db:	89 e5                	mov    %esp,%ebp
f01038dd:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01038e0:	83 ec 0c             	sub    $0xc,%esp
f01038e3:	6a 00                	push   $0x0
f01038e5:	e8 91 ae 00 00       	call   f010e77b <enableBuffering>
f01038ea:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01038ed:	83 ec 0c             	sub    $0xc,%esp
f01038f0:	6a 00                	push   $0x0
f01038f2:	e8 6c ae 00 00       	call   f010e763 <enableModifiedBuffer>
f01038f7:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01038fa:	83 ec 0c             	sub    $0xc,%esp
f01038fd:	68 48 5d 12 f0       	push   $0xf0125d48
f0103902:	e8 65 d6 ff ff       	call   f0100f6c <cprintf>
f0103907:	83 c4 10             	add    $0x10,%esp
	return 0;
f010390a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010390f:	c9                   	leave  
f0103910:	c3                   	ret    

f0103911 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0103911:	55                   	push   %ebp
f0103912:	89 e5                	mov    %esp,%ebp
f0103914:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103917:	83 ec 0c             	sub    $0xc,%esp
f010391a:	6a 01                	push   $0x1
f010391c:	e8 5a ae 00 00       	call   f010e77b <enableBuffering>
f0103921:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0103924:	83 ec 0c             	sub    $0xc,%esp
f0103927:	6a 01                	push   $0x1
f0103929:	e8 35 ae 00 00       	call   f010e763 <enableModifiedBuffer>
f010392e:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0103931:	e8 6b ae 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103936:	85 c0                	test   %eax,%eax
f0103938:	75 59                	jne    f0103993 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010393a:	83 ec 0c             	sub    $0xc,%esp
f010393d:	68 64 5d 12 f0       	push   $0xf0125d64
f0103942:	e8 25 d6 ff ff       	call   f0100f6c <cprintf>
f0103947:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010394a:	83 ec 08             	sub    $0x8,%esp
f010394d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103950:	50                   	push   %eax
f0103951:	68 94 5d 12 f0       	push   $0xf0125d94
f0103956:	e8 4c e7 01 00       	call   f01220a7 <readline>
f010395b:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010395e:	83 ec 04             	sub    $0x4,%esp
f0103961:	6a 0a                	push   $0xa
f0103963:	6a 00                	push   $0x0
f0103965:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103968:	50                   	push   %eax
f0103969:	e8 a1 ec 01 00       	call   f012260f <strtol>
f010396e:	83 c4 10             	add    $0x10,%esp
f0103971:	83 ec 0c             	sub    $0xc,%esp
f0103974:	50                   	push   %eax
f0103975:	e8 19 ae 00 00       	call   f010e793 <setModifiedBufferLength>
f010397a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010397d:	e8 1f ae 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103982:	83 ec 08             	sub    $0x8,%esp
f0103985:	50                   	push   %eax
f0103986:	68 c0 5d 12 f0       	push   $0xf0125dc0
f010398b:	e8 dc d5 ff ff       	call   f0100f6c <cprintf>
f0103990:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103993:	83 ec 0c             	sub    $0xc,%esp
f0103996:	68 e5 5d 12 f0       	push   $0xf0125de5
f010399b:	e8 cc d5 ff ff       	call   f0100f6c <cprintf>
f01039a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01039a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01039a8:	c9                   	leave  
f01039a9:	c3                   	ret    

f01039aa <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01039aa:	55                   	push   %ebp
f01039ab:	89 e5                	mov    %esp,%ebp
f01039ad:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01039b0:	e8 d4 ad 00 00       	call   f010e789 <isBufferingEnabled>
f01039b5:	84 c0                	test   %al,%al
f01039b7:	75 12                	jne    f01039cb <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01039b9:	83 ec 0c             	sub    $0xc,%esp
f01039bc:	68 00 5e 12 f0       	push   $0xf0125e00
f01039c1:	e8 a6 d5 ff ff       	call   f0100f6c <cprintf>
f01039c6:	83 c4 10             	add    $0x10,%esp
f01039c9:	eb 19                	jmp    f01039e4 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01039cb:	e8 a1 ad 00 00       	call   f010e771 <isModifiedBufferEnabled>
f01039d0:	84 c0                	test   %al,%al
f01039d2:	75 10                	jne    f01039e4 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01039d4:	83 ec 0c             	sub    $0xc,%esp
f01039d7:	68 50 5e 12 f0       	push   $0xf0125e50
f01039dc:	e8 8b d5 ff ff       	call   f0100f6c <cprintf>
f01039e1:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01039e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039e7:	83 c0 04             	add    $0x4,%eax
f01039ea:	8b 00                	mov    (%eax),%eax
f01039ec:	83 ec 04             	sub    $0x4,%esp
f01039ef:	6a 0a                	push   $0xa
f01039f1:	6a 00                	push   $0x0
f01039f3:	50                   	push   %eax
f01039f4:	e8 16 ec 01 00       	call   f012260f <strtol>
f01039f9:	83 c4 10             	add    $0x10,%esp
f01039fc:	83 ec 0c             	sub    $0xc,%esp
f01039ff:	50                   	push   %eax
f0103a00:	e8 8e ad 00 00       	call   f010e793 <setModifiedBufferLength>
f0103a05:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103a08:	e8 94 ad 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103a0d:	83 ec 08             	sub    $0x8,%esp
f0103a10:	50                   	push   %eax
f0103a11:	68 c0 5d 12 f0       	push   $0xf0125dc0
f0103a16:	e8 51 d5 ff ff       	call   f0100f6c <cprintf>
f0103a1b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a23:	c9                   	leave  
f0103a24:	c3                   	ret    

f0103a25 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103a25:	55                   	push   %ebp
f0103a26:	89 e5                	mov    %esp,%ebp
f0103a28:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103a2b:	e8 59 ad 00 00       	call   f010e789 <isBufferingEnabled>
f0103a30:	84 c0                	test   %al,%al
f0103a32:	75 12                	jne    f0103a46 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103a34:	83 ec 0c             	sub    $0xc,%esp
f0103a37:	68 00 5e 12 f0       	push   $0xf0125e00
f0103a3c:	e8 2b d5 ff ff       	call   f0100f6c <cprintf>
f0103a41:	83 c4 10             	add    $0x10,%esp
f0103a44:	eb 19                	jmp    f0103a5f <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103a46:	e8 26 ad 00 00       	call   f010e771 <isModifiedBufferEnabled>
f0103a4b:	84 c0                	test   %al,%al
f0103a4d:	75 10                	jne    f0103a5f <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103a4f:	83 ec 0c             	sub    $0xc,%esp
f0103a52:	68 50 5e 12 f0       	push   $0xf0125e50
f0103a57:	e8 10 d5 ff ff       	call   f0100f6c <cprintf>
f0103a5c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0103a5f:	e8 3d ad 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103a64:	83 ec 08             	sub    $0x8,%esp
f0103a67:	50                   	push   %eax
f0103a68:	68 96 5e 12 f0       	push   $0xf0125e96
f0103a6d:	e8 fa d4 ff ff       	call   f0100f6c <cprintf>
f0103a72:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a7a:	c9                   	leave  
f0103a7b:	c3                   	ret    

f0103a7c <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f0103a7c:	55                   	push   %ebp
f0103a7d:	89 e5                	mov    %esp,%ebp
f0103a7f:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f0103a82:	83 ec 08             	sub    $0x8,%esp
f0103a85:	ff 75 0c             	pushl  0xc(%ebp)
f0103a88:	ff 75 08             	pushl  0x8(%ebp)
f0103a8b:	e8 d1 b4 00 00       	call   f010ef61 <tst_handler>
f0103a90:	83 c4 10             	add    $0x10,%esp
}
f0103a93:	c9                   	leave  
f0103a94:	c3                   	ret    

f0103a95 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a95:	55                   	push   %ebp
f0103a96:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103a98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a9b:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f0103aa1:	29 d0                	sub    %edx,%eax
f0103aa3:	c1 f8 03             	sar    $0x3,%eax
f0103aa6:	89 c2                	mov    %eax,%edx
f0103aa8:	89 d0                	mov    %edx,%eax
f0103aaa:	c1 e0 02             	shl    $0x2,%eax
f0103aad:	01 d0                	add    %edx,%eax
f0103aaf:	c1 e0 02             	shl    $0x2,%eax
f0103ab2:	01 d0                	add    %edx,%eax
f0103ab4:	c1 e0 02             	shl    $0x2,%eax
f0103ab7:	01 d0                	add    %edx,%eax
f0103ab9:	89 c1                	mov    %eax,%ecx
f0103abb:	c1 e1 08             	shl    $0x8,%ecx
f0103abe:	01 c8                	add    %ecx,%eax
f0103ac0:	89 c1                	mov    %eax,%ecx
f0103ac2:	c1 e1 10             	shl    $0x10,%ecx
f0103ac5:	01 c8                	add    %ecx,%eax
f0103ac7:	01 c0                	add    %eax,%eax
f0103ac9:	01 d0                	add    %edx,%eax
}
f0103acb:	5d                   	pop    %ebp
f0103acc:	c3                   	ret    

f0103acd <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103acd:	55                   	push   %ebp
f0103ace:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0103ad0:	ff 75 08             	pushl  0x8(%ebp)
f0103ad3:	e8 bd ff ff ff       	call   f0103a95 <to_frame_number>
f0103ad8:	83 c4 04             	add    $0x4,%esp
f0103adb:	c1 e0 0c             	shl    $0xc,%eax
}
f0103ade:	c9                   	leave  
f0103adf:	c3                   	ret    

f0103ae0 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0103ae0:	55                   	push   %ebp
f0103ae1:	89 e5                	mov    %esp,%ebp
f0103ae3:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103ae6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae9:	c1 e8 0c             	shr    $0xc,%eax
f0103aec:	89 c2                	mov    %eax,%edx
f0103aee:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0103af3:	39 c2                	cmp    %eax,%edx
f0103af5:	72 14                	jb     f0103b0b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103af7:	83 ec 04             	sub    $0x4,%esp
f0103afa:	68 b4 5e 12 f0       	push   $0xf0125eb4
f0103aff:	6a 55                	push   $0x55
f0103b01:	68 dc 5e 12 f0       	push   $0xf0125edc
f0103b06:	e8 0f c8 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0103b0b:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f0103b11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b14:	c1 e8 0c             	shr    $0xc,%eax
f0103b17:	89 c1                	mov    %eax,%ecx
f0103b19:	89 c8                	mov    %ecx,%eax
f0103b1b:	01 c0                	add    %eax,%eax
f0103b1d:	01 c8                	add    %ecx,%eax
f0103b1f:	c1 e0 03             	shl    $0x3,%eax
f0103b22:	01 d0                	add    %edx,%eax
}
f0103b24:	c9                   	leave  
f0103b25:	c3                   	ret    

f0103b26 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103b26:	55                   	push   %ebp
f0103b27:	89 e5                	mov    %esp,%ebp
f0103b29:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2f:	05 00 14 00 00       	add    $0x1400,%eax
f0103b34:	c1 e0 03             	shl    $0x3,%eax
f0103b37:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b3a:	83 ec 04             	sub    $0x4,%esp
f0103b3d:	6a 08                	push   $0x8
f0103b3f:	ff 75 0c             	pushl  0xc(%ebp)
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 4d ef 01 00       	call   f0122a97 <ide_read>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103b50:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b53:	c9                   	leave  
f0103b54:	c3                   	ret    

f0103b55 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103b55:	55                   	push   %ebp
f0103b56:	89 e5                	mov    %esp,%ebp
f0103b58:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b5e:	05 00 14 00 00       	add    $0x1400,%eax
f0103b63:	c1 e0 03             	shl    $0x3,%eax
f0103b66:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b69:	83 ec 04             	sub    $0x4,%esp
f0103b6c:	6a 08                	push   $0x8
f0103b6e:	ff 75 0c             	pushl  0xc(%ebp)
f0103b71:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b74:	e8 5e f0 01 00       	call   f0122bd7 <ide_write>
f0103b79:	83 c4 10             	add    $0x10,%esp
f0103b7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103b7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103b83:	74 14                	je     f0103b99 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103b85:	83 ec 04             	sub    $0x4,%esp
f0103b88:	68 fe 5e 12 f0       	push   $0xf0125efe
f0103b8d:	6a 2f                	push   $0x2f
f0103b8f:	68 15 5f 12 f0       	push   $0xf0125f15
f0103b94:	e8 81 c7 ff ff       	call   f010031a <_panic>
	return success;
f0103b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b9c:	c9                   	leave  
f0103b9d:	c3                   	ret    

f0103b9e <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103b9e:	55                   	push   %ebp
f0103b9f:	89 e5                	mov    %esp,%ebp
f0103ba1:	53                   	push   %ebx
f0103ba2:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);
f0103ba5:	c7 05 e0 90 55 f0 00 	movl   $0x0,0xf05590e0
f0103bac:	00 00 00 
f0103baf:	c7 05 e4 90 55 f0 00 	movl   $0x0,0xf05590e4
f0103bb6:	00 00 00 
f0103bb9:	c7 05 ec 90 55 f0 00 	movl   $0x0,0xf05590ec
f0103bc0:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103bc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103bca:	e9 e8 00 00 00       	jmp    f0103cb7 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103bcf:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bd8:	89 d0                	mov    %edx,%eax
f0103bda:	01 c0                	add    %eax,%eax
f0103bdc:	01 d0                	add    %edx,%eax
f0103bde:	c1 e0 03             	shl    $0x3,%eax
f0103be1:	01 c8                	add    %ecx,%eax
f0103be3:	83 ec 0c             	sub    $0xc,%esp
f0103be6:	50                   	push   %eax
f0103be7:	e8 c9 45 00 00       	call   f01081b5 <initialize_frame_info>
f0103bec:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
f0103bef:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	89 d0                	mov    %edx,%eax
f0103bfa:	01 c0                	add    %eax,%eax
f0103bfc:	01 d0                	add    %edx,%eax
f0103bfe:	c1 e0 03             	shl    $0x3,%eax
f0103c01:	01 c8                	add    %ecx,%eax
f0103c03:	85 c0                	test   %eax,%eax
f0103c05:	75 14                	jne    f0103c1b <initialize_disk_page_file+0x7d>
f0103c07:	83 ec 04             	sub    $0x4,%esp
f0103c0a:	68 34 5f 12 f0       	push   $0xf0125f34
f0103c0f:	6a 56                	push   $0x56
f0103c11:	68 15 5f 12 f0       	push   $0xf0125f15
f0103c16:	e8 ff c6 ff ff       	call   f010031a <_panic>
f0103c1b:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c24:	89 d0                	mov    %edx,%eax
f0103c26:	01 c0                	add    %eax,%eax
f0103c28:	01 d0                	add    %edx,%eax
f0103c2a:	c1 e0 03             	shl    $0x3,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	8b 15 e0 90 55 f0    	mov    0xf05590e0,%edx
f0103c35:	89 10                	mov    %edx,(%eax)
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	74 1f                	je     f0103c5c <initialize_disk_page_file+0xbe>
f0103c3d:	8b 15 e0 90 55 f0    	mov    0xf05590e0,%edx
f0103c43:	8b 1d c0 62 55 f0    	mov    0xf05562c0,%ebx
f0103c49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103c4c:	89 c8                	mov    %ecx,%eax
f0103c4e:	01 c0                	add    %eax,%eax
f0103c50:	01 c8                	add    %ecx,%eax
f0103c52:	c1 e0 03             	shl    $0x3,%eax
f0103c55:	01 d8                	add    %ebx,%eax
f0103c57:	89 42 04             	mov    %eax,0x4(%edx)
f0103c5a:	eb 19                	jmp    f0103c75 <initialize_disk_page_file+0xd7>
f0103c5c:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103c62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c65:	89 d0                	mov    %edx,%eax
f0103c67:	01 c0                	add    %eax,%eax
f0103c69:	01 d0                	add    %edx,%eax
f0103c6b:	c1 e0 03             	shl    $0x3,%eax
f0103c6e:	01 c8                	add    %ecx,%eax
f0103c70:	a3 e4 90 55 f0       	mov    %eax,0xf05590e4
f0103c75:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103c7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c7e:	89 d0                	mov    %edx,%eax
f0103c80:	01 c0                	add    %eax,%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	c1 e0 03             	shl    $0x3,%eax
f0103c87:	01 c8                	add    %ecx,%eax
f0103c89:	a3 e0 90 55 f0       	mov    %eax,0xf05590e0
f0103c8e:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103c94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c97:	89 d0                	mov    %edx,%eax
f0103c99:	01 c0                	add    %eax,%eax
f0103c9b:	01 d0                	add    %edx,%eax
f0103c9d:	c1 e0 03             	shl    $0x3,%eax
f0103ca0:	01 c8                	add    %ecx,%eax
f0103ca2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ca9:	a1 ec 90 55 f0       	mov    0xf05590ec,%eax
f0103cae:	40                   	inc    %eax
f0103caf:	a3 ec 90 55 f0       	mov    %eax,0xf05590ec
{
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103cb4:	ff 45 f4             	incl   -0xc(%ebp)
f0103cb7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103cbe:	0f 8e 0b ff ff ff    	jle    f0103bcf <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103cc4:	90                   	nop
f0103cc5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103cc8:	c9                   	leave  
f0103cc9:	c3                   	ret    

f0103cca <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103cca:	55                   	push   %ebp
f0103ccb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cd0:	8b 15 c0 62 55 f0    	mov    0xf05562c0,%edx
f0103cd6:	29 d0                	sub    %edx,%eax
f0103cd8:	c1 f8 03             	sar    $0x3,%eax
f0103cdb:	89 c2                	mov    %eax,%edx
f0103cdd:	89 d0                	mov    %edx,%eax
f0103cdf:	c1 e0 02             	shl    $0x2,%eax
f0103ce2:	01 d0                	add    %edx,%eax
f0103ce4:	c1 e0 02             	shl    $0x2,%eax
f0103ce7:	01 d0                	add    %edx,%eax
f0103ce9:	c1 e0 02             	shl    $0x2,%eax
f0103cec:	01 d0                	add    %edx,%eax
f0103cee:	89 c1                	mov    %eax,%ecx
f0103cf0:	c1 e1 08             	shl    $0x8,%ecx
f0103cf3:	01 c8                	add    %ecx,%eax
f0103cf5:	89 c1                	mov    %eax,%ecx
f0103cf7:	c1 e1 10             	shl    $0x10,%ecx
f0103cfa:	01 c8                	add    %ecx,%eax
f0103cfc:	01 c0                	add    %eax,%eax
f0103cfe:	01 d0                	add    %edx,%eax
}
f0103d00:	5d                   	pop    %ebp
f0103d01:	c3                   	ret    

f0103d02 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103d02:	55                   	push   %ebp
f0103d03:	89 e5                	mov    %esp,%ebp
f0103d05:	83 ec 18             	sub    $0x18,%esp
	int ret = 0;
f0103d08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103d0f:	83 ec 0c             	sub    $0xc,%esp
f0103d12:	68 f0 90 55 f0       	push   $0xf05590f0
f0103d17:	e8 bb ad 00 00       	call   f010ead7 <acquire_spinlock>
f0103d1c:	83 c4 10             	add    $0x10,%esp
	{
		// Fill this function in
		struct FrameInfo *ptr_frame_info = LIST_FIRST(&DiskFrameLists.disk_free_frame_list);
f0103d1f:	a1 e0 90 55 f0       	mov    0xf05590e0,%eax
f0103d24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ptr_frame_info == NULL)
f0103d27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d2b:	75 0c                	jne    f0103d39 <allocate_disk_frame+0x37>
		{
			ret = E_NO_PAGE_FILE_SPACE;
f0103d2d:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
f0103d34:	e9 a2 00 00 00       	jmp    f0103ddb <allocate_disk_frame+0xd9>
		}
		else
		{
			LIST_REMOVE(&DiskFrameLists.disk_free_frame_list, ptr_frame_info);
f0103d39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d3d:	75 14                	jne    f0103d53 <allocate_disk_frame+0x51>
f0103d3f:	83 ec 04             	sub    $0x4,%esp
f0103d42:	68 57 5f 12 f0       	push   $0xf0125f57
f0103d47:	6a 7b                	push   $0x7b
f0103d49:	68 15 5f 12 f0       	push   $0xf0125f15
f0103d4e:	e8 c7 c5 ff ff       	call   f010031a <_panic>
f0103d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d56:	8b 00                	mov    (%eax),%eax
f0103d58:	85 c0                	test   %eax,%eax
f0103d5a:	74 10                	je     f0103d6c <allocate_disk_frame+0x6a>
f0103d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d5f:	8b 00                	mov    (%eax),%eax
f0103d61:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d64:	8b 52 04             	mov    0x4(%edx),%edx
f0103d67:	89 50 04             	mov    %edx,0x4(%eax)
f0103d6a:	eb 0b                	jmp    f0103d77 <allocate_disk_frame+0x75>
f0103d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d6f:	8b 40 04             	mov    0x4(%eax),%eax
f0103d72:	a3 e4 90 55 f0       	mov    %eax,0xf05590e4
f0103d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d7a:	8b 40 04             	mov    0x4(%eax),%eax
f0103d7d:	85 c0                	test   %eax,%eax
f0103d7f:	74 0f                	je     f0103d90 <allocate_disk_frame+0x8e>
f0103d81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d84:	8b 40 04             	mov    0x4(%eax),%eax
f0103d87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d8a:	8b 12                	mov    (%edx),%edx
f0103d8c:	89 10                	mov    %edx,(%eax)
f0103d8e:	eb 0a                	jmp    f0103d9a <allocate_disk_frame+0x98>
f0103d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d93:	8b 00                	mov    (%eax),%eax
f0103d95:	a3 e0 90 55 f0       	mov    %eax,0xf05590e0
f0103d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103da6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103dad:	a1 ec 90 55 f0       	mov    0xf05590ec,%eax
f0103db2:	48                   	dec    %eax
f0103db3:	a3 ec 90 55 f0       	mov    %eax,0xf05590ec
			initialize_frame_info(ptr_frame_info);
f0103db8:	83 ec 0c             	sub    $0xc,%esp
f0103dbb:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dbe:	e8 f2 43 00 00       	call   f01081b5 <initialize_frame_info>
f0103dc3:	83 c4 10             	add    $0x10,%esp
			*dfn = to_disk_frame_number(ptr_frame_info);
f0103dc6:	83 ec 0c             	sub    $0xc,%esp
f0103dc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dcc:	e8 f9 fe ff ff       	call   f0103cca <to_disk_frame_number>
f0103dd1:	83 c4 10             	add    $0x10,%esp
f0103dd4:	89 c2                	mov    %eax,%edx
f0103dd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd9:	89 10                	mov    %edx,(%eax)
		}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ddb:	83 ec 0c             	sub    $0xc,%esp
f0103dde:	68 f0 90 55 f0       	push   $0xf05590f0
f0103de3:	e8 76 ad 00 00       	call   f010eb5e <release_spinlock>
f0103de8:	83 c4 10             	add    $0x10,%esp

	return ret;
f0103deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103dee:	c9                   	leave  
f0103def:	c3                   	ret    

f0103df0 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103df0:	55                   	push   %ebp
f0103df1:	89 e5                	mov    %esp,%ebp
f0103df3:	53                   	push   %ebx
f0103df4:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103dfb:	0f 84 ea 00 00 00    	je     f0103eeb <free_disk_frame+0xfb>
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103e01:	83 ec 0c             	sub    $0xc,%esp
f0103e04:	68 f0 90 55 f0       	push   $0xf05590f0
f0103e09:	e8 c9 ac 00 00       	call   f010ead7 <acquire_spinlock>
f0103e0e:	83 c4 10             	add    $0x10,%esp
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
f0103e11:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103e17:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e1a:	89 d0                	mov    %edx,%eax
f0103e1c:	01 c0                	add    %eax,%eax
f0103e1e:	01 d0                	add    %edx,%eax
f0103e20:	c1 e0 03             	shl    $0x3,%eax
f0103e23:	01 c8                	add    %ecx,%eax
f0103e25:	85 c0                	test   %eax,%eax
f0103e27:	75 17                	jne    f0103e40 <free_disk_frame+0x50>
f0103e29:	83 ec 04             	sub    $0x4,%esp
f0103e2c:	68 34 5f 12 f0       	push   $0xf0125f34
f0103e31:	68 8e 00 00 00       	push   $0x8e
f0103e36:	68 15 5f 12 f0       	push   $0xf0125f15
f0103e3b:	e8 da c4 ff ff       	call   f010031a <_panic>
f0103e40:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103e46:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e49:	89 d0                	mov    %edx,%eax
f0103e4b:	01 c0                	add    %eax,%eax
f0103e4d:	01 d0                	add    %edx,%eax
f0103e4f:	c1 e0 03             	shl    $0x3,%eax
f0103e52:	01 c8                	add    %ecx,%eax
f0103e54:	8b 15 e0 90 55 f0    	mov    0xf05590e0,%edx
f0103e5a:	89 10                	mov    %edx,(%eax)
f0103e5c:	8b 00                	mov    (%eax),%eax
f0103e5e:	85 c0                	test   %eax,%eax
f0103e60:	74 1f                	je     f0103e81 <free_disk_frame+0x91>
f0103e62:	8b 15 e0 90 55 f0    	mov    0xf05590e0,%edx
f0103e68:	8b 1d c0 62 55 f0    	mov    0xf05562c0,%ebx
f0103e6e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103e71:	89 c8                	mov    %ecx,%eax
f0103e73:	01 c0                	add    %eax,%eax
f0103e75:	01 c8                	add    %ecx,%eax
f0103e77:	c1 e0 03             	shl    $0x3,%eax
f0103e7a:	01 d8                	add    %ebx,%eax
f0103e7c:	89 42 04             	mov    %eax,0x4(%edx)
f0103e7f:	eb 19                	jmp    f0103e9a <free_disk_frame+0xaa>
f0103e81:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103e87:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e8a:	89 d0                	mov    %edx,%eax
f0103e8c:	01 c0                	add    %eax,%eax
f0103e8e:	01 d0                	add    %edx,%eax
f0103e90:	c1 e0 03             	shl    $0x3,%eax
f0103e93:	01 c8                	add    %ecx,%eax
f0103e95:	a3 e4 90 55 f0       	mov    %eax,0xf05590e4
f0103e9a:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103ea0:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ea3:	89 d0                	mov    %edx,%eax
f0103ea5:	01 c0                	add    %eax,%eax
f0103ea7:	01 d0                	add    %edx,%eax
f0103ea9:	c1 e0 03             	shl    $0x3,%eax
f0103eac:	01 c8                	add    %ecx,%eax
f0103eae:	a3 e0 90 55 f0       	mov    %eax,0xf05590e0
f0103eb3:	8b 0d c0 62 55 f0    	mov    0xf05562c0,%ecx
f0103eb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ebc:	89 d0                	mov    %edx,%eax
f0103ebe:	01 c0                	add    %eax,%eax
f0103ec0:	01 d0                	add    %edx,%eax
f0103ec2:	c1 e0 03             	shl    $0x3,%eax
f0103ec5:	01 c8                	add    %ecx,%eax
f0103ec7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ece:	a1 ec 90 55 f0       	mov    0xf05590ec,%eax
f0103ed3:	40                   	inc    %eax
f0103ed4:	a3 ec 90 55 f0       	mov    %eax,0xf05590ec
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ed9:	83 ec 0c             	sub    $0xc,%esp
f0103edc:	68 f0 90 55 f0       	push   $0xf05590f0
f0103ee1:	e8 78 ac 00 00       	call   f010eb5e <release_spinlock>
f0103ee6:	83 c4 10             	add    $0x10,%esp
f0103ee9:	eb 01                	jmp    f0103eec <free_disk_frame+0xfc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103eeb:	90                   	nop
	acquire_spinlock(&DiskFrameLists.dfllock);
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
	}
	release_spinlock(&DiskFrameLists.dfllock);
}
f0103eec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103eef:	c9                   	leave  
f0103ef0:	c3                   	ret    

f0103ef1 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103ef1:	55                   	push   %ebp
f0103ef2:	89 e5                	mov    %esp,%ebp
f0103ef4:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103efa:	c1 e8 16             	shr    $0x16,%eax
f0103efd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f04:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f07:	01 d0                	add    %edx,%eax
f0103f09:	8b 00                	mov    (%eax),%eax
f0103f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f22:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0103f27:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <get_disk_page_table+0x52>
f0103f2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f2f:	68 78 5f 12 f0       	push   $0xf0125f78
f0103f34:	68 9d 00 00 00       	push   $0x9d
f0103f39:	68 15 5f 12 f0       	push   $0xf0125f15
f0103f3e:	e8 d7 c3 ff ff       	call   f010031a <_panic>
f0103f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 c2                	mov    %eax,%edx
f0103f4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f50:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103f52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f56:	0f 85 b7 00 00 00    	jne    f0104013 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103f5c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103f60:	0f 84 9d 00 00 00    	je     f0104003 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103f66:	83 ec 0c             	sub    $0xc,%esp
f0103f69:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103f6c:	50                   	push   %eax
f0103f6d:	e8 5e 42 00 00       	call   f01081d0 <allocate_frame>
f0103f72:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103f75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103f78:	83 ec 0c             	sub    $0xc,%esp
f0103f7b:	50                   	push   %eax
f0103f7c:	e8 4c fb ff ff       	call   f0103acd <to_physical_address>
f0103f81:	83 c4 10             	add    $0x10,%esp
f0103f84:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103f87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f90:	c1 e8 0c             	shr    $0xc,%eax
f0103f93:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103f96:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0103f9b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103f9e:	72 17                	jb     f0103fb7 <get_disk_page_table+0xc6>
f0103fa0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103fa3:	68 78 5f 12 f0       	push   $0xf0125f78
f0103fa8:	68 b9 00 00 00       	push   $0xb9
f0103fad:	68 15 5f 12 f0       	push   $0xf0125f15
f0103fb2:	e8 63 c3 ff ff       	call   f010031a <_panic>
f0103fb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103fba:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103fbf:	89 c2                	mov    %eax,%edx
f0103fc1:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fc4:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103fc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103fc9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fd2:	c1 e8 16             	shr    $0x16,%eax
f0103fd5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fdf:	01 d0                	add    %edx,%eax
f0103fe1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103fe4:	83 ca 01             	or     $0x1,%edx
f0103fe7:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103fe9:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fec:	8b 00                	mov    (%eax),%eax
f0103fee:	83 ec 04             	sub    $0x4,%esp
f0103ff1:	68 00 10 00 00       	push   $0x1000
f0103ff6:	6a 00                	push   $0x0
f0103ff8:	50                   	push   %eax
f0103ff9:	e8 9f e4 01 00       	call   f012249d <memset>
f0103ffe:	83 c4 10             	add    $0x10,%esp
f0104001:	eb 10                	jmp    f0104013 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0104003:	8b 45 14             	mov    0x14(%ebp),%eax
f0104006:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010400c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104011:	eb 05                	jmp    f0104018 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0104013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104018:	c9                   	leave  
f0104019:	c3                   	ret    

f010401a <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010401a:	55                   	push   %ebp
f010401b:	89 e5                	mov    %esp,%ebp
f010401d:	83 ec 28             	sub    $0x28,%esp
f0104020:	8b 45 10             	mov    0x10(%ebp),%eax
f0104023:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0104026:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010402a:	74 72                	je     f010409e <pf_add_empty_env_page+0x84>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010402c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0104033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104036:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010403b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010403e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104041:	ba 00 00 00 00       	mov    $0x0,%edx
f0104046:	f7 75 f4             	divl   -0xc(%ebp)
f0104049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010404c:	29 d0                	sub    %edx,%eax
f010404e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104051:	73 2f                	jae    f0104082 <pf_add_empty_env_page+0x68>
f0104053:	8b 45 08             	mov    0x8(%ebp),%eax
f0104056:	8b 50 6c             	mov    0x6c(%eax),%edx
f0104059:	b8 00 00 00 00       	mov    $0x0,%eax
f010405e:	29 d0                	sub    %edx,%eax
f0104060:	c1 e0 0c             	shl    $0xc,%eax
f0104063:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0104068:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010406b:	76 15                	jbe    f0104082 <pf_add_empty_env_page+0x68>
			ptr_env->nNewPageAdded++ ;
f010406d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104070:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104076:	8d 50 01             	lea    0x1(%eax),%edx
f0104079:	8b 45 08             	mov    0x8(%ebp),%eax
f010407c:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0104082:	a1 b4 8f 55 f0       	mov    0xf0558fb4,%eax
f0104087:	83 ec 04             	sub    $0x4,%esp
f010408a:	50                   	push   %eax
f010408b:	ff 75 0c             	pushl  0xc(%ebp)
f010408e:	ff 75 08             	pushl  0x8(%ebp)
f0104091:	e8 b2 00 00 00       	call   f0104148 <pf_add_env_page>
f0104096:	83 c4 10             	add    $0x10,%esp
f0104099:	e9 a8 00 00 00       	jmp    f0104146 <pf_add_empty_env_page+0x12c>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010409e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01040a5:	76 19                	jbe    f01040c0 <pf_add_empty_env_page+0xa6>
f01040a7:	68 a8 5f 12 f0       	push   $0xf0125fa8
f01040ac:	68 ce 5f 12 f0       	push   $0xf0125fce
f01040b1:	68 dc 00 00 00       	push   $0xdc
f01040b6:	68 15 5f 12 f0       	push   $0xf0125f15
f01040bb:	e8 5a c2 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01040c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c3:	83 c0 74             	add    $0x74,%eax
f01040c6:	83 ec 08             	sub    $0x8,%esp
f01040c9:	50                   	push   %eax
f01040ca:	ff 75 08             	pushl  0x8(%ebp)
f01040cd:	e8 ce 05 00 00       	call   f01046a0 <get_disk_page_directory>
f01040d2:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01040d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d8:	8b 40 74             	mov    0x74(%eax),%eax
f01040db:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01040de:	52                   	push   %edx
f01040df:	6a 01                	push   $0x1
f01040e1:	ff 75 0c             	pushl  0xc(%ebp)
f01040e4:	50                   	push   %eax
f01040e5:	e8 07 fe ff ff       	call   f0103ef1 <get_disk_page_table>
f01040ea:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01040ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040f3:	c1 ea 0c             	shr    $0xc,%edx
f01040f6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040fc:	c1 e2 02             	shl    $0x2,%edx
f01040ff:	01 d0                	add    %edx,%eax
f0104101:	8b 00                	mov    (%eax),%eax
f0104103:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0104106:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104109:	85 c0                	test   %eax,%eax
f010410b:	75 34                	jne    f0104141 <pf_add_empty_env_page+0x127>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010410d:	83 ec 0c             	sub    $0xc,%esp
f0104110:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104113:	50                   	push   %eax
f0104114:	e8 e9 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f0104119:	83 c4 10             	add    $0x10,%esp
f010411c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010411f:	75 07                	jne    f0104128 <pf_add_empty_env_page+0x10e>
f0104121:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104126:	eb 1e                	jmp    f0104146 <pf_add_empty_env_page+0x12c>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0104128:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010412b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010412e:	c1 ea 0c             	shr    $0xc,%edx
f0104131:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104137:	c1 e2 02             	shl    $0x2,%edx
f010413a:	01 c2                	add    %eax,%edx
f010413c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010413f:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0104141:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0104146:	c9                   	leave  
f0104147:	c3                   	ret    

f0104148 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0104148:	55                   	push   %ebp
f0104149:	89 e5                	mov    %esp,%ebp
f010414b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010414e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104155:	76 19                	jbe    f0104170 <pf_add_env_page+0x28>
f0104157:	68 a8 5f 12 f0       	push   $0xf0125fa8
f010415c:	68 ce 5f 12 f0       	push   $0xf0125fce
f0104161:	68 f1 00 00 00       	push   $0xf1
f0104166:	68 15 5f 12 f0       	push   $0xf0125f15
f010416b:	e8 aa c1 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104170:	8b 45 08             	mov    0x8(%ebp),%eax
f0104173:	83 c0 74             	add    $0x74,%eax
f0104176:	83 ec 08             	sub    $0x8,%esp
f0104179:	50                   	push   %eax
f010417a:	ff 75 08             	pushl  0x8(%ebp)
f010417d:	e8 1e 05 00 00       	call   f01046a0 <get_disk_page_directory>
f0104182:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0104185:	8b 45 08             	mov    0x8(%ebp),%eax
f0104188:	8b 40 74             	mov    0x74(%eax),%eax
f010418b:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010418e:	52                   	push   %edx
f010418f:	6a 01                	push   $0x1
f0104191:	ff 75 0c             	pushl  0xc(%ebp)
f0104194:	50                   	push   %eax
f0104195:	e8 57 fd ff ff       	call   f0103ef1 <get_disk_page_table>
f010419a:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010419d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041a3:	c1 ea 0c             	shr    $0xc,%edx
f01041a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041ac:	c1 e2 02             	shl    $0x2,%edx
f01041af:	01 d0                	add    %edx,%eax
f01041b1:	8b 00                	mov    (%eax),%eax
f01041b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01041b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041b9:	85 c0                	test   %eax,%eax
f01041bb:	75 34                	jne    f01041f1 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01041bd:	83 ec 0c             	sub    $0xc,%esp
f01041c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01041c3:	50                   	push   %eax
f01041c4:	e8 39 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f01041c9:	83 c4 10             	add    $0x10,%esp
f01041cc:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01041cf:	75 07                	jne    f01041d8 <pf_add_env_page+0x90>
f01041d1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01041d6:	eb 31                	jmp    f0104209 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01041d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041db:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041de:	c1 ea 0c             	shr    $0xc,%edx
f01041e1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041e7:	c1 e2 02             	shl    $0x2,%edx
f01041ea:	01 c2                	add    %eax,%edx
f01041ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041ef:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01041f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041f4:	83 ec 08             	sub    $0x8,%esp
f01041f7:	ff 75 10             	pushl  0x10(%ebp)
f01041fa:	50                   	push   %eax
f01041fb:	e8 55 f9 ff ff       	call   f0103b55 <write_disk_page>
f0104200:	83 c4 10             	add    $0x10,%esp
f0104203:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0104206:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104209:	c9                   	leave  
f010420a:	c3                   	ret    

f010420b <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010420b:	55                   	push   %ebp
f010420c:	89 e5                	mov    %esp,%ebp
f010420e:	83 ec 28             	sub    $0x28,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0104211:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104218:	76 19                	jbe    f0104233 <pf_update_env_page+0x28>
f010421a:	68 a8 5f 12 f0       	push   $0xf0125fa8
f010421f:	68 ce 5f 12 f0       	push   $0xf0125fce
f0104224:	68 13 01 00 00       	push   $0x113
f0104229:	68 15 5f 12 f0       	push   $0xf0125f15
f010422e:	e8 e7 c0 ff ff       	call   f010031a <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104233:	8b 45 08             	mov    0x8(%ebp),%eax
f0104236:	83 c0 74             	add    $0x74,%eax
f0104239:	83 ec 08             	sub    $0x8,%esp
f010423c:	50                   	push   %eax
f010423d:	ff 75 08             	pushl  0x8(%ebp)
f0104240:	e8 5b 04 00 00       	call   f01046a0 <get_disk_page_directory>
f0104245:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104248:	8b 45 08             	mov    0x8(%ebp),%eax
f010424b:	8b 40 74             	mov    0x74(%eax),%eax
f010424e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104251:	52                   	push   %edx
f0104252:	6a 00                	push   $0x0
f0104254:	ff 75 0c             	pushl  0xc(%ebp)
f0104257:	50                   	push   %eax
f0104258:	e8 94 fc ff ff       	call   f0103ef1 <get_disk_page_table>
f010425d:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0104260:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104263:	85 c0                	test   %eax,%eax
f0104265:	74 29                	je     f0104290 <pf_update_env_page+0x85>
f0104267:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010426a:	85 c0                	test   %eax,%eax
f010426c:	0f 84 c5 00 00 00    	je     f0104337 <pf_update_env_page+0x12c>
f0104272:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104275:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104278:	c1 ea 0c             	shr    $0xc,%edx
f010427b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104281:	c1 e2 02             	shl    $0x2,%edx
f0104284:	01 d0                	add    %edx,%eax
f0104286:	8b 00                	mov    (%eax),%eax
f0104288:	85 c0                	test   %eax,%eax
f010428a:	0f 85 a7 00 00 00    	jne    f0104337 <pf_update_env_page+0x12c>
	{

		uint32 VA = (uint32)virtual_address ;
f0104290:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104293:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104299:	85 c0                	test   %eax,%eax
f010429b:	79 09                	jns    f01042a6 <pf_update_env_page+0x9b>
f010429d:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01042a4:	76 30                	jbe    f01042d6 <pf_update_env_page+0xcb>
f01042a6:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01042ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042b0:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01042b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01042b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01042c0:	f7 75 f0             	divl   -0x10(%ebp)
f01042c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042c6:	29 d0                	sub    %edx,%eax
f01042c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01042cb:	77 53                	ja     f0104320 <pf_update_env_page+0x115>
f01042cd:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01042d4:	77 4a                	ja     f0104320 <pf_update_env_page+0x115>
			//				return ret ;
			//			}
			//			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			//			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01042d6:	83 ec 04             	sub    $0x4,%esp
f01042d9:	6a 00                	push   $0x0
f01042db:	ff 75 f4             	pushl  -0xc(%ebp)
f01042de:	ff 75 08             	pushl  0x8(%ebp)
f01042e1:	e8 34 fd ff ff       	call   f010401a <pf_add_empty_env_page>
f01042e6:	83 c4 10             	add    $0x10,%esp
f01042e9:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if (ret == E_NO_PAGE_FILE_SPACE)
f01042ec:	83 7d e8 f8          	cmpl   $0xfffffff8,-0x18(%ebp)
f01042f0:	75 17                	jne    f0104309 <pf_update_env_page+0xfe>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01042f2:	83 ec 04             	sub    $0x4,%esp
f01042f5:	68 e4 5f 12 f0       	push   $0xf0125fe4
f01042fa:	68 43 01 00 00       	push   $0x143
f01042ff:	68 15 5f 12 f0       	push   $0xf0125f15
f0104304:	e8 11 c0 ff ff       	call   f010031a <_panic>
				}
				//cprintf("[%s] adding EMPTY page with content\n",ptr_env->prog_name);

				ptr_env->nNewPageAdded++ ;
f0104309:	8b 45 08             	mov    0x8(%ebp),%eax
f010430c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104312:	8d 50 01             	lea    0x1(%eax),%edx
f0104315:	8b 45 08             	mov    0x8(%ebp),%eax
f0104318:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
f010431e:	eb 17                	jmp    f0104337 <pf_update_env_page+0x12c>
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0104320:	83 ec 04             	sub    $0x4,%esp
f0104323:	68 30 60 12 f0       	push   $0xf0126030
f0104328:	68 4c 01 00 00       	push   $0x14c
f010432d:	68 15 5f 12 f0       	push   $0xf0125f15
f0104332:	e8 e3 bf ff ff       	call   f010031a <_panic>
		}
	}
	//2022 END========================================


	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104337:	8b 45 08             	mov    0x8(%ebp),%eax
f010433a:	8b 40 74             	mov    0x74(%eax),%eax
f010433d:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104340:	52                   	push   %edx
f0104341:	6a 00                	push   $0x0
f0104343:	ff 75 0c             	pushl  0xc(%ebp)
f0104346:	50                   	push   %eax
f0104347:	e8 a5 fb ff ff       	call   f0103ef1 <get_disk_page_table>
f010434c:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010434f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104352:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104355:	c1 ea 0c             	shr    $0xc,%edx
f0104358:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010435e:	c1 e2 02             	shl    $0x2,%edx
f0104361:	01 d0                	add    %edx,%eax
f0104363:	8b 00                	mov    (%eax),%eax
f0104365:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104368:	83 ec 0c             	sub    $0xc,%esp
f010436b:	ff 75 10             	pushl  0x10(%ebp)
f010436e:	e8 5a f7 ff ff       	call   f0103acd <to_physical_address>
f0104373:	83 c4 10             	add    $0x10,%esp
f0104376:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104379:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010437c:	c1 e8 0c             	shr    $0xc,%eax
f010437f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0104382:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0104387:	39 45 dc             	cmp    %eax,-0x24(%ebp)
f010438a:	72 17                	jb     f01043a3 <pf_update_env_page+0x198>
f010438c:	ff 75 e0             	pushl  -0x20(%ebp)
f010438f:	68 78 5f 12 f0       	push   $0xf0125f78
f0104394:	68 68 01 00 00       	push   $0x168
f0104399:	68 15 5f 12 f0       	push   $0xf0125f15
f010439e:	e8 77 bf ff ff       	call   f010031a <_panic>
f01043a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043a6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043ab:	83 ec 08             	sub    $0x8,%esp
f01043ae:	50                   	push   %eax
f01043af:	ff 75 e4             	pushl  -0x1c(%ebp)
f01043b2:	e8 9e f7 ff ff       	call   f0103b55 <write_disk_page>
f01043b7:	83 c4 10             	add    $0x10,%esp
f01043ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01043bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c0:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f01043c6:	8d 50 01             	lea    0x1(%eax),%edx
f01043c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043cc:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
	//======================

	return ret;
f01043d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01043d5:	c9                   	leave  
f01043d6:	c3                   	ret    

f01043d7 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01043d7:	55                   	push   %ebp
f01043d8:	89 e5                	mov    %esp,%ebp
f01043da:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01043dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01043eb:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01043ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f1:	8b 40 74             	mov    0x74(%eax),%eax
f01043f4:	85 c0                	test   %eax,%eax
f01043f6:	75 0a                	jne    f0104402 <pf_read_env_page+0x2b>
f01043f8:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043fd:	e9 90 00 00 00       	jmp    f0104492 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	8b 45 08             	mov    0x8(%ebp),%eax
f0104408:	8b 40 74             	mov    0x74(%eax),%eax
f010440b:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f010440e:	51                   	push   %ecx
f010440f:	6a 00                	push   $0x0
f0104411:	52                   	push   %edx
f0104412:	50                   	push   %eax
f0104413:	e8 d9 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f0104418:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010441b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010441e:	85 c0                	test   %eax,%eax
f0104420:	75 07                	jne    f0104429 <pf_read_env_page+0x52>
f0104422:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104427:	eb 69                	jmp    f0104492 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104429:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010442c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010442f:	c1 ea 0c             	shr    $0xc,%edx
f0104432:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104438:	c1 e2 02             	shl    $0x2,%edx
f010443b:	01 d0                	add    %edx,%eax
f010443d:	8b 00                	mov    (%eax),%eax
f010443f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104442:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104446:	75 07                	jne    f010444f <pf_read_env_page+0x78>
f0104448:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010444d:	eb 43                	jmp    f0104492 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010444f:	83 ec 08             	sub    $0x8,%esp
f0104452:	ff 75 0c             	pushl  0xc(%ebp)
f0104455:	ff 75 f0             	pushl  -0x10(%ebp)
f0104458:	e8 c9 f6 ff ff       	call   f0103b26 <read_disk_page>
f010445d:	83 c4 10             	add    $0x10,%esp
f0104460:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0104463:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104466:	8b 45 08             	mov    0x8(%ebp),%eax
f0104469:	8b 40 64             	mov    0x64(%eax),%eax
f010446c:	6a 40                	push   $0x40
f010446e:	6a 00                	push   $0x0
f0104470:	52                   	push   %edx
f0104471:	50                   	push   %eax
f0104472:	e8 b1 46 00 00       	call   f0108b28 <pt_set_page_permissions>
f0104477:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f010447a:	8b 45 08             	mov    0x8(%ebp),%eax
f010447d:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0104483:	8d 50 01             	lea    0x1(%eax),%edx
f0104486:	8b 45 08             	mov    0x8(%ebp),%eax
f0104489:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
	//======================

	return disk_read_error;
f010448f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104492:	c9                   	leave  
f0104493:	c3                   	ret    

f0104494 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104494:	55                   	push   %ebp
f0104495:	89 e5                	mov    %esp,%ebp
f0104497:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010449a:	8b 45 08             	mov    0x8(%ebp),%eax
f010449d:	8b 40 74             	mov    0x74(%eax),%eax
f01044a0:	85 c0                	test   %eax,%eax
f01044a2:	74 62                	je     f0104506 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01044a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a7:	8b 40 74             	mov    0x74(%eax),%eax
f01044aa:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01044ad:	52                   	push   %edx
f01044ae:	6a 00                	push   $0x0
f01044b0:	ff 75 0c             	pushl  0xc(%ebp)
f01044b3:	50                   	push   %eax
f01044b4:	e8 38 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f01044b9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01044bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 46                	je     f0104509 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01044c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044c9:	c1 ea 0c             	shr    $0xc,%edx
f01044cc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044d2:	c1 e2 02             	shl    $0x2,%edx
f01044d5:	01 d0                	add    %edx,%eax
f01044d7:	8b 00                	mov    (%eax),%eax
f01044d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01044dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e2:	c1 ea 0c             	shr    $0xc,%edx
f01044e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044eb:	c1 e2 02             	shl    $0x2,%edx
f01044ee:	01 d0                	add    %edx,%eax
f01044f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01044f6:	83 ec 0c             	sub    $0xc,%esp
f01044f9:	ff 75 f4             	pushl  -0xc(%ebp)
f01044fc:	e8 ef f8 ff ff       	call   f0103df0 <free_disk_frame>
f0104501:	83 c4 10             	add    $0x10,%esp
f0104504:	eb 04                	jmp    f010450a <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104506:	90                   	nop
f0104507:	eb 01                	jmp    f010450a <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104509:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010450a:	c9                   	leave  
f010450b:	c3                   	ret    

f010450c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010450c:	55                   	push   %ebp
f010450d:	89 e5                	mov    %esp,%ebp
f010450f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104519:	e9 ee 00 00 00       	jmp    f010460c <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010451e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104521:	8b 40 74             	mov    0x74(%eax),%eax
f0104524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104527:	c1 e2 02             	shl    $0x2,%edx
f010452a:	01 d0                	add    %edx,%eax
f010452c:	8b 00                	mov    (%eax),%eax
f010452e:	83 e0 01             	and    $0x1,%eax
f0104531:	85 c0                	test   %eax,%eax
f0104533:	0f 84 cf 00 00 00    	je     f0104608 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0104539:	8b 45 08             	mov    0x8(%ebp),%eax
f010453c:	8b 40 74             	mov    0x74(%eax),%eax
f010453f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104542:	c1 e2 02             	shl    $0x2,%edx
f0104545:	01 d0                	add    %edx,%eax
f0104547:	8b 00                	mov    (%eax),%eax
f0104549:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010454e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104551:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104554:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104557:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010455a:	c1 e8 0c             	shr    $0xc,%eax
f010455d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104560:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0104565:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104568:	72 17                	jb     f0104581 <pf_free_env+0x75>
f010456a:	ff 75 e8             	pushl  -0x18(%ebp)
f010456d:	68 78 5f 12 f0       	push   $0xf0125f78
f0104572:	68 c8 01 00 00       	push   $0x1c8
f0104577:	68 15 5f 12 f0       	push   $0xf0125f15
f010457c:	e8 99 bd ff ff       	call   f010031a <_panic>
f0104581:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104584:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104589:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010458c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104593:	eb 3a                	jmp    f01045cf <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0104595:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104598:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010459f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045a2:	01 d0                	add    %edx,%eax
f01045a4:	8b 00                	mov    (%eax),%eax
f01045a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01045a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01045ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01045b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045b6:	01 d0                	add    %edx,%eax
f01045b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01045be:	83 ec 0c             	sub    $0xc,%esp
f01045c1:	ff 75 dc             	pushl  -0x24(%ebp)
f01045c4:	e8 27 f8 ff ff       	call   f0103df0 <free_disk_frame>
f01045c9:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01045cc:	ff 45 f0             	incl   -0x10(%ebp)
f01045cf:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01045d6:	76 bd                	jbe    f0104595 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 40 74             	mov    0x74(%eax),%eax
f01045de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045e1:	c1 e2 02             	shl    $0x2,%edx
f01045e4:	01 d0                	add    %edx,%eax
f01045e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f01045ec:	83 ec 0c             	sub    $0xc,%esp
f01045ef:	ff 75 ec             	pushl  -0x14(%ebp)
f01045f2:	e8 e9 f4 ff ff       	call   f0103ae0 <to_frame_info>
f01045f7:	83 c4 10             	add    $0x10,%esp
f01045fa:	83 ec 0c             	sub    $0xc,%esp
f01045fd:	50                   	push   %eax
f01045fe:	e8 da 3d 00 00       	call   f01083dd <decrement_references>
f0104603:	83 c4 10             	add    $0x10,%esp
f0104606:	eb 01                	jmp    f0104609 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104608:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104609:	ff 45 f4             	incl   -0xc(%ebp)
f010460c:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104613:	0f 86 05 ff ff ff    	jbe    f010451e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104619:	8b 45 08             	mov    0x8(%ebp),%eax
f010461c:	8b 40 78             	mov    0x78(%eax),%eax
f010461f:	83 ec 0c             	sub    $0xc,%esp
f0104622:	50                   	push   %eax
f0104623:	e8 b8 f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104628:	83 c4 10             	add    $0x10,%esp
f010462b:	83 ec 0c             	sub    $0xc,%esp
f010462e:	50                   	push   %eax
f010462f:	e8 a9 3d 00 00       	call   f01083dd <decrement_references>
f0104634:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104637:	8b 45 08             	mov    0x8(%ebp),%eax
f010463a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0104641:	8b 45 08             	mov    0x8(%ebp),%eax
f0104644:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010464b:	8b 45 08             	mov    0x8(%ebp),%eax
f010464e:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104651:	85 c0                	test   %eax,%eax
f0104653:	74 48                	je     f010469d <pf_free_env+0x191>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0104655:	83 ec 0c             	sub    $0xc,%esp
f0104658:	ff 75 08             	pushl  0x8(%ebp)
f010465b:	e8 dd 03 00 00       	call   f0104a3d <__pf_remove_env_all_tables>
f0104660:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104663:	8b 45 08             	mov    0x8(%ebp),%eax
f0104666:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
f010466c:	83 ec 0c             	sub    $0xc,%esp
f010466f:	50                   	push   %eax
f0104670:	e8 6b f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104675:	83 c4 10             	add    $0x10,%esp
f0104678:	83 ec 0c             	sub    $0xc,%esp
f010467b:	50                   	push   %eax
f010467c:	e8 5c 3d 00 00       	call   f01083dd <decrement_references>
f0104681:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0104684:	8b 45 08             	mov    0x8(%ebp),%eax
f0104687:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010468e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104691:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f0104698:	00 00 00 
f010469b:	eb 01                	jmp    f010469e <pf_free_env+0x192>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010469d:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010469e:	c9                   	leave  
f010469f:	c3                   	ret    

f01046a0 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01046a0:	55                   	push   %ebp
f01046a1:	89 e5                	mov    %esp,%ebp
f01046a3:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01046a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a9:	8b 50 74             	mov    0x74(%eax),%edx
f01046ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046af:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01046b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046b4:	8b 00                	mov    (%eax),%eax
f01046b6:	85 c0                	test   %eax,%eax
f01046b8:	0f 85 aa 00 00 00    	jne    f0104768 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046be:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046c5:	83 ec 0c             	sub    $0xc,%esp
f01046c8:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046cb:	50                   	push   %eax
f01046cc:	e8 ff 3a 00 00       	call   f01081d0 <allocate_frame>
f01046d1:	83 c4 10             	add    $0x10,%esp
f01046d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046db:	79 08                	jns    f01046e5 <get_disk_page_directory+0x45>
				return r;
f01046dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046e0:	e9 88 00 00 00       	jmp    f010476d <get_disk_page_directory+0xcd>
			p->references = 1;
f01046e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046e8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01046ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046f1:	83 ec 0c             	sub    $0xc,%esp
f01046f4:	50                   	push   %eax
f01046f5:	e8 d3 f3 ff ff       	call   f0103acd <to_physical_address>
f01046fa:	83 c4 10             	add    $0x10,%esp
f01046fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104700:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104703:	c1 e8 0c             	shr    $0xc,%eax
f0104706:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104709:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f010470e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104711:	72 17                	jb     f010472a <get_disk_page_directory+0x8a>
f0104713:	ff 75 f0             	pushl  -0x10(%ebp)
f0104716:	68 78 5f 12 f0       	push   $0xf0125f78
f010471b:	68 20 02 00 00       	push   $0x220
f0104720:	68 15 5f 12 f0       	push   $0xf0125f15
f0104725:	e8 f0 bb ff ff       	call   f010031a <_panic>
f010472a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010472d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104732:	89 c2                	mov    %eax,%edx
f0104734:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104737:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010473c:	83 ec 0c             	sub    $0xc,%esp
f010473f:	50                   	push   %eax
f0104740:	e8 88 f3 ff ff       	call   f0103acd <to_physical_address>
f0104745:	83 c4 10             	add    $0x10,%esp
f0104748:	89 c2                	mov    %eax,%edx
f010474a:	8b 45 08             	mov    0x8(%ebp),%eax
f010474d:	89 50 78             	mov    %edx,0x78(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104750:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104753:	8b 00                	mov    (%eax),%eax
f0104755:	83 ec 04             	sub    $0x4,%esp
f0104758:	68 00 10 00 00       	push   $0x1000
f010475d:	6a 00                	push   $0x0
f010475f:	50                   	push   %eax
f0104760:	e8 38 dd 01 00       	call   f012249d <memset>
f0104765:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104768:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010476d:	c9                   	leave  
f010476e:	c3                   	ret    

f010476f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010476f:	55                   	push   %ebp
f0104770:	89 e5                	mov    %esp,%ebp
f0104772:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0104775:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010477c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104783:	e9 a6 00 00 00       	jmp    f010482e <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0104788:	8b 45 08             	mov    0x8(%ebp),%eax
f010478b:	8b 40 74             	mov    0x74(%eax),%eax
f010478e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104791:	c1 e2 02             	shl    $0x2,%edx
f0104794:	01 d0                	add    %edx,%eax
f0104796:	8b 00                	mov    (%eax),%eax
f0104798:	83 e0 01             	and    $0x1,%eax
f010479b:	85 c0                	test   %eax,%eax
f010479d:	0f 84 87 00 00 00    	je     f010482a <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01047a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a6:	8b 40 74             	mov    0x74(%eax),%eax
f01047a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047ac:	c1 e2 02             	shl    $0x2,%edx
f01047af:	01 d0                	add    %edx,%eax
f01047b1:	8b 00                	mov    (%eax),%eax
f01047b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01047b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01047bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01047c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047c4:	c1 e8 0c             	shr    $0xc,%eax
f01047c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01047ca:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f01047cf:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01047d2:	72 17                	jb     f01047eb <pf_calculate_allocated_pages+0x7c>
f01047d4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01047d7:	68 78 5f 12 f0       	push   $0xf0125f78
f01047dc:	68 40 02 00 00       	push   $0x240
f01047e1:	68 15 5f 12 f0       	push   $0xf0125f15
f01047e6:	e8 2f bb ff ff       	call   f010031a <_panic>
f01047eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047ee:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01047f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f01047f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01047fd:	eb 20                	jmp    f010481f <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f01047ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104802:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104809:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010480c:	01 d0                	add    %edx,%eax
f010480e:	8b 00                	mov    (%eax),%eax
f0104810:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104813:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0104817:	74 03                	je     f010481c <pf_calculate_allocated_pages+0xad>
				counter ++;
f0104819:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010481c:	ff 45 ec             	incl   -0x14(%ebp)
f010481f:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0104826:	76 d7                	jbe    f01047ff <pf_calculate_allocated_pages+0x90>
f0104828:	eb 01                	jmp    f010482b <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010482a:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010482b:	ff 45 f4             	incl   -0xc(%ebp)
f010482e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104835:	0f 86 4d ff ff ff    	jbe    f0104788 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010483b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010483e:	c9                   	leave  
f010483f:	c3                   	ret    

f0104840 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104840:	55                   	push   %ebp
f0104841:	89 e5                	mov    %esp,%ebp
f0104843:	83 ec 18             	sub    $0x18,%esp
	uint32 totalFreeDiskFrames ;
	acquire_spinlock(&DiskFrameLists.dfllock);
f0104846:	83 ec 0c             	sub    $0xc,%esp
f0104849:	68 f0 90 55 f0       	push   $0xf05590f0
f010484e:	e8 84 a2 00 00       	call   f010ead7 <acquire_spinlock>
f0104853:	83 c4 10             	add    $0x10,%esp
	{
		/*2023: UPDATE beased on suggestion from T112 2023.Term1*/
		totalFreeDiskFrames = LIST_SIZE(&DiskFrameLists.disk_free_frame_list);
f0104856:	a1 ec 90 55 f0       	mov    0xf05590ec,%eax
f010485b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		//	LIST_FOREACH(ptr, &disk_free_frame_list)
		//	{
		//		totalFreeDiskFrames++ ;
		//	}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f010485e:	83 ec 0c             	sub    $0xc,%esp
f0104861:	68 f0 90 55 f0       	push   $0xf05590f0
f0104866:	e8 f3 a2 00 00       	call   f010eb5e <release_spinlock>
f010486b:	83 c4 10             	add    $0x10,%esp
	return totalFreeDiskFrames;
f010486e:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0104871:	c9                   	leave  
f0104872:	c3                   	ret    

f0104873 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104873:	55                   	push   %ebp
f0104874:	89 e5                	mov    %esp,%ebp
f0104876:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0104879:	8b 45 08             	mov    0x8(%ebp),%eax
f010487c:	8b 50 7c             	mov    0x7c(%eax),%edx
f010487f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104882:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104884:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104887:	8b 00                	mov    (%eax),%eax
f0104889:	85 c0                	test   %eax,%eax
f010488b:	0f 85 ad 00 00 00    	jne    f010493e <get_disk_table_directory+0xcb>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104891:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104898:	83 ec 0c             	sub    $0xc,%esp
f010489b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010489e:	50                   	push   %eax
f010489f:	e8 2c 39 00 00       	call   f01081d0 <allocate_frame>
f01048a4:	83 c4 10             	add    $0x10,%esp
f01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01048aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01048ae:	79 08                	jns    f01048b8 <get_disk_table_directory+0x45>
				return r;
f01048b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b3:	e9 8b 00 00 00       	jmp    f0104943 <get_disk_table_directory+0xd0>
			p->references = 1;
f01048b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048bb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01048c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048c4:	83 ec 0c             	sub    $0xc,%esp
f01048c7:	50                   	push   %eax
f01048c8:	e8 00 f2 ff ff       	call   f0103acd <to_physical_address>
f01048cd:	83 c4 10             	add    $0x10,%esp
f01048d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048d6:	c1 e8 0c             	shr    $0xc,%eax
f01048d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048dc:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f01048e1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01048e4:	72 17                	jb     f01048fd <get_disk_table_directory+0x8a>
f01048e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01048e9:	68 78 5f 12 f0       	push   $0xf0125f78
f01048ee:	68 83 02 00 00       	push   $0x283
f01048f3:	68 15 5f 12 f0       	push   $0xf0125f15
f01048f8:	e8 1d ba ff ff       	call   f010031a <_panic>
f01048fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104900:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104905:	89 c2                	mov    %eax,%edx
f0104907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010490a:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010490c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010490f:	83 ec 0c             	sub    $0xc,%esp
f0104912:	50                   	push   %eax
f0104913:	e8 b5 f1 ff ff       	call   f0103acd <to_physical_address>
f0104918:	83 c4 10             	add    $0x10,%esp
f010491b:	89 c2                	mov    %eax,%edx
f010491d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104920:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104926:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104929:	8b 00                	mov    (%eax),%eax
f010492b:	83 ec 04             	sub    $0x4,%esp
f010492e:	68 00 10 00 00       	push   $0x1000
f0104933:	6a 00                	push   $0x0
f0104935:	50                   	push   %eax
f0104936:	e8 62 db 01 00       	call   f012249d <memset>
f010493b:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010493e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104943:	c9                   	leave  
f0104944:	c3                   	ret    

f0104945 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104945:	55                   	push   %ebp
f0104946:	89 e5                	mov    %esp,%ebp
f0104948:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010494b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104952:	76 19                	jbe    f010496d <__pf_write_env_table+0x28>
f0104954:	68 a8 5f 12 f0       	push   $0xf0125fa8
f0104959:	68 ce 5f 12 f0       	push   $0xf0125fce
f010495e:	68 91 02 00 00       	push   $0x291
f0104963:	68 15 5f 12 f0       	push   $0xf0125f15
f0104968:	e8 ad b9 ff ff       	call   f010031a <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010496d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104970:	83 c0 7c             	add    $0x7c,%eax
f0104973:	83 ec 08             	sub    $0x8,%esp
f0104976:	50                   	push   %eax
f0104977:	ff 75 08             	pushl  0x8(%ebp)
f010497a:	e8 f4 fe ff ff       	call   f0104873 <get_disk_table_directory>
f010497f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104982:	8b 45 08             	mov    0x8(%ebp),%eax
f0104985:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104988:	8b 55 0c             	mov    0xc(%ebp),%edx
f010498b:	c1 ea 16             	shr    $0x16,%edx
f010498e:	c1 e2 02             	shl    $0x2,%edx
f0104991:	01 d0                	add    %edx,%eax
f0104993:	8b 00                	mov    (%eax),%eax
f0104995:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0104998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010499b:	85 c0                	test   %eax,%eax
f010499d:	75 31                	jne    f01049d0 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010499f:	83 ec 0c             	sub    $0xc,%esp
f01049a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01049a5:	50                   	push   %eax
f01049a6:	e8 57 f3 ff ff       	call   f0103d02 <allocate_disk_frame>
f01049ab:	83 c4 10             	add    $0x10,%esp
f01049ae:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01049b1:	75 07                	jne    f01049ba <__pf_write_env_table+0x75>
f01049b3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01049b8:	eb 2e                	jmp    f01049e8 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f01049ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bd:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049c3:	c1 ea 16             	shr    $0x16,%edx
f01049c6:	c1 e2 02             	shl    $0x2,%edx
f01049c9:	01 c2                	add    %eax,%edx
f01049cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049ce:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f01049d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049d3:	83 ec 08             	sub    $0x8,%esp
f01049d6:	ff 75 10             	pushl  0x10(%ebp)
f01049d9:	50                   	push   %eax
f01049da:	e8 76 f1 ff ff       	call   f0103b55 <write_disk_page>
f01049df:	83 c4 10             	add    $0x10,%esp
f01049e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f01049e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01049e8:	c9                   	leave  
f01049e9:	c3                   	ret    

f01049ea <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01049ea:	55                   	push   %ebp
f01049eb:	89 e5                	mov    %esp,%ebp
f01049ed:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01049f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f3:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049f6:	85 c0                	test   %eax,%eax
f01049f8:	75 07                	jne    f0104a01 <__pf_read_env_table+0x17>
f01049fa:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01049ff:	eb 3a                	jmp    f0104a3b <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104a01:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a04:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a07:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a0a:	c1 ea 16             	shr    $0x16,%edx
f0104a0d:	c1 e2 02             	shl    $0x2,%edx
f0104a10:	01 d0                	add    %edx,%eax
f0104a12:	8b 00                	mov    (%eax),%eax
f0104a14:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104a17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104a1b:	75 07                	jne    f0104a24 <__pf_read_env_table+0x3a>
f0104a1d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104a22:	eb 17                	jmp    f0104a3b <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104a24:	83 ec 08             	sub    $0x8,%esp
f0104a27:	ff 75 10             	pushl  0x10(%ebp)
f0104a2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104a2d:	e8 f4 f0 ff ff       	call   f0103b26 <read_disk_page>
f0104a32:	83 c4 10             	add    $0x10,%esp
f0104a35:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104a3b:	c9                   	leave  
f0104a3c:	c3                   	ret    

f0104a3d <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0104a3d:	55                   	push   %ebp
f0104a3e:	89 e5                	mov    %esp,%ebp
f0104a40:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a46:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a49:	85 c0                	test   %eax,%eax
f0104a4b:	74 4c                	je     f0104a99 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104a54:	eb 38                	jmp    f0104a8e <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0104a56:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a59:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5f:	c1 e2 02             	shl    $0x2,%edx
f0104a62:	01 d0                	add    %edx,%eax
f0104a64:	8b 00                	mov    (%eax),%eax
f0104a66:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6c:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a72:	c1 e2 02             	shl    $0x2,%edx
f0104a75:	01 d0                	add    %edx,%eax
f0104a77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104a7d:	83 ec 0c             	sub    $0xc,%esp
f0104a80:	ff 75 f0             	pushl  -0x10(%ebp)
f0104a83:	e8 68 f3 ff ff       	call   f0103df0 <free_disk_frame>
f0104a88:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a8b:	ff 45 f4             	incl   -0xc(%ebp)
f0104a8e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104a95:	76 bf                	jbe    f0104a56 <__pf_remove_env_all_tables+0x19>
f0104a97:	eb 01                	jmp    f0104a9a <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a99:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104a9a:	c9                   	leave  
f0104a9b:	c3                   	ret    

f0104a9c <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104a9c:	55                   	push   %ebp
f0104a9d:	89 e5                	mov    %esp,%ebp
f0104a9f:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104aa2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104aa6:	75 10                	jne    f0104ab8 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104aa8:	83 ec 0c             	sub    $0xc,%esp
f0104aab:	68 ac 60 12 f0       	push   $0xf01260ac
f0104ab0:	e8 b7 c4 ff ff       	call   f0100f6c <cprintf>
f0104ab5:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104ab8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104abb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104abe:	85 c0                	test   %eax,%eax
f0104ac0:	74 3d                	je     f0104aff <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac5:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104acb:	c1 ea 16             	shr    $0x16,%edx
f0104ace:	c1 e2 02             	shl    $0x2,%edx
f0104ad1:	01 d0                	add    %edx,%eax
f0104ad3:	8b 00                	mov    (%eax),%eax
f0104ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104adb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ade:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ae1:	c1 ea 16             	shr    $0x16,%edx
f0104ae4:	c1 e2 02             	shl    $0x2,%edx
f0104ae7:	01 d0                	add    %edx,%eax
f0104ae9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104aef:	83 ec 0c             	sub    $0xc,%esp
f0104af2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104af5:	e8 f6 f2 ff ff       	call   f0103df0 <free_disk_frame>
f0104afa:	83 c4 10             	add    $0x10,%esp
f0104afd:	eb 01                	jmp    f0104b00 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104aff:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104b00:	c9                   	leave  
f0104b01:	c3                   	ret    

f0104b02 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104b02:	55                   	push   %ebp
f0104b03:	89 e5                	mov    %esp,%ebp
f0104b05:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104b08:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104b0f:	eb 1f                	jmp    f0104b30 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b14:	83 ec 04             	sub    $0x4,%esp
f0104b17:	6a 08                	push   $0x8
f0104b19:	ff 75 08             	pushl  0x8(%ebp)
f0104b1c:	50                   	push   %eax
f0104b1d:	e8 b5 e0 01 00       	call   f0122bd7 <ide_write>
f0104b22:	83 c4 10             	add    $0x10,%esp
f0104b25:	85 c0                	test   %eax,%eax
f0104b27:	75 12                	jne    f0104b3b <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104b29:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104b30:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104b37:	7e d8                	jle    f0104b11 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b39:	eb 01                	jmp    f0104b3c <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104b3b:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b3c:	90                   	nop
f0104b3d:	c9                   	leave  
f0104b3e:	c3                   	ret    

f0104b3f <context_switch>:
# Switch stacks to new and pop previously-saved registers.

.globl context_switch
context_switch:
  # Save old callee-saved registers
  pushl %ebp
f0104b3f:	55                   	push   %ebp
  pushl %eax
f0104b40:	50                   	push   %eax
  pushl %ebx
f0104b41:	53                   	push   %ebx
  pushl %ecx
f0104b42:	51                   	push   %ecx
  pushl %edx
f0104b43:	52                   	push   %edx
  pushl %esi
f0104b44:	56                   	push   %esi
  pushl %edi
f0104b45:	57                   	push   %edi

  # Switch stacks
  movl 32(%esp), %eax
f0104b46:	8b 44 24 20          	mov    0x20(%esp),%eax
  movl 36(%esp), %edx
f0104b4a:	8b 54 24 24          	mov    0x24(%esp),%edx
  movl %esp, (%eax)
f0104b4e:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
f0104b50:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
f0104b52:	5f                   	pop    %edi
  popl %esi
f0104b53:	5e                   	pop    %esi
  popl %edx
f0104b54:	5a                   	pop    %edx
  popl %ecx
f0104b55:	59                   	pop    %ecx
  popl %ebx
f0104b56:	5b                   	pop    %ebx
  popl %eax
f0104b57:	58                   	pop    %eax
  popl %ebp
f0104b58:	5d                   	pop    %ebp
  ret
f0104b59:	c3                   	ret    

f0104b5a <mc146818_read>:
#include <kern/trap/trap.h>


unsigned
mc146818_read(unsigned reg)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b60:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b63:	0f b6 c0             	movzbl %al,%eax
f0104b66:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104b6d:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104b70:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104b73:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104b76:	ee                   	out    %al,(%dx)
f0104b77:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104b7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104b81:	89 c2                	mov    %eax,%edx
f0104b83:	ec                   	in     (%dx),%al
f0104b84:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104b87:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104b8a:	0f b6 c0             	movzbl %al,%eax
}
f0104b8d:	c9                   	leave  
f0104b8e:	c3                   	ret    

f0104b8f <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104b8f:	55                   	push   %ebp
f0104b90:	89 e5                	mov    %esp,%ebp
f0104b92:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b98:	0f b6 c0             	movzbl %al,%eax
f0104b9b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104ba2:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ba5:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104ba8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104bab:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104bac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104baf:	0f b6 c0             	movzbl %al,%eax
f0104bb2:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104bb9:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104bbc:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104bbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104bc2:	ee                   	out    %al,(%dx)
}
f0104bc3:	90                   	nop
f0104bc4:	c9                   	leave  
f0104bc5:	c3                   	ret    

f0104bc6 <kclock_init>:
 * PIT channel is reset, and the output immediately goes to its initial state
 * (which depends on the mode).
 */

void kclock_init()
{
f0104bc6:	55                   	push   %ebp
f0104bc7:	89 e5                	mov    %esp,%ebp
f0104bc9:	83 ec 08             	sub    $0x8,%esp
	ticks = 0;
f0104bcc:	c7 05 c8 90 55 f0 00 	movl   $0x0,0xf05590c8
f0104bd3:	00 00 00 
f0104bd6:	c7 05 cc 90 55 f0 00 	movl   $0x0,0xf05590cc
f0104bdd:	00 00 00 
	irq_install_handler(0, &clock_interrupt_handler);
f0104be0:	83 ec 08             	sub    $0x8,%esp
f0104be3:	68 b4 6b 10 f0       	push   $0xf0106bb4
f0104be8:	6a 00                	push   $0x0
f0104bea:	e8 a9 87 00 00       	call   f010d398 <irq_install_handler>
f0104bef:	83 c4 10             	add    $0x10,%esp
}
f0104bf2:	90                   	nop
f0104bf3:	c9                   	leave  
f0104bf4:	c3                   	ret    

f0104bf5 <kclock_start>:
void
kclock_start(uint8 quantum_in_ms)
{
f0104bf5:	55                   	push   %ebp
f0104bf6:	89 e5                	mov    %esp,%ebp
f0104bf8:	53                   	push   %ebx
f0104bf9:	83 ec 24             	sub    $0x24,%esp
f0104bfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bff:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104c02:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c09:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c0d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c10:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c13:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104c14:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104c18:	77 48                	ja     f0104c62 <kclock_start+0x6d>
f0104c1a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c21:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104c25:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c2b:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104c2c:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c30:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104c35:	99                   	cltd   
f0104c36:	f7 fb                	idiv   %ebx
f0104c38:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c3e:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c42:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c47:	99                   	cltd   
f0104c48:	f7 fb                	idiv   %ebx
f0104c4a:	89 c3                	mov    %eax,%ebx
f0104c4c:	89 c8                	mov    %ecx,%eax
f0104c4e:	99                   	cltd   
f0104c4f:	f7 fb                	idiv   %ebx
f0104c51:	0f b7 c0             	movzwl %ax,%eax
f0104c54:	83 ec 0c             	sub    $0xc,%esp
f0104c57:	50                   	push   %eax
f0104c58:	e8 b3 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104c5d:	83 c4 10             	add    $0x10,%esp
f0104c60:	eb 13                	jmp    f0104c75 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c62:	6a 35                	push   $0x35
f0104c64:	68 d0 60 12 f0       	push   $0xf01260d0
f0104c69:	6a 41                	push   $0x41
f0104c6b:	68 2c 61 12 f0       	push   $0xf012612c
f0104c70:	e8 a5 b6 ff ff       	call   f010031a <_panic>
//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup IRQ0 (timer interrupts) via 8259A\n");

	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104c75:	83 ec 0c             	sub    $0xc,%esp
f0104c78:	6a 00                	push   $0x0
f0104c7a:	e8 66 23 00 00       	call   f0106fe5 <irq_clear_mask>
f0104c7f:	83 c4 10             	add    $0x10,%esp

	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104c82:	90                   	nop
f0104c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104c86:	c9                   	leave  
f0104c87:	c3                   	ret    

f0104c88 <kclock_stop>:

void
kclock_stop(void)
{
f0104c88:	55                   	push   %ebp
f0104c89:	89 e5                	mov    %esp,%ebp
f0104c8b:	83 ec 18             	sub    $0x18,%esp
f0104c8e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c95:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104c99:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9f:	ee                   	out    %al,(%dx)
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}

	/*Mask the IRQ0 (Timer Interrupt)*/
	//irq_setmask_8259A(0xFFFF);
	irq_set_mask(0);
f0104ca0:	83 ec 0c             	sub    $0xc,%esp
f0104ca3:	6a 00                	push   $0x0
f0104ca5:	e8 c6 22 00 00       	call   f0106f70 <irq_set_mask>
f0104caa:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104cad:	90                   	nop
f0104cae:	c9                   	leave  
f0104caf:	c3                   	ret    

f0104cb0 <kclock_resume>:

void
kclock_resume(void)
{
f0104cb0:	55                   	push   %ebp
f0104cb1:	89 e5                	mov    %esp,%ebp
f0104cb3:	83 ec 18             	sub    $0x18,%esp
	/*2024: changed to latch
	 * the current count is copied into an internal "latch register" which can then be read via the data port corresponding to the selected channel (I/O ports 0x40 to 0x42). The value kept in the latch register remains the same until it has been fully read, or until a new mode/command register is written.
	 * The main benefit of the latch command is that it allows both bytes of the current count to be read without inconsistencies. For example, if you didn't use the latch command, then the current count may decrease from 0x0200 to 0x01FF after you've read the low byte but before you've read the high byte, so that your software thinks the counter was 0x0100 instead of 0x0200 (or 0x01FF).
	 */
	//uint16 cnt0 = kclock_read_cnt0() ;
	uint16 cnt0 = kclock_read_cnt0_latch() ;
f0104cb6:	e8 f5 01 00 00       	call   f0104eb0 <kclock_read_cnt0_latch>
f0104cbb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//cprintf("CLOCK RESUMED: Counter0 Value = %d\n", cnt0 );
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104cbf:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104cc4:	77 06                	ja     f0104ccc <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104cc6:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104ccc:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cd0:	83 e0 01             	and    $0x1,%eax
f0104cd3:	66 85 c0             	test   %ax,%ax
f0104cd6:	74 09                	je     f0104ce1 <kclock_resume+0x31>
		cnt0++;
f0104cd8:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cdc:	40                   	inc    %eax
f0104cdd:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104ce1:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104ce8:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104cec:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104cef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf2:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104cf3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104cf7:	83 ec 0c             	sub    $0xc,%esp
f0104cfa:	50                   	push   %eax
f0104cfb:	e8 10 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d00:	83 c4 10             	add    $0x10,%esp
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup IRQ0: timer interrupts via 8259A\n");
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d03:	83 ec 0c             	sub    $0xc,%esp
f0104d06:	6a 00                	push   $0x0
f0104d08:	e8 d8 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d0d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104d10:	90                   	nop
f0104d11:	c9                   	leave  
f0104d12:	c3                   	ret    

f0104d13 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104d13:	55                   	push   %ebp
f0104d14:	89 e5                	mov    %esp,%ebp
f0104d16:	83 ec 28             	sub    $0x28,%esp
f0104d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d1c:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104d1f:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d26:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104d2a:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104d2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d30:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104d31:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104d35:	83 ec 0c             	sub    $0xc,%esp
f0104d38:	50                   	push   %eax
f0104d39:	e8 d2 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d3e:	83 c4 10             	add    $0x10,%esp
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d41:	83 ec 0c             	sub    $0xc,%esp
f0104d44:	6a 00                	push   $0x0
f0104d46:	e8 9a 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d4b:	83 c4 10             	add    $0x10,%esp
}
f0104d4e:	90                   	nop
f0104d4f:	c9                   	leave  
f0104d50:	c3                   	ret    

f0104d51 <kclock_set_quantum>:

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104d51:	55                   	push   %ebp
f0104d52:	89 e5                	mov    %esp,%ebp
f0104d54:	56                   	push   %esi
f0104d55:	53                   	push   %ebx
f0104d56:	83 ec 20             	sub    $0x20,%esp
f0104d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104d5f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104d63:	0f 87 8a 00 00 00    	ja     f0104df3 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104d69:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104d6d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d72:	99                   	cltd   
f0104d73:	f7 fe                	idiv   %esi
f0104d75:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104d7b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104d7f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104d84:	99                   	cltd   
f0104d85:	f7 fb                	idiv   %ebx
f0104d87:	89 c6                	mov    %eax,%esi
f0104d89:	89 c8                	mov    %ecx,%eax
f0104d8b:	99                   	cltd   
f0104d8c:	f7 fe                	idiv   %esi
f0104d8e:	89 c3                	mov    %eax,%ebx
f0104d90:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104d94:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d99:	99                   	cltd   
f0104d9a:	f7 f9                	idiv   %ecx
f0104d9c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104da2:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104da6:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104dab:	99                   	cltd   
f0104dac:	f7 fe                	idiv   %esi
f0104dae:	89 c6                	mov    %eax,%esi
f0104db0:	89 c8                	mov    %ecx,%eax
f0104db2:	99                   	cltd   
f0104db3:	f7 fe                	idiv   %esi
f0104db5:	25 01 00 00 80       	and    $0x80000001,%eax
f0104dba:	85 c0                	test   %eax,%eax
f0104dbc:	79 05                	jns    f0104dc3 <kclock_set_quantum+0x72>
f0104dbe:	48                   	dec    %eax
f0104dbf:	83 c8 fe             	or     $0xfffffffe,%eax
f0104dc2:	40                   	inc    %eax
f0104dc3:	01 d8                	add    %ebx,%eax
f0104dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dc8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104dcf:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104dd3:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104dd6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104dd9:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ddd:	0f b7 c0             	movzwl %ax,%eax
f0104de0:	83 ec 0c             	sub    $0xc,%esp
f0104de3:	50                   	push   %eax
f0104de4:	e8 27 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104de9:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104dec:	e8 97 fe ff ff       	call   f0104c88 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104df1:	eb 16                	jmp    f0104e09 <kclock_set_quantum+0xb8>
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
		//cprintf("\nkclock_set_quantum: clock after stop = %d\n",cnt0);
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104df3:	6a 35                	push   $0x35
f0104df5:	68 d0 60 12 f0       	push   $0xf01260d0
f0104dfa:	68 ea 00 00 00       	push   $0xea
f0104dff:	68 2c 61 12 f0       	push   $0xf012612c
f0104e04:	e8 11 b5 ff ff       	call   f010031a <_panic>
	}
}
f0104e09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104e0c:	5b                   	pop    %ebx
f0104e0d:	5e                   	pop    %esi
f0104e0e:	5d                   	pop    %ebp
f0104e0f:	c3                   	ret    

f0104e10 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104e10:	55                   	push   %ebp
f0104e11:	89 e5                	mov    %esp,%ebp
f0104e13:	83 ec 28             	sub    $0x28,%esp
f0104e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e19:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	/*You must prevent other code from setting the PIT channel's reload value or reading
	 * its current count once you've sent the lowest 8 bits. Disabling interrupts works
	 * for single CPU computers
	 * */
	pushcli();	//disable interrupt
f0104e1d:	e8 9e 23 00 00       	call   f01071c0 <pushcli>
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104e22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e25:	0f b6 c0             	movzbl %al,%eax
f0104e28:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%ebp)
f0104e2f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0104e32:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104e35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e38:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104e39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e3c:	66 c1 e8 08          	shr    $0x8,%ax
f0104e40:	0f b6 c0             	movzbl %al,%eax
f0104e43:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)
f0104e4a:	88 45 ef             	mov    %al,-0x11(%ebp)
f0104e4d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104e53:	ee                   	out    %al,(%dx)
	popcli();	//enable interrupt
f0104e54:	e8 b9 23 00 00       	call   f0107212 <popcli>

}
f0104e59:	90                   	nop
f0104e5a:	c9                   	leave  
f0104e5b:	c3                   	ret    

f0104e5c <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104e5c:	55                   	push   %ebp
f0104e5d:	89 e5                	mov    %esp,%ebp
f0104e5f:	83 ec 28             	sub    $0x28,%esp
	pushcli();	//disable interrupt
f0104e62:	e8 59 23 00 00       	call   f01071c0 <pushcli>
f0104e67:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e71:	89 c2                	mov    %eax,%edx
f0104e73:	ec                   	in     (%dx),%al
f0104e74:	88 45 e6             	mov    %al,-0x1a(%ebp)
	return data;
f0104e77:	8a 45 e6             	mov    -0x1a(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104e7a:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104e7d:	c7 45 e8 40 00 00 00 	movl   $0x40,-0x18(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104e87:	89 c2                	mov    %eax,%edx
f0104e89:	ec                   	in     (%dx),%al
f0104e8a:	88 45 e7             	mov    %al,-0x19(%ebp)
	return data;
f0104e8d:	8a 45 e7             	mov    -0x19(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104e90:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104e93:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0104e97:	c1 e0 08             	shl    $0x8,%eax
f0104e9a:	89 c2                	mov    %eax,%edx
f0104e9c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ea0:	09 d0                	or     %edx,%eax
f0104ea2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	popcli();	//enable interrupt
f0104ea6:	e8 67 23 00 00       	call   f0107212 <popcli>
	return cnt0 ;
f0104eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104eae:	c9                   	leave  
f0104eaf:	c3                   	ret    

f0104eb0 <kclock_read_cnt0_latch>:
 * instead of 0x0200 (or 0x01FF).
 * REF: OSDev Wiki
 */
uint16
kclock_read_cnt0_latch(void)
{
f0104eb0:	55                   	push   %ebp
f0104eb1:	89 e5                	mov    %esp,%ebp
f0104eb3:	83 ec 30             	sub    $0x30,%esp
f0104eb6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ebd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ec0:	89 c2                	mov    %eax,%edx
f0104ec2:	ec                   	in     (%dx),%al
f0104ec3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104ec6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104ec9:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ecc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ed3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ed7:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104edd:	ee                   	out    %al,(%dx)
f0104ede:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ee8:	89 c2                	mov    %eax,%edx
f0104eea:	ec                   	in     (%dx),%al
f0104eeb:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104eee:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ef1:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104ef4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104efb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104efe:	89 c2                	mov    %eax,%edx
f0104f00:	ec                   	in     (%dx),%al
f0104f01:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104f04:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104f07:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104f0a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104f0e:	c1 e0 08             	shl    $0x8,%eax
f0104f11:	89 c2                	mov    %eax,%edx
f0104f13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104f17:	09 d0                	or     %edx,%eax
f0104f19:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104f1d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104f21:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104f28:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104f2b:	8a 45 df             	mov    -0x21(%ebp),%al
f0104f2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104f31:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104f35:	c9                   	leave  
f0104f36:	c3                   	ret    

f0104f37 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104f37:	55                   	push   %ebp
f0104f38:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f3e:	74 1d                	je     f0104f5d <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104f40:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104f5d:	90                   	nop
f0104f5e:	5d                   	pop    %ebp
f0104f5f:	c3                   	ret    

f0104f60 <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104f60:	55                   	push   %ebp
f0104f61:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f67:	74 08                	je     f0104f71 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f6f:	eb 05                	jmp    f0104f76 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104f71:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104f76:	5d                   	pop    %ebp
f0104f77:	c3                   	ret    

f0104f78 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104f78:	55                   	push   %ebp
f0104f79:	89 e5                	mov    %esp,%ebp
f0104f7b:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f82:	75 16                	jne    f0104f9a <enqueue+0x22>
f0104f84:	68 40 61 12 f0       	push   $0xf0126140
f0104f89:	68 4e 61 12 f0       	push   $0xf012614e
f0104f8e:	6a 34                	push   $0x34
f0104f90:	68 63 61 12 f0       	push   $0xf0126163
f0104f95:	e8 80 b3 ff ff       	call   f010031a <_panic>
	if(env != NULL)
f0104f9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f9e:	74 66                	je     f0105006 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104fa0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104fa4:	75 14                	jne    f0104fba <enqueue+0x42>
f0104fa6:	83 ec 04             	sub    $0x4,%esp
f0104fa9:	68 7c 61 12 f0       	push   $0xf012617c
f0104fae:	6a 37                	push   $0x37
f0104fb0:	68 63 61 12 f0       	push   $0xf0126163
f0104fb5:	e8 60 b3 ff ff       	call   f010031a <_panic>
f0104fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fbd:	8b 10                	mov    (%eax),%edx
f0104fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc2:	89 50 08             	mov    %edx,0x8(%eax)
f0104fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc8:	8b 40 08             	mov    0x8(%eax),%eax
f0104fcb:	85 c0                	test   %eax,%eax
f0104fcd:	74 0d                	je     f0104fdc <enqueue+0x64>
f0104fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fd2:	8b 00                	mov    (%eax),%eax
f0104fd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fd7:	89 50 0c             	mov    %edx,0xc(%eax)
f0104fda:	eb 09                	jmp    f0104fe5 <enqueue+0x6d>
f0104fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fdf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fe2:	89 50 04             	mov    %edx,0x4(%eax)
f0104fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104feb:	89 10                	mov    %edx,(%eax)
f0104fed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ff0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0104ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffa:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ffd:	8d 50 01             	lea    0x1(%eax),%edx
f0105000:	8b 45 08             	mov    0x8(%ebp),%eax
f0105003:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105006:	90                   	nop
f0105007:	c9                   	leave  
f0105008:	c3                   	ret    

f0105009 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0105009:	55                   	push   %ebp
f010500a:	89 e5                	mov    %esp,%ebp
f010500c:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f010500f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105013:	75 0a                	jne    f010501f <dequeue+0x16>
f0105015:	b8 00 00 00 00       	mov    $0x0,%eax
f010501a:	e9 a0 00 00 00       	jmp    f01050bf <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f010501f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105022:	8b 40 04             	mov    0x4(%eax),%eax
f0105025:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0105028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502c:	0f 84 8a 00 00 00    	je     f01050bc <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0105032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105036:	75 14                	jne    f010504c <dequeue+0x43>
f0105038:	83 ec 04             	sub    $0x4,%esp
f010503b:	68 9f 61 12 f0       	push   $0xf012619f
f0105040:	6a 44                	push   $0x44
f0105042:	68 63 61 12 f0       	push   $0xf0126163
f0105047:	e8 ce b2 ff ff       	call   f010031a <_panic>
f010504c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504f:	8b 40 08             	mov    0x8(%eax),%eax
f0105052:	85 c0                	test   %eax,%eax
f0105054:	74 11                	je     f0105067 <dequeue+0x5e>
f0105056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105059:	8b 40 08             	mov    0x8(%eax),%eax
f010505c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010505f:	8b 52 0c             	mov    0xc(%edx),%edx
f0105062:	89 50 0c             	mov    %edx,0xc(%eax)
f0105065:	eb 0c                	jmp    f0105073 <dequeue+0x6a>
f0105067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506a:	8b 50 0c             	mov    0xc(%eax),%edx
f010506d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105070:	89 50 04             	mov    %edx,0x4(%eax)
f0105073:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105076:	8b 40 0c             	mov    0xc(%eax),%eax
f0105079:	85 c0                	test   %eax,%eax
f010507b:	74 11                	je     f010508e <dequeue+0x85>
f010507d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105080:	8b 40 0c             	mov    0xc(%eax),%eax
f0105083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105086:	8b 52 08             	mov    0x8(%edx),%edx
f0105089:	89 50 08             	mov    %edx,0x8(%eax)
f010508c:	eb 0b                	jmp    f0105099 <dequeue+0x90>
f010508e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105091:	8b 50 08             	mov    0x8(%eax),%edx
f0105094:	8b 45 08             	mov    0x8(%ebp),%eax
f0105097:	89 10                	mov    %edx,(%eax)
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01050a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050a6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01050ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b0:	8b 40 0c             	mov    0xc(%eax),%eax
f01050b3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01050b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b9:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01050bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01050bf:	c9                   	leave  
f01050c0:	c3                   	ret    

f01050c1 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01050c1:	55                   	push   %ebp
f01050c2:	89 e5                	mov    %esp,%ebp
f01050c4:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01050c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050cb:	75 16                	jne    f01050e3 <remove_from_queue+0x22>
f01050cd:	68 40 61 12 f0       	push   $0xf0126140
f01050d2:	68 4e 61 12 f0       	push   $0xf012614e
f01050d7:	6a 4e                	push   $0x4e
f01050d9:	68 63 61 12 f0       	push   $0xf0126163
f01050de:	e8 37 b2 ff ff       	call   f010031a <_panic>

	if (e != NULL)
f01050e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050e7:	0f 84 8a 00 00 00    	je     f0105177 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f01050ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050f1:	75 14                	jne    f0105107 <remove_from_queue+0x46>
f01050f3:	83 ec 04             	sub    $0x4,%esp
f01050f6:	68 9f 61 12 f0       	push   $0xf012619f
f01050fb:	6a 52                	push   $0x52
f01050fd:	68 63 61 12 f0       	push   $0xf0126163
f0105102:	e8 13 b2 ff ff       	call   f010031a <_panic>
f0105107:	8b 45 0c             	mov    0xc(%ebp),%eax
f010510a:	8b 40 08             	mov    0x8(%eax),%eax
f010510d:	85 c0                	test   %eax,%eax
f010510f:	74 11                	je     f0105122 <remove_from_queue+0x61>
f0105111:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105114:	8b 40 08             	mov    0x8(%eax),%eax
f0105117:	8b 55 0c             	mov    0xc(%ebp),%edx
f010511a:	8b 52 0c             	mov    0xc(%edx),%edx
f010511d:	89 50 0c             	mov    %edx,0xc(%eax)
f0105120:	eb 0c                	jmp    f010512e <remove_from_queue+0x6d>
f0105122:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105125:	8b 50 0c             	mov    0xc(%eax),%edx
f0105128:	8b 45 08             	mov    0x8(%ebp),%eax
f010512b:	89 50 04             	mov    %edx,0x4(%eax)
f010512e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105131:	8b 40 0c             	mov    0xc(%eax),%eax
f0105134:	85 c0                	test   %eax,%eax
f0105136:	74 11                	je     f0105149 <remove_from_queue+0x88>
f0105138:	8b 45 0c             	mov    0xc(%ebp),%eax
f010513b:	8b 40 0c             	mov    0xc(%eax),%eax
f010513e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105141:	8b 52 08             	mov    0x8(%edx),%edx
f0105144:	89 50 08             	mov    %edx,0x8(%eax)
f0105147:	eb 0b                	jmp    f0105154 <remove_from_queue+0x93>
f0105149:	8b 45 0c             	mov    0xc(%ebp),%eax
f010514c:	8b 50 08             	mov    0x8(%eax),%edx
f010514f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105152:	89 10                	mov    %edx,(%eax)
f0105154:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105157:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010515e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105161:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105168:	8b 45 08             	mov    0x8(%ebp),%eax
f010516b:	8b 40 0c             	mov    0xc(%eax),%eax
f010516e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105171:	8b 45 08             	mov    0x8(%ebp),%eax
f0105174:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105177:	90                   	nop
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	75 07                	jne    f010518d <find_env_in_queue+0x13>
f0105186:	b8 00 00 00 00       	mov    $0x0,%eax
f010518b:	eb 58                	jmp    f01051e5 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f010518d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0105194:	8b 45 08             	mov    0x8(%ebp),%eax
f0105197:	8b 00                	mov    (%eax),%eax
f0105199:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010519c:	eb 19                	jmp    f01051b7 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f010519e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051a1:	8b 40 10             	mov    0x10(%eax),%eax
f01051a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01051a7:	75 05                	jne    f01051ae <find_env_in_queue+0x34>
		{
			return ptr_env;
f01051a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051ac:	eb 37                	jmp    f01051e5 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01051ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b1:	8b 40 08             	mov    0x8(%eax),%eax
f01051b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01051b7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051bb:	74 08                	je     f01051c5 <find_env_in_queue+0x4b>
f01051bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051c0:	8b 40 08             	mov    0x8(%eax),%eax
f01051c3:	eb 05                	jmp    f01051ca <find_env_in_queue+0x50>
f01051c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01051ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01051cd:	89 42 08             	mov    %eax,0x8(%edx)
f01051d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d3:	8b 40 08             	mov    0x8(%eax),%eax
f01051d6:	85 c0                	test   %eax,%eax
f01051d8:	75 c4                	jne    f010519e <find_env_in_queue+0x24>
f01051da:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051de:	75 be                	jne    f010519e <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01051e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01051e5:	c9                   	leave  
f01051e6:	c3                   	ret    

f01051e7 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f01051e7:	55                   	push   %ebp
f01051e8:	89 e5                	mov    %esp,%ebp
			kfree(quantums);
	}
	release_spinlock(&ProcessQueues.qlock);

#endif
}
f01051ea:	90                   	nop
f01051eb:	5d                   	pop    %ebp
f01051ec:	c3                   	ret    

f01051ed <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f01051ed:	55                   	push   %ebp
f01051ee:	89 e5                	mov    %esp,%ebp
f01051f0:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01051f3:	83 ec 0c             	sub    $0xc,%esp
f01051f6:	68 60 64 55 f0       	push   $0xf0556460
f01051fb:	e8 f0 9a 00 00       	call   f010ecf0 <holding_spinlock>
f0105200:	83 c4 10             	add    $0x10,%esp
f0105203:	85 c0                	test   %eax,%eax
f0105205:	75 17                	jne    f010521e <sched_insert_ready0+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105207:	83 ec 04             	sub    $0x4,%esp
f010520a:	68 c0 61 12 f0       	push   $0xf01261c0
f010520f:	68 85 00 00 00       	push   $0x85
f0105214:	68 63 61 12 f0       	push   $0xf0126163
f0105219:	e8 fc b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010521e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105222:	75 19                	jne    f010523d <sched_insert_ready0+0x50>
f0105224:	68 01 62 12 f0       	push   $0xf0126201
f0105229:	68 4e 61 12 f0       	push   $0xf012614e
f010522e:	68 88 00 00 00       	push   $0x88
f0105233:	68 63 61 12 f0       	push   $0xf0126163
f0105238:	e8 dd b0 ff ff       	call   f010031a <_panic>
	{
		//cprintf("\nInserting %d into ready queue 0\n", env->env_id);
		env->env_status = ENV_READY ;
f010523d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105240:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		enqueue(&(ProcessQueues.env_ready_queues[0]), env);
f0105247:	83 ec 08             	sub    $0x8,%esp
f010524a:	ff 75 08             	pushl  0x8(%ebp)
f010524d:	68 f0 64 55 f0       	push   $0xf05564f0
f0105252:	e8 21 fd ff ff       	call   f0104f78 <enqueue>
f0105257:	83 c4 10             	add    $0x10,%esp
	}
}
f010525a:	90                   	nop
f010525b:	c9                   	leave  
f010525c:	c3                   	ret    

f010525d <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f010525d:	55                   	push   %ebp
f010525e:	89 e5                	mov    %esp,%ebp
f0105260:	83 ec 18             	sub    $0x18,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105263:	83 ec 0c             	sub    $0xc,%esp
f0105266:	68 60 64 55 f0       	push   $0xf0556460
f010526b:	e8 80 9a 00 00       	call   f010ecf0 <holding_spinlock>
f0105270:	83 c4 10             	add    $0x10,%esp
f0105273:	85 c0                	test   %eax,%eax
f0105275:	75 17                	jne    f010528e <sched_remove_ready+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105277:	83 ec 04             	sub    $0x4,%esp
f010527a:	68 c0 61 12 f0       	push   $0xf01261c0
f010527f:	68 97 00 00 00       	push   $0x97
f0105284:	68 63 61 12 f0       	push   $0xf0126163
f0105289:	e8 8c b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
f010528e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105292:	74 0b                	je     f010529f <sched_remove_ready+0x42>
f0105294:	8b 45 08             	mov    0x8(%ebp),%eax
f0105297:	8b 40 18             	mov    0x18(%eax),%eax
f010529a:	83 f8 01             	cmp    $0x1,%eax
f010529d:	74 19                	je     f01052b8 <sched_remove_ready+0x5b>
f010529f:	68 10 62 12 f0       	push   $0xf0126210
f01052a4:	68 4e 61 12 f0       	push   $0xf012614e
f01052a9:	68 9a 00 00 00       	push   $0x9a
f01052ae:	68 63 61 12 f0       	push   $0xf0126163
f01052b3:	e8 62 b0 ff ff       	call   f010031a <_panic>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01052bf:	e9 f7 00 00 00       	jmp    f01053bb <sched_remove_ready+0x15e>
		{
			struct Env * ptr_env = find_env_in_queue(&(ProcessQueues.env_ready_queues[i]), env->env_id);
f01052c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c7:	8b 40 10             	mov    0x10(%eax),%eax
f01052ca:	89 c2                	mov    %eax,%edx
f01052cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052cf:	83 c0 09             	add    $0x9,%eax
f01052d2:	c1 e0 04             	shl    $0x4,%eax
f01052d5:	05 60 64 55 f0       	add    $0xf0556460,%eax
f01052da:	83 ec 08             	sub    $0x8,%esp
f01052dd:	52                   	push   %edx
f01052de:	50                   	push   %eax
f01052df:	e8 96 fe ff ff       	call   f010517a <find_env_in_queue>
f01052e4:	83 c4 10             	add    $0x10,%esp
f01052e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01052ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ee:	0f 84 c4 00 00 00    	je     f01053b8 <sched_remove_ready+0x15b>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), env);
f01052f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052f8:	75 17                	jne    f0105311 <sched_remove_ready+0xb4>
f01052fa:	83 ec 04             	sub    $0x4,%esp
f01052fd:	68 9f 61 12 f0       	push   $0xf012619f
f0105302:	68 a1 00 00 00       	push   $0xa1
f0105307:	68 63 61 12 f0       	push   $0xf0126163
f010530c:	e8 09 b0 ff ff       	call   f010031a <_panic>
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	8b 40 08             	mov    0x8(%eax),%eax
f0105317:	85 c0                	test   %eax,%eax
f0105319:	74 11                	je     f010532c <sched_remove_ready+0xcf>
f010531b:	8b 45 08             	mov    0x8(%ebp),%eax
f010531e:	8b 40 08             	mov    0x8(%eax),%eax
f0105321:	8b 55 08             	mov    0x8(%ebp),%edx
f0105324:	8b 52 0c             	mov    0xc(%edx),%edx
f0105327:	89 50 0c             	mov    %edx,0xc(%eax)
f010532a:	eb 17                	jmp    f0105343 <sched_remove_ready+0xe6>
f010532c:	8b 45 08             	mov    0x8(%ebp),%eax
f010532f:	8b 40 0c             	mov    0xc(%eax),%eax
f0105332:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105335:	83 c2 09             	add    $0x9,%edx
f0105338:	c1 e2 04             	shl    $0x4,%edx
f010533b:	81 c2 64 64 55 f0    	add    $0xf0556464,%edx
f0105341:	89 02                	mov    %eax,(%edx)
f0105343:	8b 45 08             	mov    0x8(%ebp),%eax
f0105346:	8b 40 0c             	mov    0xc(%eax),%eax
f0105349:	85 c0                	test   %eax,%eax
f010534b:	74 11                	je     f010535e <sched_remove_ready+0x101>
f010534d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105350:	8b 40 0c             	mov    0xc(%eax),%eax
f0105353:	8b 55 08             	mov    0x8(%ebp),%edx
f0105356:	8b 52 08             	mov    0x8(%edx),%edx
f0105359:	89 50 08             	mov    %edx,0x8(%eax)
f010535c:	eb 17                	jmp    f0105375 <sched_remove_ready+0x118>
f010535e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105361:	8b 40 08             	mov    0x8(%eax),%eax
f0105364:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105367:	83 c2 09             	add    $0x9,%edx
f010536a:	c1 e2 04             	shl    $0x4,%edx
f010536d:	81 c2 60 64 55 f0    	add    $0xf0556460,%edx
f0105373:	89 02                	mov    %eax,(%edx)
f0105375:	8b 45 08             	mov    0x8(%ebp),%eax
f0105378:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010537f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105382:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538c:	83 c0 09             	add    $0x9,%eax
f010538f:	c1 e0 04             	shl    $0x4,%eax
f0105392:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f0105397:	8b 00                	mov    (%eax),%eax
f0105399:	8d 50 ff             	lea    -0x1(%eax),%edx
f010539c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539f:	83 c0 09             	add    $0x9,%eax
f01053a2:	c1 e0 04             	shl    $0x4,%eax
f01053a5:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f01053aa:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01053ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01053af:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
				return ;
f01053b6:	eb 14                	jmp    f01053cc <sched_remove_ready+0x16f>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01053b8:	ff 45 f4             	incl   -0xc(%ebp)
f01053bb:	a0 60 91 55 f0       	mov    0xf0559160,%al
f01053c0:	0f b6 c0             	movzbl %al,%eax
f01053c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01053c6:	0f 8f f8 fe ff ff    	jg     f01052c4 <sched_remove_ready+0x67>
				env->env_status = ENV_UNKNOWN;
				return ;
			}
		}
	}
}
f01053cc:	c9                   	leave  
f01053cd:	c3                   	ret    

f01053ce <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f01053ce:	55                   	push   %ebp
f01053cf:	89 e5                	mov    %esp,%ebp
f01053d1:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01053d4:	83 ec 0c             	sub    $0xc,%esp
f01053d7:	68 60 64 55 f0       	push   $0xf0556460
f01053dc:	e8 0f 99 00 00       	call   f010ecf0 <holding_spinlock>
f01053e1:	83 c4 10             	add    $0x10,%esp
f01053e4:	85 c0                	test   %eax,%eax
f01053e6:	75 17                	jne    f01053ff <sched_insert_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01053e8:	83 ec 04             	sub    $0x4,%esp
f01053eb:	68 c0 61 12 f0       	push   $0xf01261c0
f01053f0:	68 b0 00 00 00       	push   $0xb0
f01053f5:	68 63 61 12 f0       	push   $0xf0126163
f01053fa:	e8 1b af ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f01053ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105403:	75 19                	jne    f010541e <sched_insert_new+0x50>
f0105405:	68 01 62 12 f0       	push   $0xf0126201
f010540a:	68 4e 61 12 f0       	push   $0xf012614e
f010540f:	68 b3 00 00 00       	push   $0xb3
f0105414:	68 63 61 12 f0       	push   $0xf0126163
f0105419:	e8 fc ae ff ff       	call   f010031a <_panic>
	{
		env->env_status = ENV_NEW ;
f010541e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105421:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
		enqueue(&ProcessQueues.env_new_queue, env);
f0105428:	83 ec 08             	sub    $0x8,%esp
f010542b:	ff 75 08             	pushl  0x8(%ebp)
f010542e:	68 d0 64 55 f0       	push   $0xf05564d0
f0105433:	e8 40 fb ff ff       	call   f0104f78 <enqueue>
f0105438:	83 c4 10             	add    $0x10,%esp
	}
}
f010543b:	90                   	nop
f010543c:	c9                   	leave  
f010543d:	c3                   	ret    

f010543e <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f010543e:	55                   	push   %ebp
f010543f:	89 e5                	mov    %esp,%ebp
f0105441:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105444:	83 ec 0c             	sub    $0xc,%esp
f0105447:	68 60 64 55 f0       	push   $0xf0556460
f010544c:	e8 9f 98 00 00       	call   f010ecf0 <holding_spinlock>
f0105451:	83 c4 10             	add    $0x10,%esp
f0105454:	85 c0                	test   %eax,%eax
f0105456:	75 17                	jne    f010546f <sched_remove_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 c0 61 12 f0       	push   $0xf01261c0
f0105460:	68 c1 00 00 00       	push   $0xc1
f0105465:	68 63 61 12 f0       	push   $0xf0126163
f010546a:	e8 ab ae ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_NEW);
f010546f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105473:	74 0b                	je     f0105480 <sched_remove_new+0x42>
f0105475:	8b 45 08             	mov    0x8(%ebp),%eax
f0105478:	8b 40 18             	mov    0x18(%eax),%eax
f010547b:	83 f8 04             	cmp    $0x4,%eax
f010547e:	74 19                	je     f0105499 <sched_remove_new+0x5b>
f0105480:	68 3c 62 12 f0       	push   $0xf012623c
f0105485:	68 4e 61 12 f0       	push   $0xf012614e
f010548a:	68 c4 00 00 00       	push   $0xc4
f010548f:	68 63 61 12 f0       	push   $0xf0126163
f0105494:	e8 81 ae ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_new_queue, env) ;
f0105499:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010549d:	75 17                	jne    f01054b6 <sched_remove_new+0x78>
f010549f:	83 ec 04             	sub    $0x4,%esp
f01054a2:	68 9f 61 12 f0       	push   $0xf012619f
f01054a7:	68 c6 00 00 00       	push   $0xc6
f01054ac:	68 63 61 12 f0       	push   $0xf0126163
f01054b1:	e8 64 ae ff ff       	call   f010031a <_panic>
f01054b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054b9:	8b 40 08             	mov    0x8(%eax),%eax
f01054bc:	85 c0                	test   %eax,%eax
f01054be:	74 11                	je     f01054d1 <sched_remove_new+0x93>
f01054c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01054c3:	8b 40 08             	mov    0x8(%eax),%eax
f01054c6:	8b 55 08             	mov    0x8(%ebp),%edx
f01054c9:	8b 52 0c             	mov    0xc(%edx),%edx
f01054cc:	89 50 0c             	mov    %edx,0xc(%eax)
f01054cf:	eb 0b                	jmp    f01054dc <sched_remove_new+0x9e>
f01054d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01054d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01054d7:	a3 d4 64 55 f0       	mov    %eax,0xf05564d4
f01054dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01054df:	8b 40 0c             	mov    0xc(%eax),%eax
f01054e2:	85 c0                	test   %eax,%eax
f01054e4:	74 11                	je     f01054f7 <sched_remove_new+0xb9>
f01054e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054e9:	8b 40 0c             	mov    0xc(%eax),%eax
f01054ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01054ef:	8b 52 08             	mov    0x8(%edx),%edx
f01054f2:	89 50 08             	mov    %edx,0x8(%eax)
f01054f5:	eb 0b                	jmp    f0105502 <sched_remove_new+0xc4>
f01054f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fa:	8b 40 08             	mov    0x8(%eax),%eax
f01054fd:	a3 d0 64 55 f0       	mov    %eax,0xf05564d0
f0105502:	8b 45 08             	mov    0x8(%ebp),%eax
f0105505:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010550c:	8b 45 08             	mov    0x8(%ebp),%eax
f010550f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105516:	a1 dc 64 55 f0       	mov    0xf05564dc,%eax
f010551b:	48                   	dec    %eax
f010551c:	a3 dc 64 55 f0       	mov    %eax,0xf05564dc
		env->env_status = ENV_UNKNOWN;
f0105521:	8b 45 08             	mov    0x8(%ebp),%eax
f0105524:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f010552b:	90                   	nop
f010552c:	c9                   	leave  
f010552d:	c3                   	ret    

f010552e <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010552e:	55                   	push   %ebp
f010552f:	89 e5                	mov    %esp,%ebp
f0105531:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105534:	83 ec 0c             	sub    $0xc,%esp
f0105537:	68 60 64 55 f0       	push   $0xf0556460
f010553c:	e8 af 97 00 00       	call   f010ecf0 <holding_spinlock>
f0105541:	83 c4 10             	add    $0x10,%esp
f0105544:	85 c0                	test   %eax,%eax
f0105546:	75 17                	jne    f010555f <sched_insert_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105548:	83 ec 04             	sub    $0x4,%esp
f010554b:	68 c0 61 12 f0       	push   $0xf01261c0
f0105550:	68 d2 00 00 00       	push   $0xd2
f0105555:	68 63 61 12 f0       	push   $0xf0126163
f010555a:	e8 bb ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010555f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105563:	75 19                	jne    f010557e <sched_insert_exit+0x50>
f0105565:	68 01 62 12 f0       	push   $0xf0126201
f010556a:	68 4e 61 12 f0       	push   $0xf012614e
f010556f:	68 d5 00 00 00       	push   $0xd5
f0105574:	68 63 61 12 f0       	push   $0xf0126163
f0105579:	e8 9c ad ff ff       	call   f010031a <_panic>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f010557e:	e8 06 92 00 00       	call   f010e789 <isBufferingEnabled>
f0105583:	84 c0                	test   %al,%al
f0105585:	74 0e                	je     f0105595 <sched_insert_exit+0x67>
f0105587:	83 ec 0c             	sub    $0xc,%esp
f010558a:	ff 75 08             	pushl  0x8(%ebp)
f010558d:	e8 ef 67 00 00       	call   f010bd81 <cleanup_buffers>
f0105592:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105595:	8b 45 08             	mov    0x8(%ebp),%eax
f0105598:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%eax)
		enqueue(&ProcessQueues.env_exit_queue, env);
f010559f:	83 ec 08             	sub    $0x8,%esp
f01055a2:	ff 75 08             	pushl  0x8(%ebp)
f01055a5:	68 e0 64 55 f0       	push   $0xf05564e0
f01055aa:	e8 c9 f9 ff ff       	call   f0104f78 <enqueue>
f01055af:	83 c4 10             	add    $0x10,%esp
	}
}
f01055b2:	90                   	nop
f01055b3:	c9                   	leave  
f01055b4:	c3                   	ret    

f01055b5 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f01055b5:	55                   	push   %ebp
f01055b6:	89 e5                	mov    %esp,%ebp
f01055b8:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01055bb:	83 ec 0c             	sub    $0xc,%esp
f01055be:	68 60 64 55 f0       	push   $0xf0556460
f01055c3:	e8 28 97 00 00       	call   f010ecf0 <holding_spinlock>
f01055c8:	83 c4 10             	add    $0x10,%esp
f01055cb:	85 c0                	test   %eax,%eax
f01055cd:	75 17                	jne    f01055e6 <sched_remove_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01055cf:	83 ec 04             	sub    $0x4,%esp
f01055d2:	68 c0 61 12 f0       	push   $0xf01261c0
f01055d7:	68 e3 00 00 00       	push   $0xe3
f01055dc:	68 63 61 12 f0       	push   $0xf0126163
f01055e1:	e8 34 ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_EXIT);
f01055e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01055ea:	74 0b                	je     f01055f7 <sched_remove_exit+0x42>
f01055ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01055ef:	8b 40 18             	mov    0x18(%eax),%eax
f01055f2:	83 f8 05             	cmp    $0x5,%eax
f01055f5:	74 19                	je     f0105610 <sched_remove_exit+0x5b>
f01055f7:	68 68 62 12 f0       	push   $0xf0126268
f01055fc:	68 4e 61 12 f0       	push   $0xf012614e
f0105601:	68 e6 00 00 00       	push   $0xe6
f0105606:	68 63 61 12 f0       	push   $0xf0126163
f010560b:	e8 0a ad ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_exit_queue, env) ;
f0105610:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105614:	75 17                	jne    f010562d <sched_remove_exit+0x78>
f0105616:	83 ec 04             	sub    $0x4,%esp
f0105619:	68 9f 61 12 f0       	push   $0xf012619f
f010561e:	68 e8 00 00 00       	push   $0xe8
f0105623:	68 63 61 12 f0       	push   $0xf0126163
f0105628:	e8 ed ac ff ff       	call   f010031a <_panic>
f010562d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105630:	8b 40 08             	mov    0x8(%eax),%eax
f0105633:	85 c0                	test   %eax,%eax
f0105635:	74 11                	je     f0105648 <sched_remove_exit+0x93>
f0105637:	8b 45 08             	mov    0x8(%ebp),%eax
f010563a:	8b 40 08             	mov    0x8(%eax),%eax
f010563d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105640:	8b 52 0c             	mov    0xc(%edx),%edx
f0105643:	89 50 0c             	mov    %edx,0xc(%eax)
f0105646:	eb 0b                	jmp    f0105653 <sched_remove_exit+0x9e>
f0105648:	8b 45 08             	mov    0x8(%ebp),%eax
f010564b:	8b 40 0c             	mov    0xc(%eax),%eax
f010564e:	a3 e4 64 55 f0       	mov    %eax,0xf05564e4
f0105653:	8b 45 08             	mov    0x8(%ebp),%eax
f0105656:	8b 40 0c             	mov    0xc(%eax),%eax
f0105659:	85 c0                	test   %eax,%eax
f010565b:	74 11                	je     f010566e <sched_remove_exit+0xb9>
f010565d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105660:	8b 40 0c             	mov    0xc(%eax),%eax
f0105663:	8b 55 08             	mov    0x8(%ebp),%edx
f0105666:	8b 52 08             	mov    0x8(%edx),%edx
f0105669:	89 50 08             	mov    %edx,0x8(%eax)
f010566c:	eb 0b                	jmp    f0105679 <sched_remove_exit+0xc4>
f010566e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105671:	8b 40 08             	mov    0x8(%eax),%eax
f0105674:	a3 e0 64 55 f0       	mov    %eax,0xf05564e0
f0105679:	8b 45 08             	mov    0x8(%ebp),%eax
f010567c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105683:	8b 45 08             	mov    0x8(%ebp),%eax
f0105686:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010568d:	a1 ec 64 55 f0       	mov    0xf05564ec,%eax
f0105692:	48                   	dec    %eax
f0105693:	a3 ec 64 55 f0       	mov    %eax,0xf05564ec
		env->env_status = ENV_UNKNOWN;
f0105698:	8b 45 08             	mov    0x8(%ebp),%eax
f010569b:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f01056a2:	90                   	nop
f01056a3:	c9                   	leave  
f01056a4:	c3                   	ret    

f01056a5 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f01056a5:	55                   	push   %ebp
f01056a6:	89 e5                	mov    %esp,%ebp
f01056a8:	83 ec 08             	sub    $0x8,%esp
	  //cprintf("\n[SCHED_NEW_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056ab:	83 ec 0c             	sub    $0xc,%esp
f01056ae:	68 60 64 55 f0       	push   $0xf0556460
f01056b3:	e8 1f 94 00 00       	call   f010ead7 <acquire_spinlock>
f01056b8:	83 c4 10             	add    $0x10,%esp

	//add the given env to the scheduler NEW queue
	assert (e!=NULL);
f01056bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01056bf:	75 19                	jne    f01056da <sched_new_env+0x35>
f01056c1:	68 93 62 12 f0       	push   $0xf0126293
f01056c6:	68 4e 61 12 f0       	push   $0xf012614e
f01056cb:	68 f6 00 00 00       	push   $0xf6
f01056d0:	68 63 61 12 f0       	push   $0xf0126163
f01056d5:	e8 40 ac ff ff       	call   f010031a <_panic>
	{
		sched_insert_new(e);
f01056da:	83 ec 0c             	sub    $0xc,%esp
f01056dd:	ff 75 08             	pushl  0x8(%ebp)
f01056e0:	e8 e9 fc ff ff       	call   f01053ce <sched_insert_new>
f01056e5:	83 c4 10             	add    $0x10,%esp
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056e8:	83 ec 0c             	sub    $0xc,%esp
f01056eb:	68 60 64 55 f0       	push   $0xf0556460
f01056f0:	e8 69 94 00 00       	call   f010eb5e <release_spinlock>
f01056f5:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_NEW_ENV] release: lock status after = %d\n", qlock.locked);
}
f01056f8:	90                   	nop
f01056f9:	c9                   	leave  
f01056fa:	c3                   	ret    

f01056fb <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f01056fb:	55                   	push   %ebp
f01056fc:	89 e5                	mov    %esp,%ebp
f01056fe:	83 ec 18             	sub    $0x18,%esp
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105701:	83 ec 0c             	sub    $0xc,%esp
f0105704:	68 60 64 55 f0       	push   $0xf0556460
f0105709:	e8 c9 93 00 00       	call   f010ead7 <acquire_spinlock>
f010570e:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105718:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f010571d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105720:	eb 53                	jmp    f0105775 <sched_run_env+0x7a>
	{
		if(ptr_env->env_id == envId)
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8b 40 10             	mov    0x10(%eax),%eax
f0105728:	3b 45 08             	cmp    0x8(%ebp),%eax
f010572b:	75 40                	jne    f010576d <sched_run_env+0x72>
		{
			sched_remove_new(ptr_env);
f010572d:	83 ec 0c             	sub    $0xc,%esp
f0105730:	ff 75 f4             	pushl  -0xc(%ebp)
f0105733:	e8 06 fd ff ff       	call   f010543e <sched_remove_new>
f0105738:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f010573b:	83 ec 0c             	sub    $0xc,%esp
f010573e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105741:	e8 a7 fa ff ff       	call   f01051ed <sched_insert_ready0>
f0105746:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (mycpu()->scheduler_status == SCH_STOPPED)
f0105749:	e8 af 19 00 00       	call   f01070fd <mycpu>
f010574e:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f0105754:	85 c0                	test   %eax,%eax
f0105756:	75 46                	jne    f010579e <sched_run_env+0xa3>
			{
				release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105758:	83 ec 0c             	sub    $0xc,%esp
f010575b:	68 60 64 55 f0       	push   $0xf0556460
f0105760:	e8 f9 93 00 00       	call   f010eb5e <release_spinlock>
f0105765:	83 c4 10             	add    $0x10,%esp
				  //cprintf("\n[SCHED_RUN_ENV] release#1: lock status after = %d\n", qlock.locked);
				fos_scheduler();
f0105768:	e8 45 10 00 00       	call   f01067b2 <fos_scheduler>
void sched_run_env(uint32 envId)
{
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010576d:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105772:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105779:	74 08                	je     f0105783 <sched_run_env+0x88>
f010577b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577e:	8b 40 08             	mov    0x8(%eax),%eax
f0105781:	eb 05                	jmp    f0105788 <sched_run_env+0x8d>
f0105783:	b8 00 00 00 00       	mov    $0x0,%eax
f0105788:	a3 d8 64 55 f0       	mov    %eax,0xf05564d8
f010578d:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	75 8c                	jne    f0105722 <sched_run_env+0x27>
f0105796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010579a:	75 86                	jne    f0105722 <sched_run_env+0x27>
f010579c:	eb 01                	jmp    f010579f <sched_run_env+0xa4>
			}
			else
			{
				//can be invoked from a running environment via sys_run_env(), so just release the lock and resume
			}
			break;
f010579e:	90                   	nop
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010579f:	83 ec 0c             	sub    $0xc,%esp
f01057a2:	68 60 64 55 f0       	push   $0xf0556460
f01057a7:	e8 b2 93 00 00       	call   f010eb5e <release_spinlock>
f01057ac:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_RUN_ENV] release#2: lock status after = %d\n", qlock.locked);
}
f01057af:	90                   	nop
f01057b0:	c9                   	leave  
f01057b1:	c3                   	ret    

f01057b2 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01057b2:	55                   	push   %ebp
f01057b3:	89 e5                	mov    %esp,%ebp
f01057b5:	83 ec 28             	sub    $0x28,%esp
	bool lock_already_held = holding_spinlock(&ProcessQueues.qlock);
f01057b8:	83 ec 0c             	sub    $0xc,%esp
f01057bb:	68 60 64 55 f0       	push   $0xf0556460
f01057c0:	e8 2b 95 00 00       	call   f010ecf0 <holding_spinlock>
f01057c5:	83 c4 10             	add    $0x10,%esp
f01057c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  //cprintf("\n[SCHED_EXIT_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	if (!lock_already_held)
f01057cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01057cf:	75 10                	jne    f01057e1 <sched_exit_env+0x2f>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f01057d1:	83 ec 0c             	sub    $0xc,%esp
f01057d4:	68 60 64 55 f0       	push   $0xf0556460
f01057d9:	e8 f9 92 00 00       	call   f010ead7 <acquire_spinlock>
f01057de:	83 c4 10             	add    $0x10,%esp
	}
	struct Env* ptr_env=NULL;
f01057e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01057e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01057ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057f3:	75 59                	jne    f010584e <sched_exit_env+0x9c>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f01057f5:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f01057fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057fd:	eb 28                	jmp    f0105827 <sched_exit_env+0x75>
		{
			if(ptr_env->env_id == envId)
f01057ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105802:	8b 40 10             	mov    0x10(%eax),%eax
f0105805:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105808:	75 15                	jne    f010581f <sched_exit_env+0x6d>
			{
				sched_remove_new(ptr_env);
f010580a:	83 ec 0c             	sub    $0xc,%esp
f010580d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105810:	e8 29 fc ff ff       	call   f010543e <sched_remove_new>
f0105815:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105818:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	}
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010581f:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105824:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105827:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010582b:	74 08                	je     f0105835 <sched_exit_env+0x83>
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8b 40 08             	mov    0x8(%eax),%eax
f0105833:	eb 05                	jmp    f010583a <sched_exit_env+0x88>
f0105835:	b8 00 00 00 00       	mov    $0x0,%eax
f010583a:	a3 d8 64 55 f0       	mov    %eax,0xf05564d8
f010583f:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105844:	85 c0                	test   %eax,%eax
f0105846:	75 b7                	jne    f01057ff <sched_exit_env+0x4d>
f0105848:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010584c:	75 b1                	jne    f01057ff <sched_exit_env+0x4d>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f010584e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105852:	0f 85 89 01 00 00    	jne    f01059e1 <sched_exit_env+0x22f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105858:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010585f:	e9 69 01 00 00       	jmp    f01059cd <sched_exit_env+0x21b>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105864:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105867:	83 c0 09             	add    $0x9,%eax
f010586a:	c1 e0 04             	shl    $0x4,%eax
f010586d:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0105872:	8b 00                	mov    (%eax),%eax
f0105874:	85 c0                	test   %eax,%eax
f0105876:	0f 84 48 01 00 00    	je     f01059c4 <sched_exit_env+0x212>
			{
				ptr_env=NULL;
f010587c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105886:	83 c0 09             	add    $0x9,%eax
f0105889:	c1 e0 04             	shl    $0x4,%eax
f010588c:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0105891:	8b 00                	mov    (%eax),%eax
f0105893:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105896:	e9 e3 00 00 00       	jmp    f010597e <sched_exit_env+0x1cc>
				{
					if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 10             	mov    0x10(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	0f 85 c1 00 00 00    	jne    f010596b <sched_exit_env+0x1b9>
					{
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f01058aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058ae:	75 17                	jne    f01058c7 <sched_exit_env+0x115>
f01058b0:	83 ec 04             	sub    $0x4,%esp
f01058b3:	68 9f 61 12 f0       	push   $0xf012619f
f01058b8:	68 44 01 00 00       	push   $0x144
f01058bd:	68 63 61 12 f0       	push   $0xf0126163
f01058c2:	e8 53 aa ff ff       	call   f010031a <_panic>
f01058c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ca:	8b 40 08             	mov    0x8(%eax),%eax
f01058cd:	85 c0                	test   %eax,%eax
f01058cf:	74 11                	je     f01058e2 <sched_exit_env+0x130>
f01058d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d4:	8b 40 08             	mov    0x8(%eax),%eax
f01058d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058da:	8b 52 0c             	mov    0xc(%edx),%edx
f01058dd:	89 50 0c             	mov    %edx,0xc(%eax)
f01058e0:	eb 17                	jmp    f01058f9 <sched_exit_env+0x147>
f01058e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01058e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01058eb:	83 c2 09             	add    $0x9,%edx
f01058ee:	c1 e2 04             	shl    $0x4,%edx
f01058f1:	81 c2 64 64 55 f0    	add    $0xf0556464,%edx
f01058f7:	89 02                	mov    %eax,(%edx)
f01058f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01058ff:	85 c0                	test   %eax,%eax
f0105901:	74 11                	je     f0105914 <sched_exit_env+0x162>
f0105903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105906:	8b 40 0c             	mov    0xc(%eax),%eax
f0105909:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010590c:	8b 52 08             	mov    0x8(%edx),%edx
f010590f:	89 50 08             	mov    %edx,0x8(%eax)
f0105912:	eb 17                	jmp    f010592b <sched_exit_env+0x179>
f0105914:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105917:	8b 40 08             	mov    0x8(%eax),%eax
f010591a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010591d:	83 c2 09             	add    $0x9,%edx
f0105920:	c1 e2 04             	shl    $0x4,%edx
f0105923:	81 c2 60 64 55 f0    	add    $0xf0556460,%edx
f0105929:	89 02                	mov    %eax,(%edx)
f010592b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010592e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010593f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105942:	83 c0 09             	add    $0x9,%eax
f0105945:	c1 e0 04             	shl    $0x4,%eax
f0105948:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f010594d:	8b 00                	mov    (%eax),%eax
f010594f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105952:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105955:	83 c0 09             	add    $0x9,%eax
f0105958:	c1 e0 04             	shl    $0x4,%eax
f010595b:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f0105960:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105962:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105969:	eb 59                	jmp    f01059c4 <sched_exit_env+0x212>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010596b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010596e:	83 c0 09             	add    $0x9,%eax
f0105971:	c1 e0 04             	shl    $0x4,%eax
f0105974:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0105979:	8b 00                	mov    (%eax),%eax
f010597b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010597e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105982:	74 08                	je     f010598c <sched_exit_env+0x1da>
f0105984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105987:	8b 40 08             	mov    0x8(%eax),%eax
f010598a:	eb 05                	jmp    f0105991 <sched_exit_env+0x1df>
f010598c:	b8 00 00 00 00       	mov    $0x0,%eax
f0105991:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105994:	83 c2 09             	add    $0x9,%edx
f0105997:	c1 e2 04             	shl    $0x4,%edx
f010599a:	81 c2 68 64 55 f0    	add    $0xf0556468,%edx
f01059a0:	89 02                	mov    %eax,(%edx)
f01059a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059a5:	83 c0 09             	add    $0x9,%eax
f01059a8:	c1 e0 04             	shl    $0x4,%eax
f01059ab:	05 68 64 55 f0       	add    $0xf0556468,%eax
f01059b0:	8b 00                	mov    (%eax),%eax
f01059b2:	85 c0                	test   %eax,%eax
f01059b4:	0f 85 e1 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
f01059ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059be:	0f 85 d7 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01059c8:	75 16                	jne    f01059e0 <sched_exit_env+0x22e>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01059ca:	ff 45 ec             	incl   -0x14(%ebp)
f01059cd:	a0 60 91 55 f0       	mov    0xf0559160,%al
f01059d2:	0f b6 c0             	movzbl %al,%eax
f01059d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01059d8:	0f 8f 86 fe ff ff    	jg     f0105864 <sched_exit_env+0xb2>
f01059de:	eb 01                	jmp    f01059e1 <sched_exit_env+0x22f>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059e0:	90                   	nop
		}
	}
	struct Env* cur_env = get_cpu_proc();
f01059e1:	e8 8a 4d 00 00       	call   f010a770 <get_cpu_proc>
f01059e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f01059e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01059ed:	75 19                	jne    f0105a08 <sched_exit_env+0x256>
f01059ef:	68 9b 62 12 f0       	push   $0xf012629b
f01059f4:	68 4e 61 12 f0       	push   $0xf012614e
f01059f9:	68 4e 01 00 00       	push   $0x14e
f01059fe:	68 63 61 12 f0       	push   $0xf0126163
f0105a03:	e8 12 a9 ff ff       	call   f010031a <_panic>
	if (!found)
f0105a08:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a0c:	75 18                	jne    f0105a26 <sched_exit_env+0x274>
	{
		if (cur_env->env_id == envId)
f0105a0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a11:	8b 40 10             	mov    0x10(%eax),%eax
f0105a14:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a17:	75 0d                	jne    f0105a26 <sched_exit_env+0x274>
		{
			ptr_env = cur_env;
f0105a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105a1f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105a26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a2a:	74 1e                	je     f0105a4a <sched_exit_env+0x298>
	{
		sched_insert_exit(ptr_env);
f0105a2c:	83 ec 0c             	sub    $0xc,%esp
f0105a2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a32:	e8 f7 fa ff ff       	call   f010552e <sched_insert_exit>
f0105a37:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back
		//to an exited env. Status already set to EXIT in the sched_insert_exit()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		if (cur_env->env_id == envId)
f0105a3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a3d:	8b 40 10             	mov    0x10(%eax),%eax
f0105a40:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a43:	75 05                	jne    f0105a4a <sched_exit_env+0x298>
		{
			//2024: Replaced by sched() which call context switch
			//fos_scheduler();
			sched();
f0105a45:	e8 b3 4e 00 00       	call   f010a8fd <sched>
		}
	}
	if (!lock_already_held)
f0105a4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105a4e:	75 10                	jne    f0105a60 <sched_exit_env+0x2ae>
	{
		release_spinlock(&ProcessQueues.qlock);
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 60 64 55 f0       	push   $0xf0556460
f0105a58:	e8 01 91 00 00       	call   f010eb5e <release_spinlock>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	//cprintf("\n[SCHED_EXIT_ENV] release: lock status after = %d\n", qlock.locked);
}
f0105a60:	90                   	nop
f0105a61:	c9                   	leave  
f0105a62:	c3                   	ret    

f0105a63 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105a63:	55                   	push   %ebp
f0105a64:	89 e5                	mov    %esp,%ebp
f0105a66:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105a69:	83 ec 0c             	sub    $0xc,%esp
f0105a6c:	68 60 64 55 f0       	push   $0xf0556460
f0105a71:	e8 61 90 00 00       	call   f010ead7 <acquire_spinlock>
f0105a76:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105a79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105a80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105a87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a8b:	75 79                	jne    f0105b06 <sched_kill_env+0xa3>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105a8d:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f0105a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a95:	eb 48                	jmp    f0105adf <sched_kill_env+0x7c>
		{
			if(ptr_env->env_id == envId)
f0105a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a9a:	8b 40 10             	mov    0x10(%eax),%eax
f0105a9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105aa0:	75 35                	jne    f0105ad7 <sched_kill_env+0x74>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aa5:	8d 50 20             	lea    0x20(%eax),%edx
f0105aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aab:	8b 40 10             	mov    0x10(%eax),%eax
f0105aae:	83 ec 04             	sub    $0x4,%esp
f0105ab1:	52                   	push   %edx
f0105ab2:	50                   	push   %eax
f0105ab3:	68 ac 62 12 f0       	push   $0xf01262ac
f0105ab8:	e8 af b4 ff ff       	call   f0100f6c <cprintf>
f0105abd:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105ac0:	83 ec 0c             	sub    $0xc,%esp
f0105ac3:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ac6:	e8 73 f9 ff ff       	call   f010543e <sched_remove_new>
f0105acb:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105ace:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105ad5:	eb 2f                	jmp    f0105b06 <sched_kill_env+0xa3>
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105ad7:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105adf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae3:	74 08                	je     f0105aed <sched_kill_env+0x8a>
f0105ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ae8:	8b 40 08             	mov    0x8(%eax),%eax
f0105aeb:	eb 05                	jmp    f0105af2 <sched_kill_env+0x8f>
f0105aed:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af2:	a3 d8 64 55 f0       	mov    %eax,0xf05564d8
f0105af7:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105afc:	85 c0                	test   %eax,%eax
f0105afe:	75 97                	jne    f0105a97 <sched_kill_env+0x34>
f0105b00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b04:	75 91                	jne    f0105a97 <sched_kill_env+0x34>
				found = 1;
				break;
			}
		}
	}
	if (!found)
f0105b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105b0a:	0f 85 a7 01 00 00    	jne    f0105cb7 <sched_kill_env+0x254>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105b17:	e9 87 01 00 00       	jmp    f0105ca3 <sched_kill_env+0x240>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b1f:	83 c0 09             	add    $0x9,%eax
f0105b22:	c1 e0 04             	shl    $0x4,%eax
f0105b25:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0105b2a:	8b 00                	mov    (%eax),%eax
f0105b2c:	85 c0                	test   %eax,%eax
f0105b2e:	0f 84 66 01 00 00    	je     f0105c9a <sched_kill_env+0x237>
			{
				ptr_env=NULL;
f0105b34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b3e:	83 c0 09             	add    $0x9,%eax
f0105b41:	c1 e0 04             	shl    $0x4,%eax
f0105b44:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0105b49:	8b 00                	mov    (%eax),%eax
f0105b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b4e:	e9 01 01 00 00       	jmp    f0105c54 <sched_kill_env+0x1f1>
				{
					if(ptr_env->env_id == envId)
f0105b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b56:	8b 40 10             	mov    0x10(%eax),%eax
f0105b59:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105b5c:	0f 85 df 00 00 00    	jne    f0105c41 <sched_kill_env+0x1de>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b65:	8d 50 20             	lea    0x20(%eax),%edx
f0105b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b6b:	8b 40 10             	mov    0x10(%eax),%eax
f0105b6e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105b71:	52                   	push   %edx
f0105b72:	50                   	push   %eax
f0105b73:	68 d4 62 12 f0       	push   $0xf01262d4
f0105b78:	e8 ef b3 ff ff       	call   f0100f6c <cprintf>
f0105b7d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0105b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b84:	75 17                	jne    f0105b9d <sched_kill_env+0x13a>
f0105b86:	83 ec 04             	sub    $0x4,%esp
f0105b89:	68 9f 61 12 f0       	push   $0xf012619f
f0105b8e:	68 91 01 00 00       	push   $0x191
f0105b93:	68 63 61 12 f0       	push   $0xf0126163
f0105b98:	e8 7d a7 ff ff       	call   f010031a <_panic>
f0105b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba0:	8b 40 08             	mov    0x8(%eax),%eax
f0105ba3:	85 c0                	test   %eax,%eax
f0105ba5:	74 11                	je     f0105bb8 <sched_kill_env+0x155>
f0105ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105baa:	8b 40 08             	mov    0x8(%eax),%eax
f0105bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105bb0:	8b 52 0c             	mov    0xc(%edx),%edx
f0105bb3:	89 50 0c             	mov    %edx,0xc(%eax)
f0105bb6:	eb 17                	jmp    f0105bcf <sched_kill_env+0x16c>
f0105bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bbb:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bbe:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bc1:	83 c2 09             	add    $0x9,%edx
f0105bc4:	c1 e2 04             	shl    $0x4,%edx
f0105bc7:	81 c2 64 64 55 f0    	add    $0xf0556464,%edx
f0105bcd:	89 02                	mov    %eax,(%edx)
f0105bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bd5:	85 c0                	test   %eax,%eax
f0105bd7:	74 11                	je     f0105bea <sched_kill_env+0x187>
f0105bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bdc:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105be2:	8b 52 08             	mov    0x8(%edx),%edx
f0105be5:	89 50 08             	mov    %edx,0x8(%eax)
f0105be8:	eb 17                	jmp    f0105c01 <sched_kill_env+0x19e>
f0105bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bed:	8b 40 08             	mov    0x8(%eax),%eax
f0105bf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bf3:	83 c2 09             	add    $0x9,%edx
f0105bf6:	c1 e2 04             	shl    $0x4,%edx
f0105bf9:	81 c2 60 64 55 f0    	add    $0xf0556460,%edx
f0105bff:	89 02                	mov    %eax,(%edx)
f0105c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c04:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c18:	83 c0 09             	add    $0x9,%eax
f0105c1b:	c1 e0 04             	shl    $0x4,%eax
f0105c1e:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f0105c23:	8b 00                	mov    (%eax),%eax
f0105c25:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c2b:	83 c0 09             	add    $0x9,%eax
f0105c2e:	c1 e0 04             	shl    $0x4,%eax
f0105c31:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f0105c36:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105c38:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105c3f:	eb 59                	jmp    f0105c9a <sched_kill_env+0x237>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c44:	83 c0 09             	add    $0x9,%eax
f0105c47:	c1 e0 04             	shl    $0x4,%eax
f0105c4a:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0105c4f:	8b 00                	mov    (%eax),%eax
f0105c51:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c58:	74 08                	je     f0105c62 <sched_kill_env+0x1ff>
f0105c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5d:	8b 40 08             	mov    0x8(%eax),%eax
f0105c60:	eb 05                	jmp    f0105c67 <sched_kill_env+0x204>
f0105c62:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c6a:	83 c2 09             	add    $0x9,%edx
f0105c6d:	c1 e2 04             	shl    $0x4,%edx
f0105c70:	81 c2 68 64 55 f0    	add    $0xf0556468,%edx
f0105c76:	89 02                	mov    %eax,(%edx)
f0105c78:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c7b:	83 c0 09             	add    $0x9,%eax
f0105c7e:	c1 e0 04             	shl    $0x4,%eax
f0105c81:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0105c86:	8b 00                	mov    (%eax),%eax
f0105c88:	85 c0                	test   %eax,%eax
f0105c8a:	0f 85 c3 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
f0105c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c94:	0f 85 b9 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105c9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105c9e:	75 16                	jne    f0105cb6 <sched_kill_env+0x253>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ca0:	ff 45 ec             	incl   -0x14(%ebp)
f0105ca3:	a0 60 91 55 f0       	mov    0xf0559160,%al
f0105ca8:	0f b6 c0             	movzbl %al,%eax
f0105cab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105cae:	0f 8f 68 fe ff ff    	jg     f0105b1c <sched_kill_env+0xb9>
f0105cb4:	eb 01                	jmp    f0105cb7 <sched_kill_env+0x254>
						break;
					}
				}
			}
			if (found)
				break;
f0105cb6:	90                   	nop
		}
	}
	if (!found)
f0105cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105cbb:	0f 85 80 00 00 00    	jne    f0105d41 <sched_kill_env+0x2de>
	{
		ptr_env=NULL;
f0105cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105cc8:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f0105ccd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cd0:	eb 48                	jmp    f0105d1a <sched_kill_env+0x2b7>
		{
			if(ptr_env->env_id == envId)
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 10             	mov    0x10(%eax),%eax
f0105cd8:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105cdb:	75 35                	jne    f0105d12 <sched_kill_env+0x2af>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce0:	8d 50 20             	lea    0x20(%eax),%edx
f0105ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce6:	8b 40 10             	mov    0x10(%eax),%eax
f0105ce9:	83 ec 04             	sub    $0x4,%esp
f0105cec:	52                   	push   %edx
f0105ced:	50                   	push   %eax
f0105cee:	68 00 63 12 f0       	push   $0xf0126300
f0105cf3:	e8 74 b2 ff ff       	call   f0100f6c <cprintf>
f0105cf8:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105cfb:	83 ec 0c             	sub    $0xc,%esp
f0105cfe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d01:	e8 af f8 ff ff       	call   f01055b5 <sched_remove_exit>
f0105d06:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105d09:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105d10:	eb 2f                	jmp    f0105d41 <sched_kill_env+0x2de>
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105d12:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f0105d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1e:	74 08                	je     f0105d28 <sched_kill_env+0x2c5>
f0105d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d23:	8b 40 08             	mov    0x8(%eax),%eax
f0105d26:	eb 05                	jmp    f0105d2d <sched_kill_env+0x2ca>
f0105d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d2d:	a3 e8 64 55 f0       	mov    %eax,0xf05564e8
f0105d32:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f0105d37:	85 c0                	test   %eax,%eax
f0105d39:	75 97                	jne    f0105cd2 <sched_kill_env+0x26f>
f0105d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d3f:	75 91                	jne    f0105cd2 <sched_kill_env+0x26f>
				found = 1;
				break;
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105d41:	83 ec 0c             	sub    $0xc,%esp
f0105d44:	68 60 64 55 f0       	push   $0xf0556460
f0105d49:	e8 10 8e 00 00       	call   f010eb5e <release_spinlock>
f0105d4e:	83 c4 10             	add    $0x10,%esp

	if (found)
f0105d51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105d55:	74 23                	je     f0105d7a <sched_kill_env+0x317>
	{
		env_free(ptr_env);
f0105d57:	83 ec 0c             	sub    $0xc,%esp
f0105d5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d5d:	e8 c6 49 00 00       	call   f010a728 <env_free>
f0105d62:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f0105d65:	83 ec 0c             	sub    $0xc,%esp
f0105d68:	68 26 63 12 f0       	push   $0xf0126326
f0105d6d:	e8 fa b1 ff ff       	call   f0100f6c <cprintf>
f0105d72:	83 c4 10             	add    $0x10,%esp
			//fos_scheduler();
			sched();
		}
	}

}
f0105d75:	e9 a4 00 00 00       	jmp    f0105e1e <sched_kill_env+0x3bb>
		env_free(ptr_env);
		cprintf("DONE\n");
	}
	else
	{
		struct Env* cur_env = get_cpu_proc();
f0105d7a:	e8 f1 49 00 00       	call   f010a770 <get_cpu_proc>
f0105d7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		assert(cur_env != NULL);
f0105d82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105d86:	75 19                	jne    f0105da1 <sched_kill_env+0x33e>
f0105d88:	68 9b 62 12 f0       	push   $0xf012629b
f0105d8d:	68 4e 61 12 f0       	push   $0xf012614e
f0105d92:	68 b3 01 00 00       	push   $0x1b3
f0105d97:	68 63 61 12 f0       	push   $0xf0126163
f0105d9c:	e8 79 a5 ff ff       	call   f010031a <_panic>

		if (cur_env->env_id == envId)
f0105da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105da4:	8b 40 10             	mov    0x10(%eax),%eax
f0105da7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105daa:	75 72                	jne    f0105e1e <sched_kill_env+0x3bb>
		{
			ptr_env = cur_env;
f0105dac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105daf:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNING);
f0105db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db5:	8b 40 18             	mov    0x18(%eax),%eax
f0105db8:	83 f8 02             	cmp    $0x2,%eax
f0105dbb:	74 19                	je     f0105dd6 <sched_kill_env+0x373>
f0105dbd:	68 2c 63 12 f0       	push   $0xf012632c
f0105dc2:	68 4e 61 12 f0       	push   $0xf012614e
f0105dc7:	68 b8 01 00 00       	push   $0x1b8
f0105dcc:	68 63 61 12 f0       	push   $0xf0126163
f0105dd1:	e8 44 a5 ff ff       	call   f010031a <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd9:	8d 50 20             	lea    0x20(%eax),%edx
f0105ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ddf:	8b 40 10             	mov    0x10(%eax),%eax
f0105de2:	83 ec 04             	sub    $0x4,%esp
f0105de5:	52                   	push   %edx
f0105de6:	50                   	push   %eax
f0105de7:	68 50 63 12 f0       	push   $0xf0126350
f0105dec:	e8 7b b1 ff ff       	call   f0100f6c <cprintf>
f0105df1:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105df4:	83 ec 0c             	sub    $0xc,%esp
f0105df7:	ff 75 f4             	pushl  -0xc(%ebp)
f0105dfa:	e8 29 49 00 00       	call   f010a728 <env_free>
f0105dff:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105e02:	83 ec 0c             	sub    $0xc,%esp
f0105e05:	68 26 63 12 f0       	push   $0xf0126326
f0105e0a:	e8 5d b1 ff ff       	call   f0100f6c <cprintf>
f0105e0f:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105e12:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//this process
			/*2024: replaced by sched() to apply context_switch*/
			//lcr3(phys_page_directory);
			//switchkvm();
			//fos_scheduler();
			sched();
f0105e19:	e8 df 4a 00 00       	call   f010a8fd <sched>
		}
	}

}
f0105e1e:	90                   	nop
f0105e1f:	c9                   	leave  
f0105e20:	c3                   	ret    

f0105e21 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f0105e21:	55                   	push   %ebp
f0105e22:	89 e5                	mov    %esp,%ebp
f0105e24:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105e27:	83 ec 0c             	sub    $0xc,%esp
f0105e2a:	68 60 64 55 f0       	push   $0xf0556460
f0105e2f:	e8 a3 8c 00 00       	call   f010ead7 <acquire_spinlock>
f0105e34:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f0105e37:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f0105e3c:	85 c0                	test   %eax,%eax
f0105e3e:	74 69                	je     f0105ea9 <sched_print_all+0x88>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0105e40:	83 ec 0c             	sub    $0xc,%esp
f0105e43:	68 7c 63 12 f0       	push   $0xf012637c
f0105e48:	e8 1f b1 ff ff       	call   f0100f6c <cprintf>
f0105e4d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e50:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f0105e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e58:	eb 26                	jmp    f0105e80 <sched_print_all+0x5f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5d:	8d 50 20             	lea    0x20(%eax),%edx
f0105e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e63:	8b 40 10             	mov    0x10(%eax),%eax
f0105e66:	83 ec 04             	sub    $0x4,%esp
f0105e69:	52                   	push   %edx
f0105e6a:	50                   	push   %eax
f0105e6b:	68 9e 63 12 f0       	push   $0xf012639e
f0105e70:	e8 f7 b0 ff ff       	call   f0100f6c <cprintf>
f0105e75:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e78:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e84:	74 08                	je     f0105e8e <sched_print_all+0x6d>
f0105e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e89:	8b 40 08             	mov    0x8(%eax),%eax
f0105e8c:	eb 05                	jmp    f0105e93 <sched_print_all+0x72>
f0105e8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e93:	a3 d8 64 55 f0       	mov    %eax,0xf05564d8
f0105e98:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0105e9d:	85 c0                	test   %eax,%eax
f0105e9f:	75 b9                	jne    f0105e5a <sched_print_all+0x39>
f0105ea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ea5:	75 b3                	jne    f0105e5a <sched_print_all+0x39>
f0105ea7:	eb 10                	jmp    f0105eb9 <sched_print_all+0x98>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105ea9:	83 ec 0c             	sub    $0xc,%esp
f0105eac:	68 a8 63 12 f0       	push   $0xf01263a8
f0105eb1:	e8 b6 b0 ff ff       	call   f0100f6c <cprintf>
f0105eb6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105eb9:	83 ec 0c             	sub    $0xc,%esp
f0105ebc:	68 c4 63 12 f0       	push   $0xf01263c4
f0105ec1:	e8 a6 b0 ff ff       	call   f0100f6c <cprintf>
f0105ec6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ec9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105ed0:	e9 d7 00 00 00       	jmp    f0105fac <sched_print_all+0x18b>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ed8:	83 c0 09             	add    $0x9,%eax
f0105edb:	c1 e0 04             	shl    $0x4,%eax
f0105ede:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0105ee3:	8b 00                	mov    (%eax),%eax
f0105ee5:	85 c0                	test   %eax,%eax
f0105ee7:	0f 84 99 00 00 00    	je     f0105f86 <sched_print_all+0x165>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105eed:	83 ec 08             	sub    $0x8,%esp
f0105ef0:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ef3:	68 f8 63 12 f0       	push   $0xf01263f8
f0105ef8:	e8 6f b0 ff ff       	call   f0100f6c <cprintf>
f0105efd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f03:	83 c0 09             	add    $0x9,%eax
f0105f06:	c1 e0 04             	shl    $0x4,%eax
f0105f09:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0105f0e:	8b 00                	mov    (%eax),%eax
f0105f10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f13:	eb 31                	jmp    f0105f46 <sched_print_all+0x125>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f18:	8d 50 20             	lea    0x20(%eax),%edx
f0105f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f1e:	8b 40 10             	mov    0x10(%eax),%eax
f0105f21:	83 ec 04             	sub    $0x4,%esp
f0105f24:	52                   	push   %edx
f0105f25:	50                   	push   %eax
f0105f26:	68 9e 63 12 f0       	push   $0xf012639e
f0105f2b:	e8 3c b0 ff ff       	call   f0100f6c <cprintf>
f0105f30:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f36:	83 c0 09             	add    $0x9,%eax
f0105f39:	c1 e0 04             	shl    $0x4,%eax
f0105f3c:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0105f41:	8b 00                	mov    (%eax),%eax
f0105f43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4a:	74 08                	je     f0105f54 <sched_print_all+0x133>
f0105f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f4f:	8b 40 08             	mov    0x8(%eax),%eax
f0105f52:	eb 05                	jmp    f0105f59 <sched_print_all+0x138>
f0105f54:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105f5c:	83 c2 09             	add    $0x9,%edx
f0105f5f:	c1 e2 04             	shl    $0x4,%edx
f0105f62:	81 c2 68 64 55 f0    	add    $0xf0556468,%edx
f0105f68:	89 02                	mov    %eax,(%edx)
f0105f6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f6d:	83 c0 09             	add    $0x9,%eax
f0105f70:	c1 e0 04             	shl    $0x4,%eax
f0105f73:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0105f78:	8b 00                	mov    (%eax),%eax
f0105f7a:	85 c0                	test   %eax,%eax
f0105f7c:	75 97                	jne    f0105f15 <sched_print_all+0xf4>
f0105f7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f82:	75 91                	jne    f0105f15 <sched_print_all+0xf4>
f0105f84:	eb 13                	jmp    f0105f99 <sched_print_all+0x178>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105f86:	83 ec 08             	sub    $0x8,%esp
f0105f89:	ff 75 f0             	pushl  -0x10(%ebp)
f0105f8c:	68 20 64 12 f0       	push   $0xf0126420
f0105f91:	e8 d6 af ff ff       	call   f0100f6c <cprintf>
f0105f96:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105f99:	83 ec 0c             	sub    $0xc,%esp
f0105f9c:	68 c4 63 12 f0       	push   $0xf01263c4
f0105fa1:	e8 c6 af ff ff       	call   f0100f6c <cprintf>
f0105fa6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105fa9:	ff 45 f0             	incl   -0x10(%ebp)
f0105fac:	a0 60 91 55 f0       	mov    0xf0559160,%al
f0105fb1:	0f b6 c0             	movzbl %al,%eax
f0105fb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105fb7:	0f 8f 18 ff ff ff    	jg     f0105ed5 <sched_print_all+0xb4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0105fbd:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f0105fc2:	85 c0                	test   %eax,%eax
f0105fc4:	74 69                	je     f010602f <sched_print_all+0x20e>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105fc6:	83 ec 0c             	sub    $0xc,%esp
f0105fc9:	68 44 64 12 f0       	push   $0xf0126444
f0105fce:	e8 99 af ff ff       	call   f0100f6c <cprintf>
f0105fd3:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105fd6:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f0105fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fde:	eb 26                	jmp    f0106006 <sched_print_all+0x1e5>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe3:	8d 50 20             	lea    0x20(%eax),%edx
f0105fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe9:	8b 40 10             	mov    0x10(%eax),%eax
f0105fec:	83 ec 04             	sub    $0x4,%esp
f0105fef:	52                   	push   %edx
f0105ff0:	50                   	push   %eax
f0105ff1:	68 9e 63 12 f0       	push   $0xf012639e
f0105ff6:	e8 71 af ff ff       	call   f0100f6c <cprintf>
f0105ffb:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105ffe:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f0106003:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106006:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010600a:	74 08                	je     f0106014 <sched_print_all+0x1f3>
f010600c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010600f:	8b 40 08             	mov    0x8(%eax),%eax
f0106012:	eb 05                	jmp    f0106019 <sched_print_all+0x1f8>
f0106014:	b8 00 00 00 00       	mov    $0x0,%eax
f0106019:	a3 e8 64 55 f0       	mov    %eax,0xf05564e8
f010601e:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f0106023:	85 c0                	test   %eax,%eax
f0106025:	75 b9                	jne    f0105fe0 <sched_print_all+0x1bf>
f0106027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010602b:	75 b3                	jne    f0105fe0 <sched_print_all+0x1bf>
f010602d:	eb 10                	jmp    f010603f <sched_print_all+0x21e>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010602f:	83 ec 0c             	sub    $0xc,%esp
f0106032:	68 66 64 12 f0       	push   $0xf0126466
f0106037:	e8 30 af ff ff       	call   f0100f6c <cprintf>
f010603c:	83 c4 10             	add    $0x10,%esp
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010603f:	83 ec 0c             	sub    $0xc,%esp
f0106042:	68 60 64 55 f0       	push   $0xf0556460
f0106047:	e8 12 8b 00 00       	call   f010eb5e <release_spinlock>
f010604c:	83 c4 10             	add    $0x10,%esp
}
f010604f:	90                   	nop
f0106050:	c9                   	leave  
f0106051:	c3                   	ret    

f0106052 <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0106052:	55                   	push   %ebp
f0106053:	89 e5                	mov    %esp,%ebp
f0106055:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106058:	83 ec 0c             	sub    $0xc,%esp
f010605b:	68 60 64 55 f0       	push   $0xf0556460
f0106060:	e8 72 8a 00 00       	call   f010ead7 <acquire_spinlock>
f0106065:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0106068:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
f010606f:	a1 dc 64 55 f0       	mov    0xf05564dc,%eax
f0106074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (int i = 0; i < q_size; ++i)
f0106077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010607e:	eb 24                	jmp    f01060a4 <sched_run_all+0x52>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
f0106080:	83 ec 0c             	sub    $0xc,%esp
f0106083:	68 d0 64 55 f0       	push   $0xf05564d0
f0106088:	e8 7c ef ff ff       	call   f0105009 <dequeue>
f010608d:	83 c4 10             	add    $0x10,%esp
f0106090:	89 45 f0             	mov    %eax,-0x10(%ebp)
		sched_insert_ready0(ptr_env);
f0106093:	83 ec 0c             	sub    $0xc,%esp
f0106096:	ff 75 f0             	pushl  -0x10(%ebp)
f0106099:	e8 4f f1 ff ff       	call   f01051ed <sched_insert_ready0>
f010609e:	83 c4 10             	add    $0x10,%esp

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
	for (int i = 0; i < q_size; ++i)
f01060a1:	ff 45 f4             	incl   -0xc(%ebp)
f01060a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01060aa:	7c d4                	jl     f0106080 <sched_run_all+0x2e>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
		sched_insert_ready0(ptr_env);
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ac:	83 ec 0c             	sub    $0xc,%esp
f01060af:	68 60 64 55 f0       	push   $0xf0556460
f01060b4:	e8 a5 8a 00 00       	call   f010eb5e <release_spinlock>
f01060b9:	83 c4 10             	add    $0x10,%esp
	/*2015*///if scheduler not run yet, then invoke it!
	if (mycpu()->scheduler_status == SCH_STOPPED)
f01060bc:	e8 3c 10 00 00       	call   f01070fd <mycpu>
f01060c1:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01060c7:	85 c0                	test   %eax,%eax
f01060c9:	75 05                	jne    f01060d0 <sched_run_all+0x7e>
		fos_scheduler();
f01060cb:	e8 e2 06 00 00       	call   f01067b2 <fos_scheduler>
	else
		panic("scheduler status is NOT STOPPED while it's expected to be!!");
f01060d0:	83 ec 04             	sub    $0x4,%esp
f01060d3:	68 84 64 12 f0       	push   $0xf0126484
f01060d8:	68 15 02 00 00       	push   $0x215
f01060dd:	68 63 61 12 f0       	push   $0xf0126163
f01060e2:	e8 33 a2 ff ff       	call   f010031a <_panic>

f01060e7 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f01060e7:	55                   	push   %ebp
f01060e8:	89 e5                	mov    %esp,%ebp
f01060ea:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ed:	83 ec 0c             	sub    $0xc,%esp
f01060f0:	68 60 64 55 f0       	push   $0xf0556460
f01060f5:	e8 dd 89 00 00       	call   f010ead7 <acquire_spinlock>
f01060fa:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f01060fd:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f0106102:	85 c0                	test   %eax,%eax
f0106104:	0f 84 95 00 00 00    	je     f010619f <sched_kill_all+0xb8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f010610a:	83 ec 0c             	sub    $0xc,%esp
f010610d:	68 c0 64 12 f0       	push   $0xf01264c0
f0106112:	e8 55 ae ff ff       	call   f0100f6c <cprintf>
f0106117:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010611a:	a1 d0 64 55 f0       	mov    0xf05564d0,%eax
f010611f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106122:	eb 52                	jmp    f0106176 <sched_kill_all+0x8f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0106124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106127:	8d 50 20             	lea    0x20(%eax),%edx
f010612a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612d:	8b 40 10             	mov    0x10(%eax),%eax
f0106130:	83 ec 04             	sub    $0x4,%esp
f0106133:	52                   	push   %edx
f0106134:	50                   	push   %eax
f0106135:	68 ec 64 12 f0       	push   $0xf01264ec
f010613a:	e8 2d ae ff ff       	call   f0100f6c <cprintf>
f010613f:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0106142:	83 ec 0c             	sub    $0xc,%esp
f0106145:	ff 75 f4             	pushl  -0xc(%ebp)
f0106148:	e8 f1 f2 ff ff       	call   f010543e <sched_remove_new>
f010614d:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	ff 75 f4             	pushl  -0xc(%ebp)
f0106156:	e8 cd 45 00 00       	call   f010a728 <env_free>
f010615b:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010615e:	83 ec 0c             	sub    $0xc,%esp
f0106161:	68 26 63 12 f0       	push   $0xf0126326
f0106166:	e8 01 ae ff ff       	call   f0100f6c <cprintf>
f010616b:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010616e:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0106173:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010617a:	74 08                	je     f0106184 <sched_kill_all+0x9d>
f010617c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010617f:	8b 40 08             	mov    0x8(%eax),%eax
f0106182:	eb 05                	jmp    f0106189 <sched_kill_all+0xa2>
f0106184:	b8 00 00 00 00       	mov    $0x0,%eax
f0106189:	a3 d8 64 55 f0       	mov    %eax,0xf05564d8
f010618e:	a1 d8 64 55 f0       	mov    0xf05564d8,%eax
f0106193:	85 c0                	test   %eax,%eax
f0106195:	75 8d                	jne    f0106124 <sched_kill_all+0x3d>
f0106197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010619b:	75 87                	jne    f0106124 <sched_kill_all+0x3d>
f010619d:	eb 10                	jmp    f01061af <sched_kill_all+0xc8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f010619f:	83 ec 0c             	sub    $0xc,%esp
f01061a2:	68 ff 64 12 f0       	push   $0xf01264ff
f01061a7:	e8 c0 ad ff ff       	call   f0100f6c <cprintf>
f01061ac:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01061af:	83 ec 0c             	sub    $0xc,%esp
f01061b2:	68 c4 63 12 f0       	push   $0xf01263c4
f01061b7:	e8 b0 ad ff ff       	call   f0100f6c <cprintf>
f01061bc:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01061bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01061c6:	e9 b8 01 00 00       	jmp    f0106383 <sched_kill_all+0x29c>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01061cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061ce:	83 c0 09             	add    $0x9,%eax
f01061d1:	c1 e0 04             	shl    $0x4,%eax
f01061d4:	05 60 64 55 f0       	add    $0xf0556460,%eax
f01061d9:	8b 00                	mov    (%eax),%eax
f01061db:	85 c0                	test   %eax,%eax
f01061dd:	0f 84 7a 01 00 00    	je     f010635d <sched_kill_all+0x276>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f01061e3:	83 ec 08             	sub    $0x8,%esp
f01061e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01061e9:	68 1c 65 12 f0       	push   $0xf012651c
f01061ee:	e8 79 ad ff ff       	call   f0100f6c <cprintf>
f01061f3:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01061f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f9:	83 c0 09             	add    $0x9,%eax
f01061fc:	c1 e0 04             	shl    $0x4,%eax
f01061ff:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0106204:	8b 00                	mov    (%eax),%eax
f0106206:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106209:	e9 07 01 00 00       	jmp    f0106315 <sched_kill_all+0x22e>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010620e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106211:	8d 50 20             	lea    0x20(%eax),%edx
f0106214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106217:	8b 40 10             	mov    0x10(%eax),%eax
f010621a:	83 ec 04             	sub    $0x4,%esp
f010621d:	52                   	push   %edx
f010621e:	50                   	push   %eax
f010621f:	68 ec 64 12 f0       	push   $0xf01264ec
f0106224:	e8 43 ad ff ff       	call   f0100f6c <cprintf>
f0106229:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f010622c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106230:	75 17                	jne    f0106249 <sched_kill_all+0x162>
f0106232:	83 ec 04             	sub    $0x4,%esp
f0106235:	68 9f 61 12 f0       	push   $0xf012619f
f010623a:	68 37 02 00 00       	push   $0x237
f010623f:	68 63 61 12 f0       	push   $0xf0126163
f0106244:	e8 d1 a0 ff ff       	call   f010031a <_panic>
f0106249:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010624c:	8b 40 08             	mov    0x8(%eax),%eax
f010624f:	85 c0                	test   %eax,%eax
f0106251:	74 11                	je     f0106264 <sched_kill_all+0x17d>
f0106253:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106256:	8b 40 08             	mov    0x8(%eax),%eax
f0106259:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010625c:	8b 52 0c             	mov    0xc(%edx),%edx
f010625f:	89 50 0c             	mov    %edx,0xc(%eax)
f0106262:	eb 17                	jmp    f010627b <sched_kill_all+0x194>
f0106264:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106267:	8b 40 0c             	mov    0xc(%eax),%eax
f010626a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010626d:	83 c2 09             	add    $0x9,%edx
f0106270:	c1 e2 04             	shl    $0x4,%edx
f0106273:	81 c2 64 64 55 f0    	add    $0xf0556464,%edx
f0106279:	89 02                	mov    %eax,(%edx)
f010627b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010627e:	8b 40 0c             	mov    0xc(%eax),%eax
f0106281:	85 c0                	test   %eax,%eax
f0106283:	74 11                	je     f0106296 <sched_kill_all+0x1af>
f0106285:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106288:	8b 40 0c             	mov    0xc(%eax),%eax
f010628b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010628e:	8b 52 08             	mov    0x8(%edx),%edx
f0106291:	89 50 08             	mov    %edx,0x8(%eax)
f0106294:	eb 17                	jmp    f01062ad <sched_kill_all+0x1c6>
f0106296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106299:	8b 40 08             	mov    0x8(%eax),%eax
f010629c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010629f:	83 c2 09             	add    $0x9,%edx
f01062a2:	c1 e2 04             	shl    $0x4,%edx
f01062a5:	81 c2 60 64 55 f0    	add    $0xf0556460,%edx
f01062ab:	89 02                	mov    %eax,(%edx)
f01062ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01062b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ba:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01062c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062c4:	83 c0 09             	add    $0x9,%eax
f01062c7:	c1 e0 04             	shl    $0x4,%eax
f01062ca:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f01062cf:	8b 00                	mov    (%eax),%eax
f01062d1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01062d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062d7:	83 c0 09             	add    $0x9,%eax
f01062da:	c1 e0 04             	shl    $0x4,%eax
f01062dd:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f01062e2:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f01062e4:	83 ec 0c             	sub    $0xc,%esp
f01062e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01062ea:	e8 39 44 00 00       	call   f010a728 <env_free>
f01062ef:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01062f2:	83 ec 0c             	sub    $0xc,%esp
f01062f5:	68 26 63 12 f0       	push   $0xf0126326
f01062fa:	e8 6d ac ff ff       	call   f0100f6c <cprintf>
f01062ff:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0106302:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106305:	83 c0 09             	add    $0x9,%eax
f0106308:	c1 e0 04             	shl    $0x4,%eax
f010630b:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0106310:	8b 00                	mov    (%eax),%eax
f0106312:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106315:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106319:	74 08                	je     f0106323 <sched_kill_all+0x23c>
f010631b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010631e:	8b 40 08             	mov    0x8(%eax),%eax
f0106321:	eb 05                	jmp    f0106328 <sched_kill_all+0x241>
f0106323:	b8 00 00 00 00       	mov    $0x0,%eax
f0106328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010632b:	83 c2 09             	add    $0x9,%edx
f010632e:	c1 e2 04             	shl    $0x4,%edx
f0106331:	81 c2 68 64 55 f0    	add    $0xf0556468,%edx
f0106337:	89 02                	mov    %eax,(%edx)
f0106339:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010633c:	83 c0 09             	add    $0x9,%eax
f010633f:	c1 e0 04             	shl    $0x4,%eax
f0106342:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0106347:	8b 00                	mov    (%eax),%eax
f0106349:	85 c0                	test   %eax,%eax
f010634b:	0f 85 bd fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f0106351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106355:	0f 85 b3 fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f010635b:	eb 13                	jmp    f0106370 <sched_kill_all+0x289>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f010635d:	83 ec 08             	sub    $0x8,%esp
f0106360:	ff 75 f0             	pushl  -0x10(%ebp)
f0106363:	68 20 64 12 f0       	push   $0xf0126420
f0106368:	e8 ff ab ff ff       	call   f0100f6c <cprintf>
f010636d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0106370:	83 ec 0c             	sub    $0xc,%esp
f0106373:	68 c4 63 12 f0       	push   $0xf01263c4
f0106378:	e8 ef ab ff ff       	call   f0100f6c <cprintf>
f010637d:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106380:	ff 45 f0             	incl   -0x10(%ebp)
f0106383:	a0 60 91 55 f0       	mov    0xf0559160,%al
f0106388:	0f b6 c0             	movzbl %al,%eax
f010638b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010638e:	0f 8f 37 fe ff ff    	jg     f01061cb <sched_kill_all+0xe4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0106394:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f0106399:	85 c0                	test   %eax,%eax
f010639b:	0f 84 95 00 00 00    	je     f0106436 <sched_kill_all+0x34f>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f01063a1:	83 ec 0c             	sub    $0xc,%esp
f01063a4:	68 50 65 12 f0       	push   $0xf0126550
f01063a9:	e8 be ab ff ff       	call   f0100f6c <cprintf>
f01063ae:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f01063b1:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f01063b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063b9:	eb 52                	jmp    f010640d <sched_kill_all+0x326>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01063bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063be:	8d 50 20             	lea    0x20(%eax),%edx
f01063c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063c4:	8b 40 10             	mov    0x10(%eax),%eax
f01063c7:	83 ec 04             	sub    $0x4,%esp
f01063ca:	52                   	push   %edx
f01063cb:	50                   	push   %eax
f01063cc:	68 ec 64 12 f0       	push   $0xf01264ec
f01063d1:	e8 96 ab ff ff       	call   f0100f6c <cprintf>
f01063d6:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01063d9:	83 ec 0c             	sub    $0xc,%esp
f01063dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01063df:	e8 d1 f1 ff ff       	call   f01055b5 <sched_remove_exit>
f01063e4:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01063e7:	83 ec 0c             	sub    $0xc,%esp
f01063ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01063ed:	e8 36 43 00 00       	call   f010a728 <env_free>
f01063f2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01063f5:	83 ec 0c             	sub    $0xc,%esp
f01063f8:	68 26 63 12 f0       	push   $0xf0126326
f01063fd:	e8 6a ab ff ff       	call   f0100f6c <cprintf>
f0106402:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0106405:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f010640a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010640d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106411:	74 08                	je     f010641b <sched_kill_all+0x334>
f0106413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106416:	8b 40 08             	mov    0x8(%eax),%eax
f0106419:	eb 05                	jmp    f0106420 <sched_kill_all+0x339>
f010641b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106420:	a3 e8 64 55 f0       	mov    %eax,0xf05564e8
f0106425:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f010642a:	85 c0                	test   %eax,%eax
f010642c:	75 8d                	jne    f01063bb <sched_kill_all+0x2d4>
f010642e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106432:	75 87                	jne    f01063bb <sched_kill_all+0x2d4>
f0106434:	eb 10                	jmp    f0106446 <sched_kill_all+0x35f>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0106436:	83 ec 0c             	sub    $0xc,%esp
f0106439:	68 66 64 12 f0       	push   $0xf0126466
f010643e:	e8 29 ab ff ff       	call   f0100f6c <cprintf>
f0106443:	83 c4 10             	add    $0x10,%esp
	}

	struct Env* cur_env = get_cpu_proc();
f0106446:	e8 25 43 00 00       	call   f010a770 <get_cpu_proc>
f010644b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (cur_env)
f010644e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106452:	74 6b                	je     f01064bf <sched_kill_all+0x3d8>
	{
		ptr_env = cur_env;
f0106454:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106457:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(ptr_env->env_status == ENV_RUNNING);
f010645a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010645d:	8b 40 18             	mov    0x18(%eax),%eax
f0106460:	83 f8 02             	cmp    $0x2,%eax
f0106463:	74 19                	je     f010647e <sched_kill_all+0x397>
f0106465:	68 2c 63 12 f0       	push   $0xf012632c
f010646a:	68 4e 61 12 f0       	push   $0xf012614e
f010646f:	68 57 02 00 00       	push   $0x257
f0106474:	68 63 61 12 f0       	push   $0xf0126163
f0106479:	e8 9c 9e ff ff       	call   f010031a <_panic>
		cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010647e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106481:	8d 50 20             	lea    0x20(%eax),%edx
f0106484:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106487:	8b 40 10             	mov    0x10(%eax),%eax
f010648a:	83 ec 04             	sub    $0x4,%esp
f010648d:	52                   	push   %edx
f010648e:	50                   	push   %eax
f010648f:	68 50 63 12 f0       	push   $0xf0126350
f0106494:	e8 d3 aa ff ff       	call   f0100f6c <cprintf>
f0106499:	83 c4 10             	add    $0x10,%esp
		env_free(ptr_env);
f010649c:	83 ec 0c             	sub    $0xc,%esp
f010649f:	ff 75 f4             	pushl  -0xc(%ebp)
f01064a2:	e8 81 42 00 00       	call   f010a728 <env_free>
f01064a7:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f01064aa:	83 ec 0c             	sub    $0xc,%esp
f01064ad:	68 26 63 12 f0       	push   $0xf0126326
f01064b2:	e8 b5 aa ff ff       	call   f0100f6c <cprintf>
f01064b7:	83 c4 10             	add    $0x10,%esp
		//return back to a killed env. Status already set to EXIT in the env_free()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		//reinvoke the scheduler since there're no env to return back to it
		/*2024: replaced by sched() to apply context_switch*/
		sched();
f01064ba:	e8 3e 44 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064bf:	83 ec 0c             	sub    $0xc,%esp
f01064c2:	68 60 64 55 f0       	push   $0xf0556460
f01064c7:	e8 92 86 00 00       	call   f010eb5e <release_spinlock>
f01064cc:	83 c4 10             	add    $0x10,%esp
	//get into the command prompt since there're no env to return back to it
	//fos_scheduler(); //2024: commented
	get_into_prompt();
f01064cf:	e8 cf b8 ff ff       	call   f0101da3 <get_into_prompt>

f01064d4 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f01064d4:	55                   	push   %ebp
f01064d5:	89 e5                	mov    %esp,%ebp
f01064d7:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064da:	83 ec 0c             	sub    $0xc,%esp
f01064dd:	68 60 64 55 f0       	push   $0xf0556460
f01064e2:	e8 f0 85 00 00       	call   f010ead7 <acquire_spinlock>
f01064e7:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f01064ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01064f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064f8:	e9 59 01 00 00       	jmp    f0106656 <sched_exit_all_ready_envs+0x182>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01064fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106500:	83 c0 09             	add    $0x9,%eax
f0106503:	c1 e0 04             	shl    $0x4,%eax
f0106506:	05 60 64 55 f0       	add    $0xf0556460,%eax
f010650b:	8b 00                	mov    (%eax),%eax
f010650d:	85 c0                	test   %eax,%eax
f010650f:	0f 84 3e 01 00 00    	je     f0106653 <sched_exit_all_ready_envs+0x17f>
		{
			ptr_env=NULL;
f0106515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010651c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010651f:	83 c0 09             	add    $0x9,%eax
f0106522:	c1 e0 04             	shl    $0x4,%eax
f0106525:	05 60 64 55 f0       	add    $0xf0556460,%eax
f010652a:	8b 00                	mov    (%eax),%eax
f010652c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010652f:	e9 d9 00 00 00       	jmp    f010660d <sched_exit_all_ready_envs+0x139>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0106534:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106538:	75 17                	jne    f0106551 <sched_exit_all_ready_envs+0x7d>
f010653a:	83 ec 04             	sub    $0x4,%esp
f010653d:	68 9f 61 12 f0       	push   $0xf012619f
f0106542:	68 79 02 00 00       	push   $0x279
f0106547:	68 63 61 12 f0       	push   $0xf0126163
f010654c:	e8 c9 9d ff ff       	call   f010031a <_panic>
f0106551:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106554:	8b 40 08             	mov    0x8(%eax),%eax
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 11                	je     f010656c <sched_exit_all_ready_envs+0x98>
f010655b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010655e:	8b 40 08             	mov    0x8(%eax),%eax
f0106561:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106564:	8b 52 0c             	mov    0xc(%edx),%edx
f0106567:	89 50 0c             	mov    %edx,0xc(%eax)
f010656a:	eb 17                	jmp    f0106583 <sched_exit_all_ready_envs+0xaf>
f010656c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010656f:	8b 40 0c             	mov    0xc(%eax),%eax
f0106572:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106575:	83 c2 09             	add    $0x9,%edx
f0106578:	c1 e2 04             	shl    $0x4,%edx
f010657b:	81 c2 64 64 55 f0    	add    $0xf0556464,%edx
f0106581:	89 02                	mov    %eax,(%edx)
f0106583:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106586:	8b 40 0c             	mov    0xc(%eax),%eax
f0106589:	85 c0                	test   %eax,%eax
f010658b:	74 11                	je     f010659e <sched_exit_all_ready_envs+0xca>
f010658d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106590:	8b 40 0c             	mov    0xc(%eax),%eax
f0106593:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106596:	8b 52 08             	mov    0x8(%edx),%edx
f0106599:	89 50 08             	mov    %edx,0x8(%eax)
f010659c:	eb 17                	jmp    f01065b5 <sched_exit_all_ready_envs+0xe1>
f010659e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a1:	8b 40 08             	mov    0x8(%eax),%eax
f01065a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a7:	83 c2 09             	add    $0x9,%edx
f01065aa:	c1 e2 04             	shl    $0x4,%edx
f01065ad:	81 c2 60 64 55 f0    	add    $0xf0556460,%edx
f01065b3:	89 02                	mov    %eax,(%edx)
f01065b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01065bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01065c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065cc:	83 c0 09             	add    $0x9,%eax
f01065cf:	c1 e0 04             	shl    $0x4,%eax
f01065d2:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f01065d7:	8b 00                	mov    (%eax),%eax
f01065d9:	8d 50 ff             	lea    -0x1(%eax),%edx
f01065dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065df:	83 c0 09             	add    $0x9,%eax
f01065e2:	c1 e0 04             	shl    $0x4,%eax
f01065e5:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f01065ea:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f01065ec:	83 ec 0c             	sub    $0xc,%esp
f01065ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01065f2:	e8 37 ef ff ff       	call   f010552e <sched_insert_exit>
f01065f7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01065fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065fd:	83 c0 09             	add    $0x9,%eax
f0106600:	c1 e0 04             	shl    $0x4,%eax
f0106603:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0106608:	8b 00                	mov    (%eax),%eax
f010660a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010660d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106611:	74 08                	je     f010661b <sched_exit_all_ready_envs+0x147>
f0106613:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106616:	8b 40 08             	mov    0x8(%eax),%eax
f0106619:	eb 05                	jmp    f0106620 <sched_exit_all_ready_envs+0x14c>
f010661b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106620:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106623:	83 c2 09             	add    $0x9,%edx
f0106626:	c1 e2 04             	shl    $0x4,%edx
f0106629:	81 c2 68 64 55 f0    	add    $0xf0556468,%edx
f010662f:	89 02                	mov    %eax,(%edx)
f0106631:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106634:	83 c0 09             	add    $0x9,%eax
f0106637:	c1 e0 04             	shl    $0x4,%eax
f010663a:	05 68 64 55 f0       	add    $0xf0556468,%eax
f010663f:	8b 00                	mov    (%eax),%eax
f0106641:	85 c0                	test   %eax,%eax
f0106643:	0f 85 eb fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
f0106649:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010664d:	0f 85 e1 fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
//=================================================
void sched_exit_all_ready_envs()
{
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106653:	ff 45 f0             	incl   -0x10(%ebp)
f0106656:	a0 60 91 55 f0       	mov    0xf0559160,%al
f010665b:	0f b6 c0             	movzbl %al,%eax
f010665e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0106661:	0f 8f 96 fe ff ff    	jg     f01064fd <sched_exit_all_ready_envs+0x29>
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106667:	83 ec 0c             	sub    $0xc,%esp
f010666a:	68 60 64 55 f0       	push   $0xf0556460
f010666f:	e8 ea 84 00 00       	call   f010eb5e <release_spinlock>
f0106674:	83 c4 10             	add    $0x10,%esp
}
f0106677:	90                   	nop
f0106678:	c9                   	leave  
f0106679:	c3                   	ret    

f010667a <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f010667a:	55                   	push   %ebp
f010667b:	89 e5                	mov    %esp,%ebp
	return ticks;
f010667d:	a1 c8 90 55 f0       	mov    0xf05590c8,%eax
f0106682:	8b 15 cc 90 55 f0    	mov    0xf05590cc,%edx
}
f0106688:	5d                   	pop    %ebp
f0106689:	c3                   	ret    

f010668a <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010668a:	55                   	push   %ebp
f010668b:	89 e5                	mov    %esp,%ebp
f010668d:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106690:	83 ec 04             	sub    $0x4,%esp
f0106693:	68 7c 65 12 f0       	push   $0xf012657c
f0106698:	68 8c 02 00 00       	push   $0x28c
f010669d:	68 63 61 12 f0       	push   $0xf0126163
f01066a2:	e8 73 9c ff ff       	call   f010031a <_panic>

f01066a7 <env_set_nice>:
}

void env_set_nice(struct Env* e, int nice_value)
{
f01066a7:	55                   	push   %ebp
f01066a8:	89 e5                	mov    %esp,%ebp
f01066aa:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ad:	83 ec 04             	sub    $0x4,%esp
f01066b0:	68 7c 65 12 f0       	push   $0xf012657c
f01066b5:	68 94 02 00 00       	push   $0x294
f01066ba:	68 63 61 12 f0       	push   $0xf0126163
f01066bf:	e8 56 9c ff ff       	call   f010031a <_panic>

f01066c4 <env_get_recent_cpu>:
}

int env_get_recent_cpu(struct Env* e)
{
f01066c4:	55                   	push   %ebp
f01066c5:	89 e5                	mov    %esp,%ebp
f01066c7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ca:	83 ec 04             	sub    $0x4,%esp
f01066cd:	68 7c 65 12 f0       	push   $0xf012657c
f01066d2:	68 9c 02 00 00       	push   $0x29c
f01066d7:	68 63 61 12 f0       	push   $0xf0126163
f01066dc:	e8 39 9c ff ff       	call   f010031a <_panic>

f01066e1 <get_load_average>:
}
int get_load_average()
{
f01066e1:	55                   	push   %ebp
f01066e2:	89 e5                	mov    %esp,%ebp
f01066e4:	83 ec 08             	sub    $0x8,%esp
	//return 1;
	//[PROJECT] BSD Scheduler - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066e7:	83 ec 04             	sub    $0x4,%esp
f01066ea:	68 7c 65 12 f0       	push   $0xf012657c
f01066ef:	68 a4 02 00 00       	push   $0x2a4
f01066f4:	68 63 61 12 f0       	push   $0xf0126163
f01066f9:	e8 1c 9c ff ff       	call   f010031a <_panic>

f01066fe <isSchedMethodRR>:
#include <kern/cmd/command_prompt.h>
#include <kern/cpu/cpu.h>
#include <kern/cpu/picirq.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f01066fe:	55                   	push   %ebp
f01066ff:	89 e5                	mov    %esp,%ebp
f0106701:	a1 14 8f 55 f0       	mov    0xf0558f14,%eax
f0106706:	85 c0                	test   %eax,%eax
f0106708:	75 07                	jne    f0106711 <isSchedMethodRR+0x13>
f010670a:	b8 01 00 00 00       	mov    $0x1,%eax
f010670f:	eb 05                	jmp    f0106716 <isSchedMethodRR+0x18>
f0106711:	b8 00 00 00 00       	mov    $0x0,%eax
f0106716:	5d                   	pop    %ebp
f0106717:	c3                   	ret    

f0106718 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106718:	55                   	push   %ebp
f0106719:	89 e5                	mov    %esp,%ebp
f010671b:	a1 14 8f 55 f0       	mov    0xf0558f14,%eax
f0106720:	83 f8 01             	cmp    $0x1,%eax
f0106723:	75 07                	jne    f010672c <isSchedMethodMLFQ+0x14>
f0106725:	b8 01 00 00 00       	mov    $0x1,%eax
f010672a:	eb 05                	jmp    f0106731 <isSchedMethodMLFQ+0x19>
f010672c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106731:	5d                   	pop    %ebp
f0106732:	c3                   	ret    

f0106733 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0106733:	55                   	push   %ebp
f0106734:	89 e5                	mov    %esp,%ebp
f0106736:	a1 14 8f 55 f0       	mov    0xf0558f14,%eax
f010673b:	83 f8 02             	cmp    $0x2,%eax
f010673e:	75 07                	jne    f0106747 <isSchedMethodBSD+0x14>
f0106740:	b8 01 00 00 00       	mov    $0x1,%eax
f0106745:	eb 05                	jmp    f010674c <isSchedMethodBSD+0x19>
f0106747:	b8 00 00 00 00       	mov    $0x0,%eax
f010674c:	5d                   	pop    %ebp
f010674d:	c3                   	ret    

f010674e <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f010674e:	55                   	push   %ebp
f010674f:	89 e5                	mov    %esp,%ebp
f0106751:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0106754:	c7 05 e8 8b 55 f0 00 	movl   $0x0,0xf0558be8
f010675b:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f010675e:	83 ec 0c             	sub    $0xc,%esp
f0106761:	6a 0a                	push   $0xa
f0106763:	e8 6d 02 00 00       	call   f01069d5 <sched_init_RR>
f0106768:	83 c4 10             	add    $0x10,%esp

	init_queue(&ProcessQueues.env_new_queue);
f010676b:	83 ec 0c             	sub    $0xc,%esp
f010676e:	68 d0 64 55 f0       	push   $0xf05564d0
f0106773:	e8 bf e7 ff ff       	call   f0104f37 <init_queue>
f0106778:	83 c4 10             	add    $0x10,%esp
	init_queue(&ProcessQueues.env_exit_queue);
f010677b:	83 ec 0c             	sub    $0xc,%esp
f010677e:	68 e0 64 55 f0       	push   $0xf05564e0
f0106783:	e8 af e7 ff ff       	call   f0104f37 <init_queue>
f0106788:	83 c4 10             	add    $0x10,%esp

	mycpu()->scheduler_status = SCH_STOPPED;
f010678b:	e8 6d 09 00 00       	call   f01070fd <mycpu>
f0106790:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106797:	00 00 00 

	/*2024: initialize lock to protect these Qs in MULTI-CORE case only*/
	init_spinlock(&ProcessQueues.qlock, "process queues lock");
f010679a:	83 ec 08             	sub    $0x8,%esp
f010679d:	68 90 65 12 f0       	push   $0xf0126590
f01067a2:	68 60 64 55 f0       	push   $0xf0556460
f01067a7:	e8 fa 82 00 00       	call   f010eaa6 <init_spinlock>
f01067ac:	83 c4 10             	add    $0x10,%esp
}
f01067af:	90                   	nop
f01067b0:	c9                   	leave  
f01067b1:	c3                   	ret    

f01067b2 <fos_scheduler>:
// [2] Main FOS Scheduler:
//=========================

void
fos_scheduler(void)
{
f01067b2:	55                   	push   %ebp
f01067b3:	89 e5                	mov    %esp,%ebp
f01067b5:	53                   	push   %ebx
f01067b6:	83 ec 24             	sub    $0x24,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01067b9:	9c                   	pushf  
f01067ba:	58                   	pop    %eax
f01067bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f01067be:	8b 45 d8             	mov    -0x28(%ebp),%eax
	//ensure that the scheduler is invoked while interrupt is disabled
	if (read_eflags() & FL_IF)
f01067c1:	25 00 02 00 00       	and    $0x200,%eax
f01067c6:	85 c0                	test   %eax,%eax
f01067c8:	74 14                	je     f01067de <fos_scheduler+0x2c>
		panic("fos_scheduler: called while the interrupt is enabled!");
f01067ca:	83 ec 04             	sub    $0x4,%esp
f01067cd:	68 a4 65 12 f0       	push   $0xf01265a4
f01067d2:	6a 37                	push   $0x37
f01067d4:	68 da 65 12 f0       	push   $0xf01265da
f01067d9:	e8 3c 9b ff ff       	call   f010031a <_panic>

	//cprintf("inside scheduler - timer cnt = %d\n", kclock_read_cnt0());
	struct Env *p;
	struct cpu *c = mycpu();
f01067de:	e8 1a 09 00 00       	call   f01070fd <mycpu>
f01067e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	c->proc = 0;
f01067e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067e9:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01067f0:	00 00 00 

	chk1();
f01067f3:	e8 7c ac 01 00       	call   f0121474 <chk1>
	c->scheduler_status = SCH_STARTED;
f01067f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067fb:	c7 80 b4 00 00 00 01 	movl   $0x1,0xb4(%eax)
f0106802:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0106805:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	//2024: should be outer loop as long as there's any BLOCKED processes.
	//Ref: xv6-x86 OS
	int is_any_blocked = 0;
f010680c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0106813:	fb                   	sti    
		// to avoid a deadlock if all processes are waiting.
		sti();

		// Check ready queue(s) looking for process to run.
		//cprintf("\n[FOS_SCHEDULER] acquire: lock status before acquire = %d\n", qlock.locked);
		acquire_spinlock(&(ProcessQueues.qlock));  //lock: to protect ready & blocked Qs in multi-CPU
f0106814:	83 ec 0c             	sub    $0xc,%esp
f0106817:	68 60 64 55 f0       	push   $0xf0556460
f010681c:	e8 b6 82 00 00       	call   f010ead7 <acquire_spinlock>
f0106821:	83 c4 10             	add    $0x10,%esp
		//cprintf("ACQUIRED\n");
		do
		{
			//Get next env according to the current scheduler
			next_env = sched_next[scheduler_method]() ;
f0106824:	a1 14 8f 55 f0       	mov    0xf0558f14,%eax
f0106829:	8b 04 85 4c d9 17 f0 	mov    -0xfe826b4(,%eax,4),%eax
f0106830:	ff d0                	call   *%eax
f0106832:	89 45 e8             	mov    %eax,-0x18(%ebp)

			//temporarily set the curenv by the next env JUST for checking the scheduler
			//Then: reset it again
			struct Env* old_curenv = get_cpu_proc();
f0106835:	e8 36 3f 00 00       	call   f010a770 <get_cpu_proc>
f010683a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			set_cpu_proc(next_env) ;
f010683d:	83 ec 0c             	sub    $0xc,%esp
f0106840:	ff 75 e8             	pushl  -0x18(%ebp)
f0106843:	e8 51 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106848:	83 c4 10             	add    $0x10,%esp
			chk2(next_env) ;
f010684b:	83 ec 0c             	sub    $0xc,%esp
f010684e:	ff 75 e8             	pushl  -0x18(%ebp)
f0106851:	e8 24 ac 01 00       	call   f012147a <chk2>
f0106856:	83 c4 10             	add    $0x10,%esp
			set_cpu_proc(old_curenv) ;
f0106859:	83 ec 0c             	sub    $0xc,%esp
f010685c:	ff 75 e0             	pushl  -0x20(%ebp)
f010685f:	e8 35 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106864:	83 c4 10             	add    $0x10,%esp

			//sched_print_all();

			if(next_env != NULL)
f0106867:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010686b:	0f 84 d6 00 00 00    	je     f0106947 <fos_scheduler+0x195>
				/*2024: Replaced by context_switch()*/
				//env_run(next_env);

				// Switch to chosen process. It is the process's job to release qlock
				// and then reacquire it before jumping back to us.
				set_cpu_proc(next_env);
f0106871:	83 ec 0c             	sub    $0xc,%esp
f0106874:	ff 75 e8             	pushl  -0x18(%ebp)
f0106877:	e8 1d 3f 00 00       	call   f010a799 <set_cpu_proc>
f010687c:	83 c4 10             	add    $0x10,%esp
				switchuvm(next_env);
f010687f:	83 ec 0c             	sub    $0xc,%esp
f0106882:	ff 75 e8             	pushl  -0x18(%ebp)
f0106885:	e8 96 41 00 00       	call   f010aa20 <switchuvm>
f010688a:	83 c4 10             	add    $0x10,%esp

				//Change its status to RUNNING
				next_env->env_status = ENV_RUNNING;
f010688d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106890:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%eax)

				//Context switch to it
				context_switch(&(c->scheduler), next_env->context);
f0106897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010689a:	8b 40 04             	mov    0x4(%eax),%eax
f010689d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01068a0:	83 c2 04             	add    $0x4,%edx
f01068a3:	83 ec 08             	sub    $0x8,%esp
f01068a6:	50                   	push   %eax
f01068a7:	52                   	push   %edx
f01068a8:	e8 92 e2 ff ff       	call   f0104b3f <context_switch>
f01068ad:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01068b0:	9c                   	pushf  
f01068b1:	58                   	pop    %eax
f01068b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f01068b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax

				//ensure that the scheduler is invoked while interrupt is disabled
				if (read_eflags() & FL_IF)
f01068b8:	25 00 02 00 00       	and    $0x200,%eax
f01068bd:	85 c0                	test   %eax,%eax
f01068bf:	74 14                	je     f01068d5 <fos_scheduler+0x123>
					panic("fos_scheduler: invoked while the interrupt is enabled!");
f01068c1:	83 ec 04             	sub    $0x4,%esp
f01068c4:	68 ec 65 12 f0       	push   $0xf01265ec
f01068c9:	6a 74                	push   $0x74
f01068cb:	68 da 65 12 f0       	push   $0xf01265da
f01068d0:	e8 45 9a ff ff       	call   f010031a <_panic>

				//Stop the clock now till finding a next proc (if any).
				//This is to avoid clock interrupt inside the scheduler after sti() of the outer loop
				kclock_stop();
f01068d5:	e8 ae e3 ff ff       	call   f0104c88 <kclock_stop>
				//cprintf("\n[IEN = %d] clock is stopped! returned to scheduler after context_switch. curenv = %d\n", (read_eflags() & FL_IF) == 0? 0:1, curenv == NULL? 0 : curenv->env_id);

				// Process is done running for now. It should have changed its p->status before coming back.
				//If no process on CPU, switch to the kernel
				assert(get_cpu_proc() == c->proc);
f01068da:	e8 91 3e 00 00       	call   f010a770 <get_cpu_proc>
f01068df:	89 c2                	mov    %eax,%edx
f01068e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01068e4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01068ea:	39 c2                	cmp    %eax,%edx
f01068ec:	74 16                	je     f0106904 <fos_scheduler+0x152>
f01068ee:	68 23 66 12 f0       	push   $0xf0126623
f01068f3:	68 3d 66 12 f0       	push   $0xf012663d
f01068f8:	6a 7d                	push   $0x7d
f01068fa:	68 da 65 12 f0       	push   $0xf01265da
f01068ff:	e8 16 9a ff ff       	call   f010031a <_panic>
				int status = c->proc->env_status ;
f0106904:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106907:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010690d:	8b 40 18             	mov    0x18(%eax),%eax
f0106910:	89 45 dc             	mov    %eax,-0x24(%ebp)
				assert(status != ENV_RUNNING);
f0106913:	83 7d dc 02          	cmpl   $0x2,-0x24(%ebp)
f0106917:	75 16                	jne    f010692f <fos_scheduler+0x17d>
f0106919:	68 52 66 12 f0       	push   $0xf0126652
f010691e:	68 3d 66 12 f0       	push   $0xf012663d
f0106923:	6a 7f                	push   $0x7f
f0106925:	68 da 65 12 f0       	push   $0xf01265da
f010692a:	e8 eb 99 ff ff       	call   f010031a <_panic>
				if (status == ENV_READY)
f010692f:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
f0106933:	74 12                	je     f0106947 <fos_scheduler+0x195>
					//OK... will be placed to the correct ready Q in the next iteration
				}
				else
				{
					//					cprintf("scheduler: process %d is BLOCKED/EXITED\n", c->proc->env_id);
					switchkvm();
f0106935:	e8 cf 40 00 00       	call   f010aa09 <switchkvm>
					set_cpu_proc(NULL);
f010693a:	83 ec 0c             	sub    $0xc,%esp
f010693d:	6a 00                	push   $0x0
f010693f:	e8 55 3e 00 00       	call   f010a799 <set_cpu_proc>
f0106944:	83 c4 10             	add    $0x10,%esp
				}
			}
		} while(next_env);
f0106947:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010694b:	0f 85 d3 fe ff ff    	jne    f0106824 <fos_scheduler+0x72>

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
f0106951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (int i = 0; i < NENV; ++i)
f0106958:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010695f:	eb 4d                	jmp    f01069ae <fos_scheduler+0x1fc>
		{
			if (envs[i].env_status == ENV_BLOCKED)
f0106961:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f0106967:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010696a:	89 d0                	mov    %edx,%eax
f010696c:	c1 e0 06             	shl    $0x6,%eax
f010696f:	29 d0                	sub    %edx,%eax
f0106971:	c1 e0 02             	shl    $0x2,%eax
f0106974:	01 d0                	add    %edx,%eax
f0106976:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010697d:	01 d8                	add    %ebx,%eax
f010697f:	c1 e0 03             	shl    $0x3,%eax
f0106982:	01 d0                	add    %edx,%eax
f0106984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010698b:	29 c2                	sub    %eax,%edx
f010698d:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0106994:	89 c2                	mov    %eax,%edx
f0106996:	89 d0                	mov    %edx,%eax
f0106998:	01 c8                	add    %ecx,%eax
f010699a:	8b 40 18             	mov    0x18(%eax),%eax
f010699d:	83 f8 03             	cmp    $0x3,%eax
f01069a0:	75 09                	jne    f01069ab <fos_scheduler+0x1f9>
			{
				is_any_blocked = 1;
f01069a2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				break;
f01069a9:	eb 0b                	jmp    f01069b6 <fos_scheduler+0x204>
			}
		} while(next_env);

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
		for (int i = 0; i < NENV; ++i)
f01069ab:	ff 45 f0             	incl   -0x10(%ebp)
f01069ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b1:	83 f8 07             	cmp    $0x7,%eax
f01069b4:	76 ab                	jbe    f0106961 <fos_scheduler+0x1af>
			{
				is_any_blocked = 1;
				break;
			}
		}
		release_spinlock(&ProcessQueues.qlock);  //release lock: to protect ready & blocked Qs in multi-CPU
f01069b6:	83 ec 0c             	sub    $0xc,%esp
f01069b9:	68 60 64 55 f0       	push   $0xf0556460
f01069be:	e8 9b 81 00 00       	call   f010eb5e <release_spinlock>
f01069c3:	83 c4 10             	add    $0x10,%esp
		//cprintf("\n[FOS_SCHEDULER] release: lock status after = %d\n", qlock.locked);

	} while (is_any_blocked > 0);
f01069c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069ca:	0f 8f 43 fe ff ff    	jg     f0106813 <fos_scheduler+0x61>

	/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
	{
		//cprintf("[sched] no envs - nothing more to do!\n");
		get_into_prompt();
f01069d0:	e8 ce b3 ff ff       	call   f0101da3 <get_into_prompt>

f01069d5 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f01069d5:	55                   	push   %ebp
f01069d6:	89 e5                	mov    %esp,%ebp
f01069d8:	83 ec 28             	sub    $0x28,%esp
f01069db:	8b 45 08             	mov    0x8(%ebp),%eax
f01069de:	88 45 e4             	mov    %al,-0x1c(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01069e1:	c6 05 60 91 55 f0 01 	movb   $0x1,0xf0559160
	//cprintf("sizeof(struct Env_Queue) = %x\n", sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
	//cprintf("num_of_ready_queues * sizeof(uint8) = %x\n", num_of_ready_queues * sizeof(uint8));

#endif
	quantums[0] = quantum;
f01069e8:	8a 45 e4             	mov    -0x1c(%ebp),%al
f01069eb:	a2 e4 8d 55 f0       	mov    %al,0xf0558de4
	kclock_set_quantum(quantums[0]);
f01069f0:	a0 e4 8d 55 f0       	mov    0xf0558de4,%al
f01069f5:	0f b6 c0             	movzbl %al,%eax
f01069f8:	83 ec 0c             	sub    $0xc,%esp
f01069fb:	50                   	push   %eax
f01069fc:	e8 50 e3 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106a01:	83 c4 10             	add    $0x10,%esp
	init_queue(&(ProcessQueues.env_ready_queues[0]));
f0106a04:	83 ec 0c             	sub    $0xc,%esp
f0106a07:	68 f0 64 55 f0       	push   $0xf05564f0
f0106a0c:	e8 26 e5 ff ff       	call   f0104f37 <init_queue>
f0106a11:	83 c4 10             	add    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
f0106a14:	e8 97 e4 ff ff       	call   f0104eb0 <kclock_read_cnt0_latch>
f0106a19:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	cprintf("*	RR scheduler with initial clock = %d\n", cnt0);
f0106a1d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a21:	83 ec 08             	sub    $0x8,%esp
f0106a24:	50                   	push   %eax
f0106a25:	68 68 66 12 f0       	push   $0xf0126668
f0106a2a:	e8 3d a5 ff ff       	call   f0100f6c <cprintf>
f0106a2f:	83 c4 10             	add    $0x10,%esp
	mycpu()->scheduler_status = SCH_STOPPED;
f0106a32:	e8 c6 06 00 00       	call   f01070fd <mycpu>
f0106a37:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106a3e:	00 00 00 
	scheduler_method = SCH_RR;
f0106a41:	c7 05 14 8f 55 f0 00 	movl   $0x0,0xf0558f14
f0106a48:	00 00 00 
	//=========================================
	//=========================================
}
f0106a4b:	90                   	nop
f0106a4c:	c9                   	leave  
f0106a4d:	c3                   	ret    

f0106a4e <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0106a4e:	55                   	push   %ebp
f0106a4f:	89 e5                	mov    %esp,%ebp
f0106a51:	83 ec 18             	sub    $0x18,%esp
f0106a54:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a57:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0106a5a:	e8 88 e7 ff ff       	call   f01051e7 <sched_delete_ready_queues>
	//=========================================
	//=========================================
	//[PROJECT] MLFQ Scheduler - sched_init_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a5f:	83 ec 04             	sub    $0x4,%esp
f0106a62:	68 90 66 12 f0       	push   $0xf0126690
f0106a67:	68 ce 00 00 00       	push   $0xce
f0106a6c:	68 da 65 12 f0       	push   $0xf01265da
f0106a71:	e8 a4 98 ff ff       	call   f010031a <_panic>

f0106a76 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106a76:	55                   	push   %ebp
f0106a77:	89 e5                	mov    %esp,%ebp
f0106a79:	83 ec 18             	sub    $0x18,%esp
f0106a7c:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	88 55 f4             	mov    %dl,-0xc(%ebp)
f0106a85:	88 45 f0             	mov    %al,-0x10(%ebp)
	//[PROJECT] BSD Scheduler - sched_init_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a88:	83 ec 04             	sub    $0x4,%esp
f0106a8b:	68 90 66 12 f0       	push   $0xf0126690
f0106a90:	68 e4 00 00 00       	push   $0xe4
f0106a95:	68 da 65 12 f0       	push   $0xf01265da
f0106a9a:	e8 7b 98 ff ff       	call   f010031a <_panic>

f0106a9f <fos_scheduler_RR>:

//=========================
// [6] RR Scheduler:
//=========================
struct Env* fos_scheduler_RR()
{
f0106a9f:	55                   	push   %ebp
f0106aa0:	89 e5                	mov    %esp,%ebp
f0106aa2:	83 ec 18             	sub    $0x18,%esp
	// Pick next environment from the ready queue,
	// and switch to such environment if found.
	// It's OK to choose the previously running env if no other env
	// is runnable.
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106aa5:	83 ec 0c             	sub    $0xc,%esp
f0106aa8:	68 60 64 55 f0       	push   $0xf0556460
f0106aad:	e8 3e 82 00 00       	call   f010ecf0 <holding_spinlock>
f0106ab2:	83 c4 10             	add    $0x10,%esp
f0106ab5:	85 c0                	test   %eax,%eax
f0106ab7:	75 17                	jne    f0106ad0 <fos_scheduler_RR+0x31>
		panic("fos_scheduler_RR: q.lock is not held by this CPU while it's expected to be.");
f0106ab9:	83 ec 04             	sub    $0x4,%esp
f0106abc:	68 a4 66 12 f0       	push   $0xf01266a4
f0106ac1:	68 fe 00 00 00       	push   $0xfe
f0106ac6:	68 da 65 12 f0       	push   $0xf01265da
f0106acb:	e8 4a 98 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/
	struct Env *next_env = NULL;
f0106ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Env *cur_env = get_cpu_proc();
f0106ad7:	e8 94 3c 00 00       	call   f010a770 <get_cpu_proc>
f0106adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//If the curenv is still exist, then insert it again in the ready queue
	if (cur_env != NULL)
f0106adf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106ae3:	74 13                	je     f0106af8 <fos_scheduler_RR+0x59>
	{
		enqueue(&(ProcessQueues.env_ready_queues[0]), cur_env);
f0106ae5:	83 ec 08             	sub    $0x8,%esp
f0106ae8:	ff 75 f0             	pushl  -0x10(%ebp)
f0106aeb:	68 f0 64 55 f0       	push   $0xf05564f0
f0106af0:	e8 83 e4 ff ff       	call   f0104f78 <enqueue>
f0106af5:	83 c4 10             	add    $0x10,%esp
	}

	//Pick the next environment from the ready queue
	next_env = dequeue(&(ProcessQueues.env_ready_queues[0]));
f0106af8:	83 ec 0c             	sub    $0xc,%esp
f0106afb:	68 f0 64 55 f0       	push   $0xf05564f0
f0106b00:	e8 04 e5 ff ff       	call   f0105009 <dequeue>
f0106b05:	83 c4 10             	add    $0x10,%esp
f0106b08:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//Reset the quantum
	//2017: Reset the value of CNT0 for the next clock interval
	kclock_set_quantum(quantums[0]);
f0106b0b:	a0 e4 8d 55 f0       	mov    0xf0558de4,%al
f0106b10:	0f b6 c0             	movzbl %al,%eax
f0106b13:	83 ec 0c             	sub    $0xc,%esp
f0106b16:	50                   	push   %eax
f0106b17:	e8 35 e2 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106b1c:	83 c4 10             	add    $0x10,%esp
	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	return next_env;
f0106b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b22:	c9                   	leave  
f0106b23:	c3                   	ret    

f0106b24 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0106b24:	55                   	push   %ebp
f0106b25:	89 e5                	mov    %esp,%ebp
f0106b27:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b2a:	83 ec 0c             	sub    $0xc,%esp
f0106b2d:	68 60 64 55 f0       	push   $0xf0556460
f0106b32:	e8 b9 81 00 00       	call   f010ecf0 <holding_spinlock>
f0106b37:	83 c4 10             	add    $0x10,%esp
f0106b3a:	85 c0                	test   %eax,%eax
f0106b3c:	75 17                	jne    f0106b55 <fos_scheduler_MLFQ+0x31>
		panic("fos_scheduler_MLFQ: q.lock is not held by this CPU while it's expected to be.");
f0106b3e:	83 ec 04             	sub    $0x4,%esp
f0106b41:	68 f0 66 12 f0       	push   $0xf01266f0
f0106b46:	68 1d 01 00 00       	push   $0x11d
f0106b4b:	68 da 65 12 f0       	push   $0xf01265da
f0106b50:	e8 c5 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] MLFQ Scheduler - fos_scheduler_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b55:	83 ec 04             	sub    $0x4,%esp
f0106b58:	68 90 66 12 f0       	push   $0xf0126690
f0106b5d:	68 23 01 00 00       	push   $0x123
f0106b62:	68 da 65 12 f0       	push   $0xf01265da
f0106b67:	e8 ae 97 ff ff       	call   f010031a <_panic>

f0106b6c <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0106b6c:	55                   	push   %ebp
f0106b6d:	89 e5                	mov    %esp,%ebp
f0106b6f:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b72:	83 ec 0c             	sub    $0xc,%esp
f0106b75:	68 60 64 55 f0       	push   $0xf0556460
f0106b7a:	e8 71 81 00 00       	call   f010ecf0 <holding_spinlock>
f0106b7f:	83 c4 10             	add    $0x10,%esp
f0106b82:	85 c0                	test   %eax,%eax
f0106b84:	75 17                	jne    f0106b9d <fos_scheduler_BSD+0x31>
		panic("fos_scheduler_BSD: q.lock is not held by this CPU while it's expected to be.");
f0106b86:	83 ec 04             	sub    $0x4,%esp
f0106b89:	68 40 67 12 f0       	push   $0xf0126740
f0106b8e:	68 2e 01 00 00       	push   $0x12e
f0106b93:	68 da 65 12 f0       	push   $0xf01265da
f0106b98:	e8 7d 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] BSD Scheduler - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b9d:	83 ec 04             	sub    $0x4,%esp
f0106ba0:	68 90 66 12 f0       	push   $0xf0126690
f0106ba5:	68 34 01 00 00       	push   $0x134
f0106baa:	68 da 65 12 f0       	push   $0xf01265da
f0106baf:	e8 66 97 ff ff       	call   f010031a <_panic>

f0106bb4 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler(struct Trapframe* tf)
{
f0106bb4:	55                   	push   %ebp
f0106bb5:	89 e5                	mov    %esp,%ebp
f0106bb7:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodBSD())
f0106bba:	e8 74 fb ff ff       	call   f0106733 <isSchedMethodBSD>
f0106bbf:	85 c0                	test   %eax,%eax
f0106bc1:	74 17                	je     f0106bda <clock_interrupt_handler+0x26>
	{
		//[PROJECT] BSD Scheduler - clock_interrupt_handler
		//Your code is here
		//Comment the following line
		panic("Not implemented yet");
f0106bc3:	83 ec 04             	sub    $0x4,%esp
f0106bc6:	68 90 66 12 f0       	push   $0xf0126690
f0106bcb:	68 43 01 00 00       	push   $0x143
f0106bd0:	68 da 65 12 f0       	push   $0xf01265da
f0106bd5:	e8 40 97 ff ff       	call   f010031a <_panic>
	}



	/********DON'T CHANGE THESE LINES***********/
	ticks++ ;
f0106bda:	a1 c8 90 55 f0       	mov    0xf05590c8,%eax
f0106bdf:	8b 15 cc 90 55 f0    	mov    0xf05590cc,%edx
f0106be5:	83 c0 01             	add    $0x1,%eax
f0106be8:	83 d2 00             	adc    $0x0,%edx
f0106beb:	a3 c8 90 55 f0       	mov    %eax,0xf05590c8
f0106bf0:	89 15 cc 90 55 f0    	mov    %edx,0xf05590cc
	struct Env* p = get_cpu_proc();
f0106bf6:	e8 75 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p == NULL)
f0106bfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c02:	74 30                	je     f0106c34 <clock_interrupt_handler+0x80>
	{
	}
	else
	{
		p->nClocks++ ;
f0106c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c07:	8b 80 68 da 01 00    	mov    0x1da68(%eax),%eax
f0106c0d:	8d 50 01             	lea    0x1(%eax),%edx
f0106c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c13:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0106c19:	83 ec 0c             	sub    $0xc,%esp
f0106c1c:	6a 01                	push   $0x1
f0106c1e:	e8 a3 7a 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0106c23:	83 c4 10             	add    $0x10,%esp
f0106c26:	85 c0                	test   %eax,%eax
f0106c28:	74 05                	je     f0106c2f <clock_interrupt_handler+0x7b>
		{
			update_WS_time_stamps();
f0106c2a:	e8 08 00 00 00       	call   f0106c37 <update_WS_time_stamps>
		}
		//cprintf("\n***************\nClock Handler\n***************\n") ;
		//fos_scheduler();
		yield();
f0106c2f:	e8 6a 3c 00 00       	call   f010a89e <yield>
	}
	/*****************************************/
}
f0106c34:	90                   	nop
f0106c35:	c9                   	leave  
f0106c36:	c3                   	ret    

f0106c37 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106c37:	55                   	push   %ebp
f0106c38:	89 e5                	mov    %esp,%ebp
f0106c3a:	53                   	push   %ebx
f0106c3b:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = get_cpu_proc();
f0106c3e:	e8 2d 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106c43:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106c46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4a:	0f 84 9d 01 00 00    	je     f0106ded <update_WS_time_stamps+0x1b6>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106c57:	e9 99 00 00 00       	jmp    f0106cf5 <update_WS_time_stamps+0xbe>
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f0106c5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c5f:	89 d0                	mov    %edx,%eax
f0106c61:	01 c0                	add    %eax,%eax
f0106c63:	01 d0                	add    %edx,%eax
f0106c65:	c1 e0 03             	shl    $0x3,%eax
f0106c68:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f0106c6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c71:	01 d0                	add    %edx,%eax
f0106c73:	83 c0 08             	add    $0x8,%eax
f0106c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
					if( wse->empty == 1)
f0106c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7c:	8a 40 04             	mov    0x4(%eax),%al
f0106c7f:	3c 01                	cmp    $0x1,%al
f0106c81:	74 6e                	je     f0106cf1 <update_WS_time_stamps+0xba>
						continue;
#endif
					//update the time if the page was referenced
					uint32 page_va = wse->virtual_address ;
f0106c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c86:	8b 00                	mov    (%eax),%eax
f0106c88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c8e:	8b 40 64             	mov    0x64(%eax),%eax
f0106c91:	83 ec 08             	sub    $0x8,%esp
f0106c94:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106c97:	50                   	push   %eax
f0106c98:	e8 4f 1f 00 00       	call   f0108bec <pt_get_page_permissions>
f0106c9d:	83 c4 10             	add    $0x10,%esp
f0106ca0:	89 45 e0             	mov    %eax,-0x20(%ebp)
					uint32 oldTimeStamp = wse->time_stamp;
f0106ca3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ca6:	8b 40 08             	mov    0x8(%eax),%eax
f0106ca9:	89 45 dc             	mov    %eax,-0x24(%ebp)

					if (perm & PERM_USED)
f0106cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106caf:	83 e0 20             	and    $0x20,%eax
f0106cb2:	85 c0                	test   %eax,%eax
f0106cb4:	74 2b                	je     f0106ce1 <update_WS_time_stamps+0xaa>
					{
						wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106cb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106cb9:	c1 e8 02             	shr    $0x2,%eax
f0106cbc:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106cc1:	89 c2                	mov    %eax,%edx
f0106cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cc6:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0106cc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0106ccf:	6a 20                	push   $0x20
f0106cd1:	6a 00                	push   $0x0
f0106cd3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106cd6:	50                   	push   %eax
f0106cd7:	e8 4c 1e 00 00       	call   f0108b28 <pt_set_page_permissions>
f0106cdc:	83 c4 10             	add    $0x10,%esp
f0106cdf:	eb 11                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
					}
					else
					{
						wse->time_stamp = (oldTimeStamp>>2);
f0106ce1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106ce4:	c1 e8 02             	shr    $0x2,%eax
f0106ce7:	89 c2                	mov    %eax,%edx
f0106ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cec:	89 50 08             	mov    %edx,0x8(%eax)
f0106cef:	eb 01                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
					if( wse->empty == 1)
						continue;
f0106cf1:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106cf2:	ff 45 f4             	incl   -0xc(%ebp)
f0106cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cf8:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0106cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d01:	39 c2                	cmp    %eax,%edx
f0106d03:	0f 87 53 ff ff ff    	ja     f0106c5c <update_WS_time_stamps+0x25>
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106d09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106d10:	e9 ce 00 00 00       	jmp    f0106de3 <update_WS_time_stamps+0x1ac>
				{
					if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0106d15:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d1b:	89 d0                	mov    %edx,%eax
f0106d1d:	01 c0                	add    %eax,%eax
f0106d1f:	01 d0                	add    %edx,%eax
f0106d21:	c1 e0 03             	shl    $0x3,%eax
f0106d24:	01 c8                	add    %ecx,%eax
f0106d26:	05 60 d5 01 00       	add    $0x1d560,%eax
f0106d2b:	8a 00                	mov    (%eax),%al
f0106d2d:	3c 01                	cmp    $0x1,%al
f0106d2f:	0f 84 ab 00 00 00    	je     f0106de0 <update_WS_time_stamps+0x1a9>
					{
						//update the time if the page was referenced
						uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106d35:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d38:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d3b:	89 d0                	mov    %edx,%eax
f0106d3d:	01 c0                	add    %eax,%eax
f0106d3f:	01 d0                	add    %edx,%eax
f0106d41:	c1 e0 03             	shl    $0x3,%eax
f0106d44:	01 c8                	add    %ecx,%eax
f0106d46:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0106d4b:	8b 00                	mov    (%eax),%eax
f0106d4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
						uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106d50:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d56:	89 d0                	mov    %edx,%eax
f0106d58:	01 c0                	add    %eax,%eax
f0106d5a:	01 d0                	add    %edx,%eax
f0106d5c:	c1 e0 03             	shl    $0x3,%eax
f0106d5f:	01 c8                	add    %ecx,%eax
f0106d61:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	89 45 d4             	mov    %eax,-0x2c(%ebp)

						if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d6e:	8b 40 64             	mov    0x64(%eax),%eax
f0106d71:	83 ec 08             	sub    $0x8,%esp
f0106d74:	ff 75 d8             	pushl  -0x28(%ebp)
f0106d77:	50                   	push   %eax
f0106d78:	e8 4b 1f 00 00       	call   f0108cc8 <pd_is_table_used>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	85 c0                	test   %eax,%eax
f0106d82:	74 3c                	je     f0106dc0 <update_WS_time_stamps+0x189>
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106d84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106d87:	c1 e8 02             	shr    $0x2,%eax
f0106d8a:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106d8f:	89 c1                	mov    %eax,%ecx
f0106d91:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106d94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d97:	89 d0                	mov    %edx,%eax
f0106d99:	01 c0                	add    %eax,%eax
f0106d9b:	01 d0                	add    %edx,%eax
f0106d9d:	c1 e0 03             	shl    $0x3,%eax
f0106da0:	01 d8                	add    %ebx,%eax
f0106da2:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106da7:	89 08                	mov    %ecx,(%eax)
							pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dac:	8b 40 64             	mov    0x64(%eax),%eax
f0106daf:	83 ec 08             	sub    $0x8,%esp
f0106db2:	ff 75 d8             	pushl  -0x28(%ebp)
f0106db5:	50                   	push   %eax
f0106db6:	e8 31 1f 00 00       	call   f0108cec <pd_set_table_unused>
f0106dbb:	83 c4 10             	add    $0x10,%esp
f0106dbe:	eb 20                	jmp    f0106de0 <update_WS_time_stamps+0x1a9>
						}
						else
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0106dc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106dc3:	c1 e8 02             	shr    $0x2,%eax
f0106dc6:	89 c1                	mov    %eax,%ecx
f0106dc8:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dce:	89 d0                	mov    %edx,%eax
f0106dd0:	01 c0                	add    %eax,%eax
f0106dd2:	01 d0                	add    %edx,%eax
f0106dd4:	c1 e0 03             	shl    $0x3,%eax
f0106dd7:	01 d8                	add    %ebx,%eax
f0106dd9:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106dde:	89 08                	mov    %ecx,(%eax)
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106de0:	ff 45 f0             	incl   -0x10(%ebp)
f0106de3:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0106de7:	0f 8e 28 ff ff ff    	jle    f0106d15 <update_WS_time_stamps+0xde>
						}
					}
				}
			}
		}
	}
f0106ded:	90                   	nop
f0106dee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106df1:	c9                   	leave  
f0106df2:	c3                   	ret    

f0106df3 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106df3:	55                   	push   %ebp
f0106df4:	89 e5                	mov    %esp,%ebp
f0106df6:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106df9:	c7 05 0c 5a 55 f0 01 	movl   $0x1,0xf0555a0c
f0106e00:	00 00 00 
f0106e03:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106e0a:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106e0e:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e14:	ee                   	out    %al,(%dx)
f0106e15:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106e1c:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106e20:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106e23:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e26:	ee                   	out    %al,(%dx)
f0106e27:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106e2e:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106e32:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106e35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106e38:	ee                   	out    %al,(%dx)
f0106e39:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106e40:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106e44:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106e47:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106e4a:	ee                   	out    %al,(%dx)
f0106e4b:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106e52:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106e56:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106e59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106e5c:	ee                   	out    %al,(%dx)
f0106e5d:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106e64:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106e68:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106e6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106e6e:	ee                   	out    %al,(%dx)
f0106e6f:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106e76:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106e7a:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106e7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106e80:	ee                   	out    %al,(%dx)
f0106e81:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106e88:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106e8c:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106e8f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106e92:	ee                   	out    %al,(%dx)
f0106e93:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106e9a:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106e9e:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106ea1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106ea4:	ee                   	out    %al,(%dx)
f0106ea5:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106eac:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106eb0:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106eb3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106eb6:	ee                   	out    %al,(%dx)
f0106eb7:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106ebe:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106ec2:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106ec5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106ec8:	ee                   	out    %al,(%dx)
f0106ec9:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106ed0:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ed4:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106ed7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106eda:	ee                   	out    %al,(%dx)
f0106edb:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106ee2:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106ee6:	8a 45 be             	mov    -0x42(%ebp),%al
f0106ee9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106eec:	ee                   	out    %al,(%dx)
f0106eed:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106ef4:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106ef8:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106efb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106efe:	ee                   	out    %al,(%dx)
	outb(PIC1_CMD, 0x0a);             /* read IRR by default */

	outb(PIC2_CMD, 0x68);               /* OCW3 */
	outb(PIC2_CMD, 0x0a);               /* OCW3 */

	if (irq_init_mask_8259A != 0xFFFF)
f0106eff:	66 a1 58 d9 17 f0    	mov    0xf017d958,%ax
f0106f05:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106f09:	74 15                	je     f0106f20 <pic_init+0x12d>
		irq_setmask_8259A(irq_init_mask_8259A);
f0106f0b:	66 a1 58 d9 17 f0    	mov    0xf017d958,%ax
f0106f11:	0f b7 c0             	movzwl %ax,%eax
f0106f14:	83 ec 0c             	sub    $0xc,%esp
f0106f17:	50                   	push   %eax
f0106f18:	e8 06 00 00 00       	call   f0106f23 <irq_setmask_8259A>
f0106f1d:	83 c4 10             	add    $0x10,%esp
}
f0106f20:	90                   	nop
f0106f21:	c9                   	leave  
f0106f22:	c3                   	ret    

f0106f23 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106f23:	55                   	push   %ebp
f0106f24:	89 e5                	mov    %esp,%ebp
f0106f26:	83 ec 14             	sub    $0x14,%esp
f0106f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f2c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	 * We then use the new functions irq_set_mask() and irq_clear_mask()
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
f0106f30:	a1 0c 5a 55 f0       	mov    0xf0555a0c,%eax
f0106f35:	85 c0                	test   %eax,%eax
f0106f37:	74 34                	je     f0106f6d <irq_setmask_8259A+0x4a>
		return;

	outb(PIC1_DATA, (char)mask);
f0106f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f3c:	0f b6 c0             	movzbl %al,%eax
f0106f3f:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106f46:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106f49:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106f4c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106f4f:	ee                   	out    %al,(%dx)
	outb(PIC2_DATA, (char)(mask >> 8));
f0106f50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f53:	66 c1 e8 08          	shr    $0x8,%ax
f0106f57:	0f b6 c0             	movzbl %al,%eax
f0106f5a:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106f61:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106f64:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106f67:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106f6a:	ee                   	out    %al,(%dx)
f0106f6b:	eb 01                	jmp    f0106f6e <irq_setmask_8259A+0x4b>
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
		return;
f0106f6d:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (int i = 0; i < 16; i++)
	//if (~mask & (1<<i))
	//cprintf(" %d", i);
	//cprintf("\n");
}
f0106f6e:	c9                   	leave  
f0106f6f:	c3                   	ret    

f0106f70 <irq_set_mask>:

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
f0106f70:	55                   	push   %ebp
f0106f71:	89 e5                	mov    %esp,%ebp
f0106f73:	53                   	push   %ebx
f0106f74:	83 ec 14             	sub    $0x14,%esp
f0106f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f7a:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106f7d:	a1 0c 5a 55 f0       	mov    0xf0555a0c,%eax
f0106f82:	85 c0                	test   %eax,%eax
f0106f84:	74 58                	je     f0106fde <irq_set_mask+0x6e>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106f86:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106f8a:	77 08                	ja     f0106f94 <irq_set_mask+0x24>
		port = PIC1_DATA;
f0106f8c:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0106f92:	eb 0a                	jmp    f0106f9e <irq_set_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0106f94:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f0106f9a:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) | (1 << IRQline);
f0106f9e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0106fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fa8:	89 c2                	mov    %eax,%edx
f0106faa:	ec                   	in     (%dx),%al
f0106fab:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106fae:	8a 45 ee             	mov    -0x12(%ebp),%al
f0106fb1:	88 c2                	mov    %al,%dl
f0106fb3:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f0106fb7:	bb 01 00 00 00       	mov    $0x1,%ebx
f0106fbc:	88 c1                	mov    %al,%cl
f0106fbe:	d3 e3                	shl    %cl,%ebx
f0106fc0:	89 d8                	mov    %ebx,%eax
f0106fc2:	09 d0                	or     %edx,%eax
f0106fc4:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f0106fc7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0106fcb:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0106fcf:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0106fd2:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106fd5:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106fd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106fdb:	ee                   	out    %al,(%dx)
f0106fdc:	eb 01                	jmp    f0106fdf <irq_set_mask+0x6f>

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0106fde:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) | (1 << IRQline);
	outb(port, value);
}
f0106fdf:	83 c4 14             	add    $0x14,%esp
f0106fe2:	5b                   	pop    %ebx
f0106fe3:	5d                   	pop    %ebp
f0106fe4:	c3                   	ret    

f0106fe5 <irq_clear_mask>:

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
f0106fe5:	55                   	push   %ebp
f0106fe6:	89 e5                	mov    %esp,%ebp
f0106fe8:	53                   	push   %ebx
f0106fe9:	83 ec 14             	sub    $0x14,%esp
f0106fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fef:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106ff2:	a1 0c 5a 55 f0       	mov    0xf0555a0c,%eax
f0106ff7:	85 c0                	test   %eax,%eax
f0106ff9:	74 5a                	je     f0107055 <irq_clear_mask+0x70>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106ffb:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106fff:	77 08                	ja     f0107009 <irq_clear_mask+0x24>
		port = PIC1_DATA;
f0107001:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107007:	eb 0a                	jmp    f0107013 <irq_clear_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0107009:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010700f:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & ~(1 << IRQline);
f0107013:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107017:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010701a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010701d:	89 c2                	mov    %eax,%edx
f010701f:	ec                   	in     (%dx),%al
f0107020:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0107023:	8a 45 ee             	mov    -0x12(%ebp),%al
f0107026:	88 c2                	mov    %al,%dl
f0107028:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f010702c:	bb 01 00 00 00       	mov    $0x1,%ebx
f0107031:	88 c1                	mov    %al,%cl
f0107033:	d3 e3                	shl    %cl,%ebx
f0107035:	89 d8                	mov    %ebx,%eax
f0107037:	f7 d0                	not    %eax
f0107039:	21 d0                	and    %edx,%eax
f010703b:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f010703e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0107042:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0107046:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0107049:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010704c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010704f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107052:	ee                   	out    %al,(%dx)
f0107053:	eb 01                	jmp    f0107056 <irq_clear_mask+0x71>

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0107055:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) & ~(1 << IRQline);
	outb(port, value);
}
f0107056:	83 c4 14             	add    $0x14,%esp
f0107059:	5b                   	pop    %ebx
f010705a:	5d                   	pop    %ebp
f010705b:	c3                   	ret    

f010705c <irq_get_mask>:


int irq_get_mask(uint8 IRQline)
{
f010705c:	55                   	push   %ebp
f010705d:	89 e5                	mov    %esp,%ebp
f010705f:	53                   	push   %ebx
f0107060:	83 ec 14             	sub    $0x14,%esp
f0107063:	8b 45 08             	mov    0x8(%ebp),%eax
f0107066:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0107069:	a1 0c 5a 55 f0       	mov    0xf0555a0c,%eax
f010706e:	85 c0                	test   %eax,%eax
f0107070:	75 07                	jne    f0107079 <irq_get_mask+0x1d>
		return -1;
f0107072:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0107077:	eb 45                	jmp    f01070be <irq_get_mask+0x62>

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0107079:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f010707d:	77 08                	ja     f0107087 <irq_get_mask+0x2b>
		port = PIC1_DATA;
f010707f:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107085:	eb 0a                	jmp    f0107091 <irq_get_mask+0x35>
	} else {
		port = PIC2_DATA;
f0107087:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010708d:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & (1 << IRQline);
f0107091:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107095:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010709b:	89 c2                	mov    %eax,%edx
f010709d:	ec                   	in     (%dx),%al
f010709e:	88 45 f3             	mov    %al,-0xd(%ebp)
	return data;
f01070a1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01070a4:	88 c2                	mov    %al,%dl
f01070a6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f01070aa:	bb 01 00 00 00       	mov    $0x1,%ebx
f01070af:	88 c1                	mov    %al,%cl
f01070b1:	d3 e3                	shl    %cl,%ebx
f01070b3:	89 d8                	mov    %ebx,%eax
f01070b5:	21 d0                	and    %edx,%eax
f01070b7:	88 45 f9             	mov    %al,-0x7(%ebp)
	return value;
f01070ba:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
}
f01070be:	83 c4 14             	add    $0x14,%esp
f01070c1:	5b                   	pop    %ebx
f01070c2:	5d                   	pop    %ebp
f01070c3:	c3                   	ret    

f01070c4 <pic_sendEOI>:
 * If the IRQ came from the Master PIC, it is sufficient to issue this command only to the
 * Master PIC; however if the IRQ came from the Slave PIC, it is necessary to issue the command
 * to both PIC chips.
 */
void pic_sendEOI(uint8 irq)
{
f01070c4:	55                   	push   %ebp
f01070c5:	89 e5                	mov    %esp,%ebp
f01070c7:	83 ec 14             	sub    $0x14,%esp
f01070ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01070cd:	88 45 ec             	mov    %al,-0x14(%ebp)
	if(irq >= 8)
f01070d0:	80 7d ec 07          	cmpb   $0x7,-0x14(%ebp)
f01070d4:	76 12                	jbe    f01070e8 <pic_sendEOI+0x24>
f01070d6:	c7 45 f8 a0 00 00 00 	movl   $0xa0,-0x8(%ebp)
f01070dd:	c6 45 f7 20          	movb   $0x20,-0x9(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01070e1:	8a 45 f7             	mov    -0x9(%ebp),%al
f01070e4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01070e7:	ee                   	out    %al,(%dx)
f01070e8:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%ebp)
f01070ef:	c6 45 f6 20          	movb   $0x20,-0xa(%ebp)
f01070f3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01070f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01070f9:	ee                   	out    %al,(%dx)
		outb(PIC2_CMD,PIC_EOI);

	outb(PIC1_CMD,PIC_EOI);
}
f01070fa:	90                   	nop
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <mycpu>:
extern void idt_init(void);

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu* mycpu()
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
	return &CPUS[0]; //main CPU
f0107100:	b8 00 8c 55 f0       	mov    $0xf0558c00,%eax
//  for (i = 0; i < ncpu; ++i) {
//    if (cpus[i].apicid == apicid)
//      return &cpus[i];
//  }
//  panic("unknown apicid\n");
}
f0107105:	5d                   	pop    %ebp
f0107106:	c3                   	ret    

f0107107 <cpu_init>:

// Common CPU setup code.
void cpu_init(int cpuIndx)
{
f0107107:	55                   	push   %ebp
f0107108:	89 e5                	mov    %esp,%ebp
f010710a:	83 ec 28             	sub    $0x28,%esp
  struct cpu* c = mycpu();
f010710d:	e8 eb ff ff ff       	call   f01070fd <mycpu>
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
  c->proc = NULL;
f0107115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107118:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010711f:	00 00 00 
  c->ncli = 0;
f0107122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107125:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010712c:	00 00 00 

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010712f:	9c                   	pushf  
f0107130:	58                   	pop    %eax
f0107131:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f0107134:	8b 45 f0             	mov    -0x10(%ebp),%eax
  c->intena = read_eflags() & FL_IF ? 1 : 0;
f0107137:	25 00 02 00 00       	and    $0x200,%eax
f010713c:	85 c0                	test   %eax,%eax
f010713e:	0f 95 c0             	setne  %al
f0107141:	0f b6 d0             	movzbl %al,%edx
f0107144:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107147:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  //c->apicid = ?? ;

  //Initialize the CPU Context to NULL.
  //to be set later to the correct position on the stack during the
  //first switch from scheduler to the first process
  c->scheduler = NULL ;
f010714d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107150:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  c->scheduler_status = SCH_UNINITIALIZED;
f0107157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010715a:	c7 80 b4 00 00 00 ff 	movl   $0xffffffff,0xb4(%eax)
f0107161:	ff ff ff 

  //Initialize its sched stack
  c->stack = (char*)(KERN_STACK_TOP - (cpuIndx+1)*KERNEL_STACK_SIZE);
f0107164:	8b 45 08             	mov    0x8(%ebp),%eax
f0107167:	40                   	inc    %eax
f0107168:	c1 e0 0f             	shl    $0xf,%eax
f010716b:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f0107170:	29 c2                	sub    %eax,%edx
f0107172:	89 d0                	mov    %edx,%eax
f0107174:	89 c2                	mov    %eax,%edx
f0107176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107179:	89 50 08             	mov    %edx,0x8(%eax)

  //initialize GDT & set it to this CPU
  seg_init();
f010717c:	e8 18 01 00 00       	call   f0107299 <seg_init>

  //initialize IDT
  idt_init();       // load idt register
f0107181:	e8 49 50 00 00       	call   f010c1cf <idt_init>

  //Initialize the TaskState to ZERO.
  //to be initialized later in init.c
  memset(&(c->ts), 0, sizeof(c->ts)) ;
f0107186:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107189:	83 c0 0c             	add    $0xc,%eax
f010718c:	83 ec 04             	sub    $0x4,%esp
f010718f:	6a 68                	push   $0x68
f0107191:	6a 00                	push   $0x0
f0107193:	50                   	push   %eax
f0107194:	e8 04 b3 01 00       	call   f012249d <memset>
f0107199:	83 c4 10             	add    $0x10,%esp

  //Indicate it's started
  xchg(&(c->started), 1); // tell startothers() we're up
f010719c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010719f:	05 a4 00 00 00       	add    $0xa4,%eax
f01071a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01071a7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f01071ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01071b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01071b7:	f0 87 02             	lock xchg %eax,(%edx)
f01071ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  //scheduler();     // start running processes
}
f01071bd:	90                   	nop
f01071be:	c9                   	leave  
f01071bf:	c3                   	ret    

f01071c0 <pushcli>:
// Pushcli/popcli are like cli/sti except that they are matched:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void pushcli(void)
{
f01071c0:	55                   	push   %ebp
f01071c1:	89 e5                	mov    %esp,%ebp
f01071c3:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01071c6:	9c                   	pushf  
f01071c7:	58                   	pop    %eax
f01071c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        return eflags;
f01071cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  int eflags = read_eflags();
f01071ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f01071d1:	fa                   	cli    
  cli();
  struct cpu* c = mycpu();
f01071d2:	e8 26 ff ff ff       	call   f01070fd <mycpu>
f01071d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(c->ncli == 0)
f01071da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071dd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01071e3:	85 c0                	test   %eax,%eax
f01071e5:	75 13                	jne    f01071fa <pushcli+0x3a>
    c->intena = eflags & FL_IF;
f01071e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01071ea:	25 00 02 00 00       	and    $0x200,%eax
f01071ef:	89 c2                	mov    %eax,%edx
f01071f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071f4:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  c->ncli += 1;
f01071fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071fd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107203:	8d 50 01             	lea    0x1(%eax),%edx
f0107206:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107209:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
f010720f:	90                   	nop
f0107210:	c9                   	leave  
f0107211:	c3                   	ret    

f0107212 <popcli>:

void popcli(void)
{
f0107212:	55                   	push   %ebp
f0107213:	89 e5                	mov    %esp,%ebp
f0107215:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0107218:	9c                   	pushf  
f0107219:	58                   	pop    %eax
f010721a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f010721d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  if(read_eflags()&FL_IF)
f0107220:	25 00 02 00 00       	and    $0x200,%eax
f0107225:	85 c0                	test   %eax,%eax
f0107227:	74 14                	je     f010723d <popcli+0x2b>
    panic("popcli - interruptible");
f0107229:	83 ec 04             	sub    $0x4,%esp
f010722c:	68 8d 67 12 f0       	push   $0xf012678d
f0107231:	6a 5e                	push   $0x5e
f0107233:	68 a4 67 12 f0       	push   $0xf01267a4
f0107238:	e8 dd 90 ff ff       	call   f010031a <_panic>
  struct cpu* c = mycpu();
f010723d:	e8 bb fe ff ff       	call   f01070fd <mycpu>
f0107242:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(--c->ncli < 0)
f0107245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107248:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010724e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0107251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107254:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
f010725a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010725d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107263:	85 c0                	test   %eax,%eax
f0107265:	79 14                	jns    f010727b <popcli+0x69>
    panic("popcli");
f0107267:	83 ec 04             	sub    $0x4,%esp
f010726a:	68 b3 67 12 f0       	push   $0xf01267b3
f010726f:	6a 61                	push   $0x61
f0107271:	68 a4 67 12 f0       	push   $0xf01267a4
f0107276:	e8 9f 90 ff ff       	call   f010031a <_panic>
  if(c->ncli == 0 && c->intena)
f010727b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010727e:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107284:	85 c0                	test   %eax,%eax
f0107286:	75 0e                	jne    f0107296 <popcli+0x84>
f0107288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010728b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f0107291:	85 c0                	test   %eax,%eax
f0107293:	74 01                	je     f0107296 <popcli+0x84>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0107295:	fb                   	sti    
    sti();
}
f0107296:	90                   	nop
f0107297:	c9                   	leave  
f0107298:	c3                   	ret    

f0107299 <seg_init>:

// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seg_init(void)
{
f0107299:	55                   	push   %ebp
f010729a:	89 e5                	mov    %esp,%ebp
f010729c:	83 ec 18             	sub    $0x18,%esp
	// The kernel and user segments are identical(except for the DPL).
	// To load the SS register, the CPL must equal the DPL.  Thus,
	// we must duplicate the segments for the user and the kernel.
	//

	pushcli();	//disable interrupt
f010729f:	e8 1c ff ff ff       	call   f01071c0 <pushcli>

	c = mycpu();
f01072a4:	e8 54 fe ff ff       	call   f01070fd <mycpu>
f01072a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// 0x0 - unused (always faults -- for trapping NULL far pointers)
	c->gdt[0] = SEG_NULL;
f01072ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072af:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
f01072b6:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)

	// 0x8 - kernel code segment
	c->gdt[GD_KT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 0);
f01072bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c0:	66 c7 40 7c ff ff    	movw   $0xffff,0x7c(%eax)
f01072c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c9:	66 c7 40 7e 00 00    	movw   $0x0,0x7e(%eax)
f01072cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d2:	c6 80 80 00 00 00 00 	movb   $0x0,0x80(%eax)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072e2:	83 e2 f0             	and    $0xfffffff0,%edx
f01072e5:	83 ca 0a             	or     $0xa,%edx
f01072e8:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072f7:	83 ca 10             	or     $0x10,%edx
f01072fa:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107303:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f0107309:	83 e2 9f             	and    $0xffffff9f,%edx
f010730c:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107315:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f010731b:	83 ca 80             	or     $0xffffff80,%edx
f010731e:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107324:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107327:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010732d:	83 ca 0f             	or     $0xf,%edx
f0107330:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107339:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010733f:	83 e2 ef             	and    $0xffffffef,%edx
f0107342:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010734b:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107351:	83 e2 df             	and    $0xffffffdf,%edx
f0107354:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010735a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010735d:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107363:	83 ca 40             	or     $0x40,%edx
f0107366:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010736c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010736f:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107375:	83 ca 80             	or     $0xffffff80,%edx
f0107378:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010737e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107381:	c6 80 83 00 00 00 00 	movb   $0x0,0x83(%eax)

	// 0x10 - kernel data segment
	c->gdt[GD_KD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 0);
f0107388:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010738b:	66 c7 80 84 00 00 00 	movw   $0xffff,0x84(%eax)
f0107392:	ff ff 
f0107394:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107397:	66 c7 80 86 00 00 00 	movw   $0x0,0x86(%eax)
f010739e:	00 00 
f01073a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073a3:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%eax)
f01073aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073ad:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073b3:	83 e2 f0             	and    $0xfffffff0,%edx
f01073b6:	83 ca 02             	or     $0x2,%edx
f01073b9:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073c2:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073c8:	83 ca 10             	or     $0x10,%edx
f01073cb:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073d4:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073da:	83 e2 9f             	and    $0xffffff9f,%edx
f01073dd:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073e6:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073ec:	83 ca 80             	or     $0xffffff80,%edx
f01073ef:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073f8:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f01073fe:	83 ca 0f             	or     $0xf,%edx
f0107401:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010740a:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107410:	83 e2 ef             	and    $0xffffffef,%edx
f0107413:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107419:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010741c:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107422:	83 e2 df             	and    $0xffffffdf,%edx
f0107425:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010742b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010742e:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107434:	83 ca 40             	or     $0x40,%edx
f0107437:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010743d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107440:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107446:	83 ca 80             	or     $0xffffff80,%edx
f0107449:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010744f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107452:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%eax)

	// 0x18 - user code segment
	c->gdt[GD_UT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 3);
f0107459:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010745c:	66 c7 80 8c 00 00 00 	movw   $0xffff,0x8c(%eax)
f0107463:	ff ff 
f0107465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107468:	66 c7 80 8e 00 00 00 	movw   $0x0,0x8e(%eax)
f010746f:	00 00 
f0107471:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107474:	c6 80 90 00 00 00 00 	movb   $0x0,0x90(%eax)
f010747b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010747e:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107484:	83 e2 f0             	and    $0xfffffff0,%edx
f0107487:	83 ca 0a             	or     $0xa,%edx
f010748a:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f0107490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107493:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107499:	83 ca 10             	or     $0x10,%edx
f010749c:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a5:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074ab:	83 ca 60             	or     $0x60,%edx
f01074ae:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b7:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074bd:	83 ca 80             	or     $0xffffff80,%edx
f01074c0:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074c9:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074cf:	83 ca 0f             	or     $0xf,%edx
f01074d2:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074db:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074e1:	83 e2 ef             	and    $0xffffffef,%edx
f01074e4:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ed:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074f3:	83 e2 df             	and    $0xffffffdf,%edx
f01074f6:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ff:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107505:	83 ca 40             	or     $0x40,%edx
f0107508:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107517:	83 ca 80             	or     $0xffffff80,%edx
f010751a:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f0107520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107523:	c6 80 93 00 00 00 00 	movb   $0x0,0x93(%eax)

	// 0x20 - user data segment
	c->gdt[GD_UD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 3);
f010752a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010752d:	66 c7 80 94 00 00 00 	movw   $0xffff,0x94(%eax)
f0107534:	ff ff 
f0107536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107539:	66 c7 80 96 00 00 00 	movw   $0x0,0x96(%eax)
f0107540:	00 00 
f0107542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107545:	c6 80 98 00 00 00 00 	movb   $0x0,0x98(%eax)
f010754c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010754f:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f0107555:	83 e2 f0             	and    $0xfffffff0,%edx
f0107558:	83 ca 02             	or     $0x2,%edx
f010755b:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107564:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010756a:	83 ca 10             	or     $0x10,%edx
f010756d:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107576:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010757c:	83 ca 60             	or     $0x60,%edx
f010757f:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107588:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010758e:	83 ca 80             	or     $0xffffff80,%edx
f0107591:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010759a:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075a0:	83 ca 0f             	or     $0xf,%edx
f01075a3:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075ac:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075b2:	83 e2 ef             	and    $0xffffffef,%edx
f01075b5:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075be:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075c4:	83 e2 df             	and    $0xffffffdf,%edx
f01075c7:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075d0:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075d6:	83 ca 40             	or     $0x40,%edx
f01075d9:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075e2:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075e8:	83 ca 80             	or     $0xffffff80,%edx
f01075eb:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075f4:	c6 80 9b 00 00 00 00 	movb   $0x0,0x9b(%eax)

	// 0x28 - tss, initialized in idt_init()
	c->gdt[GD_TSS >> 3] = SEG_NULL;
f01075fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075fe:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
f0107605:	00 00 00 
f0107608:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
f010760f:	00 00 00 

	popcli();	//enable interrupt
f0107612:	e8 fb fb ff ff       	call   f0107212 <popcli>


}
f0107617:	90                   	nop
f0107618:	c9                   	leave  
f0107619:	c3                   	ret    

f010761a <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f010761a:	55                   	push   %ebp
f010761b:	89 e5                	mov    %esp,%ebp
f010761d:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0107620:	83 ec 08             	sub    $0x8,%esp
f0107623:	68 00 10 00 00       	push   $0x1000
f0107628:	68 00 10 00 00       	push   $0x1000
f010762d:	e8 35 02 00 00       	call   f0107867 <boot_allocate_space>
f0107632:	83 c4 10             	add    $0x10,%esp
f0107635:	a3 dc 90 55 f0       	mov    %eax,0xf05590dc
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010763a:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f010763f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107642:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107649:	77 14                	ja     f010765f <initialize_kernel_VM+0x45>
f010764b:	ff 75 e0             	pushl  -0x20(%ebp)
f010764e:	68 bc 67 12 f0       	push   $0xf01267bc
f0107653:	6a 57                	push   $0x57
f0107655:	68 f0 67 12 f0       	push   $0xf01267f0
f010765a:	e8 bb 8c ff ff       	call   f010031a <_panic>
f010765f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107662:	05 00 00 00 10       	add    $0x10000000,%eax
f0107667:	a3 e4 91 55 f0       	mov    %eax,0xf05591e4
	// Your code goes here:

	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f010766c:	c7 45 dc 00 50 17 f0 	movl   $0xf0175000,-0x24(%ebp)
f0107673:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010767a:	77 14                	ja     f0107690 <initialize_kernel_VM+0x76>
f010767c:	ff 75 dc             	pushl  -0x24(%ebp)
f010767f:	68 bc 67 12 f0       	push   $0xf01267bc
f0107684:	6a 63                	push   $0x63
f0107686:	68 f0 67 12 f0       	push   $0xf01267f0
f010768b:	e8 8a 8c ff ff       	call   f010031a <_panic>
f0107690:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107693:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107699:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f010769e:	83 ec 0c             	sub    $0xc,%esp
f01076a1:	6a 02                	push   $0x2
f01076a3:	52                   	push   %edx
f01076a4:	68 00 80 00 00       	push   $0x8000
f01076a9:	68 00 80 bf ef       	push   $0xefbf8000
f01076ae:	50                   	push   %eax
f01076af:	e8 27 02 00 00       	call   f01078db <boot_map_range>
f01076b4:	83 c4 20             	add    $0x20,%esp
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01076be:	eb 24                	jmp    f01076e4 <initialize_kernel_VM+0xca>
	{
		pt_set_page_permissions(ptr_page_directory, KERN_STACK_TOP - ((c+1)*KERNEL_STACK_SIZE), 0, PERM_PRESENT);
f01076c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076c3:	40                   	inc    %eax
f01076c4:	c1 e0 0f             	shl    $0xf,%eax
f01076c7:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f01076cc:	29 c2                	sub    %eax,%edx
f01076ce:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f01076d3:	6a 01                	push   $0x1
f01076d5:	6a 00                	push   $0x0
f01076d7:	52                   	push   %edx
f01076d8:	50                   	push   %eax
f01076d9:	e8 4a 14 00 00       	call   f0108b28 <pt_set_page_permissions>
f01076de:	83 c4 10             	add    $0x10,%esp
	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076e1:	ff 45 f4             	incl   -0xc(%ebp)
f01076e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01076e8:	7e d6                	jle    f01076c0 <initialize_kernel_VM+0xa6>
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01076ea:	c7 45 e8 00 00 00 f0 	movl   $0xf0000000,-0x18(%ebp)
f01076f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	unsigned int nTables=0;
f01076f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01076ff:	eb 25                	jmp    f0107726 <initialize_kernel_VM+0x10c>
	{
		++nTables;
f0107701:	ff 45 e4             	incl   -0x1c(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0107704:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107707:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f010770c:	83 ec 04             	sub    $0x4,%esp
f010770f:	6a 01                	push   $0x1
f0107711:	52                   	push   %edx
f0107712:	50                   	push   %eax
f0107713:	e8 37 02 00 00       	call   f010794f <boot_get_page_table>
f0107718:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010771b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0107722:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0107726:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010772a:	72 d5                	jb     f0107701 <initialize_kernel_VM+0xe7>
f010772c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107730:	77 06                	ja     f0107738 <initialize_kernel_VM+0x11e>
f0107732:	83 7d e8 fe          	cmpl   $0xfffffffe,-0x18(%ebp)
f0107736:	76 c9                	jbe    f0107701 <initialize_kernel_VM+0xe7>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0107738:	8b 15 b8 8c 55 f0    	mov    0xf0558cb8,%edx
f010773e:	89 d0                	mov    %edx,%eax
f0107740:	01 c0                	add    %eax,%eax
f0107742:	01 d0                	add    %edx,%eax
f0107744:	c1 e0 03             	shl    $0x3,%eax
f0107747:	89 45 d8             	mov    %eax,-0x28(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010774a:	83 ec 08             	sub    $0x8,%esp
f010774d:	68 00 10 00 00       	push   $0x1000
f0107752:	ff 75 d8             	pushl  -0x28(%ebp)
f0107755:	e8 0d 01 00 00       	call   f0107867 <boot_allocate_space>
f010775a:	83 c4 10             	add    $0x10,%esp
f010775d:	a3 20 8f 55 f0       	mov    %eax,0xf0558f20
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0107762:	c7 45 d4 00 c0 30 00 	movl   $0x30c000,-0x2c(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0107769:	83 ec 08             	sub    $0x8,%esp
f010776c:	68 00 10 00 00       	push   $0x1000
f0107771:	ff 75 d4             	pushl  -0x2c(%ebp)
f0107774:	e8 ee 00 00 00       	call   f0107867 <boot_allocate_space>
f0107779:	83 c4 10             	add    $0x10,%esp
f010777c:	a3 c0 62 55 f0       	mov    %eax,0xf05562c0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0107781:	e8 32 05 00 00       	call   f0107cb8 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("*	Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0107786:	83 ec 0c             	sub    $0xc,%esp
f0107789:	6a 08                	push   $0x8
f010778b:	e8 b6 92 01 00       	call   f0120a46 <nearest_pow2_ceil>
f0107790:	83 c4 10             	add    $0x10,%esp
f0107793:	83 ec 04             	sub    $0x4,%esp
f0107796:	50                   	push   %eax
f0107797:	6a 08                	push   $0x8
f0107799:	68 10 68 12 f0       	push   $0xf0126810
f010779e:	e8 c9 97 ff ff       	call   f0100f6c <cprintf>
f01077a3:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01077a6:	c7 45 d0 60 d3 0e 00 	movl   $0xed360,-0x30(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01077ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01077b0:	83 ec 08             	sub    $0x8,%esp
f01077b3:	68 00 10 00 00       	push   $0x1000
f01077b8:	50                   	push   %eax
f01077b9:	e8 a9 00 00 00       	call   f0107867 <boot_allocate_space>
f01077be:	83 c4 10             	add    $0x10,%esp
f01077c1:	a3 10 5a 55 f0       	mov    %eax,0xf0555a10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01077c6:	a1 10 5a 55 f0       	mov    0xf0555a10,%eax
f01077cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01077ce:	81 7d cc ff ff ff ef 	cmpl   $0xefffffff,-0x34(%ebp)
f01077d5:	77 17                	ja     f01077ee <initialize_kernel_VM+0x1d4>
f01077d7:	ff 75 cc             	pushl  -0x34(%ebp)
f01077da:	68 bc 67 12 f0       	push   $0xf01267bc
f01077df:	68 b1 00 00 00       	push   $0xb1
f01077e4:	68 f0 67 12 f0       	push   $0xf01267f0
f01077e9:	e8 2c 8b ff ff       	call   f010031a <_panic>
f01077ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01077f1:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01077f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01077fa:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f01077ff:	83 ec 0c             	sub    $0xc,%esp
f0107802:	6a 04                	push   $0x4
f0107804:	51                   	push   %ecx
f0107805:	52                   	push   %edx
f0107806:	68 00 00 c0 ee       	push   $0xeec00000
f010780b:	50                   	push   %eax
f010780c:	e8 ca 00 00 00       	call   f01078db <boot_map_range>
f0107811:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0107814:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107819:	05 ec 0e 00 00       	add    $0xeec,%eax
f010781e:	8b 15 dc 90 55 f0    	mov    0xf05590dc,%edx
f0107824:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010782a:	8b 12                	mov    (%edx),%edx
f010782c:	83 ca 05             	or     $0x5,%edx
f010782f:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0107831:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107836:	83 ec 0c             	sub    $0xc,%esp
f0107839:	6a 02                	push   $0x2
f010783b:	6a 00                	push   $0x0
f010783d:	68 ff ff ff 0f       	push   $0xfffffff
f0107842:	68 00 00 00 f0       	push   $0xf0000000
f0107847:	50                   	push   %eax
f0107848:	e8 8e 00 00 00       	call   f01078db <boot_map_range>
f010784d:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0107850:	e8 94 9f 01 00       	call   f01217e9 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0107855:	c7 05 e0 8b 55 f0 19 	movl   $0x19,0xf0558be0
f010785c:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010785f:	e8 20 03 00 00       	call   f0107b84 <turn_on_paging>
}
f0107864:	90                   	nop
f0107865:	c9                   	leave  
f0107866:	c3                   	ret    

f0107867 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0107867:	55                   	push   %ebp
f0107868:	89 e5                	mov    %esp,%ebp
f010786a:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010786d:	a1 d8 90 55 f0       	mov    0xf05590d8,%eax
f0107872:	85 c0                	test   %eax,%eax
f0107874:	75 0a                	jne    f0107880 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0107876:	c7 05 d8 90 55 f0 a8 	movl   $0xf057b9a8,0xf05590d8
f010787d:	b9 57 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0107880:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107886:	a1 d8 90 55 f0       	mov    0xf05590d8,%eax
f010788b:	89 c2                	mov    %eax,%edx
f010788d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107890:	01 d0                	add    %edx,%eax
f0107892:	48                   	dec    %eax
f0107893:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107896:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107899:	ba 00 00 00 00       	mov    $0x0,%edx
f010789e:	f7 75 f4             	divl   -0xc(%ebp)
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	29 d0                	sub    %edx,%eax
f01078a6:	a3 d8 90 55 f0       	mov    %eax,0xf05590d8

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01078ab:	a1 d8 90 55 f0       	mov    0xf05590d8,%eax
f01078b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01078b3:	8b 15 d8 90 55 f0    	mov    0xf05590d8,%edx
f01078b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01078bc:	01 d0                	add    %edx,%eax
f01078be:	a3 d8 90 55 f0       	mov    %eax,0xf05590d8

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01078c3:	83 ec 04             	sub    $0x4,%esp
f01078c6:	ff 75 08             	pushl  0x8(%ebp)
f01078c9:	6a 00                	push   $0x0
f01078cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01078ce:	e8 ca ab 01 00       	call   f012249d <memset>
f01078d3:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01078d9:	c9                   	leave  
f01078da:	c3                   	ret    

f01078db <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01078db:	55                   	push   %ebp
f01078dc:	89 e5                	mov    %esp,%ebp
f01078de:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01078e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01078e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01078ef:	eb 53                	jmp    f0107944 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01078f1:	83 ec 04             	sub    $0x4,%esp
f01078f4:	6a 01                	push   $0x1
f01078f6:	ff 75 0c             	pushl  0xc(%ebp)
f01078f9:	ff 75 08             	pushl  0x8(%ebp)
f01078fc:	e8 4e 00 00 00       	call   f010794f <boot_get_page_table>
f0107901:	83 c4 10             	add    $0x10,%esp
f0107904:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0107907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010790a:	c1 e8 0c             	shr    $0xc,%eax
f010790d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107912:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0107915:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107918:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010791f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107922:	01 c2                	add    %eax,%edx
f0107924:	8b 45 18             	mov    0x18(%ebp),%eax
f0107927:	0b 45 14             	or     0x14(%ebp),%eax
f010792a:	83 c8 01             	or     $0x1,%eax
f010792d:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010792f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0107936:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010793d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107944:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107947:	3b 45 10             	cmp    0x10(%ebp),%eax
f010794a:	72 a5                	jb     f01078f1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010794c:	90                   	nop
f010794d:	c9                   	leave  
f010794e:	c3                   	ret    

f010794f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010794f:	55                   	push   %ebp
f0107950:	89 e5                	mov    %esp,%ebp
f0107952:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0107955:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107958:	c1 e8 16             	shr    $0x16,%eax
f010795b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010795e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107961:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107968:	8b 45 08             	mov    0x8(%ebp),%eax
f010796b:	01 d0                	add    %edx,%eax
f010796d:	8b 00                	mov    (%eax),%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0107972:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107975:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010797a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010797d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107980:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107983:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107986:	c1 e8 0c             	shr    $0xc,%eax
f0107989:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010798c:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0107991:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107994:	72 17                	jb     f01079ad <boot_get_page_table+0x5e>
f0107996:	ff 75 e8             	pushl  -0x18(%ebp)
f0107999:	68 38 68 12 f0       	push   $0xf0126838
f010799e:	68 33 01 00 00       	push   $0x133
f01079a3:	68 f0 67 12 f0       	push   $0xf01267f0
f01079a8:	e8 6d 89 ff ff       	call   f010031a <_panic>
f01079ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01079b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01079b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01079bc:	75 72                	jne    f0107a30 <boot_get_page_table+0xe1>
	{
		if (create)
f01079be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01079c2:	74 65                	je     f0107a29 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01079c4:	83 ec 08             	sub    $0x8,%esp
f01079c7:	68 00 10 00 00       	push   $0x1000
f01079cc:	68 00 10 00 00       	push   $0x1000
f01079d1:	e8 91 fe ff ff       	call   f0107867 <boot_allocate_space>
f01079d6:	83 c4 10             	add    $0x10,%esp
f01079d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01079dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079df:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01079e2:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01079e9:	77 17                	ja     f0107a02 <boot_get_page_table+0xb3>
f01079eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01079ee:	68 bc 67 12 f0       	push   $0xf01267bc
f01079f3:	68 39 01 00 00       	push   $0x139
f01079f8:	68 f0 67 12 f0       	push   $0xf01267f0
f01079fd:	e8 18 89 ff ff       	call   f010031a <_panic>
f0107a02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107a05:	05 00 00 00 10       	add    $0x10000000,%eax
f0107a0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0107a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a1a:	01 d0                	add    %edx,%eax
f0107a1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a1f:	83 ca 03             	or     $0x3,%edx
f0107a22:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0107a24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a27:	eb 0a                	jmp    f0107a33 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0107a29:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a2e:	eb 03                	jmp    f0107a33 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0107a30:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0107a33:	c9                   	leave  
f0107a34:	c3                   	ret    

f0107a35 <nvram_read>:


int nvram_read(int r)
{
f0107a35:	55                   	push   %ebp
f0107a36:	89 e5                	mov    %esp,%ebp
f0107a38:	53                   	push   %ebx
f0107a39:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0107a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a3f:	83 ec 0c             	sub    $0xc,%esp
f0107a42:	50                   	push   %eax
f0107a43:	e8 12 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a48:	83 c4 10             	add    $0x10,%esp
f0107a4b:	89 c3                	mov    %eax,%ebx
f0107a4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a50:	40                   	inc    %eax
f0107a51:	83 ec 0c             	sub    $0xc,%esp
f0107a54:	50                   	push   %eax
f0107a55:	e8 00 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a5a:	83 c4 10             	add    $0x10,%esp
f0107a5d:	c1 e0 08             	shl    $0x8,%eax
f0107a60:	09 d8                	or     %ebx,%eax
}
f0107a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a65:	c9                   	leave  
f0107a66:	c3                   	ret    

f0107a67 <detect_memory>:

void detect_memory()
{
f0107a67:	55                   	push   %ebp
f0107a68:	89 e5                	mov    %esp,%ebp
f0107a6a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0107a6d:	83 ec 0c             	sub    $0xc,%esp
f0107a70:	6a 15                	push   $0x15
f0107a72:	e8 be ff ff ff       	call   f0107a35 <nvram_read>
f0107a77:	83 c4 10             	add    $0x10,%esp
f0107a7a:	c1 e0 0a             	shl    $0xa,%eax
f0107a7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a88:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0107a8b:	83 ec 0c             	sub    $0xc,%esp
f0107a8e:	6a 17                	push   $0x17
f0107a90:	e8 a0 ff ff ff       	call   f0107a35 <nvram_read>
f0107a95:	83 c4 10             	add    $0x10,%esp
f0107a98:	c1 e0 0a             	shl    $0xa,%eax
f0107a9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107a9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aa1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0107aa9:	83 ec 0c             	sub    $0xc,%esp
f0107aac:	6a 34                	push   $0x34
f0107aae:	e8 82 ff ff ff       	call   f0107a35 <nvram_read>
f0107ab3:	83 c4 10             	add    $0x10,%esp
f0107ab6:	c1 e0 10             	shl    $0x10,%eax
f0107ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107abc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107abf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0107ac7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0107acb:	74 18                	je     f0107ae5 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0107acd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107ad0:	05 00 00 00 01       	add    $0x1000000,%eax
f0107ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107adb:	2d 00 00 10 00       	sub    $0x100000,%eax
f0107ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ae3:	eb 19                	jmp    f0107afe <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0107ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ae9:	74 0d                	je     f0107af8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0107aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107aee:	05 00 00 10 00       	add    $0x100000,%eax
f0107af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107af6:	eb 06                	jmp    f0107afe <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0107af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0107afe:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0107b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0107b0b:	76 32                	jbe    f0107b3f <detect_memory+0xd8>
	{
		cprintf("*	Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0107b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107b10:	c1 e8 0a             	shr    $0xa,%eax
f0107b13:	89 c2                	mov    %eax,%edx
f0107b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b18:	c1 e8 0a             	shr    $0xa,%eax
f0107b1b:	83 ec 04             	sub    $0x4,%esp
f0107b1e:	52                   	push   %edx
f0107b1f:	50                   	push   %eax
f0107b20:	68 68 68 12 f0       	push   $0xf0126868
f0107b25:	e8 42 94 ff ff       	call   f0100f6c <cprintf>
f0107b2a:	83 c4 10             	add    $0x10,%esp
		cprintf("*	Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0107b2d:	83 ec 0c             	sub    $0xc,%esp
f0107b30:	68 b0 68 12 f0       	push   $0xf01268b0
f0107b35:	e8 32 94 ff ff       	call   f0100f6c <cprintf>
f0107b3a:	83 c4 10             	add    $0x10,%esp
		while(1);
f0107b3d:	eb fe                	jmp    f0107b3d <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	c1 e8 0c             	shr    $0xc,%eax
f0107b45:	a3 b8 8c 55 f0       	mov    %eax,0xf0558cb8

	cprintf("*	Physical memory: %dK available, ", (int)(maxpa/1024));
f0107b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b4d:	c1 e8 0a             	shr    $0xa,%eax
f0107b50:	83 ec 08             	sub    $0x8,%esp
f0107b53:	50                   	push   %eax
f0107b54:	68 48 69 12 f0       	push   $0xf0126948
f0107b59:	e8 0e 94 ff ff       	call   f0100f6c <cprintf>
f0107b5e:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0107b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b64:	c1 e8 0a             	shr    $0xa,%eax
f0107b67:	89 c2                	mov    %eax,%edx
f0107b69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6c:	c1 e8 0a             	shr    $0xa,%eax
f0107b6f:	83 ec 04             	sub    $0x4,%esp
f0107b72:	52                   	push   %edx
f0107b73:	50                   	push   %eax
f0107b74:	68 6b 69 12 f0       	push   $0xf012696b
f0107b79:	e8 ee 93 ff ff       	call   f0100f6c <cprintf>
f0107b7e:	83 c4 10             	add    $0x10,%esp
}
f0107b81:	90                   	nop
f0107b82:	c9                   	leave  
f0107b83:	c3                   	ret    

f0107b84 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0107b84:	55                   	push   %ebp
f0107b85:	89 e5                	mov    %esp,%ebp
f0107b87:	83 ec 48             	sub    $0x48,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0107b8a:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0107b91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107b98:	eb 24                	jmp    f0107bbe <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0107b9a:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107b9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ba2:	c1 e2 02             	shl    $0x2,%edx
f0107ba5:	01 c2                	add    %eax,%edx
f0107ba7:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107bac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107baf:	c1 e1 02             	shl    $0x2,%ecx
f0107bb2:	01 c8                	add    %ecx,%eax
f0107bb4:	8b 00                	mov    (%eax),%eax
f0107bb6:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107bb8:	ff 45 f4             	incl   -0xc(%ebp)
f0107bbb:	ff 45 f0             	incl   -0x10(%ebp)
f0107bbe:	a1 d8 90 55 f0       	mov    0xf05590d8,%eax
f0107bc3:	c1 e8 16             	shr    $0x16,%eax
f0107bc6:	89 c2                	mov    %eax,%edx
f0107bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bcb:	39 c2                	cmp    %eax,%edx
f0107bcd:	77 cb                	ja     f0107b9a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0107bcf:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f0107bd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107bd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107bda:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0107bdd:	0f 20 c0             	mov    %cr0,%eax
f0107be0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0107be3:	8b 45 d8             	mov    -0x28(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0107be6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0107be9:	81 4d dc 2f 00 05 80 	orl    $0x8005002f,-0x24(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0107bf0:	83 65 dc f3          	andl   $0xfffffff3,-0x24(%ebp)
f0107bf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107bf7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0107bfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107bfd:	0f 22 c0             	mov    %eax,%cr0
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	//2024: replaced by lgdt()
	//asm volatile("lgdt gdt_pd");
	pushcli();	//disable interrupt
f0107c00:	e8 bb f5 ff ff       	call   f01071c0 <pushcli>
	lgdt(mycpu()->gdt, sizeof(mycpu()->gdt));
f0107c05:	e8 f3 f4 ff ff       	call   f01070fd <mycpu>
f0107c0a:	83 c0 74             	add    $0x74,%eax
f0107c0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0107c10:	c7 45 cc 30 00 00 00 	movl   $0x30,-0x34(%ebp)
static __inline void
lgdt(struct Segdesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f0107c17:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107c1a:	48                   	dec    %eax
f0107c1b:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
  pd[1] = (uint32)p;
f0107c1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c22:	66 89 45 c8          	mov    %ax,-0x38(%ebp)
  pd[2] = (uint32)p >> 16;
f0107c26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c29:	c1 e8 10             	shr    $0x10,%eax
f0107c2c:	66 89 45 ca          	mov    %ax,-0x36(%ebp)

  __asm __volatile("lgdt (%0)" : : "r" (pd));
f0107c30:	8d 45 c6             	lea    -0x3a(%ebp),%eax
f0107c33:	0f 01 10             	lgdtl  (%eax)
	popcli();	//enable interrupt
f0107c36:	e8 d7 f5 ff ff       	call   f0107212 <popcli>
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0107c3b:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c40:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0107c42:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c47:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0107c49:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c4e:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0107c50:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c55:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0107c57:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c5c:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0107c5e:	ea 65 7c 10 f0 08 00 	ljmp   $0x8,$0xf0107c65
	asm volatile("lldt %%ax" :: "a" (0));
f0107c65:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c6a:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0107c6d:	c7 45 ec c0 03 00 00 	movl   $0x3c0,-0x14(%ebp)
		int j = 0;
f0107c74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c7b:	eb 19                	jmp    f0107c96 <turn_on_paging+0x112>
		{
			ptr_page_directory[j] = 0;
f0107c7d:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107c82:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107c85:	c1 e2 02             	shl    $0x2,%edx
f0107c88:	01 d0                	add    %edx,%eax
f0107c8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c90:	ff 45 ec             	incl   -0x14(%ebp)
f0107c93:	ff 45 e8             	incl   -0x18(%ebp)
f0107c96:	a1 d8 90 55 f0       	mov    0xf05590d8,%eax
f0107c9b:	c1 e8 16             	shr    $0x16,%eax
f0107c9e:	89 c2                	mov    %eax,%edx
f0107ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ca3:	39 c2                	cmp    %eax,%edx
f0107ca5:	77 d6                	ja     f0107c7d <turn_on_paging+0xf9>
			ptr_page_directory[j] = 0;
		}
	}

	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0107ca7:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f0107cac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107caf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107cb2:	0f 22 d8             	mov    %eax,%cr3

}
f0107cb5:	90                   	nop
f0107cb6:	c9                   	leave  
f0107cb7:	c3                   	ret    

f0107cb8 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0107cb8:	55                   	push   %ebp
f0107cb9:	89 e5                	mov    %esp,%ebp
f0107cbb:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0107cbe:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107cc6:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0107ccd:	77 17                	ja     f0107ce6 <setup_listing_to_all_page_tables_entries+0x2e>
f0107ccf:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cd2:	68 bc 67 12 f0       	push   $0xf01267bc
f0107cd7:	68 cf 01 00 00       	push   $0x1cf
f0107cdc:	68 f0 67 12 f0       	push   $0xf01267f0
f0107ce1:	e8 34 86 ff ff       	call   f010031a <_panic>
f0107ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce9:	05 00 00 00 10       	add    $0x10000000,%eax
f0107cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0107cf1:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107cf6:	05 fc 0e 00 00       	add    $0xefc,%eax
f0107cfb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cfe:	83 ca 03             	or     $0x3,%edx
f0107d01:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0107d03:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107d08:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0107d0e:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0107d13:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d16:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0107d1d:	77 17                	ja     f0107d36 <setup_listing_to_all_page_tables_entries+0x7e>
f0107d1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0107d22:	68 bc 67 12 f0       	push   $0xf01267bc
f0107d27:	68 d4 01 00 00       	push   $0x1d4
f0107d2c:	68 f0 67 12 f0       	push   $0xf01267f0
f0107d31:	e8 e4 85 ff ff       	call   f010031a <_panic>
f0107d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d39:	05 00 00 00 10       	add    $0x10000000,%eax
f0107d3e:	83 c8 05             	or     $0x5,%eax
f0107d41:	89 02                	mov    %eax,(%edx)

}
f0107d43:	90                   	nop
f0107d44:	c9                   	leave  
f0107d45:	c3                   	ret    

f0107d46 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107d46:	55                   	push   %ebp
f0107d47:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d4c:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f0107d52:	29 d0                	sub    %edx,%eax
f0107d54:	c1 f8 03             	sar    $0x3,%eax
f0107d57:	89 c2                	mov    %eax,%edx
f0107d59:	89 d0                	mov    %edx,%eax
f0107d5b:	c1 e0 02             	shl    $0x2,%eax
f0107d5e:	01 d0                	add    %edx,%eax
f0107d60:	c1 e0 02             	shl    $0x2,%eax
f0107d63:	01 d0                	add    %edx,%eax
f0107d65:	c1 e0 02             	shl    $0x2,%eax
f0107d68:	01 d0                	add    %edx,%eax
f0107d6a:	89 c1                	mov    %eax,%ecx
f0107d6c:	c1 e1 08             	shl    $0x8,%ecx
f0107d6f:	01 c8                	add    %ecx,%eax
f0107d71:	89 c1                	mov    %eax,%ecx
f0107d73:	c1 e1 10             	shl    $0x10,%ecx
f0107d76:	01 c8                	add    %ecx,%eax
f0107d78:	01 c0                	add    %eax,%eax
f0107d7a:	01 d0                	add    %edx,%eax
}
f0107d7c:	5d                   	pop    %ebp
f0107d7d:	c3                   	ret    

f0107d7e <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107d81:	ff 75 08             	pushl  0x8(%ebp)
f0107d84:	e8 bd ff ff ff       	call   f0107d46 <to_frame_number>
f0107d89:	83 c4 04             	add    $0x4,%esp
f0107d8c:	c1 e0 0c             	shl    $0xc,%eax
}
f0107d8f:	c9                   	leave  
f0107d90:	c3                   	ret    

f0107d91 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107d91:	55                   	push   %ebp
f0107d92:	89 e5                	mov    %esp,%ebp
f0107d94:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107d97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9a:	c1 e8 0c             	shr    $0xc,%eax
f0107d9d:	89 c2                	mov    %eax,%edx
f0107d9f:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0107da4:	39 c2                	cmp    %eax,%edx
f0107da6:	72 14                	jb     f0107dbc <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107da8:	83 ec 04             	sub    $0x4,%esp
f0107dab:	68 88 69 12 f0       	push   $0xf0126988
f0107db0:	6a 55                	push   $0x55
f0107db2:	68 ad 69 12 f0       	push   $0xf01269ad
f0107db7:	e8 5e 85 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0107dbc:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f0107dc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc5:	c1 e8 0c             	shr    $0xc,%eax
f0107dc8:	89 c1                	mov    %eax,%ecx
f0107dca:	89 c8                	mov    %ecx,%eax
f0107dcc:	01 c0                	add    %eax,%eax
f0107dce:	01 c8                	add    %ecx,%eax
f0107dd0:	c1 e0 03             	shl    $0x3,%eax
f0107dd3:	01 d0                	add    %edx,%eax
}
f0107dd5:	c9                   	leave  
f0107dd6:	c3                   	ret    

f0107dd7 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0107dd7:	55                   	push   %ebp
f0107dd8:	89 e5                	mov    %esp,%ebp
f0107dda:	83 ec 10             	sub    $0x10,%esp
f0107ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0107de3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107de6:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0107de9:	90                   	nop
f0107dea:	c9                   	leave  
f0107deb:	c3                   	ret    

f0107dec <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0107dec:	55                   	push   %ebp
f0107ded:	89 e5                	mov    %esp,%ebp
f0107def:	53                   	push   %ebx
f0107df0:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&MemFrameLists.free_frame_list);
f0107df3:	c7 05 20 65 55 f0 00 	movl   $0x0,0xf0556520
f0107dfa:	00 00 00 
f0107dfd:	c7 05 24 65 55 f0 00 	movl   $0x0,0xf0556524
f0107e04:	00 00 00 
f0107e07:	c7 05 2c 65 55 f0 00 	movl   $0x0,0xf055652c
f0107e0e:	00 00 00 
	LIST_INIT(&MemFrameLists.modified_frame_list);
f0107e11:	c7 05 30 65 55 f0 00 	movl   $0x0,0xf0556530
f0107e18:	00 00 00 
f0107e1b:	c7 05 34 65 55 f0 00 	movl   $0x0,0xf0556534
f0107e22:	00 00 00 
f0107e25:	c7 05 3c 65 55 f0 00 	movl   $0x0,0xf055653c
f0107e2c:	00 00 00 

	//Initialize the corresponding lock
	init_spinlock(&MemFrameLists.mfllock, "Frame Info Lock");
f0107e2f:	83 ec 08             	sub    $0x8,%esp
f0107e32:	68 c7 69 12 f0       	push   $0xf01269c7
f0107e37:	68 40 65 55 f0       	push   $0xf0556540
f0107e3c:	e8 65 6c 00 00       	call   f010eaa6 <init_spinlock>
f0107e41:	83 c4 10             	add    $0x10,%esp

	frames_info[0].references = 1;
f0107e44:	a1 20 8f 55 f0       	mov    0xf0558f20,%eax
f0107e49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0107e4f:	a1 20 8f 55 f0       	mov    0xf0558f20,%eax
f0107e54:	83 c0 18             	add    $0x18,%eax
f0107e57:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0107e5d:	a1 20 8f 55 f0       	mov    0xf0558f20,%eax
f0107e62:	83 c0 30             	add    $0x30,%eax
f0107e65:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0107e6b:	c7 05 b4 8f 55 f0 00 	movl   $0xf0001000,0xf0558fb4
f0107e72:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0107e75:	c7 05 64 91 55 f0 00 	movl   $0xf0002000,0xf0559164
f0107e7c:	20 00 f0 
	i =0;
f0107e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0107e86:	eb 1f                	jmp    f0107ea7 <initialize_paging+0xbb>
	{
		ptr_zero_page[i]=0;
f0107e88:	8b 15 b4 8f 55 f0    	mov    0xf0558fb4,%edx
f0107e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e91:	01 d0                	add    %edx,%eax
f0107e93:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0107e96:	8b 15 64 91 55 f0    	mov    0xf0559164,%edx
f0107e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9f:	01 d0                	add    %edx,%eax
f0107ea1:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0107ea4:	ff 45 f4             	incl   -0xc(%ebp)
f0107ea7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107eae:	7e d8                	jle    f0107e88 <initialize_paging+0x9c>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0107eb0:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eba:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0107ebf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ec2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0107eca:	f7 75 f0             	divl   -0x10(%ebp)
f0107ecd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ed0:	29 d0                	sub    %edx,%eax
f0107ed2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107ed5:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0107edc:	e9 e8 00 00 00       	jmp    f0107fc9 <initialize_paging+0x1dd>
	{

		initialize_frame_info(&(frames_info[i]));
f0107ee1:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107ee7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107eea:	89 d0                	mov    %edx,%eax
f0107eec:	01 c0                	add    %eax,%eax
f0107eee:	01 d0                	add    %edx,%eax
f0107ef0:	c1 e0 03             	shl    $0x3,%eax
f0107ef3:	01 c8                	add    %ecx,%eax
f0107ef5:	83 ec 0c             	sub    $0xc,%esp
f0107ef8:	50                   	push   %eax
f0107ef9:	e8 b7 02 00 00       	call   f01081b5 <initialize_frame_info>
f0107efe:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f0107f01:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107f07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f0a:	89 d0                	mov    %edx,%eax
f0107f0c:	01 c0                	add    %eax,%eax
f0107f0e:	01 d0                	add    %edx,%eax
f0107f10:	c1 e0 03             	shl    $0x3,%eax
f0107f13:	01 c8                	add    %ecx,%eax
f0107f15:	85 c0                	test   %eax,%eax
f0107f17:	75 14                	jne    f0107f2d <initialize_paging+0x141>
f0107f19:	83 ec 04             	sub    $0x4,%esp
f0107f1c:	68 d8 69 12 f0       	push   $0xf01269d8
f0107f21:	6a 60                	push   $0x60
f0107f23:	68 fb 69 12 f0       	push   $0xf01269fb
f0107f28:	e8 ed 83 ff ff       	call   f010031a <_panic>
f0107f2d:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107f33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f36:	89 d0                	mov    %edx,%eax
f0107f38:	01 c0                	add    %eax,%eax
f0107f3a:	01 d0                	add    %edx,%eax
f0107f3c:	c1 e0 03             	shl    $0x3,%eax
f0107f3f:	01 c8                	add    %ecx,%eax
f0107f41:	8b 15 20 65 55 f0    	mov    0xf0556520,%edx
f0107f47:	89 10                	mov    %edx,(%eax)
f0107f49:	8b 00                	mov    (%eax),%eax
f0107f4b:	85 c0                	test   %eax,%eax
f0107f4d:	74 1f                	je     f0107f6e <initialize_paging+0x182>
f0107f4f:	8b 15 20 65 55 f0    	mov    0xf0556520,%edx
f0107f55:	8b 1d 20 8f 55 f0    	mov    0xf0558f20,%ebx
f0107f5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107f5e:	89 c8                	mov    %ecx,%eax
f0107f60:	01 c0                	add    %eax,%eax
f0107f62:	01 c8                	add    %ecx,%eax
f0107f64:	c1 e0 03             	shl    $0x3,%eax
f0107f67:	01 d8                	add    %ebx,%eax
f0107f69:	89 42 04             	mov    %eax,0x4(%edx)
f0107f6c:	eb 19                	jmp    f0107f87 <initialize_paging+0x19b>
f0107f6e:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107f74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f77:	89 d0                	mov    %edx,%eax
f0107f79:	01 c0                	add    %eax,%eax
f0107f7b:	01 d0                	add    %edx,%eax
f0107f7d:	c1 e0 03             	shl    $0x3,%eax
f0107f80:	01 c8                	add    %ecx,%eax
f0107f82:	a3 24 65 55 f0       	mov    %eax,0xf0556524
f0107f87:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107f8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f90:	89 d0                	mov    %edx,%eax
f0107f92:	01 c0                	add    %eax,%eax
f0107f94:	01 d0                	add    %edx,%eax
f0107f96:	c1 e0 03             	shl    $0x3,%eax
f0107f99:	01 c8                	add    %ecx,%eax
f0107f9b:	a3 20 65 55 f0       	mov    %eax,0xf0556520
f0107fa0:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107fa6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107fa9:	89 d0                	mov    %edx,%eax
f0107fab:	01 c0                	add    %eax,%eax
f0107fad:	01 d0                	add    %edx,%eax
f0107faf:	c1 e0 03             	shl    $0x3,%eax
f0107fb2:	01 c8                	add    %ecx,%eax
f0107fb4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107fbb:	a1 2c 65 55 f0       	mov    0xf055652c,%eax
f0107fc0:	40                   	inc    %eax
f0107fc1:	a3 2c 65 55 f0       	mov    %eax,0xf055652c
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107fc6:	ff 45 f4             	incl   -0xc(%ebp)
f0107fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107fcc:	85 c0                	test   %eax,%eax
f0107fce:	79 05                	jns    f0107fd5 <initialize_paging+0x1e9>
f0107fd0:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107fd5:	c1 f8 0c             	sar    $0xc,%eax
f0107fd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107fdb:	0f 8f 00 ff ff ff    	jg     f0107ee1 <initialize_paging+0xf5>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107fe1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0107fe8:	eb 1d                	jmp    f0108007 <initialize_paging+0x21b>
	{
		frames_info[i].references = 1;
f0107fea:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0107ff0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ff3:	89 d0                	mov    %edx,%eax
f0107ff5:	01 c0                	add    %eax,%eax
f0107ff7:	01 d0                	add    %edx,%eax
f0107ff9:	c1 e0 03             	shl    $0x3,%eax
f0107ffc:	01 c8                	add    %ecx,%eax
f0107ffe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0108004:	ff 45 f4             	incl   -0xc(%ebp)
f0108007:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010800e:	7e da                	jle    f0107fea <initialize_paging+0x1fe>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0108010:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108017:	a1 d8 90 55 f0       	mov    0xf05590d8,%eax
f010801c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010801f:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0108026:	77 14                	ja     f010803c <initialize_paging+0x250>
f0108028:	ff 75 e0             	pushl  -0x20(%ebp)
f010802b:	68 18 6a 12 f0       	push   $0xf0126a18
f0108030:	6a 68                	push   $0x68
f0108032:	68 fb 69 12 f0       	push   $0xf01269fb
f0108037:	e8 de 82 ff ff       	call   f010031a <_panic>
f010803c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010803f:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0108045:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108048:	01 d0                	add    %edx,%eax
f010804a:	48                   	dec    %eax
f010804b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010804e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108051:	ba 00 00 00 00       	mov    $0x0,%edx
f0108056:	f7 75 e4             	divl   -0x1c(%ebp)
f0108059:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010805c:	29 d0                	sub    %edx,%eax
f010805e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108061:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0108068:	eb 1d                	jmp    f0108087 <initialize_paging+0x29b>
	{
		frames_info[i].references = 1;
f010806a:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0108070:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108073:	89 d0                	mov    %edx,%eax
f0108075:	01 c0                	add    %eax,%eax
f0108077:	01 d0                	add    %edx,%eax
f0108079:	c1 e0 03             	shl    $0x3,%eax
f010807c:	01 c8                	add    %ecx,%eax
f010807e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108084:	ff 45 f4             	incl   -0xc(%ebp)
f0108087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010808a:	85 c0                	test   %eax,%eax
f010808c:	79 05                	jns    f0108093 <initialize_paging+0x2a7>
f010808e:	05 ff 0f 00 00       	add    $0xfff,%eax
f0108093:	c1 f8 0c             	sar    $0xc,%eax
f0108096:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108099:	7f cf                	jg     f010806a <initialize_paging+0x27e>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010809b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010809e:	85 c0                	test   %eax,%eax
f01080a0:	79 05                	jns    f01080a7 <initialize_paging+0x2bb>
f01080a2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01080a7:	c1 f8 0c             	sar    $0xc,%eax
f01080aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080ad:	e9 e8 00 00 00       	jmp    f010819a <initialize_paging+0x3ae>
	{
		initialize_frame_info(&(frames_info[i]));
f01080b2:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f01080b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080bb:	89 d0                	mov    %edx,%eax
f01080bd:	01 c0                	add    %eax,%eax
f01080bf:	01 d0                	add    %edx,%eax
f01080c1:	c1 e0 03             	shl    $0x3,%eax
f01080c4:	01 c8                	add    %ecx,%eax
f01080c6:	83 ec 0c             	sub    $0xc,%esp
f01080c9:	50                   	push   %eax
f01080ca:	e8 e6 00 00 00       	call   f01081b5 <initialize_frame_info>
f01080cf:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f01080d2:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f01080d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080db:	89 d0                	mov    %edx,%eax
f01080dd:	01 c0                	add    %eax,%eax
f01080df:	01 d0                	add    %edx,%eax
f01080e1:	c1 e0 03             	shl    $0x3,%eax
f01080e4:	01 c8                	add    %ecx,%eax
f01080e6:	85 c0                	test   %eax,%eax
f01080e8:	75 14                	jne    f01080fe <initialize_paging+0x312>
f01080ea:	83 ec 04             	sub    $0x4,%esp
f01080ed:	68 d8 69 12 f0       	push   $0xf01269d8
f01080f2:	6a 74                	push   $0x74
f01080f4:	68 fb 69 12 f0       	push   $0xf01269fb
f01080f9:	e8 1c 82 ff ff       	call   f010031a <_panic>
f01080fe:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0108104:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108107:	89 d0                	mov    %edx,%eax
f0108109:	01 c0                	add    %eax,%eax
f010810b:	01 d0                	add    %edx,%eax
f010810d:	c1 e0 03             	shl    $0x3,%eax
f0108110:	01 c8                	add    %ecx,%eax
f0108112:	8b 15 20 65 55 f0    	mov    0xf0556520,%edx
f0108118:	89 10                	mov    %edx,(%eax)
f010811a:	8b 00                	mov    (%eax),%eax
f010811c:	85 c0                	test   %eax,%eax
f010811e:	74 1f                	je     f010813f <initialize_paging+0x353>
f0108120:	8b 15 20 65 55 f0    	mov    0xf0556520,%edx
f0108126:	8b 1d 20 8f 55 f0    	mov    0xf0558f20,%ebx
f010812c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010812f:	89 c8                	mov    %ecx,%eax
f0108131:	01 c0                	add    %eax,%eax
f0108133:	01 c8                	add    %ecx,%eax
f0108135:	c1 e0 03             	shl    $0x3,%eax
f0108138:	01 d8                	add    %ebx,%eax
f010813a:	89 42 04             	mov    %eax,0x4(%edx)
f010813d:	eb 19                	jmp    f0108158 <initialize_paging+0x36c>
f010813f:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0108145:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108148:	89 d0                	mov    %edx,%eax
f010814a:	01 c0                	add    %eax,%eax
f010814c:	01 d0                	add    %edx,%eax
f010814e:	c1 e0 03             	shl    $0x3,%eax
f0108151:	01 c8                	add    %ecx,%eax
f0108153:	a3 24 65 55 f0       	mov    %eax,0xf0556524
f0108158:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f010815e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108161:	89 d0                	mov    %edx,%eax
f0108163:	01 c0                	add    %eax,%eax
f0108165:	01 d0                	add    %edx,%eax
f0108167:	c1 e0 03             	shl    $0x3,%eax
f010816a:	01 c8                	add    %ecx,%eax
f010816c:	a3 20 65 55 f0       	mov    %eax,0xf0556520
f0108171:	8b 0d 20 8f 55 f0    	mov    0xf0558f20,%ecx
f0108177:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010817a:	89 d0                	mov    %edx,%eax
f010817c:	01 c0                	add    %eax,%eax
f010817e:	01 d0                	add    %edx,%eax
f0108180:	c1 e0 03             	shl    $0x3,%eax
f0108183:	01 c8                	add    %ecx,%eax
f0108185:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010818c:	a1 2c 65 55 f0       	mov    0xf055652c,%eax
f0108191:	40                   	inc    %eax
f0108192:	a3 2c 65 55 f0       	mov    %eax,0xf055652c
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0108197:	ff 45 f4             	incl   -0xc(%ebp)
f010819a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010819d:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f01081a2:	39 c2                	cmp    %eax,%edx
f01081a4:	0f 82 08 ff ff ff    	jb     f01080b2 <initialize_paging+0x2c6>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01081aa:	e8 ef b9 ff ff       	call   f0103b9e <initialize_disk_page_file>
}
f01081af:	90                   	nop
f01081b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01081b3:	c9                   	leave  
f01081b4:	c3                   	ret    

f01081b5 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01081b5:	55                   	push   %ebp
f01081b6:	89 e5                	mov    %esp,%ebp
f01081b8:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01081bb:	83 ec 04             	sub    $0x4,%esp
f01081be:	6a 18                	push   $0x18
f01081c0:	6a 00                	push   $0x0
f01081c2:	ff 75 08             	pushl  0x8(%ebp)
f01081c5:	e8 d3 a2 01 00       	call   f012249d <memset>
f01081ca:	83 c4 10             	add    $0x10,%esp
}
f01081cd:	90                   	nop
f01081ce:	c9                   	leave  
f01081cf:	c3                   	ret    

f01081d0 <allocate_frame>:
//   If failed, it panic.
//
// Hint: use LIST_FIRST, LIST_REMOVE, and initialize_frame_info
// Hint: references should not be incremented
int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01081d0:	55                   	push   %ebp
f01081d1:	89 e5                	mov    %esp,%ebp
f01081d3:	83 ec 18             	sub    $0x18,%esp
	//cprintf("allocate_frame...\n");

	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f01081d6:	83 ec 0c             	sub    $0xc,%esp
f01081d9:	68 40 65 55 f0       	push   $0xf0556540
f01081de:	e8 0d 6b 00 00       	call   f010ecf0 <holding_spinlock>
f01081e3:	83 c4 10             	add    $0x10,%esp
f01081e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f01081e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01081ed:	75 10                	jne    f01081ff <allocate_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01081ef:	83 ec 0c             	sub    $0xc,%esp
f01081f2:	68 40 65 55 f0       	push   $0xf0556540
f01081f7:	e8 db 68 00 00       	call   f010ead7 <acquire_spinlock>
f01081fc:	83 c4 10             	add    $0x10,%esp
	}

	*ptr_frame_info = LIST_FIRST(&MemFrameLists.free_frame_list);
f01081ff:	8b 15 20 65 55 f0    	mov    0xf0556520,%edx
f0108205:	8b 45 08             	mov    0x8(%ebp),%eax
f0108208:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010820a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (*ptr_frame_info == NULL)
f0108211:	8b 45 08             	mov    0x8(%ebp),%eax
f0108214:	8b 00                	mov    (%eax),%eax
f0108216:	85 c0                	test   %eax,%eax
f0108218:	75 17                	jne    f0108231 <allocate_frame+0x61>
	{
		//[PROJECT] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010821a:	83 ec 04             	sub    $0x4,%esp
f010821d:	68 4c 6a 12 f0       	push   $0xf0126a4c
f0108222:	68 a2 00 00 00       	push   $0xa2
f0108227:	68 fb 69 12 f0       	push   $0xf01269fb
f010822c:	e8 e9 80 ff ff       	call   f010031a <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&MemFrameLists.free_frame_list,*ptr_frame_info);
f0108231:	8b 45 08             	mov    0x8(%ebp),%eax
f0108234:	8b 00                	mov    (%eax),%eax
f0108236:	85 c0                	test   %eax,%eax
f0108238:	75 17                	jne    f0108251 <allocate_frame+0x81>
f010823a:	83 ec 04             	sub    $0x4,%esp
f010823d:	68 99 6a 12 f0       	push   $0xf0126a99
f0108242:	68 a8 00 00 00       	push   $0xa8
f0108247:	68 fb 69 12 f0       	push   $0xf01269fb
f010824c:	e8 c9 80 ff ff       	call   f010031a <_panic>
f0108251:	8b 45 08             	mov    0x8(%ebp),%eax
f0108254:	8b 00                	mov    (%eax),%eax
f0108256:	8b 00                	mov    (%eax),%eax
f0108258:	85 c0                	test   %eax,%eax
f010825a:	74 14                	je     f0108270 <allocate_frame+0xa0>
f010825c:	8b 45 08             	mov    0x8(%ebp),%eax
f010825f:	8b 00                	mov    (%eax),%eax
f0108261:	8b 00                	mov    (%eax),%eax
f0108263:	8b 55 08             	mov    0x8(%ebp),%edx
f0108266:	8b 12                	mov    (%edx),%edx
f0108268:	8b 52 04             	mov    0x4(%edx),%edx
f010826b:	89 50 04             	mov    %edx,0x4(%eax)
f010826e:	eb 0d                	jmp    f010827d <allocate_frame+0xad>
f0108270:	8b 45 08             	mov    0x8(%ebp),%eax
f0108273:	8b 00                	mov    (%eax),%eax
f0108275:	8b 40 04             	mov    0x4(%eax),%eax
f0108278:	a3 24 65 55 f0       	mov    %eax,0xf0556524
f010827d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108280:	8b 00                	mov    (%eax),%eax
f0108282:	8b 40 04             	mov    0x4(%eax),%eax
f0108285:	85 c0                	test   %eax,%eax
f0108287:	74 13                	je     f010829c <allocate_frame+0xcc>
f0108289:	8b 45 08             	mov    0x8(%ebp),%eax
f010828c:	8b 00                	mov    (%eax),%eax
f010828e:	8b 40 04             	mov    0x4(%eax),%eax
f0108291:	8b 55 08             	mov    0x8(%ebp),%edx
f0108294:	8b 12                	mov    (%edx),%edx
f0108296:	8b 12                	mov    (%edx),%edx
f0108298:	89 10                	mov    %edx,(%eax)
f010829a:	eb 0c                	jmp    f01082a8 <allocate_frame+0xd8>
f010829c:	8b 45 08             	mov    0x8(%ebp),%eax
f010829f:	8b 00                	mov    (%eax),%eax
f01082a1:	8b 00                	mov    (%eax),%eax
f01082a3:	a3 20 65 55 f0       	mov    %eax,0xf0556520
f01082a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ab:	8b 00                	mov    (%eax),%eax
f01082ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 00                	mov    (%eax),%eax
f01082b8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01082bf:	a1 2c 65 55 f0       	mov    0xf055652c,%eax
f01082c4:	48                   	dec    %eax
f01082c5:	a3 2c 65 55 f0       	mov    %eax,0xf055652c

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/
	if((*ptr_frame_info)->isBuffered)
f01082ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01082cd:	8b 00                	mov    (%eax),%eax
f01082cf:	8a 40 14             	mov    0x14(%eax),%al
f01082d2:	84 c0                	test   %al,%al
f01082d4:	74 20                	je     f01082f6 <allocate_frame+0x126>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->proc->env_page_directory,(*ptr_frame_info)->bufferedVA);
f01082d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d9:	8b 00                	mov    (%eax),%eax
f01082db:	8b 50 10             	mov    0x10(%eax),%edx
f01082de:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e1:	8b 00                	mov    (%eax),%eax
f01082e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01082e6:	8b 40 64             	mov    0x64(%eax),%eax
f01082e9:	83 ec 08             	sub    $0x8,%esp
f01082ec:	52                   	push   %edx
f01082ed:	50                   	push   %eax
f01082ee:	e8 42 09 00 00       	call   f0108c35 <pt_clear_page_table_entry>
f01082f3:	83 c4 10             	add    $0x10,%esp
		//pt_set_page_permissions((*ptr_frame_info)->environment->env_pgdir, (*ptr_frame_info)->va, 0, PERM_BUFFERED);
	}
	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01082f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f9:	8b 00                	mov    (%eax),%eax
f01082fb:	83 ec 0c             	sub    $0xc,%esp
f01082fe:	50                   	push   %eax
f01082ff:	e8 b1 fe ff ff       	call   f01081b5 <initialize_frame_info>
f0108304:	83 c4 10             	add    $0x10,%esp

	if (!lock_already_held)
f0108307:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010830b:	75 10                	jne    f010831d <allocate_frame+0x14d>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010830d:	83 ec 0c             	sub    $0xc,%esp
f0108310:	68 40 65 55 f0       	push   $0xf0556540
f0108315:	e8 44 68 00 00       	call   f010eb5e <release_spinlock>
f010831a:	83 c4 10             	add    $0x10,%esp
	}

	return 0;
f010831d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108322:	c9                   	leave  
f0108323:	c3                   	ret    

f0108324 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0108324:	55                   	push   %ebp
f0108325:	89 e5                	mov    %esp,%ebp
f0108327:	83 ec 18             	sub    $0x18,%esp
	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f010832a:	83 ec 0c             	sub    $0xc,%esp
f010832d:	68 40 65 55 f0       	push   $0xf0556540
f0108332:	e8 b9 69 00 00       	call   f010ecf0 <holding_spinlock>
f0108337:	83 c4 10             	add    $0x10,%esp
f010833a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f010833d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108341:	75 10                	jne    f0108353 <free_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f0108343:	83 ec 0c             	sub    $0xc,%esp
f0108346:	68 40 65 55 f0       	push   $0xf0556540
f010834b:	e8 87 67 00 00       	call   f010ead7 <acquire_spinlock>
f0108350:	83 c4 10             	add    $0x10,%esp
	}
	{
		/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
		initialize_frame_info(ptr_frame_info);
f0108353:	83 ec 0c             	sub    $0xc,%esp
f0108356:	ff 75 08             	pushl  0x8(%ebp)
f0108359:	e8 57 fe ff ff       	call   f01081b5 <initialize_frame_info>
f010835e:	83 c4 10             	add    $0x10,%esp
		/*=============================================================================*/
		// Fill this function in
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, ptr_frame_info);
f0108361:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108365:	75 17                	jne    f010837e <free_frame+0x5a>
f0108367:	83 ec 04             	sub    $0x4,%esp
f010836a:	68 d8 69 12 f0       	push   $0xf01269d8
f010836f:	68 cf 00 00 00       	push   $0xcf
f0108374:	68 fb 69 12 f0       	push   $0xf01269fb
f0108379:	e8 9c 7f ff ff       	call   f010031a <_panic>
f010837e:	8b 15 20 65 55 f0    	mov    0xf0556520,%edx
f0108384:	8b 45 08             	mov    0x8(%ebp),%eax
f0108387:	89 10                	mov    %edx,(%eax)
f0108389:	8b 45 08             	mov    0x8(%ebp),%eax
f010838c:	8b 00                	mov    (%eax),%eax
f010838e:	85 c0                	test   %eax,%eax
f0108390:	74 0d                	je     f010839f <free_frame+0x7b>
f0108392:	a1 20 65 55 f0       	mov    0xf0556520,%eax
f0108397:	8b 55 08             	mov    0x8(%ebp),%edx
f010839a:	89 50 04             	mov    %edx,0x4(%eax)
f010839d:	eb 08                	jmp    f01083a7 <free_frame+0x83>
f010839f:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a2:	a3 24 65 55 f0       	mov    %eax,0xf0556524
f01083a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083aa:	a3 20 65 55 f0       	mov    %eax,0xf0556520
f01083af:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01083b9:	a1 2c 65 55 f0       	mov    0xf055652c,%eax
f01083be:	40                   	inc    %eax
f01083bf:	a3 2c 65 55 f0       	mov    %eax,0xf055652c
		//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
	}
	if (!lock_already_held)
f01083c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01083c8:	75 10                	jne    f01083da <free_frame+0xb6>
	{
		release_spinlock(&MemFrameLists.mfllock);
f01083ca:	83 ec 0c             	sub    $0xc,%esp
f01083cd:	68 40 65 55 f0       	push   $0xf0556540
f01083d2:	e8 87 67 00 00       	call   f010eb5e <release_spinlock>
f01083d7:	83 c4 10             	add    $0x10,%esp
	}
}
f01083da:	90                   	nop
f01083db:	c9                   	leave  
f01083dc:	c3                   	ret    

f01083dd <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01083dd:	55                   	push   %ebp
f01083de:	89 e5                	mov    %esp,%ebp
f01083e0:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01083e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e6:	8b 40 08             	mov    0x8(%eax),%eax
f01083e9:	48                   	dec    %eax
f01083ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01083ed:	66 89 42 08          	mov    %ax,0x8(%edx)
f01083f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f4:	8b 40 08             	mov    0x8(%eax),%eax
f01083f7:	66 85 c0             	test   %ax,%ax
f01083fa:	75 0e                	jne    f010840a <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01083fc:	83 ec 0c             	sub    $0xc,%esp
f01083ff:	ff 75 08             	pushl  0x8(%ebp)
f0108402:	e8 1d ff ff ff       	call   f0108324 <free_frame>
f0108407:	83 c4 10             	add    $0x10,%esp
}
f010840a:	90                   	nop
f010840b:	c9                   	leave  
f010840c:	c3                   	ret    

f010840d <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010840d:	55                   	push   %ebp
f010840e:	89 e5                	mov    %esp,%ebp
f0108410:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0108413:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108416:	c1 e8 16             	shr    $0x16,%eax
f0108419:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108420:	8b 45 08             	mov    0x8(%ebp),%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	8b 00                	mov    (%eax),%eax
f0108427:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010842a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010842d:	83 e0 01             	and    $0x1,%eax
f0108430:	85 c0                	test   %eax,%eax
f0108432:	74 4e                	je     f0108482 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0108434:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108437:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010843c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010843f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108442:	c1 e8 0c             	shr    $0xc,%eax
f0108445:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108448:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f010844d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0108450:	72 17                	jb     f0108469 <get_page_table+0x5c>
f0108452:	ff 75 f0             	pushl  -0x10(%ebp)
f0108455:	68 b8 6a 12 f0       	push   $0xf0126ab8
f010845a:	68 fb 00 00 00       	push   $0xfb
f010845f:	68 fb 69 12 f0       	push   $0xf01269fb
f0108464:	e8 b1 7e ff ff       	call   f010031a <_panic>
f0108469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108471:	89 c2                	mov    %eax,%edx
f0108473:	8b 45 10             	mov    0x10(%ebp),%eax
f0108476:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0108478:	b8 00 00 00 00       	mov    $0x0,%eax
f010847d:	e9 8f 00 00 00       	jmp    f0108511 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0108482:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108486:	74 7b                	je     f0108503 <get_page_table+0xf6>
f0108488:	8b 45 0c             	mov    0xc(%ebp),%eax
f010848b:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010848e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108491:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0108494:	83 ec 0c             	sub    $0xc,%esp
f0108497:	6a 00                	push   $0x0
f0108499:	e8 0d 63 00 00       	call   f010e7ab <fault_handler>
f010849e:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01084a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01084a4:	c1 e8 16             	shr    $0x16,%eax
f01084a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01084ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b1:	01 d0                	add    %edx,%eax
f01084b3:	8b 00                	mov    (%eax),%eax
f01084b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01084b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01084c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01084c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084c6:	c1 e8 0c             	shr    $0xc,%eax
f01084c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01084cc:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f01084d1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01084d4:	72 17                	jb     f01084ed <get_page_table+0xe0>
f01084d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01084d9:	68 b8 6a 12 f0       	push   $0xf0126ab8
f01084de:	68 13 01 00 00       	push   $0x113
f01084e3:	68 fb 69 12 f0       	push   $0xf01269fb
f01084e8:	e8 2d 7e ff ff       	call   f010031a <_panic>
f01084ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084f0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01084f5:	89 c2                	mov    %eax,%edx
f01084f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01084fa:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01084fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0108501:	eb 0e                	jmp    f0108511 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0108503:	8b 45 10             	mov    0x10(%ebp),%eax
f0108506:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f010850c:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0108511:	c9                   	leave  
f0108512:	c3                   	ret    

f0108513 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0108513:	55                   	push   %ebp
f0108514:	89 e5                	mov    %esp,%ebp
f0108516:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0108519:	83 ec 04             	sub    $0x4,%esp
f010851c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010851f:	50                   	push   %eax
f0108520:	ff 75 0c             	pushl  0xc(%ebp)
f0108523:	ff 75 08             	pushl  0x8(%ebp)
f0108526:	e8 08 00 00 00       	call   f0108533 <__static_cpt>
f010852b:	83 c4 10             	add    $0x10,%esp
#endif

	//cprintf("KERNEL: NEW TABLE for va %x \n", virtual_address);

	return ptr_page_table;
f010852e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0108531:	c9                   	leave  
f0108532:	c3                   	ret    

f0108533 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0108533:	55                   	push   %ebp
f0108534:	89 e5                	mov    %esp,%ebp
f0108536:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0108539:	83 ec 0c             	sub    $0xc,%esp
f010853c:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010853f:	50                   	push   %eax
f0108540:	e8 8b fc ff ff       	call   f01081d0 <allocate_frame>
f0108545:	83 c4 10             	add    $0x10,%esp
f0108548:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f010854b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010854e:	83 ec 0c             	sub    $0xc,%esp
f0108551:	50                   	push   %eax
f0108552:	e8 27 f8 ff ff       	call   f0107d7e <to_physical_address>
f0108557:	83 c4 10             	add    $0x10,%esp
f010855a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010855d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108560:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108566:	c1 e8 0c             	shr    $0xc,%eax
f0108569:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010856c:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0108571:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0108574:	72 17                	jb     f010858d <__static_cpt+0x5a>
f0108576:	ff 75 ec             	pushl  -0x14(%ebp)
f0108579:	68 b8 6a 12 f0       	push   $0xf0126ab8
f010857e:	68 4e 01 00 00       	push   $0x14e
f0108583:	68 fb 69 12 f0       	push   $0xf01269fb
f0108588:	e8 8d 7d ff ff       	call   f010031a <_panic>
f010858d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108590:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108595:	89 c2                	mov    %eax,%edx
f0108597:	8b 45 10             	mov    0x10(%ebp),%eax
f010859a:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f010859c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010859f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01085a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085a8:	c1 e8 16             	shr    $0x16,%eax
f01085ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01085b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085b5:	01 d0                	add    %edx,%eax
f01085b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01085ba:	83 ca 07             	or     $0x7,%edx
f01085bd:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f01085bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01085c2:	8b 00                	mov    (%eax),%eax
f01085c4:	83 ec 04             	sub    $0x4,%esp
f01085c7:	68 00 10 00 00       	push   $0x1000
f01085cc:	6a 00                	push   $0x0
f01085ce:	50                   	push   %eax
f01085cf:	e8 c9 9e 01 00       	call   f012249d <memset>
f01085d4:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01085d7:	0f 20 d8             	mov    %cr3,%eax
f01085da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01085dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01085e0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01085e3:	90                   	nop
f01085e4:	c9                   	leave  
f01085e5:	c3                   	ret    

f01085e6 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01085e6:	55                   	push   %ebp
f01085e7:	89 e5                	mov    %esp,%ebp
f01085e9:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01085ec:	ff 75 0c             	pushl  0xc(%ebp)
f01085ef:	e8 8a f7 ff ff       	call   f0107d7e <to_physical_address>
f01085f4:	83 c4 04             	add    $0x4,%esp
f01085f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01085fa:	83 ec 04             	sub    $0x4,%esp
f01085fd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0108600:	50                   	push   %eax
f0108601:	ff 75 10             	pushl  0x10(%ebp)
f0108604:	ff 75 08             	pushl  0x8(%ebp)
f0108607:	e8 01 fe ff ff       	call   f010840d <get_page_table>
f010860c:	83 c4 10             	add    $0x10,%esp
f010860f:	83 f8 01             	cmp    $0x1,%eax
f0108612:	75 15                	jne    f0108629 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0108614:	83 ec 04             	sub    $0x4,%esp
f0108617:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010861a:	50                   	push   %eax
f010861b:	ff 75 10             	pushl  0x10(%ebp)
f010861e:	ff 75 08             	pushl  0x8(%ebp)
f0108621:	e8 0d ff ff ff       	call   f0108533 <__static_cpt>
f0108626:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0108629:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010862c:	8b 55 10             	mov    0x10(%ebp),%edx
f010862f:	c1 ea 0c             	shr    $0xc,%edx
f0108632:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108638:	c1 e2 02             	shl    $0x2,%edx
f010863b:	01 d0                	add    %edx,%eax
f010863d:	8b 00                	mov    (%eax),%eax
f010863f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0108642:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108645:	83 e0 01             	and    $0x1,%eax
f0108648:	85 c0                	test   %eax,%eax
f010864a:	74 25                	je     f0108671 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f010864c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010864f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108654:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108657:	75 07                	jne    f0108660 <map_frame+0x7a>
			return 0;
f0108659:	b8 00 00 00 00       	mov    $0x0,%eax
f010865e:	eb 68                	jmp    f01086c8 <map_frame+0xe2>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0108660:	83 ec 08             	sub    $0x8,%esp
f0108663:	ff 75 10             	pushl  0x10(%ebp)
f0108666:	ff 75 08             	pushl  0x8(%ebp)
f0108669:	e8 d2 00 00 00       	call   f0108740 <unmap_frame>
f010866e:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0108671:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108674:	8b 40 08             	mov    0x8(%eax),%eax
f0108677:	40                   	inc    %eax
f0108678:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867b:	66 89 42 08          	mov    %ax,0x8(%edx)

	/*********************************************************************************/
	/*NEW'23 el7:)
	 * [DONE] map_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
	uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f010867f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108682:	8b 55 10             	mov    0x10(%ebp),%edx
f0108685:	c1 ea 0c             	shr    $0xc,%edx
f0108688:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010868e:	c1 e2 02             	shl    $0x2,%edx
f0108691:	01 d0                	add    %edx,%eax
f0108693:	8b 00                	mov    (%eax),%eax
f0108695:	25 00 0e 00 00       	and    $0xe00,%eax
f010869a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , pte_available_bits | perm | PERM_PRESENT);
f010869d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01086a0:	8b 55 10             	mov    0x10(%ebp),%edx
f01086a3:	c1 ea 0c             	shr    $0xc,%edx
f01086a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01086ac:	c1 e2 02             	shl    $0x2,%edx
f01086af:	01 c2                	add    %eax,%edx
f01086b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086b4:	0b 45 ec             	or     -0x14(%ebp),%eax
f01086b7:	89 c1                	mov    %eax,%ecx
f01086b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01086bc:	09 c8                	or     %ecx,%eax
f01086be:	83 c8 01             	or     $0x1,%eax
f01086c1:	89 02                	mov    %eax,(%edx)
	/*********************************************************************************/

	return 0;
f01086c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01086c8:	c9                   	leave  
f01086c9:	c3                   	ret    

f01086ca <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f01086ca:	55                   	push   %ebp
f01086cb:	89 e5                	mov    %esp,%ebp
f01086cd:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f01086d0:	83 ec 04             	sub    $0x4,%esp
f01086d3:	ff 75 10             	pushl  0x10(%ebp)
f01086d6:	ff 75 0c             	pushl  0xc(%ebp)
f01086d9:	ff 75 08             	pushl  0x8(%ebp)
f01086dc:	e8 2c fd ff ff       	call   f010840d <get_page_table>
f01086e1:	83 c4 10             	add    $0x10,%esp
f01086e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f01086e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01086ea:	8b 00                	mov    (%eax),%eax
f01086ec:	85 c0                	test   %eax,%eax
f01086ee:	74 49                	je     f0108739 <get_frame_info+0x6f>
	{
		uint32 index_page_table = PTX(virtual_address);
f01086f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f3:	c1 e8 0c             	shr    $0xc,%eax
f01086f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01086fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01086fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0108701:	8b 00                	mov    (%eax),%eax
f0108703:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108706:	c1 e2 02             	shl    $0x2,%edx
f0108709:	01 d0                	add    %edx,%eax
f010870b:	8b 00                	mov    (%eax),%eax
f010870d:	89 45 ec             	mov    %eax,-0x14(%ebp)

		/*2023 el7:)*///Make sure it has a frame number other than 0 (not just a marked page from the page allocator)
		//if( page_table_entry != 0)
		if( (page_table_entry & ~0xFFF) != 0)
f0108710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108713:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108718:	85 c0                	test   %eax,%eax
f010871a:	74 16                	je     f0108732 <get_frame_info+0x68>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f010871c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010871f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108724:	83 ec 0c             	sub    $0xc,%esp
f0108727:	50                   	push   %eax
f0108728:	e8 64 f6 ff ff       	call   f0107d91 <to_frame_info>
f010872d:	83 c4 10             	add    $0x10,%esp
f0108730:	eb 0c                	jmp    f010873e <get_frame_info+0x74>
		}
		return 0;
f0108732:	b8 00 00 00 00       	mov    $0x0,%eax
f0108737:	eb 05                	jmp    f010873e <get_frame_info+0x74>
	}
	return 0;
f0108739:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010873e:	c9                   	leave  
f010873f:	c3                   	ret    

f0108740 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0108740:	55                   	push   %ebp
f0108741:	89 e5                	mov    %esp,%ebp
f0108743:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0108746:	83 ec 04             	sub    $0x4,%esp
f0108749:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010874c:	50                   	push   %eax
f010874d:	ff 75 0c             	pushl  0xc(%ebp)
f0108750:	ff 75 08             	pushl  0x8(%ebp)
f0108753:	e8 72 ff ff ff       	call   f01086ca <get_frame_info>
f0108758:	83 c4 10             	add    $0x10,%esp
f010875b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010875e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108762:	74 7d                	je     f01087e1 <unmap_frame+0xa1>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0108764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108767:	8a 40 14             	mov    0x14(%eax),%al
f010876a:	84 c0                	test   %al,%al
f010876c:	74 1c                	je     f010878a <unmap_frame+0x4a>
f010876e:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0108775:	77 13                	ja     f010878a <unmap_frame+0x4a>
			cprintf("WARNING: Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0108777:	83 ec 08             	sub    $0x8,%esp
f010877a:	ff 75 0c             	pushl  0xc(%ebp)
f010877d:	68 e8 6a 12 f0       	push   $0xf0126ae8
f0108782:	e8 e5 87 ff ff       	call   f0100f6c <cprintf>
f0108787:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010878a:	83 ec 0c             	sub    $0xc,%esp
f010878d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108790:	e8 48 fc ff ff       	call   f01083dd <decrement_references>
f0108795:	83 c4 10             	add    $0x10,%esp

		/*********************************************************************************/
		/*NEW'23 el7:)
		 * [DONE] unmap_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
		uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f0108798:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010879b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010879e:	c1 ea 0c             	shr    $0xc,%edx
f01087a1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087a7:	c1 e2 02             	shl    $0x2,%edx
f01087aa:	01 d0                	add    %edx,%eax
f01087ac:	8b 00                	mov    (%eax),%eax
f01087ae:	25 00 0e 00 00       	and    $0xe00,%eax
f01087b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_page_table[PTX(virtual_address)] = pte_available_bits;
f01087b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01087b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087bc:	c1 ea 0c             	shr    $0xc,%edx
f01087bf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087c5:	c1 e2 02             	shl    $0x2,%edx
f01087c8:	01 c2                	add    %eax,%edx
f01087ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01087cd:	89 02                	mov    %eax,(%edx)
		/*********************************************************************************/

		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f01087cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01087d2:	83 ec 08             	sub    $0x8,%esp
f01087d5:	50                   	push   %eax
f01087d6:	ff 75 08             	pushl  0x8(%ebp)
f01087d9:	e8 f9 f5 ff ff       	call   f0107dd7 <tlb_invalidate>
f01087de:	83 c4 10             	add    $0x10,%esp
	}
}
f01087e1:	90                   	nop
f01087e2:	c9                   	leave  
f01087e3:	c3                   	ret    

f01087e4 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01087e4:	55                   	push   %ebp
f01087e5:	89 e5                	mov    %esp,%ebp
f01087e7:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01087ea:	ff 75 0c             	pushl  0xc(%ebp)
f01087ed:	e8 8c f5 ff ff       	call   f0107d7e <to_physical_address>
f01087f2:	83 c4 04             	add    $0x4,%esp
f01087f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01087f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01087fb:	c1 e8 16             	shr    $0x16,%eax
f01087fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108805:	8b 45 08             	mov    0x8(%ebp),%eax
f0108808:	01 d0                	add    %edx,%eax
f010880a:	8b 00                	mov    (%eax),%eax
f010880c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010880f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108812:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108817:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010881a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010881d:	c1 e8 0c             	shr    $0xc,%eax
f0108820:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108823:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0108828:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010882b:	72 17                	jb     f0108844 <loadtime_map_frame+0x60>
f010882d:	ff 75 ec             	pushl  -0x14(%ebp)
f0108830:	68 b8 6a 12 f0       	push   $0xf0126ab8
f0108835:	68 f9 01 00 00       	push   $0x1f9
f010883a:	68 fb 69 12 f0       	push   $0xf01269fb
f010883f:	e8 d6 7a ff ff       	call   f010031a <_panic>
f0108844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108847:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010884c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f010884f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108853:	75 15                	jne    f010886a <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0108855:	83 ec 04             	sub    $0x4,%esp
f0108858:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010885b:	50                   	push   %eax
f010885c:	ff 75 10             	pushl  0x10(%ebp)
f010885f:	ff 75 08             	pushl  0x8(%ebp)
f0108862:	e8 cc fc ff ff       	call   f0108533 <__static_cpt>
f0108867:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f010886a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010886d:	8b 40 08             	mov    0x8(%eax),%eax
f0108870:	40                   	inc    %eax
f0108871:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108874:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0108878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010887b:	8b 55 10             	mov    0x10(%ebp),%edx
f010887e:	c1 ea 0c             	shr    $0xc,%edx
f0108881:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108887:	c1 e2 02             	shl    $0x2,%edx
f010888a:	01 c2                	add    %eax,%edx
f010888c:	8b 45 14             	mov    0x14(%ebp),%eax
f010888f:	0b 45 f4             	or     -0xc(%ebp),%eax
f0108892:	83 c8 01             	or     $0x1,%eax
f0108895:	89 02                	mov    %eax,(%edx)

	return 0;
f0108897:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010889c:	c9                   	leave  
f010889d:	c3                   	ret    

f010889e <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f010889e:	55                   	push   %ebp
f010889f:	89 e5                	mov    %esp,%ebp
f01088a1:	57                   	push   %edi
f01088a2:	56                   	push   %esi
f01088a3:	53                   	push   %ebx
f01088a4:	83 ec 2c             	sub    $0x2c,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01088a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01088ae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	uint32 totalModified = 0 ;
f01088b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	bool lock_is_held = holding_spinlock(&MemFrameLists.mfllock);
f01088bc:	83 ec 0c             	sub    $0xc,%esp
f01088bf:	68 40 65 55 f0       	push   $0xf0556540
f01088c4:	e8 27 64 00 00       	call   f010ecf0 <holding_spinlock>
f01088c9:	83 c4 10             	add    $0x10,%esp
f01088cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if (!lock_is_held)
f01088cf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01088d3:	75 10                	jne    f01088e5 <calculate_available_frames+0x47>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01088d5:	83 ec 0c             	sub    $0xc,%esp
f01088d8:	68 40 65 55 f0       	push   $0xf0556540
f01088dd:	e8 f5 61 00 00       	call   f010ead7 <acquire_spinlock>
f01088e2:	83 c4 10             	add    $0x10,%esp
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f01088e5:	a1 20 65 55 f0       	mov    0xf0556520,%eax
f01088ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01088ed:	eb 1a                	jmp    f0108909 <calculate_available_frames+0x6b>
		{
			if (ptr->isBuffered)
f01088ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01088f2:	8a 40 14             	mov    0x14(%eax),%al
f01088f5:	84 c0                	test   %al,%al
f01088f7:	74 05                	je     f01088fe <calculate_available_frames+0x60>
				totalFreeBuffered++ ;
f01088f9:	ff 45 dc             	incl   -0x24(%ebp)
f01088fc:	eb 03                	jmp    f0108901 <calculate_available_frames+0x63>
			else
				totalFreeUnBuffered++ ;
f01088fe:	ff 45 e0             	incl   -0x20(%ebp)
		acquire_spinlock(&MemFrameLists.mfllock);
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f0108901:	a1 28 65 55 f0       	mov    0xf0556528,%eax
f0108906:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108909:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010890d:	74 07                	je     f0108916 <calculate_available_frames+0x78>
f010890f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108912:	8b 00                	mov    (%eax),%eax
f0108914:	eb 05                	jmp    f010891b <calculate_available_frames+0x7d>
f0108916:	b8 00 00 00 00       	mov    $0x0,%eax
f010891b:	a3 28 65 55 f0       	mov    %eax,0xf0556528
f0108920:	a1 28 65 55 f0       	mov    0xf0556528,%eax
f0108925:	85 c0                	test   %eax,%eax
f0108927:	75 c6                	jne    f01088ef <calculate_available_frames+0x51>
f0108929:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010892d:	75 c0                	jne    f01088ef <calculate_available_frames+0x51>
			else
				totalFreeUnBuffered++ ;
		}

		/*2023: UPDATE based on suggestion from T112 2023.Term1*/
		totalModified= LIST_SIZE(&MemFrameLists.modified_frame_list);
f010892f:	a1 3c 65 55 f0       	mov    0xf055653c,%eax
f0108934:	89 45 d8             	mov    %eax,-0x28(%ebp)
		//	LIST_FOREACH(ptr, &modified_frame_list)
		//	{
		//		totalModified++ ;
		//	}
	}
	if (!lock_is_held)
f0108937:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010893b:	75 10                	jne    f010894d <calculate_available_frames+0xaf>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010893d:	83 ec 0c             	sub    $0xc,%esp
f0108940:	68 40 65 55 f0       	push   $0xf0556540
f0108945:	e8 14 62 00 00       	call   f010eb5e <release_spinlock>
f010894a:	83 c4 10             	add    $0x10,%esp
	}
	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010894d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108950:	89 45 c8             	mov    %eax,-0x38(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0108953:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108956:	89 45 cc             	mov    %eax,-0x34(%ebp)
	counters.modified = totalModified;
f0108959:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010895c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	return counters;
f010895f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108962:	89 c3                	mov    %eax,%ebx
f0108964:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108967:	ba 03 00 00 00       	mov    $0x3,%edx
f010896c:	89 df                	mov    %ebx,%edi
f010896e:	89 c6                	mov    %eax,%esi
f0108970:	89 d1                	mov    %edx,%ecx
f0108972:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0108974:	8b 45 08             	mov    0x8(%ebp),%eax
f0108977:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010897a:	5b                   	pop    %ebx
f010897b:	5e                   	pop    %esi
f010897c:	5f                   	pop    %edi
f010897d:	5d                   	pop    %ebp
f010897e:	c2 04 00             	ret    $0x4

f0108981 <sharing_init>:
//===========================
// [1] INITIALIZE SHARES:
//===========================
//Initialize the list and the corresponding lock
void sharing_init(uint32 numOfElements)
{
f0108981:	55                   	push   %ebp
f0108982:	89 e5                	mov    %esp,%ebp
f0108984:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	LIST_INIT(&AllShares.shares_list) ;
	init_spinlock(&AllShares.shareslock, "shares lock");
#else
	panic("not handled when KERN HEAP is disabled");
f0108987:	83 ec 04             	sub    $0x4,%esp
f010898a:	68 18 6b 12 f0       	push   $0xf0126b18
f010898f:	6a 1e                	push   $0x1e
f0108991:	68 40 6b 12 f0       	push   $0xf0126b40
f0108996:	e8 7f 79 ff ff       	call   f010031a <_panic>

f010899b <create_share>:
//=====================================
//Allocates a new shared object and initialize its member
//It dynamically creates the "framesStorage"
//Return: allocatedObject (pointer to struct Share) passed by reference
struct Share* create_share(int32 ownerID, char* shareName, uint32 size, uint8 isWritable)
{
f010899b:	55                   	push   %ebp
f010899c:	89 e5                	mov    %esp,%ebp
f010899e:	83 ec 18             	sub    $0x18,%esp
f01089a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01089a4:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_share is not implemented yet");
f01089a7:	83 ec 04             	sub    $0x4,%esp
f01089aa:	68 64 6b 12 f0       	push   $0xf0126b64
f01089af:	6a 32                	push   $0x32
f01089b1:	68 40 6b 12 f0       	push   $0xf0126b40
f01089b6:	e8 5f 79 ff ff       	call   f010031a <_panic>

f01089bb <get_share>:
//Search for the given shared object in the "shares_list"
//Return:
//	a) if found: ptr to Share object
//	b) else: NULL
struct Share* get_share(int32 ownerID, char* name)
{
f01089bb:	55                   	push   %ebp
f01089bc:	89 e5                	mov    %esp,%ebp
f01089be:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("get_share is not implemented yet");
f01089c1:	83 ec 04             	sub    $0x4,%esp
f01089c4:	68 88 6b 12 f0       	push   $0xf0126b88
f01089c9:	6a 42                	push   $0x42
f01089cb:	68 40 6b 12 f0       	push   $0xf0126b40
f01089d0:	e8 45 79 ff ff       	call   f010031a <_panic>

f01089d5 <free_share>:
// [3] Delete Share Object:
//=========================
//delete the given shared object from the "shares_list"
//it should free its framesStorage and the share object itself
void free_share(struct Share* ptrShare)
{
f01089d5:	55                   	push   %ebp
f01089d6:	89 e5                	mov    %esp,%ebp
f01089d8:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_share is not implemented yet");
f01089db:	83 ec 04             	sub    $0x4,%esp
f01089de:	68 ac 6b 12 f0       	push   $0xf0126bac
f01089e3:	6a 50                	push   $0x50
f01089e5:	68 40 6b 12 f0       	push   $0xf0126b40
f01089ea:	e8 2b 79 ff ff       	call   f010031a <_panic>

f01089ef <create_frames_storage>:
//===========================
// [4] Create frames_storage:
//===========================
// Create the frames_storage and initialize it by 0
inline struct FrameInfo** create_frames_storage(int numOfFrames)
{
f01089ef:	55                   	push   %ebp
f01089f0:	89 e5                	mov    %esp,%ebp
f01089f2:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_frames_storage is not implemented yet");
f01089f5:	83 ec 04             	sub    $0x4,%esp
f01089f8:	68 d0 6b 12 f0       	push   $0xf0126bd0
f01089fd:	6a 5c                	push   $0x5c
f01089ff:	68 40 6b 12 f0       	push   $0xf0126b40
f0108a04:	e8 11 79 ff ff       	call   f010031a <_panic>

f0108a09 <createSharedObject>:

//=========================
// [5] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0108a09:	55                   	push   %ebp
f0108a0a:	89 e5                	mov    %esp,%ebp
f0108a0c:	83 ec 18             	sub    $0x18,%esp
f0108a0f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a12:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("createSharedObject is not implemented yet");
f0108a15:	83 ec 04             	sub    $0x4,%esp
f0108a18:	68 00 6c 12 f0       	push   $0xf0126c00
f0108a1d:	6a 68                	push   $0x68
f0108a1f:	68 40 6b 12 f0       	push   $0xf0126b40
f0108a24:	e8 f1 78 ff ff       	call   f010031a <_panic>

f0108a29 <getSizeOfSharedObject>:

//==============================
// [6] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0108a29:	55                   	push   %ebp
f0108a2a:	89 e5                	mov    %esp,%ebp
f0108a2c:	83 ec 18             	sub    $0x18,%esp
	// This function should return the size of the given shared object
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//
	struct Share* ptr_share = get_share(ownerID, shareName);
f0108a2f:	83 ec 08             	sub    $0x8,%esp
f0108a32:	ff 75 0c             	pushl  0xc(%ebp)
f0108a35:	ff 75 08             	pushl  0x8(%ebp)
f0108a38:	e8 7e ff ff ff       	call   f01089bb <get_share>
f0108a3d:	83 c4 10             	add    $0x10,%esp
f0108a40:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (ptr_share == NULL)
f0108a43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108a47:	75 07                	jne    f0108a50 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0108a49:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0108a4e:	eb 06                	jmp    f0108a56 <getSizeOfSharedObject+0x2d>
	else
		return ptr_share->size;
f0108a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a53:	8b 40 48             	mov    0x48(%eax),%eax

	return 0;
}
f0108a56:	c9                   	leave  
f0108a57:	c3                   	ret    

f0108a58 <getSharedObject>:

//======================
// [7] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0108a58:	55                   	push   %ebp
f0108a59:	89 e5                	mov    %esp,%ebp
f0108a5b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("getSharedObject is not implemented yet");
f0108a5e:	83 ec 04             	sub    $0x4,%esp
f0108a61:	68 2c 6c 12 f0       	push   $0xf0126c2c
f0108a66:	68 89 00 00 00       	push   $0x89
f0108a6b:	68 40 6b 12 f0       	push   $0xf0126b40
f0108a70:	e8 a5 78 ff ff       	call   f010031a <_panic>

f0108a75 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0108a75:	55                   	push   %ebp
f0108a76:	89 e5                	mov    %esp,%ebp
f0108a78:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("freeSharedObject is not implemented yet");
f0108a7b:	83 ec 04             	sub    $0x4,%esp
f0108a7e:	68 54 6c 12 f0       	push   $0xf0126c54
f0108a83:	68 9a 00 00 00       	push   $0x9a
f0108a88:	68 40 6b 12 f0       	push   $0xf0126b40
f0108a8d:	e8 88 78 ff ff       	call   f010031a <_panic>

f0108a92 <initialize_kheap_dynamic_allocator>:
//Remember: call the initialize_dynamic_allocator(..) to complete the initialization
//Return:
//	On success: 0
//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM
int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0108a92:	55                   	push   %ebp
f0108a93:	89 e5                	mov    %esp,%ebp
f0108a95:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] initialize_kheap_dynamic_allocator
	// Write your code here, remove the panic and write your code
	panic("initialize_kheap_dynamic_allocator() is not implemented yet...!!");
f0108a98:	83 ec 04             	sub    $0x4,%esp
f0108a9b:	68 7c 6c 12 f0       	push   $0xf0126c7c
f0108aa0:	6a 11                	push   $0x11
f0108aa2:	68 bd 6c 12 f0       	push   $0xf0126cbd
f0108aa7:	e8 6e 78 ff ff       	call   f010031a <_panic>

f0108aac <sbrk>:
}

void* sbrk(int numOfPages)
{
f0108aac:	55                   	push   %ebp
f0108aad:	89 e5                	mov    %esp,%ebp
	 * 	1) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0108aaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	//====================================================

	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("sbrk() is not implemented yet...!!");
}
f0108ab4:	5d                   	pop    %ebp
f0108ab5:	c3                   	ret    

f0108ab6 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0108ab6:	55                   	push   %ebp
f0108ab7:	89 e5                	mov    %esp,%ebp
f0108ab9:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0108abc:	83 ec 04             	sub    $0x4,%esp
f0108abf:	68 d0 6c 12 f0       	push   $0xf0126cd0
f0108ac4:	6a 2e                	push   $0x2e
f0108ac6:	68 bd 6c 12 f0       	push   $0xf0126cbd
f0108acb:	e8 75 79 ff ff       	call   f0100445 <_panic_into_prompt>

f0108ad0 <kfree>:
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

}

void kfree(void* virtual_address)
{
f0108ad0:	55                   	push   %ebp
f0108ad1:	89 e5                	mov    %esp,%ebp
f0108ad3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0108ad6:	83 ec 04             	sub    $0x4,%esp
f0108ad9:	68 f8 6c 12 f0       	push   $0xf0126cf8
f0108ade:	6a 38                	push   $0x38
f0108ae0:	68 bd 6c 12 f0       	push   $0xf0126cbd
f0108ae5:	e8 30 78 ff ff       	call   f010031a <_panic>

f0108aea <kheap_virtual_address>:
	//refer to the project presentation and documentation for details

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0108aea:	55                   	push   %ebp
f0108aeb:	89 e5                	mov    %esp,%ebp
f0108aed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0108af0:	83 ec 04             	sub    $0x4,%esp
f0108af3:	68 1c 6d 12 f0       	push   $0xf0126d1c
f0108af8:	6a 43                	push   $0x43
f0108afa:	68 bd 6c 12 f0       	push   $0xf0126cbd
f0108aff:	e8 16 78 ff ff       	call   f010031a <_panic>

f0108b04 <kheap_physical_address>:

	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0108b04:	55                   	push   %ebp
f0108b05:	89 e5                	mov    %esp,%ebp
f0108b07:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0108b0a:	83 ec 04             	sub    $0x4,%esp
f0108b0d:	68 50 6d 12 f0       	push   $0xf0126d50
f0108b12:	6a 4f                	push   $0x4f
f0108b14:	68 bd 6c 12 f0       	push   $0xf0126cbd
f0108b19:	e8 fc 77 ff ff       	call   f010031a <_panic>

f0108b1e <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108b1e:	55                   	push   %ebp
f0108b1f:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2 BONUS2] Kernel Heap Realloc
	// Write your code here, remove the panic and write your code
	return NULL;
f0108b21:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0108b26:	5d                   	pop    %ebp
f0108b27:	c3                   	ret    

f0108b28 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108b28:	55                   	push   %ebp
f0108b29:	89 e5                	mov    %esp,%ebp
f0108b2b:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108b2e:	83 ec 04             	sub    $0x4,%esp
f0108b31:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108b34:	50                   	push   %eax
f0108b35:	ff 75 0c             	pushl  0xc(%ebp)
f0108b38:	ff 75 08             	pushl  0x8(%ebp)
f0108b3b:	e8 cd f8 ff ff       	call   f010840d <get_page_table>
f0108b40:	83 c4 10             	add    $0x10,%esp
f0108b43:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b49:	85 c0                	test   %eax,%eax
f0108b4b:	74 64                	je     f0108bb1 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b53:	c1 ea 0c             	shr    $0xc,%edx
f0108b56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b5c:	c1 e2 02             	shl    $0x2,%edx
f0108b5f:	01 c2                	add    %eax,%edx
f0108b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b64:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b67:	c1 e9 0c             	shr    $0xc,%ecx
f0108b6a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b70:	c1 e1 02             	shl    $0x2,%ecx
f0108b73:	01 c8                	add    %ecx,%eax
f0108b75:	8b 00                	mov    (%eax),%eax
f0108b77:	0b 45 10             	or     0x10(%ebp),%eax
f0108b7a:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b82:	c1 ea 0c             	shr    $0xc,%edx
f0108b85:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b8b:	c1 e2 02             	shl    $0x2,%edx
f0108b8e:	01 d0                	add    %edx,%eax
f0108b90:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108b93:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b96:	c1 e9 0c             	shr    $0xc,%ecx
f0108b99:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b9f:	c1 e1 02             	shl    $0x2,%ecx
f0108ba2:	01 ca                	add    %ecx,%edx
f0108ba4:	8b 12                	mov    (%edx),%edx
f0108ba6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108ba9:	f7 d1                	not    %ecx
f0108bab:	21 ca                	and    %ecx,%edx
f0108bad:	89 10                	mov    %edx,(%eax)
f0108baf:	eb 27                	jmp    f0108bd8 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0108bb1:	83 ec 08             	sub    $0x8,%esp
f0108bb4:	ff 75 0c             	pushl  0xc(%ebp)
f0108bb7:	68 88 6d 12 f0       	push   $0xf0126d88
f0108bbc:	e8 ab 83 ff ff       	call   f0100f6c <cprintf>
f0108bc1:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108bc4:	83 ec 04             	sub    $0x4,%esp
f0108bc7:	68 b0 6d 12 f0       	push   $0xf0126db0
f0108bcc:	6a 1c                	push   $0x1c
f0108bce:	68 24 6e 12 f0       	push   $0xf0126e24
f0108bd3:	e8 42 77 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bdb:	83 ec 08             	sub    $0x8,%esp
f0108bde:	50                   	push   %eax
f0108bdf:	6a 00                	push   $0x0
f0108be1:	e8 f1 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108be6:	83 c4 10             	add    $0x10,%esp
}
f0108be9:	90                   	nop
f0108bea:	c9                   	leave  
f0108beb:	c3                   	ret    

f0108bec <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108bec:	55                   	push   %ebp
f0108bed:	89 e5                	mov    %esp,%ebp
f0108bef:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108bf2:	83 ec 04             	sub    $0x4,%esp
f0108bf5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108bf8:	50                   	push   %eax
f0108bf9:	ff 75 0c             	pushl  0xc(%ebp)
f0108bfc:	ff 75 08             	pushl  0x8(%ebp)
f0108bff:	e8 09 f8 ff ff       	call   f010840d <get_page_table>
f0108c04:	83 c4 10             	add    $0x10,%esp
f0108c07:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c0d:	85 c0                	test   %eax,%eax
f0108c0f:	74 1d                	je     f0108c2e <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c14:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c17:	c1 ea 0c             	shr    $0xc,%edx
f0108c1a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c20:	c1 e2 02             	shl    $0x2,%edx
f0108c23:	01 d0                	add    %edx,%eax
f0108c25:	8b 00                	mov    (%eax),%eax
f0108c27:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108c2c:	eb 05                	jmp    f0108c33 <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108c2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0108c33:	c9                   	leave  
f0108c34:	c3                   	ret    

f0108c35 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0108c35:	55                   	push   %ebp
f0108c36:	89 e5                	mov    %esp,%ebp
f0108c38:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108c3b:	83 ec 04             	sub    $0x4,%esp
f0108c3e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108c41:	50                   	push   %eax
f0108c42:	ff 75 0c             	pushl  0xc(%ebp)
f0108c45:	ff 75 08             	pushl  0x8(%ebp)
f0108c48:	e8 c0 f7 ff ff       	call   f010840d <get_page_table>
f0108c4d:	83 c4 10             	add    $0x10,%esp
f0108c50:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108c53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c56:	85 c0                	test   %eax,%eax
f0108c58:	74 46                	je     f0108ca0 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c60:	c1 ea 0c             	shr    $0xc,%edx
f0108c63:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c69:	c1 e2 02             	shl    $0x2,%edx
f0108c6c:	01 d0                	add    %edx,%eax
f0108c6e:	8b 00                	mov    (%eax),%eax
f0108c70:	83 ec 04             	sub    $0x4,%esp
f0108c73:	50                   	push   %eax
f0108c74:	ff 75 0c             	pushl  0xc(%ebp)
f0108c77:	68 40 6e 12 f0       	push   $0xf0126e40
f0108c7c:	e8 eb 82 ff ff       	call   f0100f6c <cprintf>
f0108c81:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0108c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c87:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c8a:	c1 ea 0c             	shr    $0xc,%edx
f0108c8d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c93:	c1 e2 02             	shl    $0x2,%edx
f0108c96:	01 d0                	add    %edx,%eax
f0108c98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c9e:	eb 14                	jmp    f0108cb4 <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108ca0:	83 ec 04             	sub    $0x4,%esp
f0108ca3:	68 68 6e 12 f0       	push   $0xf0126e68
f0108ca8:	6a 47                	push   $0x47
f0108caa:	68 24 6e 12 f0       	push   $0xf0126e24
f0108caf:	e8 66 76 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cb7:	83 ec 08             	sub    $0x8,%esp
f0108cba:	50                   	push   %eax
f0108cbb:	6a 00                	push   $0x0
f0108cbd:	e8 15 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108cc2:	83 c4 10             	add    $0x10,%esp
}
f0108cc5:	90                   	nop
f0108cc6:	c9                   	leave  
f0108cc7:	c3                   	ret    

f0108cc8 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108cc8:	55                   	push   %ebp
f0108cc9:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cce:	c1 e8 16             	shr    $0x16,%eax
f0108cd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cdb:	01 d0                	add    %edx,%eax
f0108cdd:	8b 00                	mov    (%eax),%eax
f0108cdf:	83 e0 20             	and    $0x20,%eax
f0108ce2:	85 c0                	test   %eax,%eax
f0108ce4:	0f 95 c0             	setne  %al
f0108ce7:	0f b6 c0             	movzbl %al,%eax
}
f0108cea:	5d                   	pop    %ebp
f0108ceb:	c3                   	ret    

f0108cec <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0108cec:	55                   	push   %ebp
f0108ced:	89 e5                	mov    %esp,%ebp
f0108cef:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cf5:	c1 e8 16             	shr    $0x16,%eax
f0108cf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d02:	01 d0                	add    %edx,%eax
f0108d04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d07:	c1 ea 16             	shr    $0x16,%edx
f0108d0a:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108d11:	8b 55 08             	mov    0x8(%ebp),%edx
f0108d14:	01 ca                	add    %ecx,%edx
f0108d16:	8b 12                	mov    (%edx),%edx
f0108d18:	83 e2 df             	and    $0xffffffdf,%edx
f0108d1b:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d20:	83 ec 08             	sub    $0x8,%esp
f0108d23:	50                   	push   %eax
f0108d24:	6a 00                	push   $0x0
f0108d26:	e8 ac f0 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108d2b:	83 c4 10             	add    $0x10,%esp
}
f0108d2e:	90                   	nop
f0108d2f:	c9                   	leave  
f0108d30:	c3                   	ret    

f0108d31 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108d31:	55                   	push   %ebp
f0108d32:	89 e5                	mov    %esp,%ebp
f0108d34:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0108d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d3a:	c1 e8 16             	shr    $0x16,%eax
f0108d3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d47:	01 d0                	add    %edx,%eax
f0108d49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108d4f:	0f 20 d8             	mov    %cr3,%eax
f0108d52:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108d55:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108d58:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108d5b:	90                   	nop
f0108d5c:	c9                   	leave  
f0108d5d:	c3                   	ret    

f0108d5e <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108d5e:	55                   	push   %ebp
f0108d5f:	89 e5                	mov    %esp,%ebp
f0108d61:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108d64:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108d6b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108d72:	eb 22                	jmp    f0108d96 <env_page_ws_get_size+0x38>
f0108d74:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108d77:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108d7a:	89 d0                	mov    %edx,%eax
f0108d7c:	01 c0                	add    %eax,%eax
f0108d7e:	01 d0                	add    %edx,%eax
f0108d80:	c1 e0 03             	shl    $0x3,%eax
f0108d83:	01 c8                	add    %ecx,%eax
f0108d85:	05 8c 00 00 00       	add    $0x8c,%eax
f0108d8a:	8a 00                	mov    (%eax),%al
f0108d8c:	84 c0                	test   %al,%al
f0108d8e:	75 03                	jne    f0108d93 <env_page_ws_get_size+0x35>
f0108d90:	ff 45 f8             	incl   -0x8(%ebp)
f0108d93:	ff 45 fc             	incl   -0x4(%ebp)
f0108d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d99:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108d9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108da2:	39 c2                	cmp    %eax,%edx
f0108da4:	77 ce                	ja     f0108d74 <env_page_ws_get_size+0x16>
	return counter;
f0108da6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108da9:	c9                   	leave  
f0108daa:	c3                   	ret    

f0108dab <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108dab:	55                   	push   %ebp
f0108dac:	89 e5                	mov    %esp,%ebp
f0108dae:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108db1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108db8:	eb 4e                	jmp    f0108e08 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108dba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108dbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108dc0:	89 d0                	mov    %edx,%eax
f0108dc2:	01 c0                	add    %eax,%eax
f0108dc4:	01 d0                	add    %edx,%eax
f0108dc6:	c1 e0 03             	shl    $0x3,%eax
f0108dc9:	01 c8                	add    %ecx,%eax
f0108dcb:	05 88 00 00 00       	add    $0x88,%eax
f0108dd0:	8b 00                	mov    (%eax),%eax
f0108dd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108dd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ddd:	89 c2                	mov    %eax,%edx
f0108ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108de2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108de5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108de8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ded:	39 c2                	cmp    %eax,%edx
f0108def:	75 14                	jne    f0108e05 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0108df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108df4:	83 ec 08             	sub    $0x8,%esp
f0108df7:	50                   	push   %eax
f0108df8:	ff 75 08             	pushl  0x8(%ebp)
f0108dfb:	e8 ce 00 00 00       	call   f0108ece <env_page_ws_clear_entry>
f0108e00:	83 c4 10             	add    $0x10,%esp
			break;
f0108e03:	eb 13                	jmp    f0108e18 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108e05:	ff 45 f4             	incl   -0xc(%ebp)
f0108e08:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e0b:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e14:	39 c2                	cmp    %eax,%edx
f0108e16:	77 a2                	ja     f0108dba <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108e18:	90                   	nop
f0108e19:	c9                   	leave  
f0108e1a:	c3                   	ret    

f0108e1b <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108e1b:	55                   	push   %ebp
f0108e1c:	89 e5                	mov    %esp,%ebp
f0108e1e:	53                   	push   %ebx
f0108e1f:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e25:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108e2b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108e2e:	77 19                	ja     f0108e49 <env_page_ws_set_entry+0x2e>
f0108e30:	68 e0 6e 12 f0       	push   $0xf0126ee0
f0108e35:	68 16 6f 12 f0       	push   $0xf0126f16
f0108e3a:	68 a7 00 00 00       	push   $0xa7
f0108e3f:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0108e44:	e8 d1 74 ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108e49:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108e50:	76 19                	jbe    f0108e6b <env_page_ws_set_entry+0x50>
f0108e52:	68 4c 6f 12 f0       	push   $0xf0126f4c
f0108e57:	68 16 6f 12 f0       	push   $0xf0126f16
f0108e5c:	68 a8 00 00 00       	push   $0xa8
f0108e61:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0108e66:	e8 af 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108e6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e79:	89 c1                	mov    %eax,%ecx
f0108e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108e7e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e81:	89 d0                	mov    %edx,%eax
f0108e83:	01 c0                	add    %eax,%eax
f0108e85:	01 d0                	add    %edx,%eax
f0108e87:	c1 e0 03             	shl    $0x3,%eax
f0108e8a:	01 d8                	add    %ebx,%eax
f0108e8c:	05 88 00 00 00       	add    $0x88,%eax
f0108e91:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108e93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108e96:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e99:	89 d0                	mov    %edx,%eax
f0108e9b:	01 c0                	add    %eax,%eax
f0108e9d:	01 d0                	add    %edx,%eax
f0108e9f:	c1 e0 03             	shl    $0x3,%eax
f0108ea2:	01 c8                	add    %ecx,%eax
f0108ea4:	05 8c 00 00 00       	add    $0x8c,%eax
f0108ea9:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108eac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108eb2:	89 d0                	mov    %edx,%eax
f0108eb4:	01 c0                	add    %eax,%eax
f0108eb6:	01 d0                	add    %edx,%eax
f0108eb8:	c1 e0 03             	shl    $0x3,%eax
f0108ebb:	01 c8                	add    %ecx,%eax
f0108ebd:	05 90 00 00 00       	add    $0x90,%eax
f0108ec2:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108ec8:	90                   	nop
}
f0108ec9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108ecc:	c9                   	leave  
f0108ecd:	c3                   	ret    

f0108ece <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108ece:	55                   	push   %ebp
f0108ecf:	89 e5                	mov    %esp,%ebp
f0108ed1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108edd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108ee0:	77 19                	ja     f0108efb <env_page_ws_clear_entry+0x2d>
f0108ee2:	68 80 6f 12 f0       	push   $0xf0126f80
f0108ee7:	68 16 6f 12 f0       	push   $0xf0126f16
f0108eec:	68 b3 00 00 00       	push   $0xb3
f0108ef1:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0108ef6:	e8 1f 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108efb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108efe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f01:	89 d0                	mov    %edx,%eax
f0108f03:	01 c0                	add    %eax,%eax
f0108f05:	01 d0                	add    %edx,%eax
f0108f07:	c1 e0 03             	shl    $0x3,%eax
f0108f0a:	01 c8                	add    %ecx,%eax
f0108f0c:	05 88 00 00 00       	add    $0x88,%eax
f0108f11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108f17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f1d:	89 d0                	mov    %edx,%eax
f0108f1f:	01 c0                	add    %eax,%eax
f0108f21:	01 d0                	add    %edx,%eax
f0108f23:	c1 e0 03             	shl    $0x3,%eax
f0108f26:	01 c8                	add    %ecx,%eax
f0108f28:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f2d:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108f30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f36:	89 d0                	mov    %edx,%eax
f0108f38:	01 c0                	add    %eax,%eax
f0108f3a:	01 d0                	add    %edx,%eax
f0108f3c:	c1 e0 03             	shl    $0x3,%eax
f0108f3f:	01 c8                	add    %ecx,%eax
f0108f41:	05 90 00 00 00       	add    $0x90,%eax
f0108f46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108f4c:	90                   	nop
f0108f4d:	c9                   	leave  
f0108f4e:	c3                   	ret    

f0108f4f <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108f4f:	55                   	push   %ebp
f0108f50:	89 e5                	mov    %esp,%ebp
f0108f52:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108f55:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f58:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108f61:	77 19                	ja     f0108f7c <env_page_ws_get_virtual_address+0x2d>
f0108f63:	68 80 6f 12 f0       	push   $0xf0126f80
f0108f68:	68 16 6f 12 f0       	push   $0xf0126f16
f0108f6d:	68 bb 00 00 00       	push   $0xbb
f0108f72:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0108f77:	e8 9e 73 ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108f7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f82:	89 d0                	mov    %edx,%eax
f0108f84:	01 c0                	add    %eax,%eax
f0108f86:	01 d0                	add    %edx,%eax
f0108f88:	c1 e0 03             	shl    $0x3,%eax
f0108f8b:	01 c8                	add    %ecx,%eax
f0108f8d:	05 88 00 00 00       	add    $0x88,%eax
f0108f92:	8b 00                	mov    (%eax),%eax
f0108f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108f9f:	c9                   	leave  
f0108fa0:	c3                   	ret    

f0108fa1 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108fa1:	55                   	push   %ebp
f0108fa2:	89 e5                	mov    %esp,%ebp
f0108fa4:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108faa:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108fb0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108fb3:	77 19                	ja     f0108fce <env_page_ws_get_time_stamp+0x2d>
f0108fb5:	68 80 6f 12 f0       	push   $0xf0126f80
f0108fba:	68 16 6f 12 f0       	push   $0xf0126f16
f0108fbf:	68 c1 00 00 00       	push   $0xc1
f0108fc4:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0108fc9:	e8 4c 73 ff ff       	call   f010031a <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108fce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fd1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fd4:	89 d0                	mov    %edx,%eax
f0108fd6:	01 c0                	add    %eax,%eax
f0108fd8:	01 d0                	add    %edx,%eax
f0108fda:	c1 e0 03             	shl    $0x3,%eax
f0108fdd:	01 c8                	add    %ecx,%eax
f0108fdf:	05 90 00 00 00       	add    $0x90,%eax
f0108fe4:	8b 00                	mov    (%eax),%eax
}
f0108fe6:	c9                   	leave  
f0108fe7:	c3                   	ret    

f0108fe8 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108fe8:	55                   	push   %ebp
f0108fe9:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108feb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fee:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ff1:	89 d0                	mov    %edx,%eax
f0108ff3:	01 c0                	add    %eax,%eax
f0108ff5:	01 d0                	add    %edx,%eax
f0108ff7:	c1 e0 03             	shl    $0x3,%eax
f0108ffa:	01 c8                	add    %ecx,%eax
f0108ffc:	05 8c 00 00 00       	add    $0x8c,%eax
f0109001:	8a 00                	mov    (%eax),%al
f0109003:	0f b6 c0             	movzbl %al,%eax
}
f0109006:	5d                   	pop    %ebp
f0109007:	c3                   	ret    

f0109008 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0109008:	55                   	push   %ebp
f0109009:	89 e5                	mov    %esp,%ebp
f010900b:	53                   	push   %ebx
f010900c:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010900f:	83 ec 0c             	sub    $0xc,%esp
f0109012:	6a 02                	push   $0x2
f0109014:	e8 ad 56 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0109019:	83 c4 10             	add    $0x10,%esp
f010901c:	85 c0                	test   %eax,%eax
f010901e:	0f 84 fe 00 00 00    	je     f0109122 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0109024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010902b:	83 ec 0c             	sub    $0xc,%esp
f010902e:	68 b8 6f 12 f0       	push   $0xf0126fb8
f0109033:	e8 34 7f ff ff       	call   f0100f6c <cprintf>
f0109038:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010903b:	8b 45 08             	mov    0x8(%ebp),%eax
f010903e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0109044:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109047:	eb 2c                	jmp    f0109075 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0109049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010904c:	8b 10                	mov    (%eax),%edx
f010904e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109051:	8d 48 01             	lea    0x1(%eax),%ecx
f0109054:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0109057:	83 ec 04             	sub    $0x4,%esp
f010905a:	52                   	push   %edx
f010905b:	50                   	push   %eax
f010905c:	68 d2 6f 12 f0       	push   $0xf0126fd2
f0109061:	e8 06 7f ff ff       	call   f0100f6c <cprintf>
f0109066:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0109069:	8b 45 08             	mov    0x8(%ebp),%eax
f010906c:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0109072:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109075:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109079:	74 08                	je     f0109083 <env_page_ws_print+0x7b>
f010907b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010907e:	8b 40 10             	mov    0x10(%eax),%eax
f0109081:	eb 05                	jmp    f0109088 <env_page_ws_print+0x80>
f0109083:	b8 00 00 00 00       	mov    $0x0,%eax
f0109088:	8b 55 08             	mov    0x8(%ebp),%edx
f010908b:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0109091:	8b 45 08             	mov    0x8(%ebp),%eax
f0109094:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f010909a:	85 c0                	test   %eax,%eax
f010909c:	75 ab                	jne    f0109049 <env_page_ws_print+0x41>
f010909e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090a2:	75 a5                	jne    f0109049 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01090a4:	83 ec 0c             	sub    $0xc,%esp
f01090a7:	68 da 6f 12 f0       	push   $0xf0126fda
f01090ac:	e8 bb 7e ff ff       	call   f0100f6c <cprintf>
f01090b1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01090b7:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f01090bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090c0:	eb 2c                	jmp    f01090ee <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01090c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090c5:	8b 10                	mov    (%eax),%edx
f01090c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090ca:	8d 48 01             	lea    0x1(%eax),%ecx
f01090cd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01090d0:	83 ec 04             	sub    $0x4,%esp
f01090d3:	52                   	push   %edx
f01090d4:	50                   	push   %eax
f01090d5:	68 d2 6f 12 f0       	push   $0xf0126fd2
f01090da:	e8 8d 7e ff ff       	call   f0100f6c <cprintf>
f01090df:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e5:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01090eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090f2:	74 08                	je     f01090fc <env_page_ws_print+0xf4>
f01090f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f7:	8b 40 10             	mov    0x10(%eax),%eax
f01090fa:	eb 05                	jmp    f0109101 <env_page_ws_print+0xf9>
f01090fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0109101:	8b 55 08             	mov    0x8(%ebp),%edx
f0109104:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f010910a:	8b 45 08             	mov    0x8(%ebp),%eax
f010910d:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0109113:	85 c0                	test   %eax,%eax
f0109115:	75 ab                	jne    f01090c2 <env_page_ws_print+0xba>
f0109117:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010911b:	75 a5                	jne    f01090c2 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010911d:	e9 9f 01 00 00       	jmp    f01092c1 <env_page_ws_print+0x2b9>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0109122:	83 ec 0c             	sub    $0xc,%esp
f0109125:	68 f5 6f 12 f0       	push   $0xf0126ff5
f010912a:	e8 3d 7e ff ff       	call   f0100f6c <cprintf>
f010912f:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0109132:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109139:	e9 71 01 00 00       	jmp    f01092af <env_page_ws_print+0x2a7>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010913e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109141:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109144:	89 d0                	mov    %edx,%eax
f0109146:	01 c0                	add    %eax,%eax
f0109148:	01 d0                	add    %edx,%eax
f010914a:	c1 e0 03             	shl    $0x3,%eax
f010914d:	01 c8                	add    %ecx,%eax
f010914f:	05 8c 00 00 00       	add    $0x8c,%eax
f0109154:	8a 00                	mov    (%eax),%al
f0109156:	84 c0                	test   %al,%al
f0109158:	74 43                	je     f010919d <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010915a:	83 ec 0c             	sub    $0xc,%esp
f010915d:	68 ff 6f 12 f0       	push   $0xf0126fff
f0109162:	e8 05 7e ff ff       	call   f0100f6c <cprintf>
f0109167:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010916a:	8b 45 08             	mov    0x8(%ebp),%eax
f010916d:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109173:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109176:	75 10                	jne    f0109188 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0109178:	83 ec 0c             	sub    $0xc,%esp
f010917b:	68 0e 70 12 f0       	push   $0xf012700e
f0109180:	e8 e7 7d ff ff       	call   f0100f6c <cprintf>
f0109185:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0109188:	83 ec 0c             	sub    $0xc,%esp
f010918b:	68 14 70 12 f0       	push   $0xf0127014
f0109190:	e8 d7 7d ff ff       	call   f0100f6c <cprintf>
f0109195:	83 c4 10             	add    $0x10,%esp
				continue;
f0109198:	e9 0f 01 00 00       	jmp    f01092ac <env_page_ws_print+0x2a4>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010919d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091a3:	89 d0                	mov    %edx,%eax
f01091a5:	01 c0                	add    %eax,%eax
f01091a7:	01 d0                	add    %edx,%eax
f01091a9:	c1 e0 03             	shl    $0x3,%eax
f01091ac:	01 c8                	add    %ecx,%eax
f01091ae:	05 88 00 00 00       	add    $0x88,%eax
f01091b3:	8b 00                	mov    (%eax),%eax
f01091b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01091b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091be:	89 d0                	mov    %edx,%eax
f01091c0:	01 c0                	add    %eax,%eax
f01091c2:	01 d0                	add    %edx,%eax
f01091c4:	c1 e0 03             	shl    $0x3,%eax
f01091c7:	01 c8                	add    %ecx,%eax
f01091c9:	05 90 00 00 00       	add    $0x90,%eax
f01091ce:	8b 00                	mov    (%eax),%eax
f01091d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01091d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01091d6:	8b 40 64             	mov    0x64(%eax),%eax
f01091d9:	83 ec 08             	sub    $0x8,%esp
f01091dc:	ff 75 e8             	pushl  -0x18(%ebp)
f01091df:	50                   	push   %eax
f01091e0:	e8 07 fa ff ff       	call   f0108bec <pt_get_page_permissions>
f01091e5:	83 c4 10             	add    $0x10,%esp
f01091e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01091eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091ee:	83 e0 40             	and    $0x40,%eax
f01091f1:	85 c0                	test   %eax,%eax
f01091f3:	0f 95 c0             	setne  %al
f01091f6:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01091f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091fc:	83 e0 20             	and    $0x20,%eax
f01091ff:	85 c0                	test   %eax,%eax
f0109201:	0f 95 c0             	setne  %al
f0109204:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0109207:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010920a:	25 00 02 00 00       	and    $0x200,%eax
f010920f:	85 c0                	test   %eax,%eax
f0109211:	0f 95 c0             	setne  %al
f0109214:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0109217:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010921a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010921d:	89 d0                	mov    %edx,%eax
f010921f:	01 c0                	add    %eax,%eax
f0109221:	01 d0                	add    %edx,%eax
f0109223:	c1 e0 03             	shl    $0x3,%eax
f0109226:	01 c8                	add    %ecx,%eax
f0109228:	05 88 00 00 00       	add    $0x88,%eax
f010922d:	8b 00                	mov    (%eax),%eax
f010922f:	83 ec 04             	sub    $0x4,%esp
f0109232:	50                   	push   %eax
f0109233:	ff 75 ec             	pushl  -0x14(%ebp)
f0109236:	68 16 70 12 f0       	push   $0xf0127016
f010923b:	e8 2c 7d ff ff       	call   f0100f6c <cprintf>
f0109240:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0109243:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109246:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109249:	89 d0                	mov    %edx,%eax
f010924b:	01 c0                	add    %eax,%eax
f010924d:	01 d0                	add    %edx,%eax
f010924f:	c1 e0 03             	shl    $0x3,%eax
f0109252:	01 c8                	add    %ecx,%eax
f0109254:	05 94 00 00 00       	add    $0x94,%eax
f0109259:	8b 18                	mov    (%eax),%ebx
f010925b:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010925f:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0109263:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0109267:	83 ec 08             	sub    $0x8,%esp
f010926a:	53                   	push   %ebx
f010926b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010926e:	51                   	push   %ecx
f010926f:	52                   	push   %edx
f0109270:	50                   	push   %eax
f0109271:	68 28 70 12 f0       	push   $0xf0127028
f0109276:	e8 f1 7c ff ff       	call   f0100f6c <cprintf>
f010927b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010927e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109281:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109287:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010928a:	75 10                	jne    f010929c <env_page_ws_print+0x294>
			{
				cprintf(" <--");
f010928c:	83 ec 0c             	sub    $0xc,%esp
f010928f:	68 6f 70 12 f0       	push   $0xf012706f
f0109294:	e8 d3 7c ff ff       	call   f0100f6c <cprintf>
f0109299:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010929c:	83 ec 0c             	sub    $0xc,%esp
f010929f:	68 14 70 12 f0       	push   $0xf0127014
f01092a4:	e8 c3 7c ff ff       	call   f0100f6c <cprintf>
f01092a9:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01092ac:	ff 45 ec             	incl   -0x14(%ebp)
f01092af:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01092b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01092bb:	0f 87 7d fe ff ff    	ja     f010913e <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01092c1:	90                   	nop
f01092c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01092c5:	c9                   	leave  
f01092c6:	c3                   	ret    

f01092c7 <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01092c7:	55                   	push   %ebp
f01092c8:	89 e5                	mov    %esp,%ebp
f01092ca:	53                   	push   %ebx
f01092cb:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01092ce:	83 ec 0c             	sub    $0xc,%esp
f01092d1:	68 74 70 12 f0       	push   $0xf0127074
f01092d6:	e8 91 7c ff ff       	call   f0100f6c <cprintf>
f01092db:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01092de:	83 ec 0c             	sub    $0xc,%esp
f01092e1:	68 a9 70 12 f0       	push   $0xf01270a9
f01092e6:	e8 81 7c ff ff       	call   f0100f6c <cprintf>
f01092eb:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01092ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01092f5:	e9 16 01 00 00       	jmp    f0109410 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f01092fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109300:	89 d0                	mov    %edx,%eax
f0109302:	01 c0                	add    %eax,%eax
f0109304:	01 d0                	add    %edx,%eax
f0109306:	c1 e0 03             	shl    $0x3,%eax
f0109309:	01 c8                	add    %ecx,%eax
f010930b:	05 60 d5 01 00       	add    $0x1d560,%eax
f0109310:	8a 00                	mov    (%eax),%al
f0109312:	84 c0                	test   %al,%al
f0109314:	74 43                	je     f0109359 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0109316:	83 ec 0c             	sub    $0xc,%esp
f0109319:	68 ff 6f 12 f0       	push   $0xf0126fff
f010931e:	e8 49 7c ff ff       	call   f0100f6c <cprintf>
f0109323:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0109326:	8b 45 08             	mov    0x8(%ebp),%eax
f0109329:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010932f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109332:	75 10                	jne    f0109344 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0109334:	83 ec 0c             	sub    $0xc,%esp
f0109337:	68 0e 70 12 f0       	push   $0xf012700e
f010933c:	e8 2b 7c ff ff       	call   f0100f6c <cprintf>
f0109341:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0109344:	83 ec 0c             	sub    $0xc,%esp
f0109347:	68 14 70 12 f0       	push   $0xf0127014
f010934c:	e8 1b 7c ff ff       	call   f0100f6c <cprintf>
f0109351:	83 c4 10             	add    $0x10,%esp
			continue;
f0109354:	e9 b4 00 00 00       	jmp    f010940d <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0109359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010935c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010935f:	89 d0                	mov    %edx,%eax
f0109361:	01 c0                	add    %eax,%eax
f0109363:	01 d0                	add    %edx,%eax
f0109365:	c1 e0 03             	shl    $0x3,%eax
f0109368:	01 c8                	add    %ecx,%eax
f010936a:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010936f:	8b 00                	mov    (%eax),%eax
f0109371:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0109374:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109377:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010937a:	89 d0                	mov    %edx,%eax
f010937c:	01 c0                	add    %eax,%eax
f010937e:	01 d0                	add    %edx,%eax
f0109380:	c1 e0 03             	shl    $0x3,%eax
f0109383:	01 c8                	add    %ecx,%eax
f0109385:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010938a:	8b 00                	mov    (%eax),%eax
f010938c:	83 ec 04             	sub    $0x4,%esp
f010938f:	50                   	push   %eax
f0109390:	ff 75 f4             	pushl  -0xc(%ebp)
f0109393:	68 b4 70 12 f0       	push   $0xf01270b4
f0109398:	e8 cf 7b ff ff       	call   f0100f6c <cprintf>
f010939d:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01093a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093a6:	89 d0                	mov    %edx,%eax
f01093a8:	01 c0                	add    %eax,%eax
f01093aa:	01 d0                	add    %edx,%eax
f01093ac:	c1 e0 03             	shl    $0x3,%eax
f01093af:	01 c8                	add    %ecx,%eax
f01093b1:	05 64 d5 01 00       	add    $0x1d564,%eax
f01093b6:	8b 18                	mov    (%eax),%ebx
f01093b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01093bb:	8b 40 64             	mov    0x64(%eax),%eax
f01093be:	83 ec 08             	sub    $0x8,%esp
f01093c1:	ff 75 f0             	pushl  -0x10(%ebp)
f01093c4:	50                   	push   %eax
f01093c5:	e8 fe f8 ff ff       	call   f0108cc8 <pd_is_table_used>
f01093ca:	83 c4 10             	add    $0x10,%esp
f01093cd:	83 ec 04             	sub    $0x4,%esp
f01093d0:	53                   	push   %ebx
f01093d1:	50                   	push   %eax
f01093d2:	68 cc 70 12 f0       	push   $0xf01270cc
f01093d7:	e8 90 7b ff ff       	call   f0100f6c <cprintf>
f01093dc:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01093df:	8b 45 08             	mov    0x8(%ebp),%eax
f01093e2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f01093e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01093eb:	75 10                	jne    f01093fd <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f01093ed:	83 ec 0c             	sub    $0xc,%esp
f01093f0:	68 6f 70 12 f0       	push   $0xf012706f
f01093f5:	e8 72 7b ff ff       	call   f0100f6c <cprintf>
f01093fa:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01093fd:	83 ec 0c             	sub    $0xc,%esp
f0109400:	68 14 70 12 f0       	push   $0xf0127014
f0109405:	e8 62 7b ff ff       	call   f0100f6c <cprintf>
f010940a:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010940d:	ff 45 f4             	incl   -0xc(%ebp)
f0109410:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109414:	0f 86 e0 fe ff ff    	jbe    f01092fa <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010941a:	90                   	nop
f010941b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010941e:	c9                   	leave  
f010941f:	c3                   	ret    

f0109420 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0109420:	55                   	push   %ebp
f0109421:	89 e5                	mov    %esp,%ebp
f0109423:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0109426:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010942d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0109434:	eb 22                	jmp    f0109458 <env_table_ws_get_size+0x38>
f0109436:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109439:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010943c:	89 d0                	mov    %edx,%eax
f010943e:	01 c0                	add    %eax,%eax
f0109440:	01 d0                	add    %edx,%eax
f0109442:	c1 e0 03             	shl    $0x3,%eax
f0109445:	01 c8                	add    %ecx,%eax
f0109447:	05 60 d5 01 00       	add    $0x1d560,%eax
f010944c:	8a 00                	mov    (%eax),%al
f010944e:	84 c0                	test   %al,%al
f0109450:	75 03                	jne    f0109455 <env_table_ws_get_size+0x35>
f0109452:	ff 45 f8             	incl   -0x8(%ebp)
f0109455:	ff 45 fc             	incl   -0x4(%ebp)
f0109458:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010945c:	7e d8                	jle    f0109436 <env_table_ws_get_size+0x16>
	return counter;
f010945e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0109461:	c9                   	leave  
f0109462:	c3                   	ret    

f0109463 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0109463:	55                   	push   %ebp
f0109464:	89 e5                	mov    %esp,%ebp
f0109466:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0109469:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0109470:	eb 4e                	jmp    f01094c0 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0109472:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109475:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109478:	89 d0                	mov    %edx,%eax
f010947a:	01 c0                	add    %eax,%eax
f010947c:	01 d0                	add    %edx,%eax
f010947e:	c1 e0 03             	shl    $0x3,%eax
f0109481:	01 c8                	add    %ecx,%eax
f0109483:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109488:	8b 00                	mov    (%eax),%eax
f010948a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010948d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109490:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109495:	89 c2                	mov    %eax,%edx
f0109497:	8b 45 0c             	mov    0xc(%ebp),%eax
f010949a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010949d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01094a0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01094a5:	39 c2                	cmp    %eax,%edx
f01094a7:	75 14                	jne    f01094bd <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01094a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094ac:	83 ec 08             	sub    $0x8,%esp
f01094af:	50                   	push   %eax
f01094b0:	ff 75 08             	pushl  0x8(%ebp)
f01094b3:	e8 bc 00 00 00       	call   f0109574 <env_table_ws_clear_entry>
f01094b8:	83 c4 10             	add    $0x10,%esp
			break;
f01094bb:	eb 09                	jmp    f01094c6 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01094bd:	ff 45 f4             	incl   -0xc(%ebp)
f01094c0:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01094c4:	7e ac                	jle    f0109472 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01094c6:	90                   	nop
f01094c7:	c9                   	leave  
f01094c8:	c3                   	ret    

f01094c9 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01094c9:	55                   	push   %ebp
f01094ca:	89 e5                	mov    %esp,%ebp
f01094cc:	53                   	push   %ebx
f01094cd:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01094d0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01094d4:	76 19                	jbe    f01094ef <env_table_ws_set_entry+0x26>
f01094d6:	68 f0 70 12 f0       	push   $0xf01270f0
f01094db:	68 16 6f 12 f0       	push   $0xf0126f16
f01094e0:	68 37 01 00 00       	push   $0x137
f01094e5:	68 2c 6f 12 f0       	push   $0xf0126f2c
f01094ea:	e8 2b 6e ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01094ef:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01094f6:	76 19                	jbe    f0109511 <env_table_ws_set_entry+0x48>
f01094f8:	68 4c 6f 12 f0       	push   $0xf0126f4c
f01094fd:	68 16 6f 12 f0       	push   $0xf0126f16
f0109502:	68 38 01 00 00       	push   $0x138
f0109507:	68 2c 6f 12 f0       	push   $0xf0126f2c
f010950c:	e8 09 6e ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0109511:	8b 45 10             	mov    0x10(%ebp),%eax
f0109514:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109517:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010951a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010951f:	89 c1                	mov    %eax,%ecx
f0109521:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109524:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109527:	89 d0                	mov    %edx,%eax
f0109529:	01 c0                	add    %eax,%eax
f010952b:	01 d0                	add    %edx,%eax
f010952d:	c1 e0 03             	shl    $0x3,%eax
f0109530:	01 d8                	add    %ebx,%eax
f0109532:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109537:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0109539:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010953c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010953f:	89 d0                	mov    %edx,%eax
f0109541:	01 c0                	add    %eax,%eax
f0109543:	01 d0                	add    %edx,%eax
f0109545:	c1 e0 03             	shl    $0x3,%eax
f0109548:	01 c8                	add    %ecx,%eax
f010954a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010954f:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0109552:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109555:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109558:	89 d0                	mov    %edx,%eax
f010955a:	01 c0                	add    %eax,%eax
f010955c:	01 d0                	add    %edx,%eax
f010955e:	c1 e0 03             	shl    $0x3,%eax
f0109561:	01 c8                	add    %ecx,%eax
f0109563:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109568:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010956e:	90                   	nop
}
f010956f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109572:	c9                   	leave  
f0109573:	c3                   	ret    

f0109574 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0109574:	55                   	push   %ebp
f0109575:	89 e5                	mov    %esp,%ebp
f0109577:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010957a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010957e:	76 19                	jbe    f0109599 <env_table_ws_clear_entry+0x25>
f0109580:	68 f0 70 12 f0       	push   $0xf01270f0
f0109585:	68 16 6f 12 f0       	push   $0xf0126f16
f010958a:	68 43 01 00 00       	push   $0x143
f010958f:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0109594:	e8 81 6d ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0109599:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010959c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010959f:	89 d0                	mov    %edx,%eax
f01095a1:	01 c0                	add    %eax,%eax
f01095a3:	01 d0                	add    %edx,%eax
f01095a5:	c1 e0 03             	shl    $0x3,%eax
f01095a8:	01 c8                	add    %ecx,%eax
f01095aa:	05 5c d5 01 00       	add    $0x1d55c,%eax
f01095af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01095b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095bb:	89 d0                	mov    %edx,%eax
f01095bd:	01 c0                	add    %eax,%eax
f01095bf:	01 d0                	add    %edx,%eax
f01095c1:	c1 e0 03             	shl    $0x3,%eax
f01095c4:	01 c8                	add    %ecx,%eax
f01095c6:	05 60 d5 01 00       	add    $0x1d560,%eax
f01095cb:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01095ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095d4:	89 d0                	mov    %edx,%eax
f01095d6:	01 c0                	add    %eax,%eax
f01095d8:	01 d0                	add    %edx,%eax
f01095da:	c1 e0 03             	shl    $0x3,%eax
f01095dd:	01 c8                	add    %ecx,%eax
f01095df:	05 64 d5 01 00       	add    $0x1d564,%eax
f01095e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01095ea:	90                   	nop
f01095eb:	c9                   	leave  
f01095ec:	c3                   	ret    

f01095ed <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01095ed:	55                   	push   %ebp
f01095ee:	89 e5                	mov    %esp,%ebp
f01095f0:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01095f3:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01095f7:	76 19                	jbe    f0109612 <env_table_ws_get_virtual_address+0x25>
f01095f9:	68 f0 70 12 f0       	push   $0xf01270f0
f01095fe:	68 16 6f 12 f0       	push   $0xf0126f16
f0109603:	68 4b 01 00 00       	push   $0x14b
f0109608:	68 2c 6f 12 f0       	push   $0xf0126f2c
f010960d:	e8 08 6d ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0109612:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109615:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109618:	89 d0                	mov    %edx,%eax
f010961a:	01 c0                	add    %eax,%eax
f010961c:	01 d0                	add    %edx,%eax
f010961e:	c1 e0 03             	shl    $0x3,%eax
f0109621:	01 c8                	add    %ecx,%eax
f0109623:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109628:	8b 00                	mov    (%eax),%eax
f010962a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010962d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109630:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0109635:	c9                   	leave  
f0109636:	c3                   	ret    

f0109637 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0109637:	55                   	push   %ebp
f0109638:	89 e5                	mov    %esp,%ebp
f010963a:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010963d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0109641:	76 19                	jbe    f010965c <env_table_ws_get_time_stamp+0x25>
f0109643:	68 f0 70 12 f0       	push   $0xf01270f0
f0109648:	68 16 6f 12 f0       	push   $0xf0126f16
f010964d:	68 52 01 00 00       	push   $0x152
f0109652:	68 2c 6f 12 f0       	push   $0xf0126f2c
f0109657:	e8 be 6c ff ff       	call   f010031a <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010965c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010965f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109662:	89 d0                	mov    %edx,%eax
f0109664:	01 c0                	add    %eax,%eax
f0109666:	01 d0                	add    %edx,%eax
f0109668:	c1 e0 03             	shl    $0x3,%eax
f010966b:	01 c8                	add    %ecx,%eax
f010966d:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109672:	8b 00                	mov    (%eax),%eax
}
f0109674:	c9                   	leave  
f0109675:	c3                   	ret    

f0109676 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0109676:	55                   	push   %ebp
f0109677:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0109679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010967c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010967f:	89 d0                	mov    %edx,%eax
f0109681:	01 c0                	add    %eax,%eax
f0109683:	01 d0                	add    %edx,%eax
f0109685:	c1 e0 03             	shl    $0x3,%eax
f0109688:	01 c8                	add    %ecx,%eax
f010968a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010968f:	8a 00                	mov    (%eax),%al
f0109691:	0f b6 c0             	movzbl %al,%eax
}
f0109694:	5d                   	pop    %ebp
f0109695:	c3                   	ret    

f0109696 <double_WS_Size>:
///=================================================================================================
///=================================================================================================
///=================================================================================================

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0109696:	55                   	push   %ebp
f0109697:	89 e5                	mov    %esp,%ebp
f0109699:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f010969c:	83 ec 04             	sub    $0x4,%esp
f010969f:	68 21 71 12 f0       	push   $0xf0127121
f01096a4:	68 62 01 00 00       	push   $0x162
f01096a9:	68 2c 6f 12 f0       	push   $0xf0126f2c
f01096ae:	e8 67 6c ff ff       	call   f010031a <_panic>

f01096b3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01096b3:	55                   	push   %ebp
f01096b4:	89 e5                	mov    %esp,%ebp
f01096b6:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f01096b9:	83 ec 04             	sub    $0x4,%esp
f01096bc:	68 21 71 12 f0       	push   $0xf0127121
f01096c1:	68 67 01 00 00       	push   $0x167
f01096c6:	68 2c 6f 12 f0       	push   $0xf0126f2c
f01096cb:	e8 4a 6c ff ff       	call   f010031a <_panic>

f01096d0 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01096d0:	55                   	push   %ebp
f01096d1:	89 e5                	mov    %esp,%ebp
f01096d3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f01096d6:	83 ec 04             	sub    $0x4,%esp
f01096d9:	68 34 71 12 f0       	push   $0xf0127134
f01096de:	6a 21                	push   $0x21
f01096e0:	68 62 71 12 f0       	push   $0xf0127162
f01096e5:	e8 30 6c ff ff       	call   f010031a <_panic>

f01096ea <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01096ea:	55                   	push   %ebp
f01096eb:	89 e5                	mov    %esp,%ebp
f01096ed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the //panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f01096f0:	83 ec 04             	sub    $0x4,%esp
f01096f3:	68 80 71 12 f0       	push   $0xf0127180
f01096f8:	6a 34                	push   $0x34
f01096fa:	68 62 71 12 f0       	push   $0xf0127162
f01096ff:	e8 16 6c ff ff       	call   f010031a <_panic>

f0109704 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0109704:	55                   	push   %ebp
f0109705:	89 e5                	mov    %esp,%ebp
f0109707:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the //panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f010970a:	83 ec 04             	sub    $0x4,%esp
f010970d:	68 b0 71 12 f0       	push   $0xf01271b0
f0109712:	6a 44                	push   $0x44
f0109714:	68 62 71 12 f0       	push   $0xf0127162
f0109719:	e8 fc 6b ff ff       	call   f010031a <_panic>

f010971e <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010971e:	55                   	push   %ebp
f010971f:	89 e5                	mov    %esp,%ebp
f0109721:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the //panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0109724:	83 ec 04             	sub    $0x4,%esp
f0109727:	68 dc 71 12 f0       	push   $0xf01271dc
f010972c:	6a 52                	push   $0x52
f010972e:	68 62 71 12 f0       	push   $0xf0127162
f0109733:	e8 e2 6b ff ff       	call   f010031a <_panic>

f0109738 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109738:	55                   	push   %ebp
f0109739:	89 e5                	mov    %esp,%ebp
f010973b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f010973e:	83 ec 04             	sub    $0x4,%esp
f0109741:	68 0c 72 12 f0       	push   $0xf012720c
f0109746:	6a 5c                	push   $0x5c
f0109748:	68 62 71 12 f0       	push   $0xf0127162
f010974d:	e8 c8 6b ff ff       	call   f010031a <_panic>

f0109752 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109752:	55                   	push   %ebp
f0109753:	89 e5                	mov    %esp,%ebp
f0109755:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0109758:	83 ec 04             	sub    $0x4,%esp
f010975b:	68 44 72 12 f0       	push   $0xf0127244
f0109760:	6a 69                	push   $0x69
f0109762:	68 62 71 12 f0       	push   $0xf0127162
f0109767:	e8 ae 6b ff ff       	call   f010031a <_panic>

f010976c <sys_sbrk>:

//=====================================
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
//=====================================
void* sys_sbrk(int numOfPages)
{
f010976c:	55                   	push   %ebp
f010976d:	89 e5                	mov    %esp,%ebp
f010976f:	83 ec 18             	sub    $0x18,%esp
	 * 		or the break exceed the limit of the dynamic allocator. If sys_sbrk fails, the net effect should
	 * 		be that sys_sbrk returns (void*) -1 and that the segment break and the process heap are unaffected.
	 * 		You might have to undo any operations you have done so far in this case.
	 */

	struct Env* env = get_cpu_proc(); //the current running Environment to adjust its break limit
f0109772:	e8 f9 0f 00 00       	call   f010a770 <get_cpu_proc>
f0109777:	89 45 f4             	mov    %eax,-0xc(%ebp)

	/*====================================*/
	/*Remove this line before start coding*/
	return (void*)-1 ;
f010977a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	/*====================================*/

	//[PROJECT'24.MS2] Implement this function

}
f010977f:	c9                   	leave  
f0109780:	c3                   	ret    

f0109781 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109781:	55                   	push   %ebp
f0109782:	89 e5                	mov    %esp,%ebp
f0109784:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109787:	e8 1a 71 01 00       	call   f01208a6 <inctst>
	return;
f010978c:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] allocate_user_mem
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f010978d:	c9                   	leave  
f010978e:	c3                   	ret    

f010978f <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010978f:	55                   	push   %ebp
f0109790:	89 e5                	mov    %esp,%ebp
f0109792:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109795:	e8 0c 71 01 00       	call   f01208a6 <inctst>
	return;
f010979a:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f010979b:	c9                   	leave  
f010979c:	c3                   	ret    

f010979d <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010979d:	55                   	push   %ebp
f010979e:	89 e5                	mov    %esp,%ebp
f01097a0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01097a3:	83 ec 04             	sub    $0x4,%esp
f01097a6:	68 7c 72 12 f0       	push   $0xf012727c
f01097ab:	68 bc 00 00 00       	push   $0xbc
f01097b0:	68 62 71 12 f0       	push   $0xf0127162
f01097b5:	e8 60 6b ff ff       	call   f010031a <_panic>

f01097ba <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01097ba:	55                   	push   %ebp
f01097bb:	89 e5                	mov    %esp,%ebp
f01097bd:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f01097c0:	83 ec 04             	sub    $0x4,%esp
f01097c3:	68 bc 72 12 f0       	push   $0xf01272bc
f01097c8:	68 c6 00 00 00       	push   $0xc6
f01097cd:	68 62 71 12 f0       	push   $0xf0127162
f01097d2:	e8 43 6b ff ff       	call   f010031a <_panic>

f01097d7 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01097d7:	55                   	push   %ebp
f01097d8:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01097da:	8b 45 08             	mov    0x8(%ebp),%eax
f01097dd:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f01097e3:	29 d0                	sub    %edx,%eax
f01097e5:	c1 f8 03             	sar    $0x3,%eax
f01097e8:	89 c2                	mov    %eax,%edx
f01097ea:	89 d0                	mov    %edx,%eax
f01097ec:	c1 e0 02             	shl    $0x2,%eax
f01097ef:	01 d0                	add    %edx,%eax
f01097f1:	c1 e0 02             	shl    $0x2,%eax
f01097f4:	01 d0                	add    %edx,%eax
f01097f6:	c1 e0 02             	shl    $0x2,%eax
f01097f9:	01 d0                	add    %edx,%eax
f01097fb:	89 c1                	mov    %eax,%ecx
f01097fd:	c1 e1 08             	shl    $0x8,%ecx
f0109800:	01 c8                	add    %ecx,%eax
f0109802:	89 c1                	mov    %eax,%ecx
f0109804:	c1 e1 10             	shl    $0x10,%ecx
f0109807:	01 c8                	add    %ecx,%eax
f0109809:	01 c0                	add    %eax,%eax
f010980b:	01 d0                	add    %edx,%eax
}
f010980d:	5d                   	pop    %ebp
f010980e:	c3                   	ret    

f010980f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010980f:	55                   	push   %ebp
f0109810:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0109812:	ff 75 08             	pushl  0x8(%ebp)
f0109815:	e8 bd ff ff ff       	call   f01097d7 <to_frame_number>
f010981a:	83 c4 04             	add    $0x4,%esp
f010981d:	c1 e0 0c             	shl    $0xc,%eax
}
f0109820:	c9                   	leave  
f0109821:	c3                   	ret    

f0109822 <env_init>:
// and insert them into the env_free_list.
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//
void env_init(void)
{
f0109822:	55                   	push   %ebp
f0109823:	89 e5                	mov    %esp,%ebp
f0109825:	56                   	push   %esi
f0109826:	53                   	push   %ebx
f0109827:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f010982a:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109831:	e9 28 02 00 00       	jmp    f0109a5e <env_init+0x23c>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109836:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f010983c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010983f:	89 d0                	mov    %edx,%eax
f0109841:	c1 e0 06             	shl    $0x6,%eax
f0109844:	29 d0                	sub    %edx,%eax
f0109846:	c1 e0 02             	shl    $0x2,%eax
f0109849:	01 d0                	add    %edx,%eax
f010984b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109852:	01 d8                	add    %ebx,%eax
f0109854:	c1 e0 03             	shl    $0x3,%eax
f0109857:	01 d0                	add    %edx,%eax
f0109859:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109860:	29 c2                	sub    %eax,%edx
f0109862:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109869:	89 c2                	mov    %eax,%edx
f010986b:	89 d0                	mov    %edx,%eax
f010986d:	01 c8                	add    %ecx,%eax
f010986f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		envs[iEnv].env_id = 0;
f0109876:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f010987c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987f:	89 d0                	mov    %edx,%eax
f0109881:	c1 e0 06             	shl    $0x6,%eax
f0109884:	29 d0                	sub    %edx,%eax
f0109886:	c1 e0 02             	shl    $0x2,%eax
f0109889:	01 d0                	add    %edx,%eax
f010988b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109892:	01 d8                	add    %ebx,%eax
f0109894:	c1 e0 03             	shl    $0x3,%eax
f0109897:	01 d0                	add    %edx,%eax
f0109899:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098a0:	29 c2                	sub    %eax,%edx
f01098a2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098a9:	89 c2                	mov    %eax,%edx
f01098ab:	89 d0                	mov    %edx,%eax
f01098ad:	01 c8                	add    %ecx,%eax
f01098af:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01098b6:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f01098bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098bf:	89 d0                	mov    %edx,%eax
f01098c1:	c1 e0 06             	shl    $0x6,%eax
f01098c4:	29 d0                	sub    %edx,%eax
f01098c6:	c1 e0 02             	shl    $0x2,%eax
f01098c9:	01 d0                	add    %edx,%eax
f01098cb:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01098d2:	01 d8                	add    %ebx,%eax
f01098d4:	c1 e0 03             	shl    $0x3,%eax
f01098d7:	01 d0                	add    %edx,%eax
f01098d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098e0:	29 c2                	sub    %eax,%edx
f01098e2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098e9:	89 c2                	mov    %eax,%edx
f01098eb:	89 d0                	mov    %edx,%eax
f01098ed:	01 c8                	add    %ecx,%eax
f01098ef:	85 c0                	test   %eax,%eax
f01098f1:	75 14                	jne    f0109907 <env_init+0xe5>
f01098f3:	83 ec 04             	sub    $0x4,%esp
f01098f6:	68 e8 72 12 f0       	push   $0xf01272e8
f01098fb:	6a 64                	push   $0x64
f01098fd:	68 0b 73 12 f0       	push   $0xf012730b
f0109902:	e8 13 6a ff ff       	call   f010031a <_panic>
f0109907:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f010990d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109910:	89 d0                	mov    %edx,%eax
f0109912:	c1 e0 06             	shl    $0x6,%eax
f0109915:	29 d0                	sub    %edx,%eax
f0109917:	c1 e0 02             	shl    $0x2,%eax
f010991a:	01 d0                	add    %edx,%eax
f010991c:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109923:	01 d8                	add    %ebx,%eax
f0109925:	c1 e0 03             	shl    $0x3,%eax
f0109928:	01 d0                	add    %edx,%eax
f010992a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109931:	29 c2                	sub    %eax,%edx
f0109933:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010993a:	89 c2                	mov    %eax,%edx
f010993c:	89 d0                	mov    %edx,%eax
f010993e:	01 c8                	add    %ecx,%eax
f0109940:	8b 15 14 5a 55 f0    	mov    0xf0555a14,%edx
f0109946:	89 50 08             	mov    %edx,0x8(%eax)
f0109949:	8b 40 08             	mov    0x8(%eax),%eax
f010994c:	85 c0                	test   %eax,%eax
f010994e:	74 44                	je     f0109994 <env_init+0x172>
f0109950:	8b 0d 14 5a 55 f0    	mov    0xf0555a14,%ecx
f0109956:	8b 1d 10 5a 55 f0    	mov    0xf0555a10,%ebx
f010995c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010995f:	89 d0                	mov    %edx,%eax
f0109961:	c1 e0 06             	shl    $0x6,%eax
f0109964:	29 d0                	sub    %edx,%eax
f0109966:	c1 e0 02             	shl    $0x2,%eax
f0109969:	01 d0                	add    %edx,%eax
f010996b:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
f0109972:	01 f0                	add    %esi,%eax
f0109974:	c1 e0 03             	shl    $0x3,%eax
f0109977:	01 d0                	add    %edx,%eax
f0109979:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109980:	29 c2                	sub    %eax,%edx
f0109982:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109989:	89 c2                	mov    %eax,%edx
f010998b:	89 d0                	mov    %edx,%eax
f010998d:	01 d8                	add    %ebx,%eax
f010998f:	89 41 0c             	mov    %eax,0xc(%ecx)
f0109992:	eb 3e                	jmp    f01099d2 <env_init+0x1b0>
f0109994:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f010999a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010999d:	89 d0                	mov    %edx,%eax
f010999f:	c1 e0 06             	shl    $0x6,%eax
f01099a2:	29 d0                	sub    %edx,%eax
f01099a4:	c1 e0 02             	shl    $0x2,%eax
f01099a7:	01 d0                	add    %edx,%eax
f01099a9:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099b0:	01 d8                	add    %ebx,%eax
f01099b2:	c1 e0 03             	shl    $0x3,%eax
f01099b5:	01 d0                	add    %edx,%eax
f01099b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099be:	29 c2                	sub    %eax,%edx
f01099c0:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01099c7:	89 c2                	mov    %eax,%edx
f01099c9:	89 d0                	mov    %edx,%eax
f01099cb:	01 c8                	add    %ecx,%eax
f01099cd:	a3 18 5a 55 f0       	mov    %eax,0xf0555a18
f01099d2:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f01099d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099db:	89 d0                	mov    %edx,%eax
f01099dd:	c1 e0 06             	shl    $0x6,%eax
f01099e0:	29 d0                	sub    %edx,%eax
f01099e2:	c1 e0 02             	shl    $0x2,%eax
f01099e5:	01 d0                	add    %edx,%eax
f01099e7:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099ee:	01 d8                	add    %ebx,%eax
f01099f0:	c1 e0 03             	shl    $0x3,%eax
f01099f3:	01 d0                	add    %edx,%eax
f01099f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099fc:	29 c2                	sub    %eax,%edx
f01099fe:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a05:	89 c2                	mov    %eax,%edx
f0109a07:	89 d0                	mov    %edx,%eax
f0109a09:	01 c8                	add    %ecx,%eax
f0109a0b:	a3 14 5a 55 f0       	mov    %eax,0xf0555a14
f0109a10:	8b 0d 10 5a 55 f0    	mov    0xf0555a10,%ecx
f0109a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a19:	89 d0                	mov    %edx,%eax
f0109a1b:	c1 e0 06             	shl    $0x6,%eax
f0109a1e:	29 d0                	sub    %edx,%eax
f0109a20:	c1 e0 02             	shl    $0x2,%eax
f0109a23:	01 d0                	add    %edx,%eax
f0109a25:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109a2c:	01 d8                	add    %ebx,%eax
f0109a2e:	c1 e0 03             	shl    $0x3,%eax
f0109a31:	01 d0                	add    %edx,%eax
f0109a33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a3a:	29 c2                	sub    %eax,%edx
f0109a3c:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a43:	89 c2                	mov    %eax,%edx
f0109a45:	89 d0                	mov    %edx,%eax
f0109a47:	01 c8                	add    %ecx,%eax
f0109a49:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0109a50:	a1 20 5a 55 f0       	mov    0xf0555a20,%eax
f0109a55:	40                   	inc    %eax
f0109a56:	a3 20 5a 55 f0       	mov    %eax,0xf0555a20
// returns envs[0].
//
void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109a5b:	ff 4d f4             	decl   -0xc(%ebp)
f0109a5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a62:	0f 89 ce fd ff ff    	jns    f0109836 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109a68:	90                   	nop
f0109a69:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109a6c:	5b                   	pop    %ebx
f0109a6d:	5e                   	pop    %esi
f0109a6e:	5d                   	pop    %ebp
f0109a6f:	c3                   	ret    

f0109a70 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109a70:	55                   	push   %ebp
f0109a71:	89 e5                	mov    %esp,%ebp
f0109a73:	57                   	push   %edi
f0109a74:	56                   	push   %esi
f0109a75:	53                   	push   %ebx
f0109a76:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109a7c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109a83:	83 ec 0c             	sub    $0xc,%esp
f0109a86:	ff 75 08             	pushl  0x8(%ebp)
f0109a89:	e8 c8 24 00 00       	call   f010bf56 <get_user_program_info>
f0109a8e:	83 c4 10             	add    $0x10,%esp
f0109a91:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0)
f0109a94:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109a98:	75 0a                	jne    f0109aa4 <env_create+0x34>
	{
		return NULL;
f0109a9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a9f:	e9 2a 0c 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109aa4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109aa7:	8b 40 08             	mov    0x8(%eax),%eax
f0109aaa:	89 45 b8             	mov    %eax,-0x48(%ebp)

	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109aad:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0109ab4:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0109ac0:	50                   	push   %eax
f0109ac1:	e8 23 11 00 00       	call   f010abe9 <allocate_environment>
f0109ac6:	83 c4 10             	add    $0x10,%esp
f0109ac9:	85 c0                	test   %eax,%eax
f0109acb:	79 0a                	jns    f0109ad7 <env_create+0x67>
	{
		return NULL;
f0109acd:	b8 00 00 00 00       	mov    $0x0,%eax
f0109ad2:	e9 f7 0b 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109ad7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109ada:	8b 00                	mov    (%eax),%eax
f0109adc:	83 ec 0c             	sub    $0xc,%esp
f0109adf:	50                   	push   %eax
f0109ae0:	e8 ca 87 01 00       	call   f01222af <strlen>
f0109ae5:	83 c4 10             	add    $0x10,%esp
f0109ae8:	83 f8 3f             	cmp    $0x3f,%eax
f0109aeb:	7f 1d                	jg     f0109b0a <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0109aed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109af0:	8b 00                	mov    (%eax),%eax
f0109af2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109af8:	83 c2 20             	add    $0x20,%edx
f0109afb:	83 ec 08             	sub    $0x8,%esp
f0109afe:	50                   	push   %eax
f0109aff:	52                   	push   %edx
f0109b00:	e8 f9 87 01 00       	call   f01222fe <strcpy>
f0109b05:	83 c4 10             	add    $0x10,%esp
f0109b08:	eb 1d                	jmp    f0109b27 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109b0a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109b0d:	8b 00                	mov    (%eax),%eax
f0109b0f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109b15:	83 c2 20             	add    $0x20,%edx
f0109b18:	83 ec 04             	sub    $0x4,%esp
f0109b1b:	6a 3f                	push   $0x3f
f0109b1d:	50                   	push   %eax
f0109b1e:	52                   	push   %edx
f0109b1f:	e8 08 88 01 00       	call   f012232c <strncpy>
f0109b24:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0109b27:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%ebp)
f0109b2e:	00 00 00 

		allocate_frame(&p) ;
f0109b31:	83 ec 0c             	sub    $0xc,%esp
f0109b34:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
f0109b3a:	50                   	push   %eax
f0109b3b:	e8 90 e6 ff ff       	call   f01081d0 <allocate_frame>
f0109b40:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0109b43:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0109b4f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b55:	83 ec 0c             	sub    $0xc,%esp
f0109b58:	50                   	push   %eax
f0109b59:	e8 b1 fc ff ff       	call   f010980f <to_physical_address>
f0109b5e:	83 c4 10             	add    $0x10,%esp
f0109b61:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0109b64:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b67:	c1 e8 0c             	shr    $0xc,%eax
f0109b6a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0109b6d:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0109b72:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0109b75:	72 17                	jb     f0109b8e <env_create+0x11e>
f0109b77:	ff 75 b0             	pushl  -0x50(%ebp)
f0109b7a:	68 28 73 12 f0       	push   $0xf0127328
f0109b7f:	68 9c 00 00 00       	push   $0x9c
f0109b84:	68 0b 73 12 f0       	push   $0xf012730b
f0109b89:	e8 8c 67 ff ff       	call   f010031a <_panic>
f0109b8e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0109b96:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0109b99:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b9f:	83 ec 0c             	sub    $0xc,%esp
f0109ba2:	50                   	push   %eax
f0109ba3:	e8 67 fc ff ff       	call   f010980f <to_physical_address>
f0109ba8:	83 c4 10             	add    $0x10,%esp
f0109bab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109bae:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109bb7:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109bbd:	83 ec 0c             	sub    $0xc,%esp
f0109bc0:	6a 02                	push   $0x2
f0109bc2:	e8 ff 4a 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0109bc7:	83 c4 10             	add    $0x10,%esp
f0109bca:	85 c0                	test   %eax,%eax
f0109bcc:	74 21                	je     f0109bef <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0109bce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bd4:	8b 55 10             	mov    0x10(%ebp),%edx
f0109bd7:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109bdd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109be3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109be6:	2b 55 10             	sub    0x10(%ebp),%edx
f0109be9:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109bef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109bf3:	75 12                	jne    f0109c07 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109bf5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bfb:	c7 80 3c da 01 00 0a 	movl   $0xa,0x1da3c(%eax)
f0109c02:	00 00 00 
f0109c05:	eb 0f                	jmp    f0109c16 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109c07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c0d:	8b 55 14             	mov    0x14(%ebp),%edx
f0109c10:	89 90 3c da 01 00    	mov    %edx,0x1da3c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109c16:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c1c:	83 ec 04             	sub    $0x4,%esp
f0109c1f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0109c22:	ff 75 a8             	pushl  -0x58(%ebp)
f0109c25:	50                   	push   %eax
f0109c26:	e8 76 18 00 00       	call   f010b4a1 <initialize_environment>
f0109c2b:	83 c4 10             	add    $0x10,%esp
	//	3- uint32 size_in_memory: actual size required by this segment in memory
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[5] 2024: Disable the interrupt before switching the directories
	pushcli();
f0109c2e:	e8 8d d5 ff ff       	call   f01071c0 <pushcli>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109c33:	0f 20 d8             	mov    %cr3,%eax
f0109c36:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0109c39:	8b 45 98             	mov    -0x68(%ebp),%eax
	{
		//[6] switch to user page directory
		uint32 cur_phys_pgdir = rcr3() ;
f0109c3c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		lcr3(e->env_cr3) ;
f0109c3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c45:	8b 40 68             	mov    0x68(%eax),%eax
f0109c48:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109c4e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109c54:	0f 22 d8             	mov    %eax,%cr3

		//[7] load each program segment into user virtual space
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109c57:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int segment_counter=0;
f0109c5e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0109c65:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c6b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0109c71:	48                   	dec    %eax
f0109c72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		uint32 lastTableNumber=0xffffffff;
f0109c75:	c7 85 38 ff ff ff ff 	movl   $0xffffffff,-0xc8(%ebp)
f0109c7c:	ff ff ff 

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109c7f:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0109c85:	83 ec 08             	sub    $0x8,%esp
f0109c88:	ff 75 b8             	pushl  -0x48(%ebp)
f0109c8b:	50                   	push   %eax
f0109c8c:	e8 d7 1f 00 00       	call   f010bc68 <PROGRAM_SEGMENT_FIRST>
f0109c91:	83 c4 0c             	add    $0xc,%esp
f0109c94:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109c9a:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0109ca0:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109ca5:	89 c7                	mov    %eax,%edi
f0109ca7:	89 d6                	mov    %edx,%esi
f0109ca9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109cab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109cb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cb7:	8b 40 10             	mov    0x10(%eax),%eax
f0109cba:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109cbd:	75 07                	jne    f0109cc6 <env_create+0x256>
f0109cbf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109cc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ccc:	e9 24 03 00 00       	jmp    f0109ff5 <env_create+0x585>
		{
			segment_counter++;
f0109cd1:	ff 45 e0             	incl   -0x20(%ebp)
			LOG_STRING("===============================================================================");
			LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
					seg->size_in_memory, seg->virtual_address));
			LOG_STRING("===============================================================================");

			uint32 allocated_pages=0;
f0109cd4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0109cdb:	00 00 00 
			program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109cde:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ce4:	83 ec 0c             	sub    $0xc,%esp
f0109ce7:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f0109ced:	52                   	push   %edx
f0109cee:	ff 75 dc             	pushl  -0x24(%ebp)
f0109cf1:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0109cf7:	52                   	push   %edx
f0109cf8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109cfb:	50                   	push   %eax
f0109cfc:	e8 a6 0f 00 00       	call   f010aca7 <program_segment_alloc_map_copy_workingset>
f0109d01:	83 c4 20             	add    $0x20,%esp

			remaining_ws_pages -= allocated_pages;
f0109d04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0109d0a:	29 45 dc             	sub    %eax,-0x24(%ebp)
			LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
			LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


			/// 7.2) temporary initialize 1st page in memory then writing it on page file
			uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d10:	8b 00                	mov    (%eax),%eax
f0109d12:	89 45 94             	mov    %eax,-0x6c(%ebp)
			uint32 seg_va = (uint32) seg->virtual_address ;
f0109d15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d18:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d1b:	89 45 90             	mov    %eax,-0x70(%ebp)

			uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109d1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d21:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0109d24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109d27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109d2c:	89 45 88             	mov    %eax,-0x78(%ebp)
			uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109d2f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0109d36:	8b 55 90             	mov    -0x70(%ebp),%edx
f0109d39:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109d3c:	01 d0                	add    %edx,%eax
f0109d3e:	48                   	dec    %eax
f0109d3f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0109d42:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d4a:	f7 75 84             	divl   -0x7c(%ebp)
f0109d4d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d50:	29 d0                	sub    %edx,%eax
f0109d52:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
			uint32 offset_first_page = seg_va  - start_first_page ;
f0109d58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d5b:	2b 45 88             	sub    -0x78(%ebp),%eax
f0109d5e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

			memset(ptr_temp_page , 0, PAGE_SIZE);
f0109d64:	a1 64 91 55 f0       	mov    0xf0559164,%eax
f0109d69:	83 ec 04             	sub    $0x4,%esp
f0109d6c:	68 00 10 00 00       	push   $0x1000
f0109d71:	6a 00                	push   $0x0
f0109d73:	50                   	push   %eax
f0109d74:	e8 24 87 01 00       	call   f012249d <memset>
f0109d79:	83 c4 10             	add    $0x10,%esp
			uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109d7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109d7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109d82:	8b 15 64 91 55 f0    	mov    0xf0559164,%edx
f0109d88:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109d8e:	01 d0                	add    %edx,%eax
f0109d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109d93:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d96:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109d99:	eb 13                	jmp    f0109dae <env_create+0x33e>
			{
				*dst_ptr = *src_ptr ;
f0109d9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109d9e:	8a 10                	mov    (%eax),%dl
f0109da0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109da3:	88 10                	mov    %dl,(%eax)

			memset(ptr_temp_page , 0, PAGE_SIZE);
			uint8 *src_ptr =  (uint8*) dataSrc_va;
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109da5:	ff 45 cc             	incl   -0x34(%ebp)
f0109da8:	ff 45 d4             	incl   -0x2c(%ebp)
f0109dab:	ff 45 d0             	incl   -0x30(%ebp)
f0109dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109db1:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109db7:	72 e2                	jb     f0109d9b <env_create+0x32b>
			{
				*dst_ptr = *src_ptr ;
			}

			if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109db9:	8b 15 64 91 55 f0    	mov    0xf0559164,%edx
f0109dbf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109dc5:	83 ec 04             	sub    $0x4,%esp
f0109dc8:	52                   	push   %edx
f0109dc9:	ff 75 88             	pushl  -0x78(%ebp)
f0109dcc:	50                   	push   %eax
f0109dcd:	e8 76 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109dd2:	83 c4 10             	add    $0x10,%esp
f0109dd5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109dd8:	75 17                	jne    f0109df1 <env_create+0x381>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109dda:	83 ec 04             	sub    $0x4,%esp
f0109ddd:	68 58 73 12 f0       	push   $0xf0127358
f0109de2:	68 f2 00 00 00       	push   $0xf2
f0109de7:	68 0b 73 12 f0       	push   $0xf012730b
f0109dec:	e8 29 65 ff ff       	call   f010031a <_panic>
			//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109df1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109df4:	8b 50 04             	mov    0x4(%eax),%edx
f0109df7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109dfa:	01 d0                	add    %edx,%eax
f0109dfc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0109e02:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109e08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e0d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			uint32 end_last_page = seg_va  + seg->size_in_file;
f0109e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e16:	8b 50 04             	mov    0x4(%eax),%edx
f0109e19:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109e1c:	01 d0                	add    %edx,%eax
f0109e1e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e24:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109e2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109e2d:	eb 43                	jmp    f0109e72 <env_create+0x402>
			{
				if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109e2f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109e32:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109e38:	83 ec 04             	sub    $0x4,%esp
f0109e3b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109e3e:	52                   	push   %edx
f0109e3f:	50                   	push   %eax
f0109e40:	e8 03 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109e45:	83 c4 10             	add    $0x10,%esp
f0109e48:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109e4b:	75 17                	jne    f0109e64 <env_create+0x3f4>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109e4d:	83 ec 04             	sub    $0x4,%esp
f0109e50:	68 58 73 12 f0       	push   $0xf0127358
f0109e55:	68 ff 00 00 00       	push   $0xff
f0109e5a:	68 0b 73 12 f0       	push   $0xf012730b
f0109e5f:	e8 b6 64 ff ff       	call   f010031a <_panic>
			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
			uint32 end_last_page = seg_va  + seg->size_in_file;

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e64:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109e6b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109e72:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109e75:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0109e7b:	72 b2                	jb     f0109e2f <env_create+0x3bf>
			}
			//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
f0109e7d:	a1 64 91 55 f0       	mov    0xf0559164,%eax
f0109e82:	89 45 d0             	mov    %eax,-0x30(%ebp)
			memset(dst_ptr, 0, PAGE_SIZE);
f0109e85:	83 ec 04             	sub    $0x4,%esp
f0109e88:	68 00 10 00 00       	push   $0x1000
f0109e8d:	6a 00                	push   $0x0
f0109e8f:	ff 75 d0             	pushl  -0x30(%ebp)
f0109e92:	e8 06 86 01 00       	call   f012249d <memset>
f0109e97:	83 c4 10             	add    $0x10,%esp

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109e9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109ea0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109ea3:	eb 13                	jmp    f0109eb8 <env_create+0x448>
			{
				*dst_ptr = *src_ptr;
f0109ea5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109ea8:	8a 10                	mov    (%eax),%dl
f0109eaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109ead:	88 10                	mov    %dl,(%eax)
			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
			memset(dst_ptr, 0, PAGE_SIZE);

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109eaf:	ff 45 cc             	incl   -0x34(%ebp)
f0109eb2:	ff 45 d4             	incl   -0x2c(%ebp)
f0109eb5:	ff 45 d0             	incl   -0x30(%ebp)
f0109eb8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109ebb:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0109ec1:	72 e2                	jb     f0109ea5 <env_create+0x435>
			{
				*dst_ptr = *src_ptr;
			}
			if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109ec3:	8b 15 64 91 55 f0    	mov    0xf0559164,%edx
f0109ec9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ecf:	83 ec 04             	sub    $0x4,%esp
f0109ed2:	52                   	push   %edx
f0109ed3:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109ed9:	50                   	push   %eax
f0109eda:	e8 69 a2 ff ff       	call   f0104148 <pf_add_env_page>
f0109edf:	83 c4 10             	add    $0x10,%esp
f0109ee2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109ee5:	75 17                	jne    f0109efe <env_create+0x48e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109ee7:	83 ec 04             	sub    $0x4,%esp
f0109eea:	68 58 73 12 f0       	push   $0xf0127358
f0109eef:	68 0e 01 00 00       	push   $0x10e
f0109ef4:	68 0b 73 12 f0       	push   $0xf012730b
f0109ef9:	e8 1c 64 ff ff       	call   f010031a <_panic>

			//LOG_STRING(" -------------------- PAGE FILE: last page is written");

			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109efe:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0109f05:	10 00 00 
f0109f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f0b:	8b 50 04             	mov    0x4(%eax),%edx
f0109f0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f11:	01 c2                	add    %eax,%edx
f0109f13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109f19:	01 d0                	add    %edx,%eax
f0109f1b:	48                   	dec    %eax
f0109f1c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0109f22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f28:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f2d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0109f33:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f39:	29 d0                	sub    %edx,%eax
f0109f3b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109f3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f41:	8b 50 08             	mov    0x8(%eax),%edx
f0109f44:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f47:	01 d0                	add    %edx,%eax
f0109f49:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109f4c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f52:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109f59:	eb 41                	jmp    f0109f9c <env_create+0x52c>
			{
				if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109f5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109f61:	83 ec 04             	sub    $0x4,%esp
f0109f64:	6a 01                	push   $0x1
f0109f66:	ff 75 c8             	pushl  -0x38(%ebp)
f0109f69:	50                   	push   %eax
f0109f6a:	e8 ab a0 ff ff       	call   f010401a <pf_add_empty_env_page>
f0109f6f:	83 c4 10             	add    $0x10,%esp
f0109f72:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109f75:	75 17                	jne    f0109f8e <env_create+0x51e>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109f77:	83 ec 04             	sub    $0x4,%esp
f0109f7a:	68 58 73 12 f0       	push   $0xf0127358
f0109f7f:	68 1b 01 00 00       	push   $0x11b
f0109f84:	68 0b 73 12 f0       	push   $0xf012730b
f0109f89:	e8 8c 63 ff ff       	call   f010031a <_panic>
			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f8e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109f95:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109f9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0109fa3:	10 00 00 
f0109fa6:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109fac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109fb2:	01 d0                	add    %edx,%eax
f0109fb4:	48                   	dec    %eax
f0109fb5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109fbb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0109fc6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109fcc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fd2:	29 d0                	sub    %edx,%eax
f0109fd4:	89 c2                	mov    %eax,%edx
f0109fd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109fd9:	39 c2                	cmp    %eax,%edx
f0109fdb:	0f 87 7a ff ff ff    	ja     f0109f5b <env_create+0x4eb>
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
		int segment_counter=0;
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
		uint32 lastTableNumber=0xffffffff;

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109fe1:	83 ec 08             	sub    $0x8,%esp
f0109fe4:	ff 75 b8             	pushl  -0x48(%ebp)
f0109fe7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109fea:	e8 6e 1b 00 00       	call   f010bb5d <PROGRAM_SEGMENT_NEXT>
f0109fef:	83 c4 10             	add    $0x10,%esp
f0109ff2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ff5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109ff9:	0f 85 d2 fc ff ff    	jne    f0109cd1 <env_create+0x261>
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
f0109fff:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		for(;i<(e->page_WS_max_size); i++)
f010a006:	e9 a0 00 00 00       	jmp    f010a0ab <env_create+0x63b>
		{
			if(e->ptr_pageWorkingSet[i].empty == 0)
f010a00b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a011:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a014:	89 d0                	mov    %edx,%eax
f010a016:	01 c0                	add    %eax,%eax
f010a018:	01 d0                	add    %edx,%eax
f010a01a:	c1 e0 03             	shl    $0x3,%eax
f010a01d:	01 c8                	add    %ecx,%eax
f010a01f:	05 8c 00 00 00       	add    $0x8c,%eax
f010a024:	8a 00                	mov    (%eax),%al
f010a026:	84 c0                	test   %al,%al
f010a028:	75 7e                	jne    f010a0a8 <env_create+0x638>
			{
				uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010a02a:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a030:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 88 00 00 00       	add    $0x88,%eax
f010a043:	8b 00                	mov    (%eax),%eax
f010a045:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
				uint32* ptr_page_table;

				//Here, page tables of all working set pages should be exist in memory
				//So, get_page_table should return the existing table
				get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010a04b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a051:	8b 40 64             	mov    0x64(%eax),%eax
f010a054:	83 ec 04             	sub    $0x4,%esp
f010a057:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f010a05d:	52                   	push   %edx
f010a05e:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f010a064:	50                   	push   %eax
f010a065:	e8 a3 e3 ff ff       	call   f010840d <get_page_table>
f010a06a:	83 c4 10             	add    $0x10,%esp
				ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010a06d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010a073:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010a079:	c1 ea 0c             	shr    $0xc,%edx
f010a07c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a082:	c1 e2 02             	shl    $0x2,%edx
f010a085:	01 d0                	add    %edx,%eax
f010a087:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f010a08d:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010a093:	c1 e9 0c             	shr    $0xc,%ecx
f010a096:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010a09c:	c1 e1 02             	shl    $0x2,%ecx
f010a09f:	01 ca                	add    %ecx,%edx
f010a0a1:	8b 12                	mov    (%edx),%edx
f010a0a3:	83 e2 bf             	and    $0xffffffbf,%edx
f010a0a6:	89 10                	mov    %edx,(%eax)
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
		for(;i<(e->page_WS_max_size); i++)
f010a0a8:	ff 45 c4             	incl   -0x3c(%ebp)
f010a0ab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0b1:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010a0b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a0ba:	39 c2                	cmp    %eax,%edx
f010a0bc:	0f 87 49 ff ff ff    	ja     f010a00b <env_create+0x59b>
			}
		}
#endif

		//[9] now set the entry point of the environment
		set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010a0c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010a0c5:	8b 50 08             	mov    0x8(%eax),%edx
f010a0c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0ce:	83 ec 08             	sub    $0x8,%esp
f010a0d1:	52                   	push   %edx
f010a0d2:	50                   	push   %eax
f010a0d3:	e8 45 1a 00 00       	call   f010bb1d <set_environment_entry_point>
f010a0d8:	83 c4 10             	add    $0x10,%esp

		//[10] Allocate and map ONE page for the program's initial stack
		// at virtual address USTACKTOP - PAGE_SIZE.
		// we assume that the stack is counted in the environment working set

		e->initNumStackPages = 1;
f010a0db:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0e1:	c7 40 6c 01 00 00 00 	movl   $0x1,0x6c(%eax)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010a0e8:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f010a0ef:	d0 bf ee 

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010a0f2:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a0f9:	e9 27 05 00 00       	jmp    f010a625 <env_create+0xbb5>
		{
			//allocate and map
			struct FrameInfo *pp = NULL;
f010a0fe:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f010a105:	00 00 00 
			allocate_frame(&pp);
f010a108:	83 ec 0c             	sub    $0xc,%esp
f010a10b:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f010a111:	50                   	push   %eax
f010a112:	e8 b9 e0 ff ff       	call   f01081d0 <allocate_frame>
f010a117:	83 c4 10             	add    $0x10,%esp
			loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010a11a:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010a120:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a126:	8b 40 64             	mov    0x64(%eax),%eax
f010a129:	6a 06                	push   $0x6
f010a12b:	ff 75 c0             	pushl  -0x40(%ebp)
f010a12e:	52                   	push   %edx
f010a12f:	50                   	push   %eax
f010a130:	e8 af e6 ff ff       	call   f01087e4 <loadtime_map_frame>
f010a135:	83 c4 10             	add    $0x10,%esp

			//initialize new page by 0's
			memset((void*)stackVa, 0, PAGE_SIZE);
f010a138:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a13b:	83 ec 04             	sub    $0x4,%esp
f010a13e:	68 00 10 00 00       	push   $0x1000
f010a143:	6a 00                	push   $0x0
f010a145:	50                   	push   %eax
f010a146:	e8 52 83 01 00       	call   f012249d <memset>
f010a14b:	83 c4 10             	add    $0x10,%esp
					{
						LIST_INSERT_HEAD(&(e->SecondList), wse);
					}
				}
#else
				env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010a14e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a154:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010a15a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a160:	83 ec 04             	sub    $0x4,%esp
f010a163:	ff 75 c0             	pushl  -0x40(%ebp)
f010a166:	52                   	push   %edx
f010a167:	50                   	push   %eax
f010a168:	e8 ae ec ff ff       	call   f0108e1b <env_page_ws_set_entry>
f010a16d:	83 c4 10             	add    $0x10,%esp
				uint32 lastWSIndex = e->page_last_WS_index ++;
f010a170:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a176:	8b 82 58 d5 01 00    	mov    0x1d558(%edx),%eax
f010a17c:	8d 48 01             	lea    0x1(%eax),%ecx
f010a17f:	89 8a 58 d5 01 00    	mov    %ecx,0x1d558(%edx)
f010a185:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
				e->page_last_WS_index %= (e->page_WS_max_size);
f010a18b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a191:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a197:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010a19d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a1a3:	8b 9a 84 00 00 00    	mov    0x84(%edx),%ebx
f010a1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010a1ae:	f7 f3                	div    %ebx
f010a1b0:	89 d0                	mov    %edx,%eax
f010a1b2:	89 81 58 d5 01 00    	mov    %eax,0x1d558(%ecx)

				if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a1b8:	83 ec 0c             	sub    $0xc,%esp
f010a1bb:	6a 02                	push   $0x2
f010a1bd:	e8 04 45 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010a1c2:	83 c4 10             	add    $0x10,%esp
f010a1c5:	85 c0                	test   %eax,%eax
f010a1c7:	0f 84 34 04 00 00    	je     f010a601 <env_create+0xb91>
				{
					LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a1cd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a1d3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	83 e8 80             	sub    $0xffffff80,%eax
f010a1e5:	01 c8                	add    %ecx,%eax
f010a1e7:	83 c0 08             	add    $0x8,%eax
f010a1ea:	85 c0                	test   %eax,%eax
f010a1ec:	75 17                	jne    f010a205 <env_create+0x795>
f010a1ee:	83 ec 04             	sub    $0x4,%esp
f010a1f1:	68 9d 73 12 f0       	push   $0xf012739d
f010a1f6:	68 7a 01 00 00       	push   $0x17a
f010a1fb:	68 0b 73 12 f0       	push   $0xf012730b
f010a200:	e8 15 61 ff ff       	call   f010031a <_panic>
f010a205:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a20b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a211:	89 d0                	mov    %edx,%eax
f010a213:	01 c0                	add    %eax,%eax
f010a215:	01 d0                	add    %edx,%eax
f010a217:	c1 e0 03             	shl    $0x3,%eax
f010a21a:	01 c8                	add    %ecx,%eax
f010a21c:	05 98 00 00 00       	add    $0x98,%eax
f010a221:	8b 00                	mov    (%eax),%eax
f010a223:	85 c0                	test   %eax,%eax
f010a225:	74 41                	je     f010a268 <env_create+0x7f8>
f010a227:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a22d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a233:	89 d0                	mov    %edx,%eax
f010a235:	01 c0                	add    %eax,%eax
f010a237:	01 d0                	add    %edx,%eax
f010a239:	c1 e0 03             	shl    $0x3,%eax
f010a23c:	01 c8                	add    %ecx,%eax
f010a23e:	05 98 00 00 00       	add    $0x98,%eax
f010a243:	8b 10                	mov    (%eax),%edx
f010a245:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a24b:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a251:	89 c8                	mov    %ecx,%eax
f010a253:	01 c0                	add    %eax,%eax
f010a255:	01 c8                	add    %ecx,%eax
f010a257:	c1 e0 03             	shl    $0x3,%eax
f010a25a:	01 d8                	add    %ebx,%eax
f010a25c:	05 9c 00 00 00       	add    $0x9c,%eax
f010a261:	8b 00                	mov    (%eax),%eax
f010a263:	89 42 14             	mov    %eax,0x14(%edx)
f010a266:	eb 2a                	jmp    f010a292 <env_create+0x822>
f010a268:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a26e:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a274:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a27a:	89 c8                	mov    %ecx,%eax
f010a27c:	01 c0                	add    %eax,%eax
f010a27e:	01 c8                	add    %ecx,%eax
f010a280:	c1 e0 03             	shl    $0x3,%eax
f010a283:	01 d8                	add    %ebx,%eax
f010a285:	05 9c 00 00 00       	add    $0x9c,%eax
f010a28a:	8b 00                	mov    (%eax),%eax
f010a28c:	89 82 4c d5 01 00    	mov    %eax,0x1d54c(%edx)
f010a292:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a298:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a29e:	89 d0                	mov    %edx,%eax
f010a2a0:	01 c0                	add    %eax,%eax
f010a2a2:	01 d0                	add    %edx,%eax
f010a2a4:	c1 e0 03             	shl    $0x3,%eax
f010a2a7:	01 c8                	add    %ecx,%eax
f010a2a9:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2ae:	8b 00                	mov    (%eax),%eax
f010a2b0:	85 c0                	test   %eax,%eax
f010a2b2:	74 41                	je     f010a2f5 <env_create+0x885>
f010a2b4:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a2ba:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a2c0:	89 d0                	mov    %edx,%eax
f010a2c2:	01 c0                	add    %eax,%eax
f010a2c4:	01 d0                	add    %edx,%eax
f010a2c6:	c1 e0 03             	shl    $0x3,%eax
f010a2c9:	01 c8                	add    %ecx,%eax
f010a2cb:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2d0:	8b 10                	mov    (%eax),%edx
f010a2d2:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a2d8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a2de:	89 c8                	mov    %ecx,%eax
f010a2e0:	01 c0                	add    %eax,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	c1 e0 03             	shl    $0x3,%eax
f010a2e7:	01 d8                	add    %ebx,%eax
f010a2e9:	05 98 00 00 00       	add    $0x98,%eax
f010a2ee:	8b 00                	mov    (%eax),%eax
f010a2f0:	89 42 10             	mov    %eax,0x10(%edx)
f010a2f3:	eb 2a                	jmp    f010a31f <env_create+0x8af>
f010a2f5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a2fb:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a301:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a307:	89 c8                	mov    %ecx,%eax
f010a309:	01 c0                	add    %eax,%eax
f010a30b:	01 c8                	add    %ecx,%eax
f010a30d:	c1 e0 03             	shl    $0x3,%eax
f010a310:	01 d8                	add    %ebx,%eax
f010a312:	05 98 00 00 00       	add    $0x98,%eax
f010a317:	8b 00                	mov    (%eax),%eax
f010a319:	89 82 48 d5 01 00    	mov    %eax,0x1d548(%edx)
f010a31f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a325:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	01 c8                	add    %ecx,%eax
f010a336:	05 98 00 00 00       	add    $0x98,%eax
f010a33b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a341:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a347:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a34d:	89 d0                	mov    %edx,%eax
f010a34f:	01 c0                	add    %eax,%eax
f010a351:	01 d0                	add    %edx,%eax
f010a353:	c1 e0 03             	shl    $0x3,%eax
f010a356:	01 c8                	add    %ecx,%eax
f010a358:	05 9c 00 00 00       	add    $0x9c,%eax
f010a35d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a363:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a369:	8b 90 54 d5 01 00    	mov    0x1d554(%eax),%edx
f010a36f:	4a                   	dec    %edx
f010a370:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
					//Now: we are sure that at least the top page in the stack will be added to Active list
					//Since we left 1 empty location in the Active list when we loaded the program segments
					if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010a376:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a37c:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a382:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a388:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a38e:	39 c2                	cmp    %eax,%edx
f010a390:	0f 83 38 01 00 00    	jae    f010a4ce <env_create+0xa5e>
					{
						LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a396:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a39c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a3a2:	89 d0                	mov    %edx,%eax
f010a3a4:	01 c0                	add    %eax,%eax
f010a3a6:	01 d0                	add    %edx,%eax
f010a3a8:	c1 e0 03             	shl    $0x3,%eax
f010a3ab:	83 e8 80             	sub    $0xffffff80,%eax
f010a3ae:	01 c8                	add    %ecx,%eax
f010a3b0:	83 c0 08             	add    $0x8,%eax
f010a3b3:	85 c0                	test   %eax,%eax
f010a3b5:	75 17                	jne    f010a3ce <env_create+0x95e>
f010a3b7:	83 ec 04             	sub    $0x4,%esp
f010a3ba:	68 e8 72 12 f0       	push   $0xf01272e8
f010a3bf:	68 7f 01 00 00       	push   $0x17f
f010a3c4:	68 0b 73 12 f0       	push   $0xf012730b
f010a3c9:	e8 4c 5f ff ff       	call   f010031a <_panic>
f010a3ce:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a3d4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a3da:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010a3e0:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a3e6:	89 d8                	mov    %ebx,%eax
f010a3e8:	01 c0                	add    %eax,%eax
f010a3ea:	01 d8                	add    %ebx,%eax
f010a3ec:	c1 e0 03             	shl    $0x3,%eax
f010a3ef:	01 d0                	add    %edx,%eax
f010a3f1:	05 98 00 00 00       	add    $0x98,%eax
f010a3f6:	89 08                	mov    %ecx,(%eax)
f010a3f8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a3fe:	89 c8                	mov    %ecx,%eax
f010a400:	01 c0                	add    %eax,%eax
f010a402:	01 c8                	add    %ecx,%eax
f010a404:	c1 e0 03             	shl    $0x3,%eax
f010a407:	01 d0                	add    %edx,%eax
f010a409:	05 98 00 00 00       	add    $0x98,%eax
f010a40e:	8b 00                	mov    (%eax),%eax
f010a410:	85 c0                	test   %eax,%eax
f010a412:	74 2e                	je     f010a442 <env_create+0x9d2>
f010a414:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a41a:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010a420:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a426:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a42c:	89 c8                	mov    %ecx,%eax
f010a42e:	01 c0                	add    %eax,%eax
f010a430:	01 c8                	add    %ecx,%eax
f010a432:	c1 e0 03             	shl    $0x3,%eax
f010a435:	83 e8 80             	sub    $0xffffff80,%eax
f010a438:	01 d8                	add    %ebx,%eax
f010a43a:	83 c0 08             	add    $0x8,%eax
f010a43d:	89 42 14             	mov    %eax,0x14(%edx)
f010a440:	eb 29                	jmp    f010a46b <env_create+0x9fb>
f010a442:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a448:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a44e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a454:	89 c8                	mov    %ecx,%eax
f010a456:	01 c0                	add    %eax,%eax
f010a458:	01 c8                	add    %ecx,%eax
f010a45a:	c1 e0 03             	shl    $0x3,%eax
f010a45d:	83 e8 80             	sub    $0xffffff80,%eax
f010a460:	01 d8                	add    %ebx,%eax
f010a462:	83 c0 08             	add    $0x8,%eax
f010a465:	89 82 14 da 01 00    	mov    %eax,0x1da14(%edx)
f010a46b:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a471:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a477:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a47d:	89 c8                	mov    %ecx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 c8                	add    %ecx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	83 e8 80             	sub    $0xffffff80,%eax
f010a489:	01 d8                	add    %ebx,%eax
f010a48b:	83 c0 08             	add    $0x8,%eax
f010a48e:	89 82 10 da 01 00    	mov    %eax,0x1da10(%edx)
f010a494:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a49a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4a0:	89 d0                	mov    %edx,%eax
f010a4a2:	01 c0                	add    %eax,%eax
f010a4a4:	01 d0                	add    %edx,%eax
f010a4a6:	c1 e0 03             	shl    $0x3,%eax
f010a4a9:	01 c8                	add    %ecx,%eax
f010a4ab:	05 9c 00 00 00       	add    $0x9c,%eax
f010a4b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a4bc:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a4c2:	42                   	inc    %edx
f010a4c3:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010a4c9:	e9 33 01 00 00       	jmp    f010a601 <env_create+0xb91>
					}
					else
					{
						LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a4ce:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a4d4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4da:	89 d0                	mov    %edx,%eax
f010a4dc:	01 c0                	add    %eax,%eax
f010a4de:	01 d0                	add    %edx,%eax
f010a4e0:	c1 e0 03             	shl    $0x3,%eax
f010a4e3:	83 e8 80             	sub    $0xffffff80,%eax
f010a4e6:	01 c8                	add    %ecx,%eax
f010a4e8:	83 c0 08             	add    $0x8,%eax
f010a4eb:	85 c0                	test   %eax,%eax
f010a4ed:	75 17                	jne    f010a506 <env_create+0xa96>
f010a4ef:	83 ec 04             	sub    $0x4,%esp
f010a4f2:	68 e8 72 12 f0       	push   $0xf01272e8
f010a4f7:	68 83 01 00 00       	push   $0x183
f010a4fc:	68 0b 73 12 f0       	push   $0xf012730b
f010a501:	e8 14 5e ff ff       	call   f010031a <_panic>
f010a506:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a50c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a512:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010a518:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a51e:	89 d8                	mov    %ebx,%eax
f010a520:	01 c0                	add    %eax,%eax
f010a522:	01 d8                	add    %ebx,%eax
f010a524:	c1 e0 03             	shl    $0x3,%eax
f010a527:	01 d0                	add    %edx,%eax
f010a529:	05 98 00 00 00       	add    $0x98,%eax
f010a52e:	89 08                	mov    %ecx,(%eax)
f010a530:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a536:	89 c8                	mov    %ecx,%eax
f010a538:	01 c0                	add    %eax,%eax
f010a53a:	01 c8                	add    %ecx,%eax
f010a53c:	c1 e0 03             	shl    $0x3,%eax
f010a53f:	01 d0                	add    %edx,%eax
f010a541:	05 98 00 00 00       	add    $0x98,%eax
f010a546:	8b 00                	mov    (%eax),%eax
f010a548:	85 c0                	test   %eax,%eax
f010a54a:	74 2e                	je     f010a57a <env_create+0xb0a>
f010a54c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a552:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010a558:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a55e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a564:	89 c8                	mov    %ecx,%eax
f010a566:	01 c0                	add    %eax,%eax
f010a568:	01 c8                	add    %ecx,%eax
f010a56a:	c1 e0 03             	shl    $0x3,%eax
f010a56d:	83 e8 80             	sub    $0xffffff80,%eax
f010a570:	01 d8                	add    %ebx,%eax
f010a572:	83 c0 08             	add    $0x8,%eax
f010a575:	89 42 14             	mov    %eax,0x14(%edx)
f010a578:	eb 29                	jmp    f010a5a3 <env_create+0xb33>
f010a57a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a580:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a586:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a58c:	89 c8                	mov    %ecx,%eax
f010a58e:	01 c0                	add    %eax,%eax
f010a590:	01 c8                	add    %ecx,%eax
f010a592:	c1 e0 03             	shl    $0x3,%eax
f010a595:	83 e8 80             	sub    $0xffffff80,%eax
f010a598:	01 d8                	add    %ebx,%eax
f010a59a:	83 c0 08             	add    $0x8,%eax
f010a59d:	89 82 24 da 01 00    	mov    %eax,0x1da24(%edx)
f010a5a3:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a5a9:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a5af:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a5b5:	89 c8                	mov    %ecx,%eax
f010a5b7:	01 c0                	add    %eax,%eax
f010a5b9:	01 c8                	add    %ecx,%eax
f010a5bb:	c1 e0 03             	shl    $0x3,%eax
f010a5be:	83 e8 80             	sub    $0xffffff80,%eax
f010a5c1:	01 d8                	add    %ebx,%eax
f010a5c3:	83 c0 08             	add    $0x8,%eax
f010a5c6:	89 82 20 da 01 00    	mov    %eax,0x1da20(%edx)
f010a5cc:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a5d2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a5d8:	89 d0                	mov    %edx,%eax
f010a5da:	01 c0                	add    %eax,%eax
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c1 e0 03             	shl    $0x3,%eax
f010a5e1:	01 c8                	add    %ecx,%eax
f010a5e3:	05 9c 00 00 00       	add    $0x9c,%eax
f010a5e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a5ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a5f4:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f010a5fa:	42                   	inc    %edx
f010a5fb:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)

				//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));
			}

			//add this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010a601:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a607:	83 ec 04             	sub    $0x4,%esp
f010a60a:	6a 01                	push   $0x1
f010a60c:	ff 75 c0             	pushl  -0x40(%ebp)
f010a60f:	50                   	push   %eax
f010a610:	e8 05 9a ff ff       	call   f010401a <pf_add_empty_env_page>
f010a615:	83 c4 10             	add    $0x10,%esp
f010a618:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a61e:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010a625:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a628:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f010a62e:	0f 83 ca fa ff ff    	jae    f010a0fe <env_create+0x68e>
			//if(success == 0) LOG_STATMENT(cprintf("STACK Page added to page file successfully\n"));
		}

		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a634:	83 ec 0c             	sub    $0xc,%esp
f010a637:	6a 02                	push   $0x2
f010a639:	e8 88 40 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010a63e:	83 c4 10             	add    $0x10,%esp
f010a641:	85 c0                	test   %eax,%eax
f010a643:	74 72                	je     f010a6b7 <env_create+0xc47>
		{
			struct WorkingSetElement * elm = NULL;
f010a645:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
			LIST_FOREACH(elm, &(e->SecondList))
f010a64c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a652:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f010a658:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a65b:	eb 2b                	jmp    f010a688 <env_create+0xc18>
			{
				//set it's PRESENT bit to 0
				pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f010a65d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010a660:	8b 10                	mov    (%eax),%edx
f010a662:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a668:	8b 40 64             	mov    0x64(%eax),%eax
f010a66b:	6a 01                	push   $0x1
f010a66d:	6a 00                	push   $0x0
f010a66f:	52                   	push   %edx
f010a670:	50                   	push   %eax
f010a671:	e8 b2 e4 ff ff       	call   f0108b28 <pt_set_page_permissions>
f010a676:	83 c4 10             	add    $0x10,%esp
		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
		{
			struct WorkingSetElement * elm = NULL;
			LIST_FOREACH(elm, &(e->SecondList))
f010a679:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a67f:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a685:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a688:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a68e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a692:	74 08                	je     f010a69c <env_create+0xc2c>
f010a694:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a697:	8b 52 10             	mov    0x10(%edx),%edx
f010a69a:	eb 05                	jmp    f010a6a1 <env_create+0xc31>
f010a69c:	ba 00 00 00 00       	mov    $0x0,%edx
f010a6a1:	89 90 28 da 01 00    	mov    %edx,0x1da28(%eax)
f010a6a7:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a6ad:	85 c0                	test   %eax,%eax
f010a6af:	75 ac                	jne    f010a65d <env_create+0xbed>
f010a6b1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a6b5:	75 a6                	jne    f010a65d <env_create+0xbed>
f010a6b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010a6ba:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010a6bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010a6c0:	0f 22 d8             	mov    %eax,%cr3

		///[11] switch back to the page directory exists before segment loading
		lcr3(cur_phys_pgdir) ;
	}
	//[12] Re-enable the interrupt (if it was too)
	popcli();
f010a6c3:	e8 4a cb ff ff       	call   f0107212 <popcli>
//		env_page_ws_print(e);

		//	cprintf("Table working set after loading the program...\n");
		//	env_table_ws_print(e);
	}
	return e;
f010a6c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f010a6ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a6d1:	5b                   	pop    %ebx
f010a6d2:	5e                   	pop    %esi
f010a6d3:	5f                   	pop    %edi
f010a6d4:	5d                   	pop    %ebp
f010a6d5:	c3                   	ret    

f010a6d6 <env_start>:
// 2) START EXECUTING THE PROCESS:
//===============================
// called only at the very first scheduling by scheduler()
// will context_switch() here.  "Return" to user space.
void env_start(void)
{
f010a6d6:	55                   	push   %ebp
f010a6d7:	89 e5                	mov    %esp,%ebp
f010a6d9:	83 ec 18             	sub    $0x18,%esp
	static int first = 1;
	// Still holding q.lock from scheduler.
	release_spinlock(&ProcessQueues.qlock);
f010a6dc:	83 ec 0c             	sub    $0xc,%esp
f010a6df:	68 60 64 55 f0       	push   $0xf0556460
f010a6e4:	e8 75 44 00 00       	call   f010eb5e <release_spinlock>
f010a6e9:	83 c4 10             	add    $0x10,%esp

	if (first)
f010a6ec:	a1 60 d9 17 f0       	mov    0xf017d960,%eax
f010a6f1:	85 c0                	test   %eax,%eax
f010a6f3:	74 30                	je     f010a725 <env_start+0x4f>
	{
		struct Env* p = get_cpu_proc();
f010a6f5:	e8 76 00 00 00       	call   f010a770 <get_cpu_proc>
f010a6fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cprintf("\n[ENV_START] %s - %d\n", p->prog_name, p->env_id);
f010a6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a700:	8b 40 10             	mov    0x10(%eax),%eax
f010a703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a706:	83 c2 20             	add    $0x20,%edx
f010a709:	83 ec 04             	sub    $0x4,%esp
f010a70c:	50                   	push   %eax
f010a70d:	52                   	push   %edx
f010a70e:	68 bb 73 12 f0       	push   $0xf01273bb
f010a713:	e8 54 68 ff ff       	call   f0100f6c <cprintf>
f010a718:	83 c4 10             	add    $0x10,%esp

		// Some initialization functions must be run in the context
		// of a regular process (e.g., they call sleep), and thus cannot
		// be run from main().
		first = 0;
f010a71b:	c7 05 60 d9 17 f0 00 	movl   $0x0,0xf017d960
f010a722:	00 00 00 
	}

	// Return to "caller", actually trapret (see initialize_environment()).
}
f010a725:	90                   	nop
f010a726:	c9                   	leave  
f010a727:	c3                   	ret    

f010a728 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a728:	55                   	push   %ebp
f010a729:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010a72b:	90                   	nop

	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/
}
f010a72c:	5d                   	pop    %ebp
f010a72d:	c3                   	ret    

f010a72e <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
//Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit(void)
{
f010a72e:	55                   	push   %ebp
f010a72f:	89 e5                	mov    %esp,%ebp
f010a731:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f010a734:	e8 37 00 00 00       	call   f010a770 <get_cpu_proc>
f010a739:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(cur_env != NULL);
f010a73c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a740:	75 19                	jne    f010a75b <env_exit+0x2d>
f010a742:	68 d1 73 12 f0       	push   $0xf01273d1
f010a747:	68 e1 73 12 f0       	push   $0xf01273e1
f010a74c:	68 ea 01 00 00       	push   $0x1ea
f010a751:	68 0b 73 12 f0       	push   $0xf012730b
f010a756:	e8 bf 5b ff ff       	call   f010031a <_panic>
	sched_exit_env(cur_env->env_id);
f010a75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a75e:	8b 40 10             	mov    0x10(%eax),%eax
f010a761:	83 ec 0c             	sub    $0xc,%esp
f010a764:	50                   	push   %eax
f010a765:	e8 48 b0 ff ff       	call   f01057b2 <sched_exit_env>
f010a76a:	83 c4 10             	add    $0x10,%esp
	//2024: Replaced by context switch
	//fos_scheduler();
	//context_switch(&(curenv->context), mycpu()->scheduler);
}
f010a76d:	90                   	nop
f010a76e:	c9                   	leave  
f010a76f:	c3                   	ret    

f010a770 <get_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
// Ref: xv6-x86 OS
struct Env* get_cpu_proc(void)
{
f010a770:	55                   	push   %ebp
f010a771:	89 e5                	mov    %esp,%ebp
f010a773:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	struct Env *p;
	pushcli();
f010a776:	e8 45 ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a77b:	e8 7d c9 ff ff       	call   f01070fd <mycpu>
f010a780:	89 45 f4             	mov    %eax,-0xc(%ebp)
	p = c->proc;
f010a783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a786:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010a78c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	popcli();
f010a78f:	e8 7e ca ff ff       	call   f0107212 <popcli>
	return p;
f010a794:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010a797:	c9                   	leave  
f010a798:	c3                   	ret    

f010a799 <set_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while setting proc into the cpu structure
// Ref: xv6-x86 OS
void set_cpu_proc(struct Env* p)
{
f010a799:	55                   	push   %ebp
f010a79a:	89 e5                	mov    %esp,%ebp
f010a79c:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	pushcli();
f010a79f:	e8 1c ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a7a4:	e8 54 c9 ff ff       	call   f01070fd <mycpu>
f010a7a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = p;
f010a7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7af:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7b2:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
	popcli();
f010a7b8:	e8 55 ca ff ff       	call   f0107212 <popcli>
}
f010a7bd:	90                   	nop
f010a7be:	c9                   	leave  
f010a7bf:	c3                   	ret    

f010a7c0 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a7c0:	55                   	push   %ebp
f010a7c1:	89 e5                	mov    %esp,%ebp
f010a7c3:	53                   	push   %ebx
f010a7c4:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a7c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a7cb:	75 16                	jne    f010a7e3 <envid2env+0x23>
		*env_store = get_cpu_proc();
f010a7cd:	e8 9e ff ff ff       	call   f010a770 <get_cpu_proc>
f010a7d2:	89 c2                	mov    %eax,%edx
f010a7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7d7:	89 10                	mov    %edx,(%eax)
		return 0;
f010a7d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7de:	e9 b6 00 00 00       	jmp    f010a899 <envid2env+0xd9>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a7e3:	8b 1d 10 5a 55 f0    	mov    0xf0555a10,%ebx
f010a7e9:	83 ec 0c             	sub    $0xc,%esp
f010a7ec:	6a 08                	push   $0x8
f010a7ee:	e8 53 62 01 00       	call   f0120a46 <nearest_pow2_ceil>
f010a7f3:	83 c4 10             	add    $0x10,%esp
f010a7f6:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	21 c2                	and    %eax,%edx
f010a7fe:	89 d0                	mov    %edx,%eax
f010a800:	c1 e0 06             	shl    $0x6,%eax
f010a803:	29 d0                	sub    %edx,%eax
f010a805:	c1 e0 02             	shl    $0x2,%eax
f010a808:	01 d0                	add    %edx,%eax
f010a80a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a811:	01 c8                	add    %ecx,%eax
f010a813:	c1 e0 03             	shl    $0x3,%eax
f010a816:	01 d0                	add    %edx,%eax
f010a818:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a81f:	29 c2                	sub    %eax,%edx
f010a821:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010a828:	89 c2                	mov    %eax,%edx
f010a82a:	89 d0                	mov    %edx,%eax
f010a82c:	01 d8                	add    %ebx,%eax
f010a82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a831:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a834:	8b 40 18             	mov    0x18(%eax),%eax
f010a837:	85 c0                	test   %eax,%eax
f010a839:	74 0b                	je     f010a846 <envid2env+0x86>
f010a83b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a83e:	8b 40 10             	mov    0x10(%eax),%eax
f010a841:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a844:	74 10                	je     f010a856 <envid2env+0x96>
		*env_store = 0;
f010a846:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a849:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a84f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a854:	eb 43                	jmp    f010a899 <envid2env+0xd9>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	struct Env* cur_env = get_cpu_proc();
f010a856:	e8 15 ff ff ff       	call   f010a770 <get_cpu_proc>
f010a85b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (checkperm && e != cur_env && e->env_parent_id != cur_env->env_id) {
f010a85e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a862:	74 28                	je     f010a88c <envid2env+0xcc>
f010a864:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a867:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a86a:	74 20                	je     f010a88c <envid2env+0xcc>
f010a86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a86f:	8b 50 14             	mov    0x14(%eax),%edx
f010a872:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a875:	8b 40 10             	mov    0x10(%eax),%eax
f010a878:	39 c2                	cmp    %eax,%edx
f010a87a:	74 10                	je     f010a88c <envid2env+0xcc>
		*env_store = 0;
f010a87c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a87f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a885:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a88a:	eb 0d                	jmp    f010a899 <envid2env+0xd9>
	}

	*env_store = e;
f010a88c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a88f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a892:	89 10                	mov    %edx,(%eax)
	return 0;
f010a894:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a899:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a89c:	c9                   	leave  
f010a89d:	c3                   	ret    

f010a89e <yield>:
// 8) GIVE-UP CPU TO THE SCHEDULER:
//=================================
// Give up the CPU for one scheduling round.
// Ref: xv6-x86 OS
void yield(void)
{
f010a89e:	55                   	push   %ebp
f010a89f:	89 e5                	mov    %esp,%ebp
f010a8a1:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\n[YIELD] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&ProcessQueues.qlock);  //lock: to protect process Qs in multi-CPU
f010a8a4:	83 ec 0c             	sub    $0xc,%esp
f010a8a7:	68 60 64 55 f0       	push   $0xf0556460
f010a8ac:	e8 26 42 00 00       	call   f010ead7 <acquire_spinlock>
f010a8b1:	83 c4 10             	add    $0x10,%esp
	{
		struct Env* p = get_cpu_proc();
f010a8b4:	e8 b7 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(p != NULL);
f010a8bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8c0:	75 19                	jne    f010a8db <yield+0x3d>
f010a8c2:	68 f6 73 12 f0       	push   $0xf01273f6
f010a8c7:	68 e1 73 12 f0       	push   $0xf01273e1
f010a8cc:	68 49 02 00 00       	push   $0x249
f010a8d1:	68 0b 73 12 f0       	push   $0xf012730b
f010a8d6:	e8 3f 5a ff ff       	call   f010031a <_panic>
		p->env_status = ENV_READY;
f010a8db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8de:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		sched();
f010a8e5:	e8 13 00 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&ProcessQueues.qlock); ////release lock
f010a8ea:	83 ec 0c             	sub    $0xc,%esp
f010a8ed:	68 60 64 55 f0       	push   $0xf0556460
f010a8f2:	e8 67 42 00 00       	call   f010eb5e <release_spinlock>
f010a8f7:	83 c4 10             	add    $0x10,%esp
	//cprintf("\n[YIELD] release: lock status after release = %d\n", qlock.locked);
}
f010a8fa:	90                   	nop
f010a8fb:	c9                   	leave  
f010a8fc:	c3                   	ret    

f010a8fd <sched>:
// Saves and restores intena because intena is a property of this kernel thread, not this CPU.
// It should be proc->intena and proc->ncli, but that would break in the few places
// where a lock is held but there's no process.
// Ref: xv6-x86 OS
void sched(void)
{
f010a8fd:	55                   	push   %ebp
f010a8fe:	89 e5                	mov    %esp,%ebp
f010a900:	83 ec 18             	sub    $0x18,%esp
	int intena;
	struct Env *p = get_cpu_proc();
f010a903:	e8 68 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a908:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(p != NULL);
f010a90b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a90f:	75 19                	jne    f010a92a <sched+0x2d>
f010a911:	68 f6 73 12 f0       	push   $0xf01273f6
f010a916:	68 e1 73 12 f0       	push   $0xf01273e1
f010a91b:	68 5d 02 00 00       	push   $0x25d
f010a920:	68 0b 73 12 f0       	push   $0xf012730b
f010a925:	e8 f0 59 ff ff       	call   f010031a <_panic>

	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f010a92a:	83 ec 0c             	sub    $0xc,%esp
f010a92d:	68 60 64 55 f0       	push   $0xf0556460
f010a932:	e8 b9 43 00 00       	call   f010ecf0 <holding_spinlock>
f010a937:	83 c4 10             	add    $0x10,%esp
f010a93a:	85 c0                	test   %eax,%eax
f010a93c:	75 17                	jne    f010a955 <sched+0x58>
		panic("sched: q.lock is not held by this CPU while it's expected to be. ");
f010a93e:	83 ec 04             	sub    $0x4,%esp
f010a941:	68 00 74 12 f0       	push   $0xf0127400
f010a946:	68 61 02 00 00       	push   $0x261
f010a94b:	68 0b 73 12 f0       	push   $0xf012730b
f010a950:	e8 c5 59 ff ff       	call   f010031a <_panic>
	/*Should ensure that the ncli = 1 so that the interrupt will be released after scheduling the next proc*/
	if(mycpu()->ncli != 1)
f010a955:	e8 a3 c7 ff ff       	call   f01070fd <mycpu>
f010a95a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a960:	83 f8 01             	cmp    $0x1,%eax
f010a963:	74 20                	je     f010a985 <sched+0x88>
		panic("sched locks: ncli = %d", mycpu()->ncli);
f010a965:	e8 93 c7 ff ff       	call   f01070fd <mycpu>
f010a96a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a970:	50                   	push   %eax
f010a971:	68 42 74 12 f0       	push   $0xf0127442
f010a976:	68 64 02 00 00       	push   $0x264
f010a97b:	68 0b 73 12 f0       	push   $0xf012730b
f010a980:	e8 95 59 ff ff       	call   f010031a <_panic>
	/*********************************************************************/
	if(p->env_status == ENV_RUNNING)
f010a985:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a988:	8b 40 18             	mov    0x18(%eax),%eax
f010a98b:	83 f8 02             	cmp    $0x2,%eax
f010a98e:	75 17                	jne    f010a9a7 <sched+0xaa>
		panic("sched a running process");
f010a990:	83 ec 04             	sub    $0x4,%esp
f010a993:	68 59 74 12 f0       	push   $0xf0127459
f010a998:	68 67 02 00 00       	push   $0x267
f010a99d:	68 0b 73 12 f0       	push   $0xf012730b
f010a9a2:	e8 73 59 ff ff       	call   f010031a <_panic>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010a9a7:	9c                   	pushf  
f010a9a8:	58                   	pop    %eax
f010a9a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010a9ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
	if(read_eflags()&FL_IF)
f010a9af:	25 00 02 00 00       	and    $0x200,%eax
f010a9b4:	85 c0                	test   %eax,%eax
f010a9b6:	74 17                	je     f010a9cf <sched+0xd2>
		panic("sched is interruptible!");
f010a9b8:	83 ec 04             	sub    $0x4,%esp
f010a9bb:	68 71 74 12 f0       	push   $0xf0127471
f010a9c0:	68 69 02 00 00       	push   $0x269
f010a9c5:	68 0b 73 12 f0       	push   $0xf012730b
f010a9ca:	e8 4b 59 ff ff       	call   f010031a <_panic>
	intena = mycpu()->intena;
f010a9cf:	e8 29 c7 ff ff       	call   f01070fd <mycpu>
f010a9d4:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010a9da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	context_switch(&(p->context), mycpu()->scheduler);
f010a9dd:	e8 1b c7 ff ff       	call   f01070fd <mycpu>
f010a9e2:	8b 40 04             	mov    0x4(%eax),%eax
f010a9e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9e8:	83 c2 04             	add    $0x4,%edx
f010a9eb:	83 ec 08             	sub    $0x8,%esp
f010a9ee:	50                   	push   %eax
f010a9ef:	52                   	push   %edx
f010a9f0:	e8 4a a1 ff ff       	call   f0104b3f <context_switch>
f010a9f5:	83 c4 10             	add    $0x10,%esp
	mycpu()->intena = intena;
f010a9f8:	e8 00 c7 ff ff       	call   f01070fd <mycpu>
f010a9fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa00:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
}
f010aa06:	90                   	nop
f010aa07:	c9                   	leave  
f010aa08:	c3                   	ret    

f010aa09 <switchkvm>:
// 10) SWITCH VIRTUAL MEMORYs:
//===============================
// [10.1] Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void switchkvm(void)
{
f010aa09:	55                   	push   %ebp
f010aa0a:	89 e5                	mov    %esp,%ebp
f010aa0c:	83 ec 10             	sub    $0x10,%esp
	lcr3(phys_page_directory);   // switch to the kernel page table
f010aa0f:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f010aa14:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010aa17:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010aa1a:	0f 22 d8             	mov    %eax,%cr3
}
f010aa1d:	90                   	nop
f010aa1e:	c9                   	leave  
f010aa1f:	c3                   	ret    

f010aa20 <switchuvm>:

// [10.2] Switch TSS and h/w page table to correspond to process p.
void switchuvm(struct Env *proc)
{
f010aa20:	55                   	push   %ebp
f010aa21:	89 e5                	mov    %esp,%ebp
f010aa23:	53                   	push   %ebx
f010aa24:	83 ec 14             	sub    $0x14,%esp
	if(proc == 0)
f010aa27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa2b:	75 17                	jne    f010aa44 <switchuvm+0x24>
		panic("switchuvm: no process");
f010aa2d:	83 ec 04             	sub    $0x4,%esp
f010aa30:	68 89 74 12 f0       	push   $0xf0127489
f010aa35:	68 7e 02 00 00       	push   $0x27e
f010aa3a:	68 0b 73 12 f0       	push   $0xf012730b
f010aa3f:	e8 d6 58 ff ff       	call   f010031a <_panic>
	if(proc->kstack == 0)
f010aa44:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa47:	8b 40 70             	mov    0x70(%eax),%eax
f010aa4a:	85 c0                	test   %eax,%eax
f010aa4c:	75 17                	jne    f010aa65 <switchuvm+0x45>
		panic("switchuvm: no kstack");
f010aa4e:	83 ec 04             	sub    $0x4,%esp
f010aa51:	68 9f 74 12 f0       	push   $0xf012749f
f010aa56:	68 80 02 00 00       	push   $0x280
f010aa5b:	68 0b 73 12 f0       	push   $0xf012730b
f010aa60:	e8 b5 58 ff ff       	call   f010031a <_panic>
	if(proc->env_page_directory == 0)
f010aa65:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa68:	8b 40 64             	mov    0x64(%eax),%eax
f010aa6b:	85 c0                	test   %eax,%eax
f010aa6d:	75 17                	jne    f010aa86 <switchuvm+0x66>
		panic("switchuvm: no pgdir");
f010aa6f:	83 ec 04             	sub    $0x4,%esp
f010aa72:	68 b4 74 12 f0       	push   $0xf01274b4
f010aa77:	68 82 02 00 00       	push   $0x282
f010aa7c:	68 0b 73 12 f0       	push   $0xf012730b
f010aa81:	e8 94 58 ff ff       	call   f010031a <_panic>

	pushcli();	//disable interrupt - lock: to protect CPU info
f010aa86:	e8 35 c7 ff ff       	call   f01071c0 <pushcli>
	struct cpu* c = mycpu();
f010aa8b:	e8 6d c6 ff ff       	call   f01070fd <mycpu>
f010aa90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = proc;
f010aa93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa96:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa99:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010aa9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa2:	83 c0 0c             	add    $0xc,%eax
f010aaa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaa8:	83 c2 0c             	add    $0xc,%edx
f010aaab:	c1 ea 10             	shr    $0x10,%edx
f010aaae:	88 d3                	mov    %dl,%bl
f010aab0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aab3:	83 c2 0c             	add    $0xc,%edx
f010aab6:	c1 ea 18             	shr    $0x18,%edx
f010aab9:	88 d1                	mov    %dl,%cl
f010aabb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aabe:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010aac5:	68 00 
f010aac7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaca:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010aad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad4:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010aada:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aadd:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aae3:	83 e2 f0             	and    $0xfffffff0,%edx
f010aae6:	83 ca 09             	or     $0x9,%edx
f010aae9:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010aaef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaf2:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aaf8:	83 ca 10             	or     $0x10,%edx
f010aafb:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab04:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab0a:	83 e2 9f             	and    $0xffffff9f,%edx
f010ab0d:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab16:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab1c:	83 ca 80             	or     $0xffffff80,%edx
f010ab1f:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab28:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab2e:	83 e2 f0             	and    $0xfffffff0,%edx
f010ab31:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab3a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab40:	83 e2 ef             	and    $0xffffffef,%edx
f010ab43:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab4c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab52:	83 e2 df             	and    $0xffffffdf,%edx
f010ab55:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5e:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab64:	83 ca 40             	or     $0x40,%edx
f010ab67:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab70:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab76:	83 e2 7f             	and    $0x7f,%edx
f010ab79:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab82:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010ab88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab8b:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab91:	83 e2 ef             	and    $0xffffffef,%edx
f010ab94:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	//adjust the default stack for the trap to be the user kernel stack
	c->ts.ts_esp0 = (uint32)(c->proc->kstack + KERNEL_STACK_SIZE);
f010ab9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab9d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010aba3:	8b 40 70             	mov    0x70(%eax),%eax
f010aba6:	05 00 80 00 00       	add    $0x8000,%eax
f010abab:	89 c2                	mov    %eax,%edx
f010abad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb0:	89 50 10             	mov    %edx,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010abb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb6:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)
f010abbc:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010abc2:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010abc6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	//load the user page directory
	lcr3(c->proc->env_cr3) ;
f010abc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abcc:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010abd2:	8b 40 68             	mov    0x68(%eax),%eax
f010abd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010abd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abdb:	0f 22 d8             	mov    %eax,%cr3

	popcli();	//enable interrupt
f010abde:	e8 2f c6 ff ff       	call   f0107212 <popcli>
}
f010abe3:	90                   	nop
f010abe4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abe7:	c9                   	leave  
f010abe8:	c3                   	ret    

f010abe9 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010abe9:	55                   	push   %ebp
f010abea:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010abec:	8b 15 14 5a 55 f0    	mov    0xf0555a14,%edx
f010abf2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf5:	89 10                	mov    %edx,(%eax)
f010abf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfa:	8b 00                	mov    (%eax),%eax
f010abfc:	85 c0                	test   %eax,%eax
f010abfe:	75 07                	jne    f010ac07 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010ac00:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010ac05:	eb 11                	jmp    f010ac18 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010ac07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0a:	8b 00                	mov    (%eax),%eax
f010ac0c:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	return 0;
f010ac13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac18:	5d                   	pop    %ebp
f010ac19:	c3                   	ret    

f010ac1a <free_environment>:
//===============================
// 2) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010ac1a:	55                   	push   %ebp
f010ac1b:	89 e5                	mov    %esp,%ebp
f010ac1d:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010ac20:	83 ec 04             	sub    $0x4,%esp
f010ac23:	68 6c da 01 00       	push   $0x1da6c
f010ac28:	6a 00                	push   $0x0
f010ac2a:	ff 75 08             	pushl  0x8(%ebp)
f010ac2d:	e8 6b 78 01 00       	call   f012249d <memset>
f010ac32:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010ac35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac38:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010ac3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ac43:	75 17                	jne    f010ac5c <free_environment+0x42>
f010ac45:	83 ec 04             	sub    $0x4,%esp
f010ac48:	68 e8 72 12 f0       	push   $0xf01272e8
f010ac4d:	68 bd 02 00 00       	push   $0x2bd
f010ac52:	68 0b 73 12 f0       	push   $0xf012730b
f010ac57:	e8 be 56 ff ff       	call   f010031a <_panic>
f010ac5c:	8b 15 14 5a 55 f0    	mov    0xf0555a14,%edx
f010ac62:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac65:	89 50 08             	mov    %edx,0x8(%eax)
f010ac68:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6b:	8b 40 08             	mov    0x8(%eax),%eax
f010ac6e:	85 c0                	test   %eax,%eax
f010ac70:	74 0d                	je     f010ac7f <free_environment+0x65>
f010ac72:	a1 14 5a 55 f0       	mov    0xf0555a14,%eax
f010ac77:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac7a:	89 50 0c             	mov    %edx,0xc(%eax)
f010ac7d:	eb 08                	jmp    f010ac87 <free_environment+0x6d>
f010ac7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac82:	a3 18 5a 55 f0       	mov    %eax,0xf0555a18
f010ac87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8a:	a3 14 5a 55 f0       	mov    %eax,0xf0555a14
f010ac8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac92:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010ac99:	a1 20 5a 55 f0       	mov    0xf0555a20,%eax
f010ac9e:	40                   	inc    %eax
f010ac9f:	a3 20 5a 55 f0       	mov    %eax,0xf0555a20
}
f010aca4:	90                   	nop
f010aca5:	c9                   	leave  
f010aca6:	c3                   	ret    

f010aca7 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010aca7:	55                   	push   %ebp
f010aca8:	89 e5                	mov    %esp,%ebp
f010acaa:	53                   	push   %ebx
f010acab:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010acae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acb1:	8b 40 0c             	mov    0xc(%eax),%eax
f010acb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010acb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acba:	8b 40 08             	mov    0x8(%eax),%eax
f010acbd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010acc0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010acc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010acca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010accd:	01 c2                	add    %eax,%edx
f010accf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acd2:	01 d0                	add    %edx,%eax
f010acd4:	48                   	dec    %eax
f010acd5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010acd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acdb:	ba 00 00 00 00       	mov    $0x0,%edx
f010ace0:	f7 75 dc             	divl   -0x24(%ebp)
f010ace3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ace6:	29 d0                	sub    %edx,%eax
f010ace8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010aceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010acf1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010acf4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010acf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010acfc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010ad03:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010ad0a:	8b 45 10             	mov    0x10(%ebp),%eax
f010ad0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010ad13:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010ad1a:	0f 85 35 06 00 00    	jne    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
f010ad20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad23:	83 c0 20             	add    $0x20,%eax
f010ad26:	83 ec 08             	sub    $0x8,%esp
f010ad29:	68 c8 74 12 f0       	push   $0xf01274c8
f010ad2e:	50                   	push   %eax
f010ad2f:	e8 87 76 01 00       	call   f01223bb <strcmp>
f010ad34:	83 c4 10             	add    $0x10,%esp
f010ad37:	85 c0                	test   %eax,%eax
f010ad39:	0f 84 16 06 00 00    	je     f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010ad3f:	8b 45 14             	mov    0x14(%ebp),%eax
f010ad42:	83 f8 06             	cmp    $0x6,%eax
f010ad45:	76 05                	jbe    f010ad4c <program_segment_alloc_map_copy_workingset+0xa5>
f010ad47:	b8 06 00 00 00       	mov    $0x6,%eax
f010ad4c:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010ad4f:	e9 01 06 00 00       	jmp    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010ad54:	83 ec 0c             	sub    $0xc,%esp
f010ad57:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ad5a:	50                   	push   %eax
f010ad5b:	e8 70 d4 ff ff       	call   f01081d0 <allocate_frame>
f010ad60:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010ad63:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010ad66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad69:	8b 40 64             	mov    0x64(%eax),%eax
f010ad6c:	6a 06                	push   $0x6
f010ad6e:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad71:	52                   	push   %edx
f010ad72:	50                   	push   %eax
f010ad73:	e8 6c da ff ff       	call   f01087e4 <loadtime_map_frame>
f010ad78:	83 c4 10             	add    $0x10,%esp
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);

#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ad84:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad87:	89 d0                	mov    %edx,%eax
f010ad89:	01 c0                	add    %eax,%eax
f010ad8b:	01 d0                	add    %edx,%eax
f010ad8d:	c1 e0 03             	shl    $0x3,%eax
f010ad90:	01 c8                	add    %ecx,%eax
f010ad92:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010ad98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad9b:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010ad9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ada6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ada9:	89 d0                	mov    %edx,%eax
f010adab:	01 c0                	add    %eax,%eax
f010adad:	01 d0                	add    %edx,%eax
f010adaf:	c1 e0 03             	shl    $0x3,%eax
f010adb2:	01 c8                	add    %ecx,%eax
f010adb4:	05 8c 00 00 00       	add    $0x8c,%eax
f010adb9:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010adbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbf:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adc5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adc8:	89 d0                	mov    %edx,%eax
f010adca:	01 c0                	add    %eax,%eax
f010adcc:	01 d0                	add    %edx,%eax
f010adce:	c1 e0 03             	shl    $0x3,%eax
f010add1:	01 c8                	add    %ecx,%eax
f010add3:	05 90 00 00 00       	add    $0x90,%eax
f010add8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010adde:	83 ec 0c             	sub    $0xc,%esp
f010ade1:	6a 02                	push   $0x2
f010ade3:	e8 de 38 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010ade8:	83 c4 10             	add    $0x10,%esp
f010adeb:	85 c0                	test   %eax,%eax
f010aded:	0f 84 2c 04 00 00    	je     f010b21f <program_segment_alloc_map_copy_workingset+0x578>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010adf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf6:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adfc:	89 d0                	mov    %edx,%eax
f010adfe:	01 c0                	add    %eax,%eax
f010ae00:	01 d0                	add    %edx,%eax
f010ae02:	c1 e0 03             	shl    $0x3,%eax
f010ae05:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010ae0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0e:	01 d0                	add    %edx,%eax
f010ae10:	83 c0 08             	add    $0x8,%eax
f010ae13:	85 c0                	test   %eax,%eax
f010ae15:	75 17                	jne    f010ae2e <program_segment_alloc_map_copy_workingset+0x187>
f010ae17:	83 ec 04             	sub    $0x4,%esp
f010ae1a:	68 9d 73 12 f0       	push   $0xf012739d
f010ae1f:	68 00 03 00 00       	push   $0x300
f010ae24:	68 0b 73 12 f0       	push   $0xf012730b
f010ae29:	e8 ec 54 ff ff       	call   f010031a <_panic>
f010ae2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae31:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae37:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae3a:	89 d0                	mov    %edx,%eax
f010ae3c:	01 c0                	add    %eax,%eax
f010ae3e:	01 d0                	add    %edx,%eax
f010ae40:	c1 e0 03             	shl    $0x3,%eax
f010ae43:	01 c8                	add    %ecx,%eax
f010ae45:	05 98 00 00 00       	add    $0x98,%eax
f010ae4a:	8b 00                	mov    (%eax),%eax
f010ae4c:	85 c0                	test   %eax,%eax
f010ae4e:	74 41                	je     f010ae91 <program_segment_alloc_map_copy_workingset+0x1ea>
f010ae50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae53:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae59:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae5c:	89 d0                	mov    %edx,%eax
f010ae5e:	01 c0                	add    %eax,%eax
f010ae60:	01 d0                	add    %edx,%eax
f010ae62:	c1 e0 03             	shl    $0x3,%eax
f010ae65:	01 c8                	add    %ecx,%eax
f010ae67:	05 98 00 00 00       	add    $0x98,%eax
f010ae6c:	8b 10                	mov    (%eax),%edx
f010ae6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae71:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010ae77:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010ae7a:	89 c8                	mov    %ecx,%eax
f010ae7c:	01 c0                	add    %eax,%eax
f010ae7e:	01 c8                	add    %ecx,%eax
f010ae80:	c1 e0 03             	shl    $0x3,%eax
f010ae83:	01 d8                	add    %ebx,%eax
f010ae85:	05 9c 00 00 00       	add    $0x9c,%eax
f010ae8a:	8b 00                	mov    (%eax),%eax
f010ae8c:	89 42 14             	mov    %eax,0x14(%edx)
f010ae8f:	eb 27                	jmp    f010aeb8 <program_segment_alloc_map_copy_workingset+0x211>
f010ae91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae94:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae9d:	89 d0                	mov    %edx,%eax
f010ae9f:	01 c0                	add    %eax,%eax
f010aea1:	01 d0                	add    %edx,%eax
f010aea3:	c1 e0 03             	shl    $0x3,%eax
f010aea6:	01 c8                	add    %ecx,%eax
f010aea8:	05 9c 00 00 00       	add    $0x9c,%eax
f010aead:	8b 10                	mov    (%eax),%edx
f010aeaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb2:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aec1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aec4:	89 d0                	mov    %edx,%eax
f010aec6:	01 c0                	add    %eax,%eax
f010aec8:	01 d0                	add    %edx,%eax
f010aeca:	c1 e0 03             	shl    $0x3,%eax
f010aecd:	01 c8                	add    %ecx,%eax
f010aecf:	05 9c 00 00 00       	add    $0x9c,%eax
f010aed4:	8b 00                	mov    (%eax),%eax
f010aed6:	85 c0                	test   %eax,%eax
f010aed8:	74 41                	je     f010af1b <program_segment_alloc_map_copy_workingset+0x274>
f010aeda:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedd:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aee3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aee6:	89 d0                	mov    %edx,%eax
f010aee8:	01 c0                	add    %eax,%eax
f010aeea:	01 d0                	add    %edx,%eax
f010aeec:	c1 e0 03             	shl    $0x3,%eax
f010aeef:	01 c8                	add    %ecx,%eax
f010aef1:	05 9c 00 00 00       	add    $0x9c,%eax
f010aef6:	8b 10                	mov    (%eax),%edx
f010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefb:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010af01:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010af04:	89 c8                	mov    %ecx,%eax
f010af06:	01 c0                	add    %eax,%eax
f010af08:	01 c8                	add    %ecx,%eax
f010af0a:	c1 e0 03             	shl    $0x3,%eax
f010af0d:	01 d8                	add    %ebx,%eax
f010af0f:	05 98 00 00 00       	add    $0x98,%eax
f010af14:	8b 00                	mov    (%eax),%eax
f010af16:	89 42 10             	mov    %eax,0x10(%edx)
f010af19:	eb 27                	jmp    f010af42 <program_segment_alloc_map_copy_workingset+0x29b>
f010af1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af27:	89 d0                	mov    %edx,%eax
f010af29:	01 c0                	add    %eax,%eax
f010af2b:	01 d0                	add    %edx,%eax
f010af2d:	c1 e0 03             	shl    $0x3,%eax
f010af30:	01 c8                	add    %ecx,%eax
f010af32:	05 98 00 00 00       	add    $0x98,%eax
f010af37:	8b 10                	mov    (%eax),%edx
f010af39:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010af42:	8b 45 08             	mov    0x8(%ebp),%eax
f010af45:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af4e:	89 d0                	mov    %edx,%eax
f010af50:	01 c0                	add    %eax,%eax
f010af52:	01 d0                	add    %edx,%eax
f010af54:	c1 e0 03             	shl    $0x3,%eax
f010af57:	01 c8                	add    %ecx,%eax
f010af59:	05 98 00 00 00       	add    $0x98,%eax
f010af5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af64:	8b 45 08             	mov    0x8(%ebp),%eax
f010af67:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af6d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af70:	89 d0                	mov    %edx,%eax
f010af72:	01 c0                	add    %eax,%eax
f010af74:	01 d0                	add    %edx,%eax
f010af76:	c1 e0 03             	shl    $0x3,%eax
f010af79:	01 c8                	add    %ecx,%eax
f010af7b:	05 9c 00 00 00       	add    $0x9c,%eax
f010af80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af86:	8b 45 08             	mov    0x8(%ebp),%eax
f010af89:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010af8f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010af92:	8b 45 08             	mov    0x8(%ebp),%eax
f010af95:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010af9b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9e:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010afa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010afad:	48                   	dec    %eax
f010afae:	39 c2                	cmp    %eax,%edx
f010afb0:	0f 83 37 01 00 00    	jae    f010b0ed <program_segment_alloc_map_copy_workingset+0x446>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010afb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb9:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010afbf:	89 d0                	mov    %edx,%eax
f010afc1:	01 c0                	add    %eax,%eax
f010afc3:	01 d0                	add    %edx,%eax
f010afc5:	c1 e0 03             	shl    $0x3,%eax
f010afc8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010afce:	8b 45 08             	mov    0x8(%ebp),%eax
f010afd1:	01 d0                	add    %edx,%eax
f010afd3:	83 c0 08             	add    $0x8,%eax
f010afd6:	85 c0                	test   %eax,%eax
f010afd8:	75 17                	jne    f010aff1 <program_segment_alloc_map_copy_workingset+0x34a>
f010afda:	83 ec 04             	sub    $0x4,%esp
f010afdd:	68 e8 72 12 f0       	push   $0xf01272e8
f010afe2:	68 04 03 00 00       	push   $0x304
f010afe7:	68 0b 73 12 f0       	push   $0xf012730b
f010afec:	e8 29 53 ff ff       	call   f010031a <_panic>
f010aff1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010affa:	8b 45 08             	mov    0x8(%ebp),%eax
f010affd:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010b003:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b006:	89 d0                	mov    %edx,%eax
f010b008:	01 c0                	add    %eax,%eax
f010b00a:	01 d0                	add    %edx,%eax
f010b00c:	c1 e0 03             	shl    $0x3,%eax
f010b00f:	01 d8                	add    %ebx,%eax
f010b011:	05 98 00 00 00       	add    $0x98,%eax
f010b016:	89 08                	mov    %ecx,(%eax)
f010b018:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b01b:	89 d0                	mov    %edx,%eax
f010b01d:	01 c0                	add    %eax,%eax
f010b01f:	01 d0                	add    %edx,%eax
f010b021:	c1 e0 03             	shl    $0x3,%eax
f010b024:	01 c8                	add    %ecx,%eax
f010b026:	05 98 00 00 00       	add    $0x98,%eax
f010b02b:	8b 00                	mov    (%eax),%eax
f010b02d:	85 c0                	test   %eax,%eax
f010b02f:	74 2e                	je     f010b05f <program_segment_alloc_map_copy_workingset+0x3b8>
f010b031:	8b 45 08             	mov    0x8(%ebp),%eax
f010b034:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010b03a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03d:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b043:	89 c8                	mov    %ecx,%eax
f010b045:	01 c0                	add    %eax,%eax
f010b047:	01 c8                	add    %ecx,%eax
f010b049:	c1 e0 03             	shl    $0x3,%eax
f010b04c:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	01 c8                	add    %ecx,%eax
f010b057:	83 c0 08             	add    $0x8,%eax
f010b05a:	89 42 14             	mov    %eax,0x14(%edx)
f010b05d:	eb 29                	jmp    f010b088 <program_segment_alloc_map_copy_workingset+0x3e1>
f010b05f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b062:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b068:	89 d0                	mov    %edx,%eax
f010b06a:	01 c0                	add    %eax,%eax
f010b06c:	01 d0                	add    %edx,%eax
f010b06e:	c1 e0 03             	shl    $0x3,%eax
f010b071:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b077:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07a:	01 d0                	add    %edx,%eax
f010b07c:	8d 50 08             	lea    0x8(%eax),%edx
f010b07f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b082:	89 90 14 da 01 00    	mov    %edx,0x1da14(%eax)
f010b088:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b091:	89 d0                	mov    %edx,%eax
f010b093:	01 c0                	add    %eax,%eax
f010b095:	01 d0                	add    %edx,%eax
f010b097:	c1 e0 03             	shl    $0x3,%eax
f010b09a:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b0a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a3:	01 d0                	add    %edx,%eax
f010b0a5:	8d 50 08             	lea    0x8(%eax),%edx
f010b0a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0ab:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
f010b0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b0bd:	89 d0                	mov    %edx,%eax
f010b0bf:	01 c0                	add    %eax,%eax
f010b0c1:	01 d0                	add    %edx,%eax
f010b0c3:	c1 e0 03             	shl    $0x3,%eax
f010b0c6:	01 c8                	add    %ecx,%eax
f010b0c8:	05 9c 00 00 00       	add    $0x9c,%eax
f010b0cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d6:	8b 80 1c da 01 00    	mov    0x1da1c(%eax),%eax
f010b0dc:	8d 50 01             	lea    0x1(%eax),%edx
f010b0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e2:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010b0e8:	e9 32 01 00 00       	jmp    f010b21f <program_segment_alloc_map_copy_workingset+0x578>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010b0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0f6:	89 d0                	mov    %edx,%eax
f010b0f8:	01 c0                	add    %eax,%eax
f010b0fa:	01 d0                	add    %edx,%eax
f010b0fc:	c1 e0 03             	shl    $0x3,%eax
f010b0ff:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b105:	8b 45 08             	mov    0x8(%ebp),%eax
f010b108:	01 d0                	add    %edx,%eax
f010b10a:	83 c0 08             	add    $0x8,%eax
f010b10d:	85 c0                	test   %eax,%eax
f010b10f:	75 17                	jne    f010b128 <program_segment_alloc_map_copy_workingset+0x481>
f010b111:	83 ec 04             	sub    $0x4,%esp
f010b114:	68 e8 72 12 f0       	push   $0xf01272e8
f010b119:	68 09 03 00 00       	push   $0x309
f010b11e:	68 0b 73 12 f0       	push   $0xf012730b
f010b123:	e8 f2 51 ff ff       	call   f010031a <_panic>
f010b128:	8b 45 08             	mov    0x8(%ebp),%eax
f010b12b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010b13a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b13d:	89 d0                	mov    %edx,%eax
f010b13f:	01 c0                	add    %eax,%eax
f010b141:	01 d0                	add    %edx,%eax
f010b143:	c1 e0 03             	shl    $0x3,%eax
f010b146:	01 d8                	add    %ebx,%eax
f010b148:	05 98 00 00 00       	add    $0x98,%eax
f010b14d:	89 08                	mov    %ecx,(%eax)
f010b14f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b152:	89 d0                	mov    %edx,%eax
f010b154:	01 c0                	add    %eax,%eax
f010b156:	01 d0                	add    %edx,%eax
f010b158:	c1 e0 03             	shl    $0x3,%eax
f010b15b:	01 c8                	add    %ecx,%eax
f010b15d:	05 98 00 00 00       	add    $0x98,%eax
f010b162:	8b 00                	mov    (%eax),%eax
f010b164:	85 c0                	test   %eax,%eax
f010b166:	74 2e                	je     f010b196 <program_segment_alloc_map_copy_workingset+0x4ef>
f010b168:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16b:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010b171:	8b 45 08             	mov    0x8(%ebp),%eax
f010b174:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b17a:	89 c8                	mov    %ecx,%eax
f010b17c:	01 c0                	add    %eax,%eax
f010b17e:	01 c8                	add    %ecx,%eax
f010b180:	c1 e0 03             	shl    $0x3,%eax
f010b183:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b189:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18c:	01 c8                	add    %ecx,%eax
f010b18e:	83 c0 08             	add    $0x8,%eax
f010b191:	89 42 14             	mov    %eax,0x14(%edx)
f010b194:	eb 29                	jmp    f010b1bf <program_segment_alloc_map_copy_workingset+0x518>
f010b196:	8b 45 08             	mov    0x8(%ebp),%eax
f010b199:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b19f:	89 d0                	mov    %edx,%eax
f010b1a1:	01 c0                	add    %eax,%eax
f010b1a3:	01 d0                	add    %edx,%eax
f010b1a5:	c1 e0 03             	shl    $0x3,%eax
f010b1a8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b1:	01 d0                	add    %edx,%eax
f010b1b3:	8d 50 08             	lea    0x8(%eax),%edx
f010b1b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b9:	89 90 24 da 01 00    	mov    %edx,0x1da24(%eax)
f010b1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c2:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1c8:	89 d0                	mov    %edx,%eax
f010b1ca:	01 c0                	add    %eax,%eax
f010b1cc:	01 d0                	add    %edx,%eax
f010b1ce:	c1 e0 03             	shl    $0x3,%eax
f010b1d1:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1da:	01 d0                	add    %edx,%eax
f010b1dc:	8d 50 08             	lea    0x8(%eax),%edx
f010b1df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1e2:	89 90 20 da 01 00    	mov    %edx,0x1da20(%eax)
f010b1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1eb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b1f4:	89 d0                	mov    %edx,%eax
f010b1f6:	01 c0                	add    %eax,%eax
f010b1f8:	01 d0                	add    %edx,%eax
f010b1fa:	c1 e0 03             	shl    $0x3,%eax
f010b1fd:	01 c8                	add    %ecx,%eax
f010b1ff:	05 9c 00 00 00       	add    $0x9c,%eax
f010b204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b20a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b20d:	8b 80 2c da 01 00    	mov    0x1da2c(%eax),%eax
f010b213:	8d 50 01             	lea    0x1(%eax),%edx
f010b216:	8b 45 08             	mov    0x8(%ebp),%eax
f010b219:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010b21f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b222:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b228:	8d 50 01             	lea    0x1(%eax),%edx
f010b22b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22e:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010b234:	8b 45 08             	mov    0x8(%ebp),%eax
f010b237:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b23d:	8b 55 08             	mov    0x8(%ebp),%edx
f010b240:	8b 8a 84 00 00 00    	mov    0x84(%edx),%ecx
f010b246:	ba 00 00 00 00       	mov    $0x0,%edx
f010b24b:	f7 f1                	div    %ecx
f010b24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b250:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010b256:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b259:	c1 e8 16             	shr    $0x16,%eax
f010b25c:	89 c2                	mov    %eax,%edx
f010b25e:	8b 45 18             	mov    0x18(%ebp),%eax
f010b261:	8b 00                	mov    (%eax),%eax
f010b263:	39 c2                	cmp    %eax,%edx
f010b265:	0f 84 d3 00 00 00    	je     f010b33e <program_segment_alloc_map_copy_workingset+0x697>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010b26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26e:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b274:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b277:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010b27a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b27d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b282:	89 c1                	mov    %eax,%ecx
f010b284:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b287:	89 d0                	mov    %edx,%eax
f010b289:	01 c0                	add    %eax,%eax
f010b28b:	01 d0                	add    %edx,%eax
f010b28d:	c1 e0 03             	shl    $0x3,%eax
f010b290:	01 d8                	add    %ebx,%eax
f010b292:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b297:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010b299:	8b 45 08             	mov    0x8(%ebp),%eax
f010b29c:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2a5:	89 d0                	mov    %edx,%eax
f010b2a7:	01 c0                	add    %eax,%eax
f010b2a9:	01 d0                	add    %edx,%eax
f010b2ab:	c1 e0 03             	shl    $0x3,%eax
f010b2ae:	01 c8                	add    %ecx,%eax
f010b2b0:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b2b5:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010b2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2bb:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2c4:	89 d0                	mov    %edx,%eax
f010b2c6:	01 c0                	add    %eax,%eax
f010b2c8:	01 d0                	add    %edx,%eax
f010b2ca:	c1 e0 03             	shl    $0x3,%eax
f010b2cd:	01 c8                	add    %ecx,%eax
f010b2cf:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b2d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010b2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2dd:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2e3:	8d 50 01             	lea    0x1(%eax),%edx
f010b2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e9:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010b2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2f2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2f8:	b9 32 00 00 00       	mov    $0x32,%ecx
f010b2fd:	ba 00 00 00 00       	mov    $0x0,%edx
f010b302:	f7 f1                	div    %ecx
f010b304:	8b 45 08             	mov    0x8(%ebp),%eax
f010b307:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			if (e->table_last_WS_index == 0)
f010b30d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b310:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b316:	85 c0                	test   %eax,%eax
f010b318:	75 17                	jne    f010b331 <program_segment_alloc_map_copy_workingset+0x68a>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010b31a:	83 ec 04             	sub    $0x4,%esp
f010b31d:	68 cc 74 12 f0       	push   $0xf01274cc
f010b322:	68 24 03 00 00       	push   $0x324
f010b327:	68 0b 73 12 f0       	push   $0xf012730b
f010b32c:	e8 e9 4f ff ff       	call   f010031a <_panic>
			(*lastTableNumber) = PDX(iVA);
f010b331:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b334:	c1 e8 16             	shr    $0x16,%eax
f010b337:	89 c2                	mov    %eax,%edx
f010b339:	8b 45 18             	mov    0x18(%ebp),%eax
f010b33c:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010b33e:	8b 45 10             	mov    0x10(%ebp),%eax
f010b341:	8b 00                	mov    (%eax),%eax
f010b343:	8d 50 01             	lea    0x1(%eax),%edx
f010b346:	8b 45 10             	mov    0x10(%ebp),%eax
f010b349:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010b34b:	ff 45 f0             	incl   -0x10(%ebp)
f010b34e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b355:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b358:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010b35b:	73 0c                	jae    f010b369 <program_segment_alloc_map_copy_workingset+0x6c2>
f010b35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b360:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b363:	0f 82 eb f9 ff ff    	jb     f010ad54 <program_segment_alloc_map_copy_workingset+0xad>

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}
	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010b369:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b36c:	8b 00                	mov    (%eax),%eax
f010b36e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010b371:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b374:	8b 40 0c             	mov    0xc(%eax),%eax
f010b377:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b37a:	eb 10                	jmp    f010b38c <program_segment_alloc_map_copy_workingset+0x6e5>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010b37c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b37f:	8a 10                	mov    (%eax),%dl
f010b381:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b384:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010b386:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010b389:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b38c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b38f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010b392:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010b395:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b39a:	89 c2                	mov    %eax,%edx
f010b39c:	8b 45 10             	mov    0x10(%ebp),%eax
f010b39f:	8b 00                	mov    (%eax),%eax
f010b3a1:	c1 e0 0c             	shl    $0xc,%eax
f010b3a4:	01 c2                	add    %eax,%edx
f010b3a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3a9:	39 c2                	cmp    %eax,%edx
f010b3ab:	76 1d                	jbe    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010b3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3b0:	8b 50 04             	mov    0x4(%eax),%edx
f010b3b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3b6:	01 c2                	add    %eax,%edx
f010b3b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b3bb:	39 c2                	cmp    %eax,%edx
f010b3bd:	77 bd                	ja     f010b37c <program_segment_alloc_map_copy_workingset+0x6d5>
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3bf:	eb 09                	jmp    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
	{
		*dst_ptr = 0;
f010b3c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3c4:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010b3c7:	ff 45 e8             	incl   -0x18(%ebp)
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010b3d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010b3d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b3d8:	89 c2                	mov    %eax,%edx
f010b3da:	8b 45 10             	mov    0x10(%ebp),%eax
f010b3dd:	8b 00                	mov    (%eax),%eax
f010b3df:	c1 e0 0c             	shl    $0xc,%eax
f010b3e2:	01 c2                	add    %eax,%edx
f010b3e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3e7:	39 c2                	cmp    %eax,%edx
f010b3e9:	77 d6                	ja     f010b3c1 <program_segment_alloc_map_copy_workingset+0x71a>
	{
		*dst_ptr = 0;
		dst_ptr++ ;
	}

	return 0;
f010b3eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b3f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b3f3:	c9                   	leave  
f010b3f4:	c3                   	ret    

f010b3f5 <create_user_directory>:

//==================================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010b3f5:	55                   	push   %ebp
f010b3f6:	89 e5                	mov    %esp,%ebp
f010b3f8:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010b3fb:	83 ec 0c             	sub    $0xc,%esp
f010b3fe:	68 00 10 00 00       	push   $0x1000
f010b403:	e8 ae d6 ff ff       	call   f0108ab6 <kmalloc>
f010b408:	83 c4 10             	add    $0x10,%esp
f010b40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010b40e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b412:	75 17                	jne    f010b42b <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010b414:	83 ec 04             	sub    $0x4,%esp
f010b417:	68 6f 75 12 f0       	push   $0xf012756f
f010b41c:	68 54 03 00 00       	push   $0x354
f010b421:	68 0b 73 12 f0       	push   $0xf012730b
f010b426:	e8 ef 4e ff ff       	call   f010031a <_panic>
	}
	return ptr_user_page_directory;
f010b42b:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010b42e:	c9                   	leave  
f010b42f:	c3                   	ret    

f010b430 <create_user_kern_stack>:
uint32 __cur_k_stk = KERNEL_HEAP_START;
//===========================================================
// 5) ALLOCATE SPACE FOR USER KERNEL STACK (One Per Process):
//===========================================================
void* create_user_kern_stack(uint32* ptr_user_page_directory)
{
f010b430:	55                   	push   %ebp
f010b431:	89 e5                	mov    %esp,%ebp
f010b433:	83 ec 18             	sub    $0x18,%esp
	//remember to leave its bottom page as a GUARD PAGE (i.e. not mapped)
	//return a pointer to the start of the allocated space (including the GUARD PAGE)


#else
	if (KERNEL_HEAP_MAX - __cur_k_stk < KERNEL_STACK_SIZE)
f010b436:	a1 5c d9 17 f0       	mov    0xf017d95c,%eax
f010b43b:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f010b440:	29 c2                	sub    %eax,%edx
f010b442:	89 d0                	mov    %edx,%eax
f010b444:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
f010b449:	77 17                	ja     f010b462 <create_user_kern_stack+0x32>
		panic("Run out of kernel heap!! Unable to create a kernel stack for the process. Can't create more processes!");
f010b44b:	83 ec 04             	sub    $0x4,%esp
f010b44e:	68 8c 75 12 f0       	push   $0xf012758c
f010b453:	68 6d 03 00 00       	push   $0x36d
f010b458:	68 0b 73 12 f0       	push   $0xf012730b
f010b45d:	e8 b8 4e ff ff       	call   f010031a <_panic>
	void* kstack = (void*) __cur_k_stk;
f010b462:	a1 5c d9 17 f0       	mov    0xf017d95c,%eax
f010b467:	89 45 f4             	mov    %eax,-0xc(%ebp)
	__cur_k_stk += KERNEL_STACK_SIZE;
f010b46a:	a1 5c d9 17 f0       	mov    0xf017d95c,%eax
f010b46f:	05 00 80 00 00       	add    $0x8000,%eax
f010b474:	a3 5c d9 17 f0       	mov    %eax,0xf017d95c
	return kstack ;
f010b479:	8b 45 f4             	mov    -0xc(%ebp),%eax
//	panic("KERNEL HEAP is OFF! user kernel stack is not supported");
#endif
}
f010b47c:	c9                   	leave  
f010b47d:	c3                   	ret    

f010b47e <delete_user_kern_stack>:
/*2024*/
//===========================================================
// 6) DELETE USER KERNEL STACK (One Per Process):
//===========================================================
void delete_user_kern_stack(struct Env* e)
{
f010b47e:	55                   	push   %ebp
f010b47f:	89 e5                	mov    %esp,%ebp
f010b481:	83 ec 08             	sub    $0x8,%esp
	panic("delete_user_kern_stack() is not implemented yet...!!");

	//Delete the allocated space for the user kernel stack of this process "e"
	//remember to delete the bottom GUARD PAGE (i.e. not mapped)
#else
	panic("KERNEL HEAP is OFF! user kernel stack can't be deleted");
f010b484:	83 ec 04             	sub    $0x4,%esp
f010b487:	68 f4 75 12 f0       	push   $0xf01275f4
f010b48c:	68 83 03 00 00       	push   $0x383
f010b491:	68 0b 73 12 f0       	push   $0xf012730b
f010b496:	e8 7f 4e ff ff       	call   f010031a <_panic>

f010b49b <initialize_uheap_dynamic_allocator>:
}
//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010b49b:	55                   	push   %ebp
f010b49c:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2] Initialize the dynamic allocator of the user heap
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("initialize_uheap_dynamic_allocator() is not implemented yet...!!");
}
f010b49e:	90                   	nop
f010b49f:	5d                   	pop    %ebp
f010b4a0:	c3                   	ret    

f010b4a1 <initialize_environment>:
//	  3.3 Setup the context to return to env_start() at the early first run from the scheduler
// 4. Initialize the working set
// 5. Initialize the user dynamic allocator
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010b4a1:	55                   	push   %ebp
f010b4a2:	89 e5                	mov    %esp,%ebp
f010b4a4:	53                   	push   %ebx
f010b4a5:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010b4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4ab:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b4ae:	89 50 64             	mov    %edx,0x64(%eax)
	e->env_cr3 = phys_user_page_directory;
f010b4b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4b4:	8b 55 10             	mov    0x10(%ebp),%edx
f010b4b7:	89 50 68             	mov    %edx,0x68(%eax)

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b4c1:	eb 17                	jmp    f010b4da <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010b4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4c6:	8b 40 64             	mov    0x64(%eax),%eax
f010b4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4cc:	c1 e2 02             	shl    $0x2,%edx
f010b4cf:	01 d0                	add    %edx,%eax
f010b4d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4d7:	ff 45 f4             	incl   -0xc(%ebp)
f010b4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4dd:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010b4e2:	76 df                	jbe    f010b4c3 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b4e4:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010b4eb:	eb 22                	jmp    f010b50f <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010b4ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4f0:	8b 40 64             	mov    0x64(%eax),%eax
f010b4f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4f6:	c1 e2 02             	shl    $0x2,%edx
f010b4f9:	01 c2                	add    %eax,%edx
f010b4fb:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f010b500:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010b503:	c1 e1 02             	shl    $0x2,%ecx
f010b506:	01 c8                	add    %ecx,%eax
f010b508:	8b 00                	mov    (%eax),%eax
f010b50a:	89 02                	mov    %eax,(%edx)
	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b50c:	ff 45 f4             	incl   -0xc(%ebp)
f010b50f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010b516:	7e d5                	jle    f010b4ed <initialize_environment+0x4c>
	 * Setup the new context to start executing at the env_start() to do some initializations then
	 * returns to trapret() to pop the trap frame and invoke iret
	 */
	{
		//[1] Create the stack
		e->kstack = create_user_kern_stack(e->env_page_directory);
f010b518:	8b 45 08             	mov    0x8(%ebp),%eax
f010b51b:	8b 40 64             	mov    0x64(%eax),%eax
f010b51e:	83 ec 0c             	sub    $0xc,%esp
f010b521:	50                   	push   %eax
f010b522:	e8 09 ff ff ff       	call   f010b430 <create_user_kern_stack>
f010b527:	83 c4 10             	add    $0x10,%esp
f010b52a:	89 c2                	mov    %eax,%edx
f010b52c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b52f:	89 50 70             	mov    %edx,0x70(%eax)

		//[2] Leave room for the trap frame
		void* sp = e->kstack + KERNEL_STACK_SIZE;
f010b532:	8b 45 08             	mov    0x8(%ebp),%eax
f010b535:	8b 40 70             	mov    0x70(%eax),%eax
f010b538:	05 00 80 00 00       	add    $0x8000,%eax
f010b53d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		sp -= sizeof(struct Trapframe);
f010b540:	83 6d ec 44          	subl   $0x44,-0x14(%ebp)
		e->env_tf = (struct Trapframe *) sp;
f010b544:	8b 45 08             	mov    0x8(%ebp),%eax
f010b547:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b54a:	89 10                	mov    %edx,(%eax)

		//[3] Set the address of trapret() first - to return on it after env_start() is returned,
		sp -= 4;
f010b54c:	83 6d ec 04          	subl   $0x4,-0x14(%ebp)
		*(uint32*)sp = (uint32)trapret;
f010b550:	ba 84 d7 10 f0       	mov    $0xf010d784,%edx
f010b555:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b558:	89 10                	mov    %edx,(%eax)

		//[4] Place the context next
		sp -= sizeof(struct Context);
f010b55a:	83 6d ec 20          	subl   $0x20,-0x14(%ebp)
		e->context = (struct Context *) sp;
f010b55e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b561:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b564:	89 50 04             	mov    %edx,0x4(%eax)

		//[4] Setup the context to return to env_start() at the early first run from the scheduler
		memset(e->context, 0, sizeof(*(e->context)));
f010b567:	8b 45 08             	mov    0x8(%ebp),%eax
f010b56a:	8b 40 04             	mov    0x4(%eax),%eax
f010b56d:	83 ec 04             	sub    $0x4,%esp
f010b570:	6a 20                	push   $0x20
f010b572:	6a 00                	push   $0x0
f010b574:	50                   	push   %eax
f010b575:	e8 23 6f 01 00       	call   f012249d <memset>
f010b57a:	83 c4 10             	add    $0x10,%esp
		e->context->eip = (uint32) (env_start);
f010b57d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b580:	8b 40 04             	mov    0x4(%eax),%eax
f010b583:	ba d6 a6 10 f0       	mov    $0xf010a6d6,%edx
f010b588:	89 50 1c             	mov    %edx,0x1c(%eax)
	{
		LIST_INIT(&(e->page_WS_list));
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010b58b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b58e:	8b 15 10 5a 55 f0    	mov    0xf0555a10,%edx
f010b594:	29 d0                	sub    %edx,%eax
f010b596:	c1 f8 02             	sar    $0x2,%eax
f010b599:	89 c2                	mov    %eax,%edx
f010b59b:	89 d0                	mov    %edx,%eax
f010b59d:	c1 e0 02             	shl    $0x2,%eax
f010b5a0:	01 d0                	add    %edx,%eax
f010b5a2:	c1 e0 02             	shl    $0x2,%eax
f010b5a5:	01 d0                	add    %edx,%eax
f010b5a7:	c1 e0 02             	shl    $0x2,%eax
f010b5aa:	01 d0                	add    %edx,%eax
f010b5ac:	c1 e0 02             	shl    $0x2,%eax
f010b5af:	01 d0                	add    %edx,%eax
f010b5b1:	c1 e0 08             	shl    $0x8,%eax
f010b5b4:	29 d0                	sub    %edx,%eax
f010b5b6:	c1 e0 08             	shl    $0x8,%eax
f010b5b9:	29 d0                	sub    %edx,%eax
f010b5bb:	c1 e0 03             	shl    $0x3,%eax
f010b5be:	01 d0                	add    %edx,%eax
f010b5c0:	c1 e0 03             	shl    $0x3,%eax
f010b5c3:	01 d0                	add    %edx,%eax
f010b5c5:	01 c0                	add    %eax,%eax
f010b5c7:	01 d0                	add    %edx,%eax
f010b5c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010b5cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b5cf:	89 d0                	mov    %edx,%eax
f010b5d1:	c1 e0 06             	shl    $0x6,%eax
f010b5d4:	29 d0                	sub    %edx,%eax
f010b5d6:	c1 e0 02             	shl    $0x2,%eax
f010b5d9:	01 d0                	add    %edx,%eax
f010b5db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b5e2:	01 c8                	add    %ecx,%eax
f010b5e4:	c1 e0 03             	shl    $0x3,%eax
f010b5e7:	01 d0                	add    %edx,%eax
f010b5e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b5f0:	29 c2                	sub    %eax,%edx
f010b5f2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010b5f9:	89 c2                	mov    %eax,%edx
f010b5fb:	89 d0                	mov    %edx,%eax
f010b5fd:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010b602:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010b608:	8b 45 08             	mov    0x8(%ebp),%eax
f010b60b:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
	}
#endif

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010b611:	83 ec 0c             	sub    $0xc,%esp
f010b614:	6a 02                	push   $0x2
f010b616:	e8 ab 30 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010b61b:	83 c4 10             	add    $0x10,%esp
f010b61e:	85 c0                	test   %eax,%eax
f010b620:	0f 84 34 01 00 00    	je     f010b75a <initialize_environment+0x2b9>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b626:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b62d:	e9 14 01 00 00       	jmp    f010b746 <initialize_environment+0x2a5>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010b632:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b635:	89 d0                	mov    %edx,%eax
f010b637:	01 c0                	add    %eax,%eax
f010b639:	01 d0                	add    %edx,%eax
f010b63b:	c1 e0 03             	shl    $0x3,%eax
f010b63e:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b644:	8b 45 08             	mov    0x8(%ebp),%eax
f010b647:	01 d0                	add    %edx,%eax
f010b649:	83 c0 08             	add    $0x8,%eax
f010b64c:	85 c0                	test   %eax,%eax
f010b64e:	75 17                	jne    f010b667 <initialize_environment+0x1c6>
f010b650:	83 ec 04             	sub    $0x4,%esp
f010b653:	68 e8 72 12 f0       	push   $0xf01272e8
f010b658:	68 e6 03 00 00       	push   $0x3e6
f010b65d:	68 0b 73 12 f0       	push   $0xf012730b
f010b662:	e8 b3 4c ff ff       	call   f010031a <_panic>
f010b667:	8b 45 08             	mov    0x8(%ebp),%eax
f010b66a:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b670:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b673:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b676:	89 c8                	mov    %ecx,%eax
f010b678:	01 c0                	add    %eax,%eax
f010b67a:	01 c8                	add    %ecx,%eax
f010b67c:	c1 e0 03             	shl    $0x3,%eax
f010b67f:	01 d8                	add    %ebx,%eax
f010b681:	05 98 00 00 00       	add    $0x98,%eax
f010b686:	89 10                	mov    %edx,(%eax)
f010b688:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b68b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b68e:	89 d0                	mov    %edx,%eax
f010b690:	01 c0                	add    %eax,%eax
f010b692:	01 d0                	add    %edx,%eax
f010b694:	c1 e0 03             	shl    $0x3,%eax
f010b697:	01 c8                	add    %ecx,%eax
f010b699:	05 98 00 00 00       	add    $0x98,%eax
f010b69e:	8b 00                	mov    (%eax),%eax
f010b6a0:	85 c0                	test   %eax,%eax
f010b6a2:	74 28                	je     f010b6cc <initialize_environment+0x22b>
f010b6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6a7:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b6ad:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b6b0:	89 c8                	mov    %ecx,%eax
f010b6b2:	01 c0                	add    %eax,%eax
f010b6b4:	01 c8                	add    %ecx,%eax
f010b6b6:	c1 e0 03             	shl    $0x3,%eax
f010b6b9:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b6bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6c2:	01 c8                	add    %ecx,%eax
f010b6c4:	83 c0 08             	add    $0x8,%eax
f010b6c7:	89 42 14             	mov    %eax,0x14(%edx)
f010b6ca:	eb 23                	jmp    f010b6ef <initialize_environment+0x24e>
f010b6cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6cf:	89 d0                	mov    %edx,%eax
f010b6d1:	01 c0                	add    %eax,%eax
f010b6d3:	01 d0                	add    %edx,%eax
f010b6d5:	c1 e0 03             	shl    $0x3,%eax
f010b6d8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b6de:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e1:	01 d0                	add    %edx,%eax
f010b6e3:	8d 50 08             	lea    0x8(%eax),%edx
f010b6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e9:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010b6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6f2:	89 d0                	mov    %edx,%eax
f010b6f4:	01 c0                	add    %eax,%eax
f010b6f6:	01 d0                	add    %edx,%eax
f010b6f8:	c1 e0 03             	shl    $0x3,%eax
f010b6fb:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b701:	8b 45 08             	mov    0x8(%ebp),%eax
f010b704:	01 d0                	add    %edx,%eax
f010b706:	8d 50 08             	lea    0x8(%eax),%edx
f010b709:	8b 45 08             	mov    0x8(%ebp),%eax
f010b70c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010b712:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b715:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b718:	89 d0                	mov    %edx,%eax
f010b71a:	01 c0                	add    %eax,%eax
f010b71c:	01 d0                	add    %edx,%eax
f010b71e:	c1 e0 03             	shl    $0x3,%eax
f010b721:	01 c8                	add    %ecx,%eax
f010b723:	05 9c 00 00 00       	add    $0x9c,%eax
f010b728:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b731:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010b737:	8d 50 01             	lea    0x1(%eax),%edx
f010b73a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b73d:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b743:	ff 45 f0             	incl   -0x10(%ebp)
f010b746:	8b 45 08             	mov    0x8(%ebp),%eax
f010b749:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b74f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b752:	39 c2                	cmp    %eax,%edx
f010b754:	0f 87 d8 fe ff ff    	ja     f010b632 <initialize_environment+0x191>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b75a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b761:	eb 54                	jmp    f010b7b7 <initialize_environment+0x316>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010b763:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b766:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b769:	89 d0                	mov    %edx,%eax
f010b76b:	01 c0                	add    %eax,%eax
f010b76d:	01 d0                	add    %edx,%eax
f010b76f:	c1 e0 03             	shl    $0x3,%eax
f010b772:	01 c8                	add    %ecx,%eax
f010b774:	05 88 00 00 00       	add    $0x88,%eax
f010b779:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010b77f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b785:	89 d0                	mov    %edx,%eax
f010b787:	01 c0                	add    %eax,%eax
f010b789:	01 d0                	add    %edx,%eax
f010b78b:	c1 e0 03             	shl    $0x3,%eax
f010b78e:	01 c8                	add    %ecx,%eax
f010b790:	05 8c 00 00 00       	add    $0x8c,%eax
f010b795:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010b798:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b79b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b79e:	89 d0                	mov    %edx,%eax
f010b7a0:	01 c0                	add    %eax,%eax
f010b7a2:	01 d0                	add    %edx,%eax
f010b7a4:	c1 e0 03             	shl    $0x3,%eax
f010b7a7:	01 c8                	add    %ecx,%eax
f010b7a9:	05 90 00 00 00       	add    $0x90,%eax
f010b7ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b7b4:	ff 45 f4             	incl   -0xc(%ebp)
f010b7b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ba:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b7c3:	39 c2                	cmp    %eax,%edx
f010b7c5:	77 9c                	ja     f010b763 <initialize_environment+0x2c2>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010b7c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ca:	c7 80 58 d5 01 00 00 	movl   $0x0,0x1d558(%eax)
f010b7d1:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b7d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b7db:	eb 54                	jmp    f010b831 <initialize_environment+0x390>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010b7dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7e3:	89 d0                	mov    %edx,%eax
f010b7e5:	01 c0                	add    %eax,%eax
f010b7e7:	01 d0                	add    %edx,%eax
f010b7e9:	c1 e0 03             	shl    $0x3,%eax
f010b7ec:	01 c8                	add    %ecx,%eax
f010b7ee:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b7f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010b7f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7ff:	89 d0                	mov    %edx,%eax
f010b801:	01 c0                	add    %eax,%eax
f010b803:	01 d0                	add    %edx,%eax
f010b805:	c1 e0 03             	shl    $0x3,%eax
f010b808:	01 c8                	add    %ecx,%eax
f010b80a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b80f:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010b812:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b815:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b818:	89 d0                	mov    %edx,%eax
f010b81a:	01 c0                	add    %eax,%eax
f010b81c:	01 d0                	add    %edx,%eax
f010b81e:	c1 e0 03             	shl    $0x3,%eax
f010b821:	01 c8                	add    %ecx,%eax
f010b823:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b828:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b82e:	ff 45 f4             	incl   -0xc(%ebp)
f010b831:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010b835:	7e a6                	jle    f010b7dd <initialize_environment+0x33c>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010b837:	8b 45 08             	mov    0x8(%ebp),%eax
f010b83a:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f010b841:	00 00 00 

	e->pageFaultsCounter=0;
f010b844:	8b 45 08             	mov    0x8(%ebp),%eax
f010b847:	c7 80 40 da 01 00 00 	movl   $0x0,0x1da40(%eax)
f010b84e:	00 00 00 
	e->tableFaultsCounter=0;
f010b851:	8b 45 08             	mov    0x8(%ebp),%eax
f010b854:	c7 80 44 da 01 00 00 	movl   $0x0,0x1da44(%eax)
f010b85b:	00 00 00 

	e->freeingFullWSCounter = 0;
f010b85e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b861:	c7 80 48 da 01 00 00 	movl   $0x0,0x1da48(%eax)
f010b868:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010b86b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b86e:	c7 80 4c da 01 00 00 	movl   $0x0,0x1da4c(%eax)
f010b875:	00 00 00 

	e->nModifiedPages=0;
f010b878:	8b 45 08             	mov    0x8(%ebp),%eax
f010b87b:	c7 80 50 da 01 00 00 	movl   $0x0,0x1da50(%eax)
f010b882:	00 00 00 
	e->nNotModifiedPages=0;
f010b885:	8b 45 08             	mov    0x8(%ebp),%eax
f010b888:	c7 80 54 da 01 00 00 	movl   $0x0,0x1da54(%eax)
f010b88f:	00 00 00 
	e->nClocks = 0;
f010b892:	8b 45 08             	mov    0x8(%ebp),%eax
f010b895:	c7 80 68 da 01 00 00 	movl   $0x0,0x1da68(%eax)
f010b89c:	00 00 00 

	//2020
	e->nPageIn = 0;
f010b89f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8a2:	c7 80 5c da 01 00 00 	movl   $0x0,0x1da5c(%eax)
f010b8a9:	00 00 00 
	e->nPageOut = 0;
f010b8ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8af:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f010b8b6:	00 00 00 
	e->nNewPageAdded = 0;
f010b8b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8bc:	c7 80 64 da 01 00 00 	movl   $0x0,0x1da64(%eax)
f010b8c3:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//[PROJECT'24.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010b8c6:	83 ec 04             	sub    $0x4,%esp
f010b8c9:	68 00 00 00 82       	push   $0x82000000
f010b8ce:	68 00 00 00 80       	push   $0x80000000
f010b8d3:	ff 75 08             	pushl  0x8(%ebp)
f010b8d6:	e8 c0 fb ff ff       	call   f010b49b <initialize_uheap_dynamic_allocator>
f010b8db:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010b8de:	83 ec 0c             	sub    $0xc,%esp
f010b8e1:	ff 75 08             	pushl  0x8(%ebp)
f010b8e4:	e8 09 00 00 00       	call   f010b8f2 <complete_environment_initialization>
f010b8e9:	83 c4 10             	add    $0x10,%esp
}
f010b8ec:	90                   	nop
f010b8ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b8f0:	c9                   	leave  
f010b8f1:	c3                   	ret    

f010b8f2 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010b8f2:	55                   	push   %ebp
f010b8f3:	89 e5                	mov    %esp,%ebp
f010b8f5:	53                   	push   %ebx
f010b8f6:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8fc:	8b 40 64             	mov    0x64(%eax),%eax
f010b8ff:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010b905:	8b 45 08             	mov    0x8(%ebp),%eax
f010b908:	8b 40 68             	mov    0x68(%eax),%eax
f010b90b:	83 c8 03             	or     $0x3,%eax
f010b90e:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010b910:	8b 45 08             	mov    0x8(%ebp),%eax
f010b913:	8b 40 64             	mov    0x64(%eax),%eax
f010b916:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010b91c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b91f:	8b 40 68             	mov    0x68(%eax),%eax
f010b922:	83 c8 05             	or     $0x5,%eax
f010b925:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010b927:	8b 45 08             	mov    0x8(%ebp),%eax
f010b92a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	e->disk_env_pgdir_PA= 0;
f010b931:	8b 45 08             	mov    0x8(%ebp),%eax
f010b934:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
	e->disk_env_tabledir = 0;
f010b93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b93e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	e->disk_env_tabledir_PA = 0;
f010b945:	8b 45 08             	mov    0x8(%ebp),%eax
f010b948:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f010b94f:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010b952:	8b 45 08             	mov    0x8(%ebp),%eax
f010b955:	8b 58 10             	mov    0x10(%eax),%ebx
f010b958:	83 ec 0c             	sub    $0xc,%esp
f010b95b:	6a 08                	push   $0x8
f010b95d:	e8 19 51 01 00       	call   f0120a7b <log2_ceil>
f010b962:	83 c4 10             	add    $0x10,%esp
f010b965:	ba 01 00 00 00       	mov    $0x1,%edx
f010b96a:	88 c1                	mov    %al,%cl
f010b96c:	d3 e2                	shl    %cl,%edx
f010b96e:	89 d0                	mov    %edx,%eax
f010b970:	01 d8                	add    %ebx,%eax
f010b972:	89 c3                	mov    %eax,%ebx
f010b974:	83 ec 0c             	sub    $0xc,%esp
f010b977:	6a 08                	push   $0x8
f010b979:	e8 c8 50 01 00       	call   f0120a46 <nearest_pow2_ceil>
f010b97e:	83 c4 10             	add    $0x10,%esp
f010b981:	f7 d8                	neg    %eax
f010b983:	21 d8                	and    %ebx,%eax
f010b985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010b988:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b98c:	7f 1b                	jg     f010b9a9 <complete_environment_initialization+0xb7>
		generation = 1 << ENVGENSHIFT;
f010b98e:	83 ec 0c             	sub    $0xc,%esp
f010b991:	6a 08                	push   $0x8
f010b993:	e8 e3 50 01 00       	call   f0120a7b <log2_ceil>
f010b998:	83 c4 10             	add    $0x10,%esp
f010b99b:	ba 01 00 00 00       	mov    $0x1,%edx
f010b9a0:	88 c1                	mov    %al,%cl
f010b9a2:	d3 e2                	shl    %cl,%edx
f010b9a4:	89 d0                	mov    %edx,%eax
f010b9a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010b9a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ac:	8b 15 10 5a 55 f0    	mov    0xf0555a10,%edx
f010b9b2:	29 d0                	sub    %edx,%eax
f010b9b4:	c1 f8 02             	sar    $0x2,%eax
f010b9b7:	89 c2                	mov    %eax,%edx
f010b9b9:	89 d0                	mov    %edx,%eax
f010b9bb:	c1 e0 02             	shl    $0x2,%eax
f010b9be:	01 d0                	add    %edx,%eax
f010b9c0:	c1 e0 02             	shl    $0x2,%eax
f010b9c3:	01 d0                	add    %edx,%eax
f010b9c5:	c1 e0 02             	shl    $0x2,%eax
f010b9c8:	01 d0                	add    %edx,%eax
f010b9ca:	c1 e0 02             	shl    $0x2,%eax
f010b9cd:	01 d0                	add    %edx,%eax
f010b9cf:	c1 e0 08             	shl    $0x8,%eax
f010b9d2:	29 d0                	sub    %edx,%eax
f010b9d4:	c1 e0 08             	shl    $0x8,%eax
f010b9d7:	29 d0                	sub    %edx,%eax
f010b9d9:	c1 e0 03             	shl    $0x3,%eax
f010b9dc:	01 d0                	add    %edx,%eax
f010b9de:	c1 e0 03             	shl    $0x3,%eax
f010b9e1:	01 d0                	add    %edx,%eax
f010b9e3:	01 c0                	add    %eax,%eax
f010b9e5:	01 d0                	add    %edx,%eax
f010b9e7:	0b 45 f4             	or     -0xc(%ebp),%eax
f010b9ea:	89 c2                	mov    %eax,%edx
f010b9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ef:	89 50 10             	mov    %edx,0x10(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	struct Env* cur_env = get_cpu_proc();
f010b9f2:	e8 79 ed ff ff       	call   f010a770 <get_cpu_proc>
f010b9f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env == NULL)
f010b9fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b9fe:	75 0c                	jne    f010ba0c <complete_environment_initialization+0x11a>
		e->env_parent_id = 0;//no parent;
f010ba00:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba03:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ba0a:	eb 0c                	jmp    f010ba18 <complete_environment_initialization+0x126>
	else
		e->env_parent_id = cur_env->env_id;//curenv is the parent;
f010ba0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba0f:	8b 50 10             	mov    0x10(%eax),%edx
f010ba12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba15:	89 50 14             	mov    %edx,0x14(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ba18:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba1b:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
	e->env_runs = 0;
f010ba22:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba25:	c7 80 58 da 01 00 00 	movl   $0x0,0x1da58(%eax)
f010ba2c:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(e->env_tf, 0, sizeof(*(e->env_tf)));
f010ba2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba32:	8b 00                	mov    (%eax),%eax
f010ba34:	83 ec 04             	sub    $0x4,%esp
f010ba37:	6a 44                	push   $0x44
f010ba39:	6a 00                	push   $0x0
f010ba3b:	50                   	push   %eax
f010ba3c:	e8 5c 6a 01 00       	call   f012249d <memset>
f010ba41:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf->tf_ds = GD_UD | 3;
f010ba44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba47:	8b 00                	mov    (%eax),%eax
f010ba49:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf->tf_es = GD_UD | 3;
f010ba4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba52:	8b 00                	mov    (%eax),%eax
f010ba54:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf->tf_ss = GD_UD | 3;
f010ba5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5d:	8b 00                	mov    (%eax),%eax
f010ba5f:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf->tf_esp = (uint32*)USTACKTOP;
f010ba65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba68:	8b 00                	mov    (%eax),%eax
f010ba6a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf->tf_cs = GD_UT | 3;
f010ba71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba74:	8b 00                	mov    (%eax),%eax
f010ba76:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf->tf_eflags |= FL_IF;
f010ba7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba7f:	8b 00                	mov    (%eax),%eax
f010ba81:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba84:	8b 12                	mov    (%edx),%edx
f010ba86:	8b 52 38             	mov    0x38(%edx),%edx
f010ba89:	80 ce 02             	or     $0x2,%dh
f010ba8c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ba8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ba93:	75 17                	jne    f010baac <complete_environment_initialization+0x1ba>
f010ba95:	83 ec 04             	sub    $0x4,%esp
f010ba98:	68 9d 73 12 f0       	push   $0xf012739d
f010ba9d:	68 52 04 00 00       	push   $0x452
f010baa2:	68 0b 73 12 f0       	push   $0xf012730b
f010baa7:	e8 6e 48 ff ff       	call   f010031a <_panic>
f010baac:	8b 45 08             	mov    0x8(%ebp),%eax
f010baaf:	8b 40 08             	mov    0x8(%eax),%eax
f010bab2:	85 c0                	test   %eax,%eax
f010bab4:	74 11                	je     f010bac7 <complete_environment_initialization+0x1d5>
f010bab6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bab9:	8b 40 08             	mov    0x8(%eax),%eax
f010babc:	8b 55 08             	mov    0x8(%ebp),%edx
f010babf:	8b 52 0c             	mov    0xc(%edx),%edx
f010bac2:	89 50 0c             	mov    %edx,0xc(%eax)
f010bac5:	eb 0b                	jmp    f010bad2 <complete_environment_initialization+0x1e0>
f010bac7:	8b 45 08             	mov    0x8(%ebp),%eax
f010baca:	8b 40 0c             	mov    0xc(%eax),%eax
f010bacd:	a3 18 5a 55 f0       	mov    %eax,0xf0555a18
f010bad2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bad5:	8b 40 0c             	mov    0xc(%eax),%eax
f010bad8:	85 c0                	test   %eax,%eax
f010bada:	74 11                	je     f010baed <complete_environment_initialization+0x1fb>
f010badc:	8b 45 08             	mov    0x8(%ebp),%eax
f010badf:	8b 40 0c             	mov    0xc(%eax),%eax
f010bae2:	8b 55 08             	mov    0x8(%ebp),%edx
f010bae5:	8b 52 08             	mov    0x8(%edx),%edx
f010bae8:	89 50 08             	mov    %edx,0x8(%eax)
f010baeb:	eb 0b                	jmp    f010baf8 <complete_environment_initialization+0x206>
f010baed:	8b 45 08             	mov    0x8(%ebp),%eax
f010baf0:	8b 40 08             	mov    0x8(%eax),%eax
f010baf3:	a3 14 5a 55 f0       	mov    %eax,0xf0555a14
f010baf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010bafb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010bb02:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb05:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010bb0c:	a1 20 5a 55 f0       	mov    0xf0555a20,%eax
f010bb11:	48                   	dec    %eax
f010bb12:	a3 20 5a 55 f0       	mov    %eax,0xf0555a20
	return ;
f010bb17:	90                   	nop
}
f010bb18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bb1b:	c9                   	leave  
f010bb1c:	c3                   	ret    

f010bb1d <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010bb1d:	55                   	push   %ebp
f010bb1e:	89 e5                	mov    %esp,%ebp
f010bb20:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb26:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb2c:	8b 00                	mov    (%eax),%eax
f010bb2e:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb33:	74 17                	je     f010bb4c <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010bb35:	83 ec 04             	sub    $0x4,%esp
f010bb38:	68 2b 76 12 f0       	push   $0xf012762b
f010bb3d:	68 5e 04 00 00       	push   $0x45e
f010bb42:	68 0b 73 12 f0       	push   $0xf012730b
f010bb47:	e8 ce 47 ff ff       	call   f010031a <_panic>
	e->env_tf->tf_eip = (uint32*)pELFHDR->e_entry ;
f010bb4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb4f:	8b 00                	mov    (%eax),%eax
f010bb51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bb54:	8b 52 18             	mov    0x18(%edx),%edx
f010bb57:	89 50 30             	mov    %edx,0x30(%eax)
}
f010bb5a:	90                   	nop
f010bb5b:	c9                   	leave  
f010bb5c:	c3                   	ret    

f010bb5d <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 11) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010bb5d:	55                   	push   %ebp
f010bb5e:	89 e5                	mov    %esp,%ebp
f010bb60:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010bb63:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb66:	8b 40 10             	mov    0x10(%eax),%eax
f010bb69:	8d 48 01             	lea    0x1(%eax),%ecx
f010bb6c:	8b 55 08             	mov    0x8(%ebp),%edx
f010bb6f:	89 4a 10             	mov    %ecx,0x10(%edx)
f010bb72:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb75:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bb7e:	8b 00                	mov    (%eax),%eax
f010bb80:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb85:	74 17                	je     f010bb9e <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010bb87:	83 ec 04             	sub    $0x4,%esp
f010bb8a:	68 2b 76 12 f0       	push   $0xf012762b
f010bb8f:	68 6c 04 00 00       	push   $0x46c
f010bb94:	68 0b 73 12 f0       	push   $0xf012730b
f010bb99:	e8 7c 47 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bb9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bba1:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bba4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bba7:	01 d0                	add    %edx,%eax
f010bba9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010bbac:	eb 0f                	jmp    f010bbbd <PROGRAM_SEGMENT_NEXT+0x60>
f010bbae:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbb1:	8b 40 10             	mov    0x10(%eax),%eax
f010bbb4:	8d 50 01             	lea    0x1(%eax),%edx
f010bbb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbba:	89 50 10             	mov    %edx,0x10(%eax)
f010bbbd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbc0:	8b 40 10             	mov    0x10(%eax),%eax
f010bbc3:	c1 e0 05             	shl    $0x5,%eax
f010bbc6:	89 c2                	mov    %eax,%edx
f010bbc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bbcb:	01 d0                	add    %edx,%eax
f010bbcd:	8b 00                	mov    (%eax),%eax
f010bbcf:	83 f8 01             	cmp    $0x1,%eax
f010bbd2:	74 13                	je     f010bbe7 <PROGRAM_SEGMENT_NEXT+0x8a>
f010bbd4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd7:	8b 50 10             	mov    0x10(%eax),%edx
f010bbda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbdd:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbe0:	0f b7 c0             	movzwl %ax,%eax
f010bbe3:	39 c2                	cmp    %eax,%edx
f010bbe5:	72 c7                	jb     f010bbae <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbea:	8b 40 10             	mov    0x10(%eax),%eax
f010bbed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010bbf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbf3:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbf6:	0f b7 c0             	movzwl %ax,%eax
f010bbf9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010bbfc:	7e 63                	jle    f010bc61 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bbfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc01:	c1 e0 05             	shl    $0x5,%eax
f010bc04:	89 c2                	mov    %eax,%edx
f010bc06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc09:	01 d0                	add    %edx,%eax
f010bc0b:	8b 50 04             	mov    0x4(%eax),%edx
f010bc0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc11:	01 c2                	add    %eax,%edx
f010bc13:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc16:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010bc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc1b:	c1 e0 05             	shl    $0x5,%eax
f010bc1e:	89 c2                	mov    %eax,%edx
f010bc20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc23:	01 d0                	add    %edx,%eax
f010bc25:	8b 50 14             	mov    0x14(%eax),%edx
f010bc28:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc2b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010bc2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc31:	c1 e0 05             	shl    $0x5,%eax
f010bc34:	89 c2                	mov    %eax,%edx
f010bc36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc39:	01 d0                	add    %edx,%eax
f010bc3b:	8b 50 10             	mov    0x10(%eax),%edx
f010bc3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc41:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010bc44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc47:	c1 e0 05             	shl    $0x5,%eax
f010bc4a:	89 c2                	mov    %eax,%edx
f010bc4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc4f:	01 d0                	add    %edx,%eax
f010bc51:	8b 40 08             	mov    0x8(%eax),%eax
f010bc54:	89 c2                	mov    %eax,%edx
f010bc56:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc59:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010bc5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc5f:	eb 05                	jmp    f010bc66 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010bc61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bc66:	c9                   	leave  
f010bc67:	c3                   	ret    

f010bc68 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 12) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010bc68:	55                   	push   %ebp
f010bc69:	89 e5                	mov    %esp,%ebp
f010bc6b:	57                   	push   %edi
f010bc6c:	56                   	push   %esi
f010bc6d:	53                   	push   %ebx
f010bc6e:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010bc71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bc78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bc7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bc81:	8b 00                	mov    (%eax),%eax
f010bc83:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bc88:	74 17                	je     f010bca1 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010bc8a:	83 ec 04             	sub    $0x4,%esp
f010bc8d:	68 2b 76 12 f0       	push   $0xf012762b
f010bc92:	68 88 04 00 00       	push   $0x488
f010bc97:	68 0b 73 12 f0       	push   $0xf012730b
f010bc9c:	e8 79 46 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bca4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bca7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bcaa:	01 d0                	add    %edx,%eax
f010bcac:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010bcaf:	eb 07                	jmp    f010bcb8 <PROGRAM_SEGMENT_FIRST+0x50>
f010bcb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcb4:	40                   	inc    %eax
f010bcb5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010bcb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcbb:	c1 e0 05             	shl    $0x5,%eax
f010bcbe:	89 c2                	mov    %eax,%edx
f010bcc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcc3:	01 d0                	add    %edx,%eax
f010bcc5:	8b 00                	mov    (%eax),%eax
f010bcc7:	83 f8 01             	cmp    $0x1,%eax
f010bcca:	74 10                	je     f010bcdc <PROGRAM_SEGMENT_FIRST+0x74>
f010bccc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010bccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bcd2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bcd5:	0f b7 c0             	movzwl %ax,%eax
f010bcd8:	39 c2                	cmp    %eax,%edx
f010bcda:	72 d5                	jb     f010bcb1 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010bcdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcdf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010bce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bce5:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bce8:	0f b7 c0             	movzwl %ax,%eax
f010bceb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010bcee:	7e 68                	jle    f010bd58 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bcf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bcf3:	c1 e0 05             	shl    $0x5,%eax
f010bcf6:	89 c2                	mov    %eax,%edx
f010bcf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcfb:	01 d0                	add    %edx,%eax
f010bcfd:	8b 50 04             	mov    0x4(%eax),%edx
f010bd00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd03:	01 d0                	add    %edx,%eax
f010bd05:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010bd08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd0b:	c1 e0 05             	shl    $0x5,%eax
f010bd0e:	89 c2                	mov    %eax,%edx
f010bd10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd13:	01 d0                	add    %edx,%eax
f010bd15:	8b 40 14             	mov    0x14(%eax),%eax
f010bd18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010bd1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd1e:	c1 e0 05             	shl    $0x5,%eax
f010bd21:	89 c2                	mov    %eax,%edx
f010bd23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd26:	01 d0                	add    %edx,%eax
f010bd28:	8b 40 10             	mov    0x10(%eax),%eax
f010bd2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010bd2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd31:	c1 e0 05             	shl    $0x5,%eax
f010bd34:	89 c2                	mov    %eax,%edx
f010bd36:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd39:	01 d0                	add    %edx,%eax
f010bd3b:	8b 40 08             	mov    0x8(%eax),%eax
f010bd3e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd44:	89 c3                	mov    %eax,%ebx
f010bd46:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd49:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd4e:	89 df                	mov    %ebx,%edi
f010bd50:	89 c6                	mov    %eax,%esi
f010bd52:	89 d1                	mov    %edx,%ecx
f010bd54:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010bd56:	eb 1c                	jmp    f010bd74 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010bd58:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010bd5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd62:	89 c3                	mov    %eax,%ebx
f010bd64:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd67:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd6c:	89 df                	mov    %ebx,%edi
f010bd6e:	89 c6                	mov    %eax,%esi
f010bd70:	89 d1                	mov    %edx,%ecx
f010bd72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010bd74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd77:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bd7a:	5b                   	pop    %ebx
f010bd7b:	5e                   	pop    %esi
f010bd7c:	5f                   	pop    %edi
f010bd7d:	5d                   	pop    %ebp
f010bd7e:	c2 04 00             	ret    $0x4

f010bd81 <cleanup_buffers>:

//===============================================================================
// 13) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010bd81:	55                   	push   %ebp
f010bd82:	89 e5                	mov    %esp,%ebp
f010bd84:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010bd87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
f010bd8e:	83 ec 0c             	sub    $0xc,%esp
f010bd91:	68 40 65 55 f0       	push   $0xf0556540
f010bd96:	e8 3c 2d 00 00       	call   f010ead7 <acquire_spinlock>
f010bd9b:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010bd9e:	a1 30 65 55 f0       	mov    0xf0556530,%eax
f010bda3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bda6:	e9 c3 00 00 00       	jmp    f010be6e <cleanup_buffers+0xed>
		{
			if(ptr_fi->proc == e)
f010bdab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdae:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdb1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bdb4:	0f 85 ac 00 00 00    	jne    f010be66 <cleanup_buffers+0xe5>
			{
				pt_clear_page_table_entry(ptr_fi->proc->env_page_directory,ptr_fi->bufferedVA);
f010bdba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdbd:	8b 50 10             	mov    0x10(%eax),%edx
f010bdc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdc3:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdc6:	8b 40 64             	mov    0x64(%eax),%eax
f010bdc9:	83 ec 08             	sub    $0x8,%esp
f010bdcc:	52                   	push   %edx
f010bdcd:	50                   	push   %eax
f010bdce:	e8 62 ce ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f010bdd3:	83 c4 10             	add    $0x10,%esp

				//cprintf("==================\n");
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
				LIST_REMOVE(&MemFrameLists.modified_frame_list, ptr_fi);
f010bdd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bdda:	75 17                	jne    f010bdf3 <cleanup_buffers+0x72>
f010bddc:	83 ec 04             	sub    $0x4,%esp
f010bddf:	68 9d 73 12 f0       	push   $0xf012739d
f010bde4:	68 b1 04 00 00       	push   $0x4b1
f010bde9:	68 0b 73 12 f0       	push   $0xf012730b
f010bdee:	e8 27 45 ff ff       	call   f010031a <_panic>
f010bdf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdf6:	8b 00                	mov    (%eax),%eax
f010bdf8:	85 c0                	test   %eax,%eax
f010bdfa:	74 10                	je     f010be0c <cleanup_buffers+0x8b>
f010bdfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdff:	8b 00                	mov    (%eax),%eax
f010be01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be04:	8b 52 04             	mov    0x4(%edx),%edx
f010be07:	89 50 04             	mov    %edx,0x4(%eax)
f010be0a:	eb 0b                	jmp    f010be17 <cleanup_buffers+0x96>
f010be0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be0f:	8b 40 04             	mov    0x4(%eax),%eax
f010be12:	a3 34 65 55 f0       	mov    %eax,0xf0556534
f010be17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be1a:	8b 40 04             	mov    0x4(%eax),%eax
f010be1d:	85 c0                	test   %eax,%eax
f010be1f:	74 0f                	je     f010be30 <cleanup_buffers+0xaf>
f010be21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be24:	8b 40 04             	mov    0x4(%eax),%eax
f010be27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be2a:	8b 12                	mov    (%edx),%edx
f010be2c:	89 10                	mov    %edx,(%eax)
f010be2e:	eb 0a                	jmp    f010be3a <cleanup_buffers+0xb9>
f010be30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be33:	8b 00                	mov    (%eax),%eax
f010be35:	a3 30 65 55 f0       	mov    %eax,0xf0556530
f010be3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010be43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010be4d:	a1 3c 65 55 f0       	mov    0xf055653c,%eax
f010be52:	48                   	dec    %eax
f010be53:	a3 3c 65 55 f0       	mov    %eax,0xf055653c

				free_frame(ptr_fi);
f010be58:	83 ec 0c             	sub    $0xc,%esp
f010be5b:	ff 75 f4             	pushl  -0xc(%ebp)
f010be5e:	e8 c1 c4 ff ff       	call   f0108324 <free_frame>
f010be63:	83 c4 10             	add    $0x10,%esp
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010be66:	a1 38 65 55 f0       	mov    0xf0556538,%eax
f010be6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010be6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be72:	74 07                	je     f010be7b <cleanup_buffers+0xfa>
f010be74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be77:	8b 00                	mov    (%eax),%eax
f010be79:	eb 05                	jmp    f010be80 <cleanup_buffers+0xff>
f010be7b:	b8 00 00 00 00       	mov    $0x0,%eax
f010be80:	a3 38 65 55 f0       	mov    %eax,0xf0556538
f010be85:	a1 38 65 55 f0       	mov    0xf0556538,%eax
f010be8a:	85 c0                	test   %eax,%eax
f010be8c:	0f 85 19 ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
f010be92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be96:	0f 85 0f ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x, saved next = %x \n", curenv->prog_name ,ptr_fi, LIST_NEXT(ptr_fi), ___ptr_next);
				//cprintf("==================\n");
			}
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010be9c:	83 ec 0c             	sub    $0xc,%esp
f010be9f:	68 40 65 55 f0       	push   $0xf0556540
f010bea4:	e8 b5 2c 00 00       	call   f010eb5e <release_spinlock>
f010bea9:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010beac:	90                   	nop
f010bead:	c9                   	leave  
f010beae:	c3                   	ret    

f010beaf <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010beaf:	55                   	push   %ebp
f010beb0:	89 e5                	mov    %esp,%ebp
f010beb2:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010beb5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010beb9:	7e 06                	jle    f010bec1 <set_program_priority+0x12>
f010bebb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bebf:	7e 14                	jle    f010bed5 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010bec1:	83 ec 04             	sub    $0x4,%esp
f010bec4:	68 44 76 12 f0       	push   $0xf0127644
f010bec9:	6a 10                	push   $0x10
f010becb:	68 68 76 12 f0       	push   $0xf0127668
f010bed0:	e8 45 44 ff ff       	call   f010031a <_panic>
		return;
	}
	if(env == NULL)
f010bed5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010bed9:	74 78                	je     f010bf53 <set_program_priority+0xa4>
		return;
	switch(priority)
f010bedb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bedf:	77 56                	ja     f010bf37 <set_program_priority+0x88>
f010bee1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bee4:	c1 e0 02             	shl    $0x2,%eax
f010bee7:	05 a4 76 12 f0       	add    $0xf01276a4,%eax
f010beec:	8b 00                	mov    (%eax),%eax
f010beee:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010bef0:	83 ec 08             	sub    $0x8,%esp
f010bef3:	6a 01                	push   $0x1
f010bef5:	ff 75 08             	pushl  0x8(%ebp)
f010bef8:	e8 b6 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010befd:	83 c4 10             	add    $0x10,%esp
			break;
f010bf00:	eb 35                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010bf02:	83 ec 08             	sub    $0x8,%esp
f010bf05:	6a 00                	push   $0x0
f010bf07:	ff 75 08             	pushl  0x8(%ebp)
f010bf0a:	e8 a4 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010bf0f:	83 c4 10             	add    $0x10,%esp
			break;
f010bf12:	eb 23                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010bf14:	83 ec 08             	sub    $0x8,%esp
f010bf17:	6a 01                	push   $0x1
f010bf19:	ff 75 08             	pushl  0x8(%ebp)
f010bf1c:	e8 75 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf21:	83 c4 10             	add    $0x10,%esp
			break;
f010bf24:	eb 11                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010bf26:	83 ec 08             	sub    $0x8,%esp
f010bf29:	6a 00                	push   $0x0
f010bf2b:	ff 75 08             	pushl  0x8(%ebp)
f010bf2e:	e8 63 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf33:	83 c4 10             	add    $0x10,%esp
			break;
f010bf36:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf3a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f010bf40:	83 ec 08             	sub    $0x8,%esp
f010bf43:	50                   	push   %eax
f010bf44:	68 85 76 12 f0       	push   $0xf0127685
f010bf49:	e8 1e 50 ff ff       	call   f0100f6c <cprintf>
f010bf4e:	83 c4 10             	add    $0x10,%esp
f010bf51:	eb 01                	jmp    f010bf54 <set_program_priority+0xa5>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010bf53:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010bf54:	c9                   	leave  
f010bf55:	c3                   	ret    

f010bf56 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010bf56:	55                   	push   %ebp
f010bf57:	89 e5                	mov    %esp,%ebp
f010bf59:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bf63:	eb 29                	jmp    f010bf8e <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010bf65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf68:	89 d0                	mov    %edx,%eax
f010bf6a:	01 c0                	add    %eax,%eax
f010bf6c:	01 d0                	add    %edx,%eax
f010bf6e:	c1 e0 02             	shl    $0x2,%eax
f010bf71:	05 80 d9 17 f0       	add    $0xf017d980,%eax
f010bf76:	8b 00                	mov    (%eax),%eax
f010bf78:	83 ec 08             	sub    $0x8,%esp
f010bf7b:	50                   	push   %eax
f010bf7c:	ff 75 08             	pushl  0x8(%ebp)
f010bf7f:	e8 37 64 01 00       	call   f01223bb <strcmp>
f010bf84:	83 c4 10             	add    $0x10,%esp
f010bf87:	85 c0                	test   %eax,%eax
f010bf89:	74 0f                	je     f010bf9a <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf8b:	ff 45 f4             	incl   -0xc(%ebp)
f010bf8e:	a1 a8 dc 17 f0       	mov    0xf017dca8,%eax
f010bf93:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bf96:	7c cd                	jl     f010bf65 <get_user_program_info+0xf>
f010bf98:	eb 01                	jmp    f010bf9b <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010bf9a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010bf9b:	a1 a8 dc 17 f0       	mov    0xf017dca8,%eax
f010bfa0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bfa3:	75 1a                	jne    f010bfbf <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010bfa5:	83 ec 08             	sub    $0x8,%esp
f010bfa8:	ff 75 08             	pushl  0x8(%ebp)
f010bfab:	68 0d 83 12 f0       	push   $0xf012830d
f010bfb0:	e8 b7 4f ff ff       	call   f0100f6c <cprintf>
f010bfb5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bfb8:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfbd:	eb 11                	jmp    f010bfd0 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010bfbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfc2:	89 d0                	mov    %edx,%eax
f010bfc4:	01 c0                	add    %eax,%eax
f010bfc6:	01 d0                	add    %edx,%eax
f010bfc8:	c1 e0 02             	shl    $0x2,%eax
f010bfcb:	05 80 d9 17 f0       	add    $0xf017d980,%eax
}
f010bfd0:	c9                   	leave  
f010bfd1:	c3                   	ret    

f010bfd2 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010bfd2:	55                   	push   %ebp
f010bfd3:	89 e5                	mov    %esp,%ebp
f010bfd5:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bfd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bfdf:	eb 2d                	jmp    f010c00e <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010bfe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfe4:	89 d0                	mov    %edx,%eax
f010bfe6:	01 c0                	add    %eax,%eax
f010bfe8:	01 d0                	add    %edx,%eax
f010bfea:	c1 e0 02             	shl    $0x2,%eax
f010bfed:	05 80 d9 17 f0       	add    $0xf017d980,%eax
f010bff2:	8b 00                	mov    (%eax),%eax
f010bff4:	8b 55 08             	mov    0x8(%ebp),%edx
f010bff7:	83 c2 20             	add    $0x20,%edx
f010bffa:	83 ec 08             	sub    $0x8,%esp
f010bffd:	50                   	push   %eax
f010bffe:	52                   	push   %edx
f010bfff:	e8 b7 63 01 00       	call   f01223bb <strcmp>
f010c004:	83 c4 10             	add    $0x10,%esp
f010c007:	85 c0                	test   %eax,%eax
f010c009:	74 0f                	je     f010c01a <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010c00b:	ff 45 f4             	incl   -0xc(%ebp)
f010c00e:	a1 a8 dc 17 f0       	mov    0xf017dca8,%eax
f010c013:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c016:	7c c9                	jl     f010bfe1 <get_user_program_info_by_env+0xf>
f010c018:	eb 01                	jmp    f010c01b <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010c01a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010c01b:	a1 a8 dc 17 f0       	mov    0xf017dca8,%eax
f010c020:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c023:	75 17                	jne    f010c03c <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010c025:	83 ec 0c             	sub    $0xc,%esp
f010c028:	68 28 83 12 f0       	push   $0xf0128328
f010c02d:	e8 3a 4f ff ff       	call   f0100f6c <cprintf>
f010c032:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c035:	b8 00 00 00 00       	mov    $0x0,%eax
f010c03a:	eb 11                	jmp    f010c04d <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010c03c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c03f:	89 d0                	mov    %edx,%eax
f010c041:	01 c0                	add    %eax,%eax
f010c043:	01 d0                	add    %edx,%eax
f010c045:	c1 e0 02             	shl    $0x2,%eax
f010c048:	05 80 d9 17 f0       	add    $0xf017d980,%eax
}
f010c04d:	c9                   	leave  
f010c04e:	c3                   	ret    

f010c04f <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010c04f:	55                   	push   %ebp
f010c050:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010c052:	8b 45 08             	mov    0x8(%ebp),%eax
f010c055:	83 f8 13             	cmp    $0x13,%eax
f010c058:	77 0c                	ja     f010c066 <trapname+0x17>
		return excnames[trapno];
f010c05a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c05d:	8b 04 85 00 87 12 f0 	mov    -0xfed7900(,%eax,4),%eax
f010c064:	eb 2c                	jmp    f010c092 <trapname+0x43>
	if (trapno == T_SYSCALL)
f010c066:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c06a:	75 07                	jne    f010c073 <trapname+0x24>
		return "System call";
f010c06c:	b8 40 83 12 f0       	mov    $0xf0128340,%eax
f010c071:	eb 1f                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ0_Clock)
f010c073:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
f010c077:	75 07                	jne    f010c080 <trapname+0x31>
		return "Clock Interrupt";
f010c079:	b8 4c 83 12 f0       	mov    $0xf012834c,%eax
f010c07e:	eb 12                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ1_KB)
f010c080:	83 7d 08 21          	cmpl   $0x21,0x8(%ebp)
f010c084:	75 07                	jne    f010c08d <trapname+0x3e>
		return "Keyboard Interrupt";
f010c086:	b8 5c 83 12 f0       	mov    $0xf012835c,%eax
f010c08b:	eb 05                	jmp    f010c092 <trapname+0x43>
	return "(unknown trap)";
f010c08d:	b8 6f 83 12 f0       	mov    $0xf012836f,%eax
}
f010c092:	5d                   	pop    %ebp
f010c093:	c3                   	ret    

f010c094 <ts_init>:


void ts_init(void)
{
f010c094:	55                   	push   %ebp
f010c095:	89 e5                	mov    %esp,%ebp
f010c097:	53                   	push   %ebx
f010c098:	83 ec 14             	sub    $0x14,%esp
	pushcli();	//disable interrupt - lock: to protect CPU info in multi-CPU
f010c09b:	e8 20 b1 ff ff       	call   f01071c0 <pushcli>

	struct cpu* c = mycpu();
f010c0a0:	e8 58 b0 ff ff       	call   f01070fd <mycpu>
f010c0a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// Setup a TSS so that we get the right user kernel stack
	// when we trap to the kernel.
	// 2024: for now, temporarily set it to 0
	// since the scheduler will run first then switch to the first process
	c->ts.ts_esp0 = 0;
f010c0a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0ab:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010c0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0b5:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010c0bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0be:	83 c0 0c             	add    $0xc,%eax
f010c0c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0c4:	83 c2 0c             	add    $0xc,%edx
f010c0c7:	c1 ea 10             	shr    $0x10,%edx
f010c0ca:	88 d3                	mov    %dl,%bl
f010c0cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0cf:	83 c2 0c             	add    $0xc,%edx
f010c0d2:	c1 ea 18             	shr    $0x18,%edx
f010c0d5:	88 d1                	mov    %dl,%cl
f010c0d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0da:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010c0e1:	68 00 
f010c0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0e6:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010c0ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f0:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010c0f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f9:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c0ff:	83 e2 f0             	and    $0xfffffff0,%edx
f010c102:	83 ca 09             	or     $0x9,%edx
f010c105:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c10e:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c114:	83 ca 10             	or     $0x10,%edx
f010c117:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c11d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c120:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c126:	83 e2 9f             	and    $0xffffff9f,%edx
f010c129:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c132:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c138:	83 ca 80             	or     $0xffffff80,%edx
f010c13b:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c144:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c14a:	83 e2 f0             	and    $0xfffffff0,%edx
f010c14d:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c153:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c156:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c15c:	83 e2 ef             	and    $0xffffffef,%edx
f010c15f:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c165:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c168:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c16e:	83 e2 df             	and    $0xffffffdf,%edx
f010c171:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c177:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c17a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c180:	83 ca 40             	or     $0x40,%edx
f010c183:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c189:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c18c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c192:	83 e2 7f             	and    $0x7f,%edx
f010c195:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c19e:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010c1a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1a7:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c1ad:	83 e2 ef             	and    $0xffffffef,%edx
f010c1b0:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	popcli();	//enable interrupt - lock: to protect CPU info in multi-CPU
f010c1b6:	e8 57 b0 ff ff       	call   f0107212 <popcli>
f010c1bb:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c1c1:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010c1c5:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);
}
f010c1c8:	90                   	nop
f010c1c9:	83 c4 14             	add    $0x14,%esp
f010c1cc:	5b                   	pop    %ebx
f010c1cd:	5d                   	pop    %ebp
f010c1ce:	c3                   	ret    

f010c1cf <idt_init>:
/// shifted function addresses can't be represented in relocation records.)
///
struct Gatedesc idt[256] = { { 0 } };

void idt_init(void)
{
f010c1cf:	55                   	push   %ebp
f010c1d0:	89 e5                	mov    %esp,%ebp
f010c1d2:	83 ec 10             	sub    $0x10,%esp
	//initialize idt
	SETGATE(idt[T_DBLFLT  ], 0, GD_KT , &DBL_FAULT, 0) ;		//8
f010c1d5:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c1da:	66 a3 80 5a 55 f0    	mov    %ax,0xf0555a80
f010c1e0:	66 c7 05 82 5a 55 f0 	movw   $0x8,0xf0555a82
f010c1e7:	08 00 
f010c1e9:	a0 84 5a 55 f0       	mov    0xf0555a84,%al
f010c1ee:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1f1:	a2 84 5a 55 f0       	mov    %al,0xf0555a84
f010c1f6:	a0 84 5a 55 f0       	mov    0xf0555a84,%al
f010c1fb:	83 e0 1f             	and    $0x1f,%eax
f010c1fe:	a2 84 5a 55 f0       	mov    %al,0xf0555a84
f010c203:	a0 85 5a 55 f0       	mov    0xf0555a85,%al
f010c208:	83 e0 f0             	and    $0xfffffff0,%eax
f010c20b:	83 c8 0e             	or     $0xe,%eax
f010c20e:	a2 85 5a 55 f0       	mov    %al,0xf0555a85
f010c213:	a0 85 5a 55 f0       	mov    0xf0555a85,%al
f010c218:	83 e0 ef             	and    $0xffffffef,%eax
f010c21b:	a2 85 5a 55 f0       	mov    %al,0xf0555a85
f010c220:	a0 85 5a 55 f0       	mov    0xf0555a85,%al
f010c225:	83 e0 9f             	and    $0xffffff9f,%eax
f010c228:	a2 85 5a 55 f0       	mov    %al,0xf0555a85
f010c22d:	a0 85 5a 55 f0       	mov    0xf0555a85,%al
f010c232:	83 c8 80             	or     $0xffffff80,%eax
f010c235:	a2 85 5a 55 f0       	mov    %al,0xf0555a85
f010c23a:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c23f:	c1 e8 10             	shr    $0x10,%eax
f010c242:	66 a3 86 5a 55 f0    	mov    %ax,0xf0555a86
	SETGATE(idt[T_PGFLT   ], 0, GD_KT , &PAGE_FAULT, 0) ;		//14
f010c248:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c24d:	66 a3 b0 5a 55 f0    	mov    %ax,0xf0555ab0
f010c253:	66 c7 05 b2 5a 55 f0 	movw   $0x8,0xf0555ab2
f010c25a:	08 00 
f010c25c:	a0 b4 5a 55 f0       	mov    0xf0555ab4,%al
f010c261:	83 e0 e0             	and    $0xffffffe0,%eax
f010c264:	a2 b4 5a 55 f0       	mov    %al,0xf0555ab4
f010c269:	a0 b4 5a 55 f0       	mov    0xf0555ab4,%al
f010c26e:	83 e0 1f             	and    $0x1f,%eax
f010c271:	a2 b4 5a 55 f0       	mov    %al,0xf0555ab4
f010c276:	a0 b5 5a 55 f0       	mov    0xf0555ab5,%al
f010c27b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c27e:	83 c8 0e             	or     $0xe,%eax
f010c281:	a2 b5 5a 55 f0       	mov    %al,0xf0555ab5
f010c286:	a0 b5 5a 55 f0       	mov    0xf0555ab5,%al
f010c28b:	83 e0 ef             	and    $0xffffffef,%eax
f010c28e:	a2 b5 5a 55 f0       	mov    %al,0xf0555ab5
f010c293:	a0 b5 5a 55 f0       	mov    0xf0555ab5,%al
f010c298:	83 e0 9f             	and    $0xffffff9f,%eax
f010c29b:	a2 b5 5a 55 f0       	mov    %al,0xf0555ab5
f010c2a0:	a0 b5 5a 55 f0       	mov    0xf0555ab5,%al
f010c2a5:	83 c8 80             	or     $0xffffff80,%eax
f010c2a8:	a2 b5 5a 55 f0       	mov    %al,0xf0555ab5
f010c2ad:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c2b2:	c1 e8 10             	shr    $0x10,%eax
f010c2b5:	66 a3 b6 5a 55 f0    	mov    %ax,0xf0555ab6
	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &IRQ0_CLK_HANDLER, 3) ;	//32
f010c2bb:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c2c0:	66 a3 40 5b 55 f0    	mov    %ax,0xf0555b40
f010c2c6:	66 c7 05 42 5b 55 f0 	movw   $0x8,0xf0555b42
f010c2cd:	08 00 
f010c2cf:	a0 44 5b 55 f0       	mov    0xf0555b44,%al
f010c2d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2d7:	a2 44 5b 55 f0       	mov    %al,0xf0555b44
f010c2dc:	a0 44 5b 55 f0       	mov    0xf0555b44,%al
f010c2e1:	83 e0 1f             	and    $0x1f,%eax
f010c2e4:	a2 44 5b 55 f0       	mov    %al,0xf0555b44
f010c2e9:	a0 45 5b 55 f0       	mov    0xf0555b45,%al
f010c2ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2f1:	83 c8 0e             	or     $0xe,%eax
f010c2f4:	a2 45 5b 55 f0       	mov    %al,0xf0555b45
f010c2f9:	a0 45 5b 55 f0       	mov    0xf0555b45,%al
f010c2fe:	83 e0 ef             	and    $0xffffffef,%eax
f010c301:	a2 45 5b 55 f0       	mov    %al,0xf0555b45
f010c306:	a0 45 5b 55 f0       	mov    0xf0555b45,%al
f010c30b:	83 c8 60             	or     $0x60,%eax
f010c30e:	a2 45 5b 55 f0       	mov    %al,0xf0555b45
f010c313:	a0 45 5b 55 f0       	mov    0xf0555b45,%al
f010c318:	83 c8 80             	or     $0xffffff80,%eax
f010c31b:	a2 45 5b 55 f0       	mov    %al,0xf0555b45
f010c320:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c325:	c1 e8 10             	shr    $0x10,%eax
f010c328:	66 a3 46 5b 55 f0    	mov    %ax,0xf0555b46
	SETGATE(idt[IRQ1_KB	  ], 0, GD_KT , &IRQ1_KBD_HANDLER, 3) ;	//33
f010c32e:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c333:	66 a3 48 5b 55 f0    	mov    %ax,0xf0555b48
f010c339:	66 c7 05 4a 5b 55 f0 	movw   $0x8,0xf0555b4a
f010c340:	08 00 
f010c342:	a0 4c 5b 55 f0       	mov    0xf0555b4c,%al
f010c347:	83 e0 e0             	and    $0xffffffe0,%eax
f010c34a:	a2 4c 5b 55 f0       	mov    %al,0xf0555b4c
f010c34f:	a0 4c 5b 55 f0       	mov    0xf0555b4c,%al
f010c354:	83 e0 1f             	and    $0x1f,%eax
f010c357:	a2 4c 5b 55 f0       	mov    %al,0xf0555b4c
f010c35c:	a0 4d 5b 55 f0       	mov    0xf0555b4d,%al
f010c361:	83 e0 f0             	and    $0xfffffff0,%eax
f010c364:	83 c8 0e             	or     $0xe,%eax
f010c367:	a2 4d 5b 55 f0       	mov    %al,0xf0555b4d
f010c36c:	a0 4d 5b 55 f0       	mov    0xf0555b4d,%al
f010c371:	83 e0 ef             	and    $0xffffffef,%eax
f010c374:	a2 4d 5b 55 f0       	mov    %al,0xf0555b4d
f010c379:	a0 4d 5b 55 f0       	mov    0xf0555b4d,%al
f010c37e:	83 c8 60             	or     $0x60,%eax
f010c381:	a2 4d 5b 55 f0       	mov    %al,0xf0555b4d
f010c386:	a0 4d 5b 55 f0       	mov    0xf0555b4d,%al
f010c38b:	83 c8 80             	or     $0xffffff80,%eax
f010c38e:	a2 4d 5b 55 f0       	mov    %al,0xf0555b4d
f010c393:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c398:	c1 e8 10             	shr    $0x10,%eax
f010c39b:	66 a3 4e 5b 55 f0    	mov    %ax,0xf0555b4e
	SETGATE(idt[T_SYSCALL ], 0, GD_KT , &SYSCALL_HANDLER, 3) ;	//48
f010c3a1:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c3a6:	66 a3 c0 5b 55 f0    	mov    %ax,0xf0555bc0
f010c3ac:	66 c7 05 c2 5b 55 f0 	movw   $0x8,0xf0555bc2
f010c3b3:	08 00 
f010c3b5:	a0 c4 5b 55 f0       	mov    0xf0555bc4,%al
f010c3ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3bd:	a2 c4 5b 55 f0       	mov    %al,0xf0555bc4
f010c3c2:	a0 c4 5b 55 f0       	mov    0xf0555bc4,%al
f010c3c7:	83 e0 1f             	and    $0x1f,%eax
f010c3ca:	a2 c4 5b 55 f0       	mov    %al,0xf0555bc4
f010c3cf:	a0 c5 5b 55 f0       	mov    0xf0555bc5,%al
f010c3d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3d7:	83 c8 0e             	or     $0xe,%eax
f010c3da:	a2 c5 5b 55 f0       	mov    %al,0xf0555bc5
f010c3df:	a0 c5 5b 55 f0       	mov    0xf0555bc5,%al
f010c3e4:	83 e0 ef             	and    $0xffffffef,%eax
f010c3e7:	a2 c5 5b 55 f0       	mov    %al,0xf0555bc5
f010c3ec:	a0 c5 5b 55 f0       	mov    0xf0555bc5,%al
f010c3f1:	83 c8 60             	or     $0x60,%eax
f010c3f4:	a2 c5 5b 55 f0       	mov    %al,0xf0555bc5
f010c3f9:	a0 c5 5b 55 f0       	mov    0xf0555bc5,%al
f010c3fe:	83 c8 80             	or     $0xffffff80,%eax
f010c401:	a2 c5 5b 55 f0       	mov    %al,0xf0555bc5
f010c406:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c40b:	c1 e8 10             	shr    $0x10,%eax
f010c40e:	66 a3 c6 5b 55 f0    	mov    %ax,0xf0555bc6

	//S/W Exceptions
	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010c414:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c419:	66 a3 40 5a 55 f0    	mov    %ax,0xf0555a40
f010c41f:	66 c7 05 42 5a 55 f0 	movw   $0x8,0xf0555a42
f010c426:	08 00 
f010c428:	a0 44 5a 55 f0       	mov    0xf0555a44,%al
f010c42d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c430:	a2 44 5a 55 f0       	mov    %al,0xf0555a44
f010c435:	a0 44 5a 55 f0       	mov    0xf0555a44,%al
f010c43a:	83 e0 1f             	and    $0x1f,%eax
f010c43d:	a2 44 5a 55 f0       	mov    %al,0xf0555a44
f010c442:	a0 45 5a 55 f0       	mov    0xf0555a45,%al
f010c447:	83 e0 f0             	and    $0xfffffff0,%eax
f010c44a:	83 c8 0e             	or     $0xe,%eax
f010c44d:	a2 45 5a 55 f0       	mov    %al,0xf0555a45
f010c452:	a0 45 5a 55 f0       	mov    0xf0555a45,%al
f010c457:	83 e0 ef             	and    $0xffffffef,%eax
f010c45a:	a2 45 5a 55 f0       	mov    %al,0xf0555a45
f010c45f:	a0 45 5a 55 f0       	mov    0xf0555a45,%al
f010c464:	83 c8 60             	or     $0x60,%eax
f010c467:	a2 45 5a 55 f0       	mov    %al,0xf0555a45
f010c46c:	a0 45 5a 55 f0       	mov    0xf0555a45,%al
f010c471:	83 c8 80             	or     $0xffffff80,%eax
f010c474:	a2 45 5a 55 f0       	mov    %al,0xf0555a45
f010c479:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c47e:	c1 e8 10             	shr    $0x10,%eax
f010c481:	66 a3 46 5a 55 f0    	mov    %ax,0xf0555a46
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010c487:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c48c:	66 a3 48 5a 55 f0    	mov    %ax,0xf0555a48
f010c492:	66 c7 05 4a 5a 55 f0 	movw   $0x8,0xf0555a4a
f010c499:	08 00 
f010c49b:	a0 4c 5a 55 f0       	mov    0xf0555a4c,%al
f010c4a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4a3:	a2 4c 5a 55 f0       	mov    %al,0xf0555a4c
f010c4a8:	a0 4c 5a 55 f0       	mov    0xf0555a4c,%al
f010c4ad:	83 e0 1f             	and    $0x1f,%eax
f010c4b0:	a2 4c 5a 55 f0       	mov    %al,0xf0555a4c
f010c4b5:	a0 4d 5a 55 f0       	mov    0xf0555a4d,%al
f010c4ba:	83 c8 0f             	or     $0xf,%eax
f010c4bd:	a2 4d 5a 55 f0       	mov    %al,0xf0555a4d
f010c4c2:	a0 4d 5a 55 f0       	mov    0xf0555a4d,%al
f010c4c7:	83 e0 ef             	and    $0xffffffef,%eax
f010c4ca:	a2 4d 5a 55 f0       	mov    %al,0xf0555a4d
f010c4cf:	a0 4d 5a 55 f0       	mov    0xf0555a4d,%al
f010c4d4:	83 c8 60             	or     $0x60,%eax
f010c4d7:	a2 4d 5a 55 f0       	mov    %al,0xf0555a4d
f010c4dc:	a0 4d 5a 55 f0       	mov    0xf0555a4d,%al
f010c4e1:	83 c8 80             	or     $0xffffff80,%eax
f010c4e4:	a2 4d 5a 55 f0       	mov    %al,0xf0555a4d
f010c4e9:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c4ee:	c1 e8 10             	shr    $0x10,%eax
f010c4f1:	66 a3 4e 5a 55 f0    	mov    %ax,0xf0555a4e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010c4f7:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c4fc:	66 a3 50 5a 55 f0    	mov    %ax,0xf0555a50
f010c502:	66 c7 05 52 5a 55 f0 	movw   $0x8,0xf0555a52
f010c509:	08 00 
f010c50b:	a0 54 5a 55 f0       	mov    0xf0555a54,%al
f010c510:	83 e0 e0             	and    $0xffffffe0,%eax
f010c513:	a2 54 5a 55 f0       	mov    %al,0xf0555a54
f010c518:	a0 54 5a 55 f0       	mov    0xf0555a54,%al
f010c51d:	83 e0 1f             	and    $0x1f,%eax
f010c520:	a2 54 5a 55 f0       	mov    %al,0xf0555a54
f010c525:	a0 55 5a 55 f0       	mov    0xf0555a55,%al
f010c52a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c52d:	83 c8 0e             	or     $0xe,%eax
f010c530:	a2 55 5a 55 f0       	mov    %al,0xf0555a55
f010c535:	a0 55 5a 55 f0       	mov    0xf0555a55,%al
f010c53a:	83 e0 ef             	and    $0xffffffef,%eax
f010c53d:	a2 55 5a 55 f0       	mov    %al,0xf0555a55
f010c542:	a0 55 5a 55 f0       	mov    0xf0555a55,%al
f010c547:	83 c8 60             	or     $0x60,%eax
f010c54a:	a2 55 5a 55 f0       	mov    %al,0xf0555a55
f010c54f:	a0 55 5a 55 f0       	mov    0xf0555a55,%al
f010c554:	83 c8 80             	or     $0xffffff80,%eax
f010c557:	a2 55 5a 55 f0       	mov    %al,0xf0555a55
f010c55c:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c561:	c1 e8 10             	shr    $0x10,%eax
f010c564:	66 a3 56 5a 55 f0    	mov    %ax,0xf0555a56
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010c56a:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c56f:	66 a3 58 5a 55 f0    	mov    %ax,0xf0555a58
f010c575:	66 c7 05 5a 5a 55 f0 	movw   $0x8,0xf0555a5a
f010c57c:	08 00 
f010c57e:	a0 5c 5a 55 f0       	mov    0xf0555a5c,%al
f010c583:	83 e0 e0             	and    $0xffffffe0,%eax
f010c586:	a2 5c 5a 55 f0       	mov    %al,0xf0555a5c
f010c58b:	a0 5c 5a 55 f0       	mov    0xf0555a5c,%al
f010c590:	83 e0 1f             	and    $0x1f,%eax
f010c593:	a2 5c 5a 55 f0       	mov    %al,0xf0555a5c
f010c598:	a0 5d 5a 55 f0       	mov    0xf0555a5d,%al
f010c59d:	83 c8 0f             	or     $0xf,%eax
f010c5a0:	a2 5d 5a 55 f0       	mov    %al,0xf0555a5d
f010c5a5:	a0 5d 5a 55 f0       	mov    0xf0555a5d,%al
f010c5aa:	83 e0 ef             	and    $0xffffffef,%eax
f010c5ad:	a2 5d 5a 55 f0       	mov    %al,0xf0555a5d
f010c5b2:	a0 5d 5a 55 f0       	mov    0xf0555a5d,%al
f010c5b7:	83 c8 60             	or     $0x60,%eax
f010c5ba:	a2 5d 5a 55 f0       	mov    %al,0xf0555a5d
f010c5bf:	a0 5d 5a 55 f0       	mov    0xf0555a5d,%al
f010c5c4:	83 c8 80             	or     $0xffffff80,%eax
f010c5c7:	a2 5d 5a 55 f0       	mov    %al,0xf0555a5d
f010c5cc:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c5d1:	c1 e8 10             	shr    $0x10,%eax
f010c5d4:	66 a3 5e 5a 55 f0    	mov    %ax,0xf0555a5e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010c5da:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c5df:	66 a3 60 5a 55 f0    	mov    %ax,0xf0555a60
f010c5e5:	66 c7 05 62 5a 55 f0 	movw   $0x8,0xf0555a62
f010c5ec:	08 00 
f010c5ee:	a0 64 5a 55 f0       	mov    0xf0555a64,%al
f010c5f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5f6:	a2 64 5a 55 f0       	mov    %al,0xf0555a64
f010c5fb:	a0 64 5a 55 f0       	mov    0xf0555a64,%al
f010c600:	83 e0 1f             	and    $0x1f,%eax
f010c603:	a2 64 5a 55 f0       	mov    %al,0xf0555a64
f010c608:	a0 65 5a 55 f0       	mov    0xf0555a65,%al
f010c60d:	83 c8 0f             	or     $0xf,%eax
f010c610:	a2 65 5a 55 f0       	mov    %al,0xf0555a65
f010c615:	a0 65 5a 55 f0       	mov    0xf0555a65,%al
f010c61a:	83 e0 ef             	and    $0xffffffef,%eax
f010c61d:	a2 65 5a 55 f0       	mov    %al,0xf0555a65
f010c622:	a0 65 5a 55 f0       	mov    0xf0555a65,%al
f010c627:	83 c8 60             	or     $0x60,%eax
f010c62a:	a2 65 5a 55 f0       	mov    %al,0xf0555a65
f010c62f:	a0 65 5a 55 f0       	mov    0xf0555a65,%al
f010c634:	83 c8 80             	or     $0xffffff80,%eax
f010c637:	a2 65 5a 55 f0       	mov    %al,0xf0555a65
f010c63c:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c641:	c1 e8 10             	shr    $0x10,%eax
f010c644:	66 a3 66 5a 55 f0    	mov    %ax,0xf0555a66
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010c64a:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c64f:	66 a3 68 5a 55 f0    	mov    %ax,0xf0555a68
f010c655:	66 c7 05 6a 5a 55 f0 	movw   $0x8,0xf0555a6a
f010c65c:	08 00 
f010c65e:	a0 6c 5a 55 f0       	mov    0xf0555a6c,%al
f010c663:	83 e0 e0             	and    $0xffffffe0,%eax
f010c666:	a2 6c 5a 55 f0       	mov    %al,0xf0555a6c
f010c66b:	a0 6c 5a 55 f0       	mov    0xf0555a6c,%al
f010c670:	83 e0 1f             	and    $0x1f,%eax
f010c673:	a2 6c 5a 55 f0       	mov    %al,0xf0555a6c
f010c678:	a0 6d 5a 55 f0       	mov    0xf0555a6d,%al
f010c67d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c680:	83 c8 0e             	or     $0xe,%eax
f010c683:	a2 6d 5a 55 f0       	mov    %al,0xf0555a6d
f010c688:	a0 6d 5a 55 f0       	mov    0xf0555a6d,%al
f010c68d:	83 e0 ef             	and    $0xffffffef,%eax
f010c690:	a2 6d 5a 55 f0       	mov    %al,0xf0555a6d
f010c695:	a0 6d 5a 55 f0       	mov    0xf0555a6d,%al
f010c69a:	83 c8 60             	or     $0x60,%eax
f010c69d:	a2 6d 5a 55 f0       	mov    %al,0xf0555a6d
f010c6a2:	a0 6d 5a 55 f0       	mov    0xf0555a6d,%al
f010c6a7:	83 c8 80             	or     $0xffffff80,%eax
f010c6aa:	a2 6d 5a 55 f0       	mov    %al,0xf0555a6d
f010c6af:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c6b4:	c1 e8 10             	shr    $0x10,%eax
f010c6b7:	66 a3 6e 5a 55 f0    	mov    %ax,0xf0555a6e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010c6bd:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c6c2:	66 a3 70 5a 55 f0    	mov    %ax,0xf0555a70
f010c6c8:	66 c7 05 72 5a 55 f0 	movw   $0x8,0xf0555a72
f010c6cf:	08 00 
f010c6d1:	a0 74 5a 55 f0       	mov    0xf0555a74,%al
f010c6d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6d9:	a2 74 5a 55 f0       	mov    %al,0xf0555a74
f010c6de:	a0 74 5a 55 f0       	mov    0xf0555a74,%al
f010c6e3:	83 e0 1f             	and    $0x1f,%eax
f010c6e6:	a2 74 5a 55 f0       	mov    %al,0xf0555a74
f010c6eb:	a0 75 5a 55 f0       	mov    0xf0555a75,%al
f010c6f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6f3:	83 c8 0e             	or     $0xe,%eax
f010c6f6:	a2 75 5a 55 f0       	mov    %al,0xf0555a75
f010c6fb:	a0 75 5a 55 f0       	mov    0xf0555a75,%al
f010c700:	83 e0 ef             	and    $0xffffffef,%eax
f010c703:	a2 75 5a 55 f0       	mov    %al,0xf0555a75
f010c708:	a0 75 5a 55 f0       	mov    0xf0555a75,%al
f010c70d:	83 c8 60             	or     $0x60,%eax
f010c710:	a2 75 5a 55 f0       	mov    %al,0xf0555a75
f010c715:	a0 75 5a 55 f0       	mov    0xf0555a75,%al
f010c71a:	83 c8 80             	or     $0xffffff80,%eax
f010c71d:	a2 75 5a 55 f0       	mov    %al,0xf0555a75
f010c722:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c727:	c1 e8 10             	shr    $0x10,%eax
f010c72a:	66 a3 76 5a 55 f0    	mov    %ax,0xf0555a76
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010c730:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c735:	66 a3 78 5a 55 f0    	mov    %ax,0xf0555a78
f010c73b:	66 c7 05 7a 5a 55 f0 	movw   $0x8,0xf0555a7a
f010c742:	08 00 
f010c744:	a0 7c 5a 55 f0       	mov    0xf0555a7c,%al
f010c749:	83 e0 e0             	and    $0xffffffe0,%eax
f010c74c:	a2 7c 5a 55 f0       	mov    %al,0xf0555a7c
f010c751:	a0 7c 5a 55 f0       	mov    0xf0555a7c,%al
f010c756:	83 e0 1f             	and    $0x1f,%eax
f010c759:	a2 7c 5a 55 f0       	mov    %al,0xf0555a7c
f010c75e:	a0 7d 5a 55 f0       	mov    0xf0555a7d,%al
f010c763:	83 e0 f0             	and    $0xfffffff0,%eax
f010c766:	83 c8 0e             	or     $0xe,%eax
f010c769:	a2 7d 5a 55 f0       	mov    %al,0xf0555a7d
f010c76e:	a0 7d 5a 55 f0       	mov    0xf0555a7d,%al
f010c773:	83 e0 ef             	and    $0xffffffef,%eax
f010c776:	a2 7d 5a 55 f0       	mov    %al,0xf0555a7d
f010c77b:	a0 7d 5a 55 f0       	mov    0xf0555a7d,%al
f010c780:	83 c8 60             	or     $0x60,%eax
f010c783:	a2 7d 5a 55 f0       	mov    %al,0xf0555a7d
f010c788:	a0 7d 5a 55 f0       	mov    0xf0555a7d,%al
f010c78d:	83 c8 80             	or     $0xffffff80,%eax
f010c790:	a2 7d 5a 55 f0       	mov    %al,0xf0555a7d
f010c795:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c79a:	c1 e8 10             	shr    $0x10,%eax
f010c79d:	66 a3 7e 5a 55 f0    	mov    %ax,0xf0555a7e
	//SETGATE(idt[T_DBLFLT ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010c7a3:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c7a8:	66 a3 90 5a 55 f0    	mov    %ax,0xf0555a90
f010c7ae:	66 c7 05 92 5a 55 f0 	movw   $0x8,0xf0555a92
f010c7b5:	08 00 
f010c7b7:	a0 94 5a 55 f0       	mov    0xf0555a94,%al
f010c7bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010c7bf:	a2 94 5a 55 f0       	mov    %al,0xf0555a94
f010c7c4:	a0 94 5a 55 f0       	mov    0xf0555a94,%al
f010c7c9:	83 e0 1f             	and    $0x1f,%eax
f010c7cc:	a2 94 5a 55 f0       	mov    %al,0xf0555a94
f010c7d1:	a0 95 5a 55 f0       	mov    0xf0555a95,%al
f010c7d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7d9:	83 c8 0e             	or     $0xe,%eax
f010c7dc:	a2 95 5a 55 f0       	mov    %al,0xf0555a95
f010c7e1:	a0 95 5a 55 f0       	mov    0xf0555a95,%al
f010c7e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c7e9:	a2 95 5a 55 f0       	mov    %al,0xf0555a95
f010c7ee:	a0 95 5a 55 f0       	mov    0xf0555a95,%al
f010c7f3:	83 c8 60             	or     $0x60,%eax
f010c7f6:	a2 95 5a 55 f0       	mov    %al,0xf0555a95
f010c7fb:	a0 95 5a 55 f0       	mov    0xf0555a95,%al
f010c800:	83 c8 80             	or     $0xffffff80,%eax
f010c803:	a2 95 5a 55 f0       	mov    %al,0xf0555a95
f010c808:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c80d:	c1 e8 10             	shr    $0x10,%eax
f010c810:	66 a3 96 5a 55 f0    	mov    %ax,0xf0555a96
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010c816:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c81b:	66 a3 98 5a 55 f0    	mov    %ax,0xf0555a98
f010c821:	66 c7 05 9a 5a 55 f0 	movw   $0x8,0xf0555a9a
f010c828:	08 00 
f010c82a:	a0 9c 5a 55 f0       	mov    0xf0555a9c,%al
f010c82f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c832:	a2 9c 5a 55 f0       	mov    %al,0xf0555a9c
f010c837:	a0 9c 5a 55 f0       	mov    0xf0555a9c,%al
f010c83c:	83 e0 1f             	and    $0x1f,%eax
f010c83f:	a2 9c 5a 55 f0       	mov    %al,0xf0555a9c
f010c844:	a0 9d 5a 55 f0       	mov    0xf0555a9d,%al
f010c849:	83 e0 f0             	and    $0xfffffff0,%eax
f010c84c:	83 c8 0e             	or     $0xe,%eax
f010c84f:	a2 9d 5a 55 f0       	mov    %al,0xf0555a9d
f010c854:	a0 9d 5a 55 f0       	mov    0xf0555a9d,%al
f010c859:	83 e0 ef             	and    $0xffffffef,%eax
f010c85c:	a2 9d 5a 55 f0       	mov    %al,0xf0555a9d
f010c861:	a0 9d 5a 55 f0       	mov    0xf0555a9d,%al
f010c866:	83 c8 60             	or     $0x60,%eax
f010c869:	a2 9d 5a 55 f0       	mov    %al,0xf0555a9d
f010c86e:	a0 9d 5a 55 f0       	mov    0xf0555a9d,%al
f010c873:	83 c8 80             	or     $0xffffff80,%eax
f010c876:	a2 9d 5a 55 f0       	mov    %al,0xf0555a9d
f010c87b:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c880:	c1 e8 10             	shr    $0x10,%eax
f010c883:	66 a3 9e 5a 55 f0    	mov    %ax,0xf0555a9e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010c889:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c88e:	66 a3 a0 5a 55 f0    	mov    %ax,0xf0555aa0
f010c894:	66 c7 05 a2 5a 55 f0 	movw   $0x8,0xf0555aa2
f010c89b:	08 00 
f010c89d:	a0 a4 5a 55 f0       	mov    0xf0555aa4,%al
f010c8a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010c8a5:	a2 a4 5a 55 f0       	mov    %al,0xf0555aa4
f010c8aa:	a0 a4 5a 55 f0       	mov    0xf0555aa4,%al
f010c8af:	83 e0 1f             	and    $0x1f,%eax
f010c8b2:	a2 a4 5a 55 f0       	mov    %al,0xf0555aa4
f010c8b7:	a0 a5 5a 55 f0       	mov    0xf0555aa5,%al
f010c8bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010c8bf:	83 c8 0e             	or     $0xe,%eax
f010c8c2:	a2 a5 5a 55 f0       	mov    %al,0xf0555aa5
f010c8c7:	a0 a5 5a 55 f0       	mov    0xf0555aa5,%al
f010c8cc:	83 e0 ef             	and    $0xffffffef,%eax
f010c8cf:	a2 a5 5a 55 f0       	mov    %al,0xf0555aa5
f010c8d4:	a0 a5 5a 55 f0       	mov    0xf0555aa5,%al
f010c8d9:	83 c8 60             	or     $0x60,%eax
f010c8dc:	a2 a5 5a 55 f0       	mov    %al,0xf0555aa5
f010c8e1:	a0 a5 5a 55 f0       	mov    0xf0555aa5,%al
f010c8e6:	83 c8 80             	or     $0xffffff80,%eax
f010c8e9:	a2 a5 5a 55 f0       	mov    %al,0xf0555aa5
f010c8ee:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c8f3:	c1 e8 10             	shr    $0x10,%eax
f010c8f6:	66 a3 a6 5a 55 f0    	mov    %ax,0xf0555aa6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010c8fc:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c901:	66 a3 a8 5a 55 f0    	mov    %ax,0xf0555aa8
f010c907:	66 c7 05 aa 5a 55 f0 	movw   $0x8,0xf0555aaa
f010c90e:	08 00 
f010c910:	a0 ac 5a 55 f0       	mov    0xf0555aac,%al
f010c915:	83 e0 e0             	and    $0xffffffe0,%eax
f010c918:	a2 ac 5a 55 f0       	mov    %al,0xf0555aac
f010c91d:	a0 ac 5a 55 f0       	mov    0xf0555aac,%al
f010c922:	83 e0 1f             	and    $0x1f,%eax
f010c925:	a2 ac 5a 55 f0       	mov    %al,0xf0555aac
f010c92a:	a0 ad 5a 55 f0       	mov    0xf0555aad,%al
f010c92f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c932:	83 c8 0e             	or     $0xe,%eax
f010c935:	a2 ad 5a 55 f0       	mov    %al,0xf0555aad
f010c93a:	a0 ad 5a 55 f0       	mov    0xf0555aad,%al
f010c93f:	83 e0 ef             	and    $0xffffffef,%eax
f010c942:	a2 ad 5a 55 f0       	mov    %al,0xf0555aad
f010c947:	a0 ad 5a 55 f0       	mov    0xf0555aad,%al
f010c94c:	83 c8 60             	or     $0x60,%eax
f010c94f:	a2 ad 5a 55 f0       	mov    %al,0xf0555aad
f010c954:	a0 ad 5a 55 f0       	mov    0xf0555aad,%al
f010c959:	83 c8 80             	or     $0xffffff80,%eax
f010c95c:	a2 ad 5a 55 f0       	mov    %al,0xf0555aad
f010c961:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c966:	c1 e8 10             	shr    $0x10,%eax
f010c969:	66 a3 ae 5a 55 f0    	mov    %ax,0xf0555aae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010c96f:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c974:	66 a3 c0 5a 55 f0    	mov    %ax,0xf0555ac0
f010c97a:	66 c7 05 c2 5a 55 f0 	movw   $0x8,0xf0555ac2
f010c981:	08 00 
f010c983:	a0 c4 5a 55 f0       	mov    0xf0555ac4,%al
f010c988:	83 e0 e0             	and    $0xffffffe0,%eax
f010c98b:	a2 c4 5a 55 f0       	mov    %al,0xf0555ac4
f010c990:	a0 c4 5a 55 f0       	mov    0xf0555ac4,%al
f010c995:	83 e0 1f             	and    $0x1f,%eax
f010c998:	a2 c4 5a 55 f0       	mov    %al,0xf0555ac4
f010c99d:	a0 c5 5a 55 f0       	mov    0xf0555ac5,%al
f010c9a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c9a5:	83 c8 0e             	or     $0xe,%eax
f010c9a8:	a2 c5 5a 55 f0       	mov    %al,0xf0555ac5
f010c9ad:	a0 c5 5a 55 f0       	mov    0xf0555ac5,%al
f010c9b2:	83 e0 ef             	and    $0xffffffef,%eax
f010c9b5:	a2 c5 5a 55 f0       	mov    %al,0xf0555ac5
f010c9ba:	a0 c5 5a 55 f0       	mov    0xf0555ac5,%al
f010c9bf:	83 c8 60             	or     $0x60,%eax
f010c9c2:	a2 c5 5a 55 f0       	mov    %al,0xf0555ac5
f010c9c7:	a0 c5 5a 55 f0       	mov    0xf0555ac5,%al
f010c9cc:	83 c8 80             	or     $0xffffff80,%eax
f010c9cf:	a2 c5 5a 55 f0       	mov    %al,0xf0555ac5
f010c9d4:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c9d9:	c1 e8 10             	shr    $0x10,%eax
f010c9dc:	66 a3 c6 5a 55 f0    	mov    %ax,0xf0555ac6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010c9e2:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010c9e7:	66 a3 c8 5a 55 f0    	mov    %ax,0xf0555ac8
f010c9ed:	66 c7 05 ca 5a 55 f0 	movw   $0x8,0xf0555aca
f010c9f4:	08 00 
f010c9f6:	a0 cc 5a 55 f0       	mov    0xf0555acc,%al
f010c9fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c9fe:	a2 cc 5a 55 f0       	mov    %al,0xf0555acc
f010ca03:	a0 cc 5a 55 f0       	mov    0xf0555acc,%al
f010ca08:	83 e0 1f             	and    $0x1f,%eax
f010ca0b:	a2 cc 5a 55 f0       	mov    %al,0xf0555acc
f010ca10:	a0 cd 5a 55 f0       	mov    0xf0555acd,%al
f010ca15:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca18:	83 c8 0e             	or     $0xe,%eax
f010ca1b:	a2 cd 5a 55 f0       	mov    %al,0xf0555acd
f010ca20:	a0 cd 5a 55 f0       	mov    0xf0555acd,%al
f010ca25:	83 e0 ef             	and    $0xffffffef,%eax
f010ca28:	a2 cd 5a 55 f0       	mov    %al,0xf0555acd
f010ca2d:	a0 cd 5a 55 f0       	mov    0xf0555acd,%al
f010ca32:	83 c8 60             	or     $0x60,%eax
f010ca35:	a2 cd 5a 55 f0       	mov    %al,0xf0555acd
f010ca3a:	a0 cd 5a 55 f0       	mov    0xf0555acd,%al
f010ca3f:	83 c8 80             	or     $0xffffff80,%eax
f010ca42:	a2 cd 5a 55 f0       	mov    %al,0xf0555acd
f010ca47:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010ca4c:	c1 e8 10             	shr    $0x10,%eax
f010ca4f:	66 a3 ce 5a 55 f0    	mov    %ax,0xf0555ace
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010ca55:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010ca5a:	66 a3 d0 5a 55 f0    	mov    %ax,0xf0555ad0
f010ca60:	66 c7 05 d2 5a 55 f0 	movw   $0x8,0xf0555ad2
f010ca67:	08 00 
f010ca69:	a0 d4 5a 55 f0       	mov    0xf0555ad4,%al
f010ca6e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ca71:	a2 d4 5a 55 f0       	mov    %al,0xf0555ad4
f010ca76:	a0 d4 5a 55 f0       	mov    0xf0555ad4,%al
f010ca7b:	83 e0 1f             	and    $0x1f,%eax
f010ca7e:	a2 d4 5a 55 f0       	mov    %al,0xf0555ad4
f010ca83:	a0 d5 5a 55 f0       	mov    0xf0555ad5,%al
f010ca88:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca8b:	83 c8 0e             	or     $0xe,%eax
f010ca8e:	a2 d5 5a 55 f0       	mov    %al,0xf0555ad5
f010ca93:	a0 d5 5a 55 f0       	mov    0xf0555ad5,%al
f010ca98:	83 e0 ef             	and    $0xffffffef,%eax
f010ca9b:	a2 d5 5a 55 f0       	mov    %al,0xf0555ad5
f010caa0:	a0 d5 5a 55 f0       	mov    0xf0555ad5,%al
f010caa5:	83 c8 60             	or     $0x60,%eax
f010caa8:	a2 d5 5a 55 f0       	mov    %al,0xf0555ad5
f010caad:	a0 d5 5a 55 f0       	mov    0xf0555ad5,%al
f010cab2:	83 c8 80             	or     $0xffffff80,%eax
f010cab5:	a2 d5 5a 55 f0       	mov    %al,0xf0555ad5
f010caba:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010cabf:	c1 e8 10             	shr    $0x10,%eax
f010cac2:	66 a3 d6 5a 55 f0    	mov    %ax,0xf0555ad6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010cac8:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cacd:	66 a3 d8 5a 55 f0    	mov    %ax,0xf0555ad8
f010cad3:	66 c7 05 da 5a 55 f0 	movw   $0x8,0xf0555ada
f010cada:	08 00 
f010cadc:	a0 dc 5a 55 f0       	mov    0xf0555adc,%al
f010cae1:	83 e0 e0             	and    $0xffffffe0,%eax
f010cae4:	a2 dc 5a 55 f0       	mov    %al,0xf0555adc
f010cae9:	a0 dc 5a 55 f0       	mov    0xf0555adc,%al
f010caee:	83 e0 1f             	and    $0x1f,%eax
f010caf1:	a2 dc 5a 55 f0       	mov    %al,0xf0555adc
f010caf6:	a0 dd 5a 55 f0       	mov    0xf0555add,%al
f010cafb:	83 e0 f0             	and    $0xfffffff0,%eax
f010cafe:	83 c8 0e             	or     $0xe,%eax
f010cb01:	a2 dd 5a 55 f0       	mov    %al,0xf0555add
f010cb06:	a0 dd 5a 55 f0       	mov    0xf0555add,%al
f010cb0b:	83 e0 ef             	and    $0xffffffef,%eax
f010cb0e:	a2 dd 5a 55 f0       	mov    %al,0xf0555add
f010cb13:	a0 dd 5a 55 f0       	mov    0xf0555add,%al
f010cb18:	83 c8 60             	or     $0x60,%eax
f010cb1b:	a2 dd 5a 55 f0       	mov    %al,0xf0555add
f010cb20:	a0 dd 5a 55 f0       	mov    0xf0555add,%al
f010cb25:	83 c8 80             	or     $0xffffff80,%eax
f010cb28:	a2 dd 5a 55 f0       	mov    %al,0xf0555add
f010cb2d:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cb32:	c1 e8 10             	shr    $0x10,%eax
f010cb35:	66 a3 de 5a 55 f0    	mov    %ax,0xf0555ade

	//IRQs
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010cb3b:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cb40:	66 a3 50 5b 55 f0    	mov    %ax,0xf0555b50
f010cb46:	66 c7 05 52 5b 55 f0 	movw   $0x8,0xf0555b52
f010cb4d:	08 00 
f010cb4f:	a0 54 5b 55 f0       	mov    0xf0555b54,%al
f010cb54:	83 e0 e0             	and    $0xffffffe0,%eax
f010cb57:	a2 54 5b 55 f0       	mov    %al,0xf0555b54
f010cb5c:	a0 54 5b 55 f0       	mov    0xf0555b54,%al
f010cb61:	83 e0 1f             	and    $0x1f,%eax
f010cb64:	a2 54 5b 55 f0       	mov    %al,0xf0555b54
f010cb69:	a0 55 5b 55 f0       	mov    0xf0555b55,%al
f010cb6e:	83 e0 f0             	and    $0xfffffff0,%eax
f010cb71:	83 c8 0e             	or     $0xe,%eax
f010cb74:	a2 55 5b 55 f0       	mov    %al,0xf0555b55
f010cb79:	a0 55 5b 55 f0       	mov    0xf0555b55,%al
f010cb7e:	83 e0 ef             	and    $0xffffffef,%eax
f010cb81:	a2 55 5b 55 f0       	mov    %al,0xf0555b55
f010cb86:	a0 55 5b 55 f0       	mov    0xf0555b55,%al
f010cb8b:	83 c8 60             	or     $0x60,%eax
f010cb8e:	a2 55 5b 55 f0       	mov    %al,0xf0555b55
f010cb93:	a0 55 5b 55 f0       	mov    0xf0555b55,%al
f010cb98:	83 c8 80             	or     $0xffffff80,%eax
f010cb9b:	a2 55 5b 55 f0       	mov    %al,0xf0555b55
f010cba0:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cba5:	c1 e8 10             	shr    $0x10,%eax
f010cba8:	66 a3 56 5b 55 f0    	mov    %ax,0xf0555b56
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010cbae:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cbb3:	66 a3 58 5b 55 f0    	mov    %ax,0xf0555b58
f010cbb9:	66 c7 05 5a 5b 55 f0 	movw   $0x8,0xf0555b5a
f010cbc0:	08 00 
f010cbc2:	a0 5c 5b 55 f0       	mov    0xf0555b5c,%al
f010cbc7:	83 e0 e0             	and    $0xffffffe0,%eax
f010cbca:	a2 5c 5b 55 f0       	mov    %al,0xf0555b5c
f010cbcf:	a0 5c 5b 55 f0       	mov    0xf0555b5c,%al
f010cbd4:	83 e0 1f             	and    $0x1f,%eax
f010cbd7:	a2 5c 5b 55 f0       	mov    %al,0xf0555b5c
f010cbdc:	a0 5d 5b 55 f0       	mov    0xf0555b5d,%al
f010cbe1:	83 e0 f0             	and    $0xfffffff0,%eax
f010cbe4:	83 c8 0e             	or     $0xe,%eax
f010cbe7:	a2 5d 5b 55 f0       	mov    %al,0xf0555b5d
f010cbec:	a0 5d 5b 55 f0       	mov    0xf0555b5d,%al
f010cbf1:	83 e0 ef             	and    $0xffffffef,%eax
f010cbf4:	a2 5d 5b 55 f0       	mov    %al,0xf0555b5d
f010cbf9:	a0 5d 5b 55 f0       	mov    0xf0555b5d,%al
f010cbfe:	83 c8 60             	or     $0x60,%eax
f010cc01:	a2 5d 5b 55 f0       	mov    %al,0xf0555b5d
f010cc06:	a0 5d 5b 55 f0       	mov    0xf0555b5d,%al
f010cc0b:	83 c8 80             	or     $0xffffff80,%eax
f010cc0e:	a2 5d 5b 55 f0       	mov    %al,0xf0555b5d
f010cc13:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cc18:	c1 e8 10             	shr    $0x10,%eax
f010cc1b:	66 a3 5e 5b 55 f0    	mov    %ax,0xf0555b5e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010cc21:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc26:	66 a3 60 5b 55 f0    	mov    %ax,0xf0555b60
f010cc2c:	66 c7 05 62 5b 55 f0 	movw   $0x8,0xf0555b62
f010cc33:	08 00 
f010cc35:	a0 64 5b 55 f0       	mov    0xf0555b64,%al
f010cc3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010cc3d:	a2 64 5b 55 f0       	mov    %al,0xf0555b64
f010cc42:	a0 64 5b 55 f0       	mov    0xf0555b64,%al
f010cc47:	83 e0 1f             	and    $0x1f,%eax
f010cc4a:	a2 64 5b 55 f0       	mov    %al,0xf0555b64
f010cc4f:	a0 65 5b 55 f0       	mov    0xf0555b65,%al
f010cc54:	83 e0 f0             	and    $0xfffffff0,%eax
f010cc57:	83 c8 0e             	or     $0xe,%eax
f010cc5a:	a2 65 5b 55 f0       	mov    %al,0xf0555b65
f010cc5f:	a0 65 5b 55 f0       	mov    0xf0555b65,%al
f010cc64:	83 e0 ef             	and    $0xffffffef,%eax
f010cc67:	a2 65 5b 55 f0       	mov    %al,0xf0555b65
f010cc6c:	a0 65 5b 55 f0       	mov    0xf0555b65,%al
f010cc71:	83 c8 60             	or     $0x60,%eax
f010cc74:	a2 65 5b 55 f0       	mov    %al,0xf0555b65
f010cc79:	a0 65 5b 55 f0       	mov    0xf0555b65,%al
f010cc7e:	83 c8 80             	or     $0xffffff80,%eax
f010cc81:	a2 65 5b 55 f0       	mov    %al,0xf0555b65
f010cc86:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc8b:	c1 e8 10             	shr    $0x10,%eax
f010cc8e:	66 a3 66 5b 55 f0    	mov    %ax,0xf0555b66
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010cc94:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010cc99:	66 a3 68 5b 55 f0    	mov    %ax,0xf0555b68
f010cc9f:	66 c7 05 6a 5b 55 f0 	movw   $0x8,0xf0555b6a
f010cca6:	08 00 
f010cca8:	a0 6c 5b 55 f0       	mov    0xf0555b6c,%al
f010ccad:	83 e0 e0             	and    $0xffffffe0,%eax
f010ccb0:	a2 6c 5b 55 f0       	mov    %al,0xf0555b6c
f010ccb5:	a0 6c 5b 55 f0       	mov    0xf0555b6c,%al
f010ccba:	83 e0 1f             	and    $0x1f,%eax
f010ccbd:	a2 6c 5b 55 f0       	mov    %al,0xf0555b6c
f010ccc2:	a0 6d 5b 55 f0       	mov    0xf0555b6d,%al
f010ccc7:	83 e0 f0             	and    $0xfffffff0,%eax
f010ccca:	83 c8 0e             	or     $0xe,%eax
f010cccd:	a2 6d 5b 55 f0       	mov    %al,0xf0555b6d
f010ccd2:	a0 6d 5b 55 f0       	mov    0xf0555b6d,%al
f010ccd7:	83 e0 ef             	and    $0xffffffef,%eax
f010ccda:	a2 6d 5b 55 f0       	mov    %al,0xf0555b6d
f010ccdf:	a0 6d 5b 55 f0       	mov    0xf0555b6d,%al
f010cce4:	83 c8 60             	or     $0x60,%eax
f010cce7:	a2 6d 5b 55 f0       	mov    %al,0xf0555b6d
f010ccec:	a0 6d 5b 55 f0       	mov    0xf0555b6d,%al
f010ccf1:	83 c8 80             	or     $0xffffff80,%eax
f010ccf4:	a2 6d 5b 55 f0       	mov    %al,0xf0555b6d
f010ccf9:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010ccfe:	c1 e8 10             	shr    $0x10,%eax
f010cd01:	66 a3 6e 5b 55 f0    	mov    %ax,0xf0555b6e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010cd07:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd0c:	66 a3 70 5b 55 f0    	mov    %ax,0xf0555b70
f010cd12:	66 c7 05 72 5b 55 f0 	movw   $0x8,0xf0555b72
f010cd19:	08 00 
f010cd1b:	a0 74 5b 55 f0       	mov    0xf0555b74,%al
f010cd20:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd23:	a2 74 5b 55 f0       	mov    %al,0xf0555b74
f010cd28:	a0 74 5b 55 f0       	mov    0xf0555b74,%al
f010cd2d:	83 e0 1f             	and    $0x1f,%eax
f010cd30:	a2 74 5b 55 f0       	mov    %al,0xf0555b74
f010cd35:	a0 75 5b 55 f0       	mov    0xf0555b75,%al
f010cd3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010cd3d:	83 c8 0e             	or     $0xe,%eax
f010cd40:	a2 75 5b 55 f0       	mov    %al,0xf0555b75
f010cd45:	a0 75 5b 55 f0       	mov    0xf0555b75,%al
f010cd4a:	83 e0 ef             	and    $0xffffffef,%eax
f010cd4d:	a2 75 5b 55 f0       	mov    %al,0xf0555b75
f010cd52:	a0 75 5b 55 f0       	mov    0xf0555b75,%al
f010cd57:	83 c8 60             	or     $0x60,%eax
f010cd5a:	a2 75 5b 55 f0       	mov    %al,0xf0555b75
f010cd5f:	a0 75 5b 55 f0       	mov    0xf0555b75,%al
f010cd64:	83 c8 80             	or     $0xffffff80,%eax
f010cd67:	a2 75 5b 55 f0       	mov    %al,0xf0555b75
f010cd6c:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd71:	c1 e8 10             	shr    $0x10,%eax
f010cd74:	66 a3 76 5b 55 f0    	mov    %ax,0xf0555b76
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010cd7a:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cd7f:	66 a3 78 5b 55 f0    	mov    %ax,0xf0555b78
f010cd85:	66 c7 05 7a 5b 55 f0 	movw   $0x8,0xf0555b7a
f010cd8c:	08 00 
f010cd8e:	a0 7c 5b 55 f0       	mov    0xf0555b7c,%al
f010cd93:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd96:	a2 7c 5b 55 f0       	mov    %al,0xf0555b7c
f010cd9b:	a0 7c 5b 55 f0       	mov    0xf0555b7c,%al
f010cda0:	83 e0 1f             	and    $0x1f,%eax
f010cda3:	a2 7c 5b 55 f0       	mov    %al,0xf0555b7c
f010cda8:	a0 7d 5b 55 f0       	mov    0xf0555b7d,%al
f010cdad:	83 e0 f0             	and    $0xfffffff0,%eax
f010cdb0:	83 c8 0e             	or     $0xe,%eax
f010cdb3:	a2 7d 5b 55 f0       	mov    %al,0xf0555b7d
f010cdb8:	a0 7d 5b 55 f0       	mov    0xf0555b7d,%al
f010cdbd:	83 e0 ef             	and    $0xffffffef,%eax
f010cdc0:	a2 7d 5b 55 f0       	mov    %al,0xf0555b7d
f010cdc5:	a0 7d 5b 55 f0       	mov    0xf0555b7d,%al
f010cdca:	83 c8 60             	or     $0x60,%eax
f010cdcd:	a2 7d 5b 55 f0       	mov    %al,0xf0555b7d
f010cdd2:	a0 7d 5b 55 f0       	mov    0xf0555b7d,%al
f010cdd7:	83 c8 80             	or     $0xffffff80,%eax
f010cdda:	a2 7d 5b 55 f0       	mov    %al,0xf0555b7d
f010cddf:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cde4:	c1 e8 10             	shr    $0x10,%eax
f010cde7:	66 a3 7e 5b 55 f0    	mov    %ax,0xf0555b7e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010cded:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010cdf2:	66 a3 80 5b 55 f0    	mov    %ax,0xf0555b80
f010cdf8:	66 c7 05 82 5b 55 f0 	movw   $0x8,0xf0555b82
f010cdff:	08 00 
f010ce01:	a0 84 5b 55 f0       	mov    0xf0555b84,%al
f010ce06:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce09:	a2 84 5b 55 f0       	mov    %al,0xf0555b84
f010ce0e:	a0 84 5b 55 f0       	mov    0xf0555b84,%al
f010ce13:	83 e0 1f             	and    $0x1f,%eax
f010ce16:	a2 84 5b 55 f0       	mov    %al,0xf0555b84
f010ce1b:	a0 85 5b 55 f0       	mov    0xf0555b85,%al
f010ce20:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce23:	83 c8 0e             	or     $0xe,%eax
f010ce26:	a2 85 5b 55 f0       	mov    %al,0xf0555b85
f010ce2b:	a0 85 5b 55 f0       	mov    0xf0555b85,%al
f010ce30:	83 e0 ef             	and    $0xffffffef,%eax
f010ce33:	a2 85 5b 55 f0       	mov    %al,0xf0555b85
f010ce38:	a0 85 5b 55 f0       	mov    0xf0555b85,%al
f010ce3d:	83 c8 60             	or     $0x60,%eax
f010ce40:	a2 85 5b 55 f0       	mov    %al,0xf0555b85
f010ce45:	a0 85 5b 55 f0       	mov    0xf0555b85,%al
f010ce4a:	83 c8 80             	or     $0xffffff80,%eax
f010ce4d:	a2 85 5b 55 f0       	mov    %al,0xf0555b85
f010ce52:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010ce57:	c1 e8 10             	shr    $0x10,%eax
f010ce5a:	66 a3 86 5b 55 f0    	mov    %ax,0xf0555b86
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010ce60:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ce65:	66 a3 88 5b 55 f0    	mov    %ax,0xf0555b88
f010ce6b:	66 c7 05 8a 5b 55 f0 	movw   $0x8,0xf0555b8a
f010ce72:	08 00 
f010ce74:	a0 8c 5b 55 f0       	mov    0xf0555b8c,%al
f010ce79:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce7c:	a2 8c 5b 55 f0       	mov    %al,0xf0555b8c
f010ce81:	a0 8c 5b 55 f0       	mov    0xf0555b8c,%al
f010ce86:	83 e0 1f             	and    $0x1f,%eax
f010ce89:	a2 8c 5b 55 f0       	mov    %al,0xf0555b8c
f010ce8e:	a0 8d 5b 55 f0       	mov    0xf0555b8d,%al
f010ce93:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce96:	83 c8 0e             	or     $0xe,%eax
f010ce99:	a2 8d 5b 55 f0       	mov    %al,0xf0555b8d
f010ce9e:	a0 8d 5b 55 f0       	mov    0xf0555b8d,%al
f010cea3:	83 e0 ef             	and    $0xffffffef,%eax
f010cea6:	a2 8d 5b 55 f0       	mov    %al,0xf0555b8d
f010ceab:	a0 8d 5b 55 f0       	mov    0xf0555b8d,%al
f010ceb0:	83 c8 60             	or     $0x60,%eax
f010ceb3:	a2 8d 5b 55 f0       	mov    %al,0xf0555b8d
f010ceb8:	a0 8d 5b 55 f0       	mov    0xf0555b8d,%al
f010cebd:	83 c8 80             	or     $0xffffff80,%eax
f010cec0:	a2 8d 5b 55 f0       	mov    %al,0xf0555b8d
f010cec5:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ceca:	c1 e8 10             	shr    $0x10,%eax
f010cecd:	66 a3 8e 5b 55 f0    	mov    %ax,0xf0555b8e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010ced3:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010ced8:	66 a3 90 5b 55 f0    	mov    %ax,0xf0555b90
f010cede:	66 c7 05 92 5b 55 f0 	movw   $0x8,0xf0555b92
f010cee5:	08 00 
f010cee7:	a0 94 5b 55 f0       	mov    0xf0555b94,%al
f010ceec:	83 e0 e0             	and    $0xffffffe0,%eax
f010ceef:	a2 94 5b 55 f0       	mov    %al,0xf0555b94
f010cef4:	a0 94 5b 55 f0       	mov    0xf0555b94,%al
f010cef9:	83 e0 1f             	and    $0x1f,%eax
f010cefc:	a2 94 5b 55 f0       	mov    %al,0xf0555b94
f010cf01:	a0 95 5b 55 f0       	mov    0xf0555b95,%al
f010cf06:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf09:	83 c8 0e             	or     $0xe,%eax
f010cf0c:	a2 95 5b 55 f0       	mov    %al,0xf0555b95
f010cf11:	a0 95 5b 55 f0       	mov    0xf0555b95,%al
f010cf16:	83 e0 ef             	and    $0xffffffef,%eax
f010cf19:	a2 95 5b 55 f0       	mov    %al,0xf0555b95
f010cf1e:	a0 95 5b 55 f0       	mov    0xf0555b95,%al
f010cf23:	83 c8 60             	or     $0x60,%eax
f010cf26:	a2 95 5b 55 f0       	mov    %al,0xf0555b95
f010cf2b:	a0 95 5b 55 f0       	mov    0xf0555b95,%al
f010cf30:	83 c8 80             	or     $0xffffff80,%eax
f010cf33:	a2 95 5b 55 f0       	mov    %al,0xf0555b95
f010cf38:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010cf3d:	c1 e8 10             	shr    $0x10,%eax
f010cf40:	66 a3 96 5b 55 f0    	mov    %ax,0xf0555b96
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010cf46:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cf4b:	66 a3 98 5b 55 f0    	mov    %ax,0xf0555b98
f010cf51:	66 c7 05 9a 5b 55 f0 	movw   $0x8,0xf0555b9a
f010cf58:	08 00 
f010cf5a:	a0 9c 5b 55 f0       	mov    0xf0555b9c,%al
f010cf5f:	83 e0 e0             	and    $0xffffffe0,%eax
f010cf62:	a2 9c 5b 55 f0       	mov    %al,0xf0555b9c
f010cf67:	a0 9c 5b 55 f0       	mov    0xf0555b9c,%al
f010cf6c:	83 e0 1f             	and    $0x1f,%eax
f010cf6f:	a2 9c 5b 55 f0       	mov    %al,0xf0555b9c
f010cf74:	a0 9d 5b 55 f0       	mov    0xf0555b9d,%al
f010cf79:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf7c:	83 c8 0e             	or     $0xe,%eax
f010cf7f:	a2 9d 5b 55 f0       	mov    %al,0xf0555b9d
f010cf84:	a0 9d 5b 55 f0       	mov    0xf0555b9d,%al
f010cf89:	83 e0 ef             	and    $0xffffffef,%eax
f010cf8c:	a2 9d 5b 55 f0       	mov    %al,0xf0555b9d
f010cf91:	a0 9d 5b 55 f0       	mov    0xf0555b9d,%al
f010cf96:	83 c8 60             	or     $0x60,%eax
f010cf99:	a2 9d 5b 55 f0       	mov    %al,0xf0555b9d
f010cf9e:	a0 9d 5b 55 f0       	mov    0xf0555b9d,%al
f010cfa3:	83 c8 80             	or     $0xffffff80,%eax
f010cfa6:	a2 9d 5b 55 f0       	mov    %al,0xf0555b9d
f010cfab:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cfb0:	c1 e8 10             	shr    $0x10,%eax
f010cfb3:	66 a3 9e 5b 55 f0    	mov    %ax,0xf0555b9e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010cfb9:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010cfbe:	66 a3 a0 5b 55 f0    	mov    %ax,0xf0555ba0
f010cfc4:	66 c7 05 a2 5b 55 f0 	movw   $0x8,0xf0555ba2
f010cfcb:	08 00 
f010cfcd:	a0 a4 5b 55 f0       	mov    0xf0555ba4,%al
f010cfd2:	83 e0 e0             	and    $0xffffffe0,%eax
f010cfd5:	a2 a4 5b 55 f0       	mov    %al,0xf0555ba4
f010cfda:	a0 a4 5b 55 f0       	mov    0xf0555ba4,%al
f010cfdf:	83 e0 1f             	and    $0x1f,%eax
f010cfe2:	a2 a4 5b 55 f0       	mov    %al,0xf0555ba4
f010cfe7:	a0 a5 5b 55 f0       	mov    0xf0555ba5,%al
f010cfec:	83 e0 f0             	and    $0xfffffff0,%eax
f010cfef:	83 c8 0e             	or     $0xe,%eax
f010cff2:	a2 a5 5b 55 f0       	mov    %al,0xf0555ba5
f010cff7:	a0 a5 5b 55 f0       	mov    0xf0555ba5,%al
f010cffc:	83 e0 ef             	and    $0xffffffef,%eax
f010cfff:	a2 a5 5b 55 f0       	mov    %al,0xf0555ba5
f010d004:	a0 a5 5b 55 f0       	mov    0xf0555ba5,%al
f010d009:	83 c8 60             	or     $0x60,%eax
f010d00c:	a2 a5 5b 55 f0       	mov    %al,0xf0555ba5
f010d011:	a0 a5 5b 55 f0       	mov    0xf0555ba5,%al
f010d016:	83 c8 80             	or     $0xffffff80,%eax
f010d019:	a2 a5 5b 55 f0       	mov    %al,0xf0555ba5
f010d01e:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010d023:	c1 e8 10             	shr    $0x10,%eax
f010d026:	66 a3 a6 5b 55 f0    	mov    %ax,0xf0555ba6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010d02c:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d031:	66 a3 a8 5b 55 f0    	mov    %ax,0xf0555ba8
f010d037:	66 c7 05 aa 5b 55 f0 	movw   $0x8,0xf0555baa
f010d03e:	08 00 
f010d040:	a0 ac 5b 55 f0       	mov    0xf0555bac,%al
f010d045:	83 e0 e0             	and    $0xffffffe0,%eax
f010d048:	a2 ac 5b 55 f0       	mov    %al,0xf0555bac
f010d04d:	a0 ac 5b 55 f0       	mov    0xf0555bac,%al
f010d052:	83 e0 1f             	and    $0x1f,%eax
f010d055:	a2 ac 5b 55 f0       	mov    %al,0xf0555bac
f010d05a:	a0 ad 5b 55 f0       	mov    0xf0555bad,%al
f010d05f:	83 e0 f0             	and    $0xfffffff0,%eax
f010d062:	83 c8 0e             	or     $0xe,%eax
f010d065:	a2 ad 5b 55 f0       	mov    %al,0xf0555bad
f010d06a:	a0 ad 5b 55 f0       	mov    0xf0555bad,%al
f010d06f:	83 e0 ef             	and    $0xffffffef,%eax
f010d072:	a2 ad 5b 55 f0       	mov    %al,0xf0555bad
f010d077:	a0 ad 5b 55 f0       	mov    0xf0555bad,%al
f010d07c:	83 c8 60             	or     $0x60,%eax
f010d07f:	a2 ad 5b 55 f0       	mov    %al,0xf0555bad
f010d084:	a0 ad 5b 55 f0       	mov    0xf0555bad,%al
f010d089:	83 c8 80             	or     $0xffffff80,%eax
f010d08c:	a2 ad 5b 55 f0       	mov    %al,0xf0555bad
f010d091:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d096:	c1 e8 10             	shr    $0x10,%eax
f010d099:	66 a3 ae 5b 55 f0    	mov    %ax,0xf0555bae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010d09f:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d0a4:	66 a3 b0 5b 55 f0    	mov    %ax,0xf0555bb0
f010d0aa:	66 c7 05 b2 5b 55 f0 	movw   $0x8,0xf0555bb2
f010d0b1:	08 00 
f010d0b3:	a0 b4 5b 55 f0       	mov    0xf0555bb4,%al
f010d0b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010d0bb:	a2 b4 5b 55 f0       	mov    %al,0xf0555bb4
f010d0c0:	a0 b4 5b 55 f0       	mov    0xf0555bb4,%al
f010d0c5:	83 e0 1f             	and    $0x1f,%eax
f010d0c8:	a2 b4 5b 55 f0       	mov    %al,0xf0555bb4
f010d0cd:	a0 b5 5b 55 f0       	mov    0xf0555bb5,%al
f010d0d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010d0d5:	83 c8 0e             	or     $0xe,%eax
f010d0d8:	a2 b5 5b 55 f0       	mov    %al,0xf0555bb5
f010d0dd:	a0 b5 5b 55 f0       	mov    0xf0555bb5,%al
f010d0e2:	83 e0 ef             	and    $0xffffffef,%eax
f010d0e5:	a2 b5 5b 55 f0       	mov    %al,0xf0555bb5
f010d0ea:	a0 b5 5b 55 f0       	mov    0xf0555bb5,%al
f010d0ef:	83 c8 60             	or     $0x60,%eax
f010d0f2:	a2 b5 5b 55 f0       	mov    %al,0xf0555bb5
f010d0f7:	a0 b5 5b 55 f0       	mov    0xf0555bb5,%al
f010d0fc:	83 c8 80             	or     $0xffffff80,%eax
f010d0ff:	a2 b5 5b 55 f0       	mov    %al,0xf0555bb5
f010d104:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d109:	c1 e8 10             	shr    $0x10,%eax
f010d10c:	66 a3 b6 5b 55 f0    	mov    %ax,0xf0555bb6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010d112:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d117:	66 a3 b8 5b 55 f0    	mov    %ax,0xf0555bb8
f010d11d:	66 c7 05 ba 5b 55 f0 	movw   $0x8,0xf0555bba
f010d124:	08 00 
f010d126:	a0 bc 5b 55 f0       	mov    0xf0555bbc,%al
f010d12b:	83 e0 e0             	and    $0xffffffe0,%eax
f010d12e:	a2 bc 5b 55 f0       	mov    %al,0xf0555bbc
f010d133:	a0 bc 5b 55 f0       	mov    0xf0555bbc,%al
f010d138:	83 e0 1f             	and    $0x1f,%eax
f010d13b:	a2 bc 5b 55 f0       	mov    %al,0xf0555bbc
f010d140:	a0 bd 5b 55 f0       	mov    0xf0555bbd,%al
f010d145:	83 e0 f0             	and    $0xfffffff0,%eax
f010d148:	83 c8 0e             	or     $0xe,%eax
f010d14b:	a2 bd 5b 55 f0       	mov    %al,0xf0555bbd
f010d150:	a0 bd 5b 55 f0       	mov    0xf0555bbd,%al
f010d155:	83 e0 ef             	and    $0xffffffef,%eax
f010d158:	a2 bd 5b 55 f0       	mov    %al,0xf0555bbd
f010d15d:	a0 bd 5b 55 f0       	mov    0xf0555bbd,%al
f010d162:	83 c8 60             	or     $0x60,%eax
f010d165:	a2 bd 5b 55 f0       	mov    %al,0xf0555bbd
f010d16a:	a0 bd 5b 55 f0       	mov    0xf0555bbd,%al
f010d16f:	83 c8 80             	or     $0xffffff80,%eax
f010d172:	a2 bd 5b 55 f0       	mov    %al,0xf0555bbd
f010d177:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d17c:	c1 e8 10             	shr    $0x10,%eax
f010d17f:	66 a3 be 5b 55 f0    	mov    %ax,0xf0555bbe
f010d185:	c7 45 fc 40 5a 55 f0 	movl   $0xf0555a40,-0x4(%ebp)
f010d18c:	c7 45 f8 00 08 00 00 	movl   $0x800,-0x8(%ebp)
//load IDT register
static __inline void lidt(struct Gatedesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f010d193:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d196:	48                   	dec    %eax
f010d197:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
  pd[1] = (uint32)p;
f010d19b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d19e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint32)p >> 16;
f010d1a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d1a5:	c1 e8 10             	shr    $0x10,%eax
f010d1a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

  asm volatile("lidt (%0)" : : "r" (pd));
f010d1ac:	8d 45 f2             	lea    -0xe(%ebp),%eax
f010d1af:	0f 01 18             	lidtl  (%eax)

	// Load the IDT
	//asm volatile("lidt idt_pd");
	lidt(idt, sizeof(idt));

}
f010d1b2:	90                   	nop
f010d1b3:	c9                   	leave  
f010d1b4:	c3                   	ret    

f010d1b5 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010d1b5:	55                   	push   %ebp
f010d1b6:	89 e5                	mov    %esp,%ebp
f010d1b8:	53                   	push   %ebx
f010d1b9:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010d1bc:	83 ec 08             	sub    $0x8,%esp
f010d1bf:	ff 75 08             	pushl  0x8(%ebp)
f010d1c2:	68 7e 83 12 f0       	push   $0xf012837e
f010d1c7:	e8 a0 3d ff ff       	call   f0100f6c <cprintf>
f010d1cc:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d2:	83 ec 0c             	sub    $0xc,%esp
f010d1d5:	50                   	push   %eax
f010d1d6:	e8 fd 00 00 00       	call   f010d2d8 <print_regs>
f010d1db:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010d1de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1e1:	8b 40 20             	mov    0x20(%eax),%eax
f010d1e4:	0f b7 c0             	movzwl %ax,%eax
f010d1e7:	83 ec 08             	sub    $0x8,%esp
f010d1ea:	50                   	push   %eax
f010d1eb:	68 90 83 12 f0       	push   $0xf0128390
f010d1f0:	e8 77 3d ff ff       	call   f0100f6c <cprintf>
f010d1f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	8b 40 24             	mov    0x24(%eax),%eax
f010d1fe:	0f b7 c0             	movzwl %ax,%eax
f010d201:	83 ec 08             	sub    $0x8,%esp
f010d204:	50                   	push   %eax
f010d205:	68 a3 83 12 f0       	push   $0xf01283a3
f010d20a:	e8 5d 3d ff ff       	call   f0100f6c <cprintf>
f010d20f:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010d212:	8b 45 08             	mov    0x8(%ebp),%eax
f010d215:	8b 58 28             	mov    0x28(%eax),%ebx
f010d218:	8b 45 08             	mov    0x8(%ebp),%eax
f010d21b:	8b 40 28             	mov    0x28(%eax),%eax
f010d21e:	83 ec 0c             	sub    $0xc,%esp
f010d221:	50                   	push   %eax
f010d222:	e8 28 ee ff ff       	call   f010c04f <trapname>
f010d227:	83 c4 10             	add    $0x10,%esp
f010d22a:	89 c2                	mov    %eax,%edx
f010d22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d22f:	8b 40 28             	mov    0x28(%eax),%eax
f010d232:	53                   	push   %ebx
f010d233:	52                   	push   %edx
f010d234:	50                   	push   %eax
f010d235:	68 b6 83 12 f0       	push   $0xf01283b6
f010d23a:	e8 2d 3d ff ff       	call   f0100f6c <cprintf>
f010d23f:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010d242:	8b 45 08             	mov    0x8(%ebp),%eax
f010d245:	8b 40 2c             	mov    0x2c(%eax),%eax
f010d248:	83 ec 08             	sub    $0x8,%esp
f010d24b:	50                   	push   %eax
f010d24c:	68 cd 83 12 f0       	push   $0xf01283cd
f010d251:	e8 16 3d ff ff       	call   f0100f6c <cprintf>
f010d256:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010d259:	8b 45 08             	mov    0x8(%ebp),%eax
f010d25c:	8b 40 30             	mov    0x30(%eax),%eax
f010d25f:	83 ec 08             	sub    $0x8,%esp
f010d262:	50                   	push   %eax
f010d263:	68 dc 83 12 f0       	push   $0xf01283dc
f010d268:	e8 ff 3c ff ff       	call   f0100f6c <cprintf>
f010d26d:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010d270:	8b 45 08             	mov    0x8(%ebp),%eax
f010d273:	8b 40 34             	mov    0x34(%eax),%eax
f010d276:	0f b7 c0             	movzwl %ax,%eax
f010d279:	83 ec 08             	sub    $0x8,%esp
f010d27c:	50                   	push   %eax
f010d27d:	68 eb 83 12 f0       	push   $0xf01283eb
f010d282:	e8 e5 3c ff ff       	call   f0100f6c <cprintf>
f010d287:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010d28a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d28d:	8b 40 38             	mov    0x38(%eax),%eax
f010d290:	83 ec 08             	sub    $0x8,%esp
f010d293:	50                   	push   %eax
f010d294:	68 fe 83 12 f0       	push   $0xf01283fe
f010d299:	e8 ce 3c ff ff       	call   f0100f6c <cprintf>
f010d29e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010d2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2a4:	8b 40 3c             	mov    0x3c(%eax),%eax
f010d2a7:	83 ec 08             	sub    $0x8,%esp
f010d2aa:	50                   	push   %eax
f010d2ab:	68 0d 84 12 f0       	push   $0xf012840d
f010d2b0:	e8 b7 3c ff ff       	call   f0100f6c <cprintf>
f010d2b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010d2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2bb:	8b 40 40             	mov    0x40(%eax),%eax
f010d2be:	0f b7 c0             	movzwl %ax,%eax
f010d2c1:	83 ec 08             	sub    $0x8,%esp
f010d2c4:	50                   	push   %eax
f010d2c5:	68 1c 84 12 f0       	push   $0xf012841c
f010d2ca:	e8 9d 3c ff ff       	call   f0100f6c <cprintf>
f010d2cf:	83 c4 10             	add    $0x10,%esp
}
f010d2d2:	90                   	nop
f010d2d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010d2d6:	c9                   	leave  
f010d2d7:	c3                   	ret    

f010d2d8 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010d2d8:	55                   	push   %ebp
f010d2d9:	89 e5                	mov    %esp,%ebp
f010d2db:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010d2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2e1:	8b 00                	mov    (%eax),%eax
f010d2e3:	83 ec 08             	sub    $0x8,%esp
f010d2e6:	50                   	push   %eax
f010d2e7:	68 2f 84 12 f0       	push   $0xf012842f
f010d2ec:	e8 7b 3c ff ff       	call   f0100f6c <cprintf>
f010d2f1:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f7:	8b 40 04             	mov    0x4(%eax),%eax
f010d2fa:	83 ec 08             	sub    $0x8,%esp
f010d2fd:	50                   	push   %eax
f010d2fe:	68 3e 84 12 f0       	push   $0xf012843e
f010d303:	e8 64 3c ff ff       	call   f0100f6c <cprintf>
f010d308:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010d30b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d30e:	8b 40 08             	mov    0x8(%eax),%eax
f010d311:	83 ec 08             	sub    $0x8,%esp
f010d314:	50                   	push   %eax
f010d315:	68 4d 84 12 f0       	push   $0xf012844d
f010d31a:	e8 4d 3c ff ff       	call   f0100f6c <cprintf>
f010d31f:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010d322:	8b 45 08             	mov    0x8(%ebp),%eax
f010d325:	8b 40 0c             	mov    0xc(%eax),%eax
f010d328:	83 ec 08             	sub    $0x8,%esp
f010d32b:	50                   	push   %eax
f010d32c:	68 5c 84 12 f0       	push   $0xf012845c
f010d331:	e8 36 3c ff ff       	call   f0100f6c <cprintf>
f010d336:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010d339:	8b 45 08             	mov    0x8(%ebp),%eax
f010d33c:	8b 40 10             	mov    0x10(%eax),%eax
f010d33f:	83 ec 08             	sub    $0x8,%esp
f010d342:	50                   	push   %eax
f010d343:	68 6b 84 12 f0       	push   $0xf012846b
f010d348:	e8 1f 3c ff ff       	call   f0100f6c <cprintf>
f010d34d:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010d350:	8b 45 08             	mov    0x8(%ebp),%eax
f010d353:	8b 40 14             	mov    0x14(%eax),%eax
f010d356:	83 ec 08             	sub    $0x8,%esp
f010d359:	50                   	push   %eax
f010d35a:	68 7a 84 12 f0       	push   $0xf012847a
f010d35f:	e8 08 3c ff ff       	call   f0100f6c <cprintf>
f010d364:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010d367:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36a:	8b 40 18             	mov    0x18(%eax),%eax
f010d36d:	83 ec 08             	sub    $0x8,%esp
f010d370:	50                   	push   %eax
f010d371:	68 89 84 12 f0       	push   $0xf0128489
f010d376:	e8 f1 3b ff ff       	call   f0100f6c <cprintf>
f010d37b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010d37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d381:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d384:	83 ec 08             	sub    $0x8,%esp
f010d387:	50                   	push   %eax
f010d388:	68 98 84 12 f0       	push   $0xf0128498
f010d38d:	e8 da 3b ff ff       	call   f0100f6c <cprintf>
f010d392:	83 c4 10             	add    $0x10,%esp
}
f010d395:	90                   	nop
f010d396:	c9                   	leave  
f010d397:	c3                   	ret    

f010d398 <irq_install_handler>:


void *irq_handlers[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
void irq_install_handler(int irq, void (*handler)(struct Trapframe *tf))
{
f010d398:	55                   	push   %ebp
f010d399:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = handler;
f010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d39e:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d3a1:	89 14 85 40 62 55 f0 	mov    %edx,-0xfaa9dc0(,%eax,4)
}
f010d3a8:	90                   	nop
f010d3a9:	5d                   	pop    %ebp
f010d3aa:	c3                   	ret    

f010d3ab <irq_uninstall_handler>:
void irq_uninstall_handler(int irq)
{
f010d3ab:	55                   	push   %ebp
f010d3ac:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = NULL;
f010d3ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3b1:	c7 04 85 40 62 55 f0 	movl   $0x0,-0xfaa9dc0(,%eax,4)
f010d3b8:	00 00 00 00 
}
f010d3bc:	90                   	nop
f010d3bd:	5d                   	pop    %ebp
f010d3be:	c3                   	ret    

f010d3bf <irq_dispatch>:
void irq_dispatch(struct Trapframe *tf)
{
f010d3bf:	55                   	push   %ebp
f010d3c0:	89 e5                	mov    %esp,%ebp
f010d3c2:	83 ec 18             	sub    $0x18,%esp
	void (*handler)(struct Trapframe *tf);
	int IRQNum = tf->tf_trapno - IRQ_OFFSET;
f010d3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c8:	8b 40 28             	mov    0x28(%eax),%eax
f010d3cb:	83 e8 20             	sub    $0x20,%eax
f010d3ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	handler = irq_handlers[IRQNum] ;
f010d3d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d4:	8b 04 85 40 62 55 f0 	mov    -0xfaa9dc0(,%eax,4),%eax
f010d3db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (handler)
f010d3de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d3e2:	74 0e                	je     f010d3f2 <irq_dispatch+0x33>
	{
		handler(tf);
f010d3e4:	83 ec 0c             	sub    $0xc,%esp
f010d3e7:	ff 75 08             	pushl  0x8(%ebp)
f010d3ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3ed:	ff d0                	call   *%eax
f010d3ef:	83 c4 10             	add    $0x10,%esp
	}

	//Send End Of Interrupt CMD to PIC
	pic_sendEOI(IRQNum);
f010d3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f5:	0f b6 c0             	movzbl %al,%eax
f010d3f8:	83 ec 0c             	sub    $0xc,%esp
f010d3fb:	50                   	push   %eax
f010d3fc:	e8 c3 9c ff ff       	call   f01070c4 <pic_sendEOI>
f010d401:	83 c4 10             	add    $0x10,%esp
}
f010d404:	90                   	nop
f010d405:	c9                   	leave  
f010d406:	c3                   	ret    

f010d407 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010d407:	55                   	push   %ebp
f010d408:	89 e5                	mov    %esp,%ebp
f010d40a:	57                   	push   %edi
f010d40b:	56                   	push   %esi
f010d40c:	53                   	push   %ebx
f010d40d:	83 ec 1c             	sub    $0x1c,%esp
	if(tf->tf_trapno == T_PGFLT)
f010d410:	8b 45 08             	mov    0x8(%ebp),%eax
f010d413:	8b 40 28             	mov    0x28(%eax),%eax
f010d416:	83 f8 0e             	cmp    $0xe,%eax
f010d419:	75 51                	jne    f010d46c <trap_dispatch+0x65>
	{
		//2016: Bypass the faulted instruction [used for some tests in which we need to resume the execution after an intended page fault]
		if (bypassInstrLength != 0)
f010d41b:	a0 80 62 55 f0       	mov    0xf0556280,%al
f010d420:	84 c0                	test   %al,%al
f010d422:	74 1f                	je     f010d443 <trap_dispatch+0x3c>
		{
			tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010d424:	8b 45 08             	mov    0x8(%ebp),%eax
f010d427:	8b 40 30             	mov    0x30(%eax),%eax
f010d42a:	89 c2                	mov    %eax,%edx
f010d42c:	a0 80 62 55 f0       	mov    0xf0556280,%al
f010d431:	0f b6 c0             	movzbl %al,%eax
f010d434:	01 d0                	add    %edx,%eax
f010d436:	89 c2                	mov    %eax,%edx
f010d438:	8b 45 08             	mov    0x8(%ebp),%eax
f010d43b:	89 50 30             	mov    %edx,0x30(%eax)
			/*2024: commented. already will be returned to the trapret() in trapentry.S which return to the user/kernel caller code*/
			//kclock_resume();
			//env_pop_tf(tf);
			return;
f010d43e:	e9 0c 01 00 00       	jmp    f010d54f <trap_dispatch+0x148>
		}

		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010d443:	83 ec 0c             	sub    $0xc,%esp
f010d446:	6a 01                	push   $0x1
f010d448:	e8 79 12 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010d44d:	83 c4 10             	add    $0x10,%esp
f010d450:	85 c0                	test   %eax,%eax
f010d452:	74 05                	je     f010d459 <trap_dispatch+0x52>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010d454:	e8 de 97 ff ff       	call   f0106c37 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010d459:	83 ec 0c             	sub    $0xc,%esp
f010d45c:	ff 75 08             	pushl  0x8(%ebp)
f010d45f:	e8 47 13 00 00       	call   f010e7ab <fault_handler>
f010d464:	83 c4 10             	add    $0x10,%esp
f010d467:	e9 e3 00 00 00       	jmp    f010d54f <trap_dispatch+0x148>
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010d46c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d46f:	8b 40 28             	mov    0x28(%eax),%eax
f010d472:	83 f8 30             	cmp    $0x30,%eax
f010d475:	75 6e                	jne    f010d4e5 <trap_dispatch+0xde>
	{
		/* If the original status of the interrupt is ENABLED (before getting into kernel),
		 * Then, re-enable the interrupts & resume the clock during the system calls
		 * to allow switching between processes
		 */
		if (tf->tf_eflags & FL_IF)
f010d477:	8b 45 08             	mov    0x8(%ebp),%eax
f010d47a:	8b 40 38             	mov    0x38(%eax),%eax
f010d47d:	25 00 02 00 00       	and    $0x200,%eax
f010d482:	85 c0                	test   %eax,%eax
f010d484:	74 06                	je     f010d48c <trap_dispatch+0x85>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f010d486:	fb                   	sti    
		{
			sti();
			kclock_resume();
f010d487:	e8 24 78 ff ff       	call   f0104cb0 <kclock_resume>
		}
		//cprintf("\nserving system call #%d\n", tf->tf_regs.reg_eax);
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010d48c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d48f:	8b 78 04             	mov    0x4(%eax),%edi
f010d492:	8b 45 08             	mov    0x8(%ebp),%eax
f010d495:	8b 30                	mov    (%eax),%esi
f010d497:	8b 45 08             	mov    0x8(%ebp),%eax
f010d49a:	8b 58 10             	mov    0x10(%eax),%ebx
f010d49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a0:	8b 48 18             	mov    0x18(%eax),%ecx
f010d4a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a6:	8b 50 14             	mov    0x14(%eax),%edx
f010d4a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4ac:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d4af:	83 ec 08             	sub    $0x8,%esp
f010d4b2:	57                   	push   %edi
f010d4b3:	56                   	push   %esi
f010d4b4:	53                   	push   %ebx
f010d4b5:	51                   	push   %ecx
f010d4b6:	52                   	push   %edx
f010d4b7:	50                   	push   %eax
f010d4b8:	e8 7a 09 00 00       	call   f010de37 <syscall>
f010d4bd:	83 c4 20             	add    $0x20,%esp
f010d4c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);

		tf->tf_regs.reg_eax = ret;
f010d4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d4c9:	89 50 1c             	mov    %edx,0x1c(%eax)

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d4cc:	9c                   	pushf  
f010d4cd:	58                   	pop    %eax
f010d4ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f010d4d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax

		/*If still enabled, Disable the interrupt & stop clock before getting into user again
		 */
		if (read_eflags() & FL_IF)
f010d4d4:	25 00 02 00 00       	and    $0x200,%eax
f010d4d9:	85 c0                	test   %eax,%eax
f010d4db:	74 72                	je     f010d54f <trap_dispatch+0x148>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f010d4dd:	fa                   	cli    
		{
			cli();
			kclock_stop();
f010d4de:	e8 a5 77 ff ff       	call   f0104c88 <kclock_stop>
f010d4e3:	eb 6a                	jmp    f010d54f <trap_dispatch+0x148>
		}
		//cprintf("ret val form syscall = %d\n", ret);
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010d4e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e8:	8b 40 28             	mov    0x28(%eax),%eax
f010d4eb:	83 f8 08             	cmp    $0x8,%eax
f010d4ee:	75 17                	jne    f010d507 <trap_dispatch+0x100>
	{
		panic("double fault!!");
f010d4f0:	83 ec 04             	sub    $0x4,%esp
f010d4f3:	68 a7 84 12 f0       	push   $0xf01284a7
f010d4f8:	68 22 01 00 00       	push   $0x122
f010d4fd:	68 b6 84 12 f0       	push   $0xf01284b6
f010d502:	e8 13 2e ff ff       	call   f010031a <_panic>
	}
	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		print_trapframe(tf);
f010d507:	83 ec 0c             	sub    $0xc,%esp
f010d50a:	ff 75 08             	pushl  0x8(%ebp)
f010d50d:	e8 a3 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d512:	83 c4 10             	add    $0x10,%esp
		if (tf->tf_cs == GD_KT)
f010d515:	8b 45 08             	mov    0x8(%ebp),%eax
f010d518:	8b 40 34             	mov    0x34(%eax),%eax
f010d51b:	66 83 f8 08          	cmp    $0x8,%ax
f010d51f:	75 17                	jne    f010d538 <trap_dispatch+0x131>
		{
			panic("unhandled trap in kernel");
f010d521:	83 ec 04             	sub    $0x4,%esp
f010d524:	68 c7 84 12 f0       	push   $0xf01284c7
f010d529:	68 2a 01 00 00       	push   $0x12a
f010d52e:	68 b6 84 12 f0       	push   $0xf01284b6
f010d533:	e8 e2 2d ff ff       	call   f010031a <_panic>
		}
		else
		{
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010d538:	83 ec 04             	sub    $0x4,%esp
f010d53b:	68 e0 84 12 f0       	push   $0xf01284e0
f010d540:	68 2f 01 00 00       	push   $0x12f
f010d545:	68 b6 84 12 f0       	push   $0xf01284b6
f010d54a:	e8 cb 2d ff ff       	call   f010031a <_panic>
		}
	}
}
f010d54f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010d552:	5b                   	pop    %ebx
f010d553:	5e                   	pop    %esi
f010d554:	5f                   	pop    %edi
f010d555:	5d                   	pop    %ebp
f010d556:	c3                   	ret    

f010d557 <trap>:

void trap(struct Trapframe *tf)
{
f010d557:	55                   	push   %ebp
f010d558:	89 e5                	mov    %esp,%ebp
f010d55a:	83 ec 28             	sub    $0x28,%esp
	/* to avoid counting down on the current process while handling exceptions
	 * This avoid pending clock interrupt after returning from the trap.
	 * NOTE: interrupt is automatically disabled by the interrupt cycle (by marking all traps as "Interrupt Gates").
	 * Resume the clock and Re-enable the interrupt whenever required (e.g. in system calls).
	 */
	kclock_stop();
f010d55d:	e8 26 77 ff ff       	call   f0104c88 <kclock_stop>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d562:	9c                   	pushf  
f010d563:	58                   	pop    %eax
f010d564:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return eflags;
f010d567:	8b 45 e0             	mov    -0x20(%ebp),%eax

	//[2] Some validations

	//2024 check if interrupt is enabled during the trap handler, then panic
	uint32 flags = read_eflags();
f010d56a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (flags & FL_IF)
f010d56d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d570:	25 00 02 00 00       	and    $0x200,%eax
f010d575:	85 c0                	test   %eax,%eax
f010d577:	74 25                	je     f010d59e <trap+0x47>
	{
		print_trapframe(tf);
f010d579:	83 ec 0c             	sub    $0xc,%esp
f010d57c:	ff 75 08             	pushl  0x8(%ebp)
f010d57f:	e8 31 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d584:	83 c4 10             	add    $0x10,%esp
		panic("trap(): interrupt is enabled while it's expected to be disabled\n");
f010d587:	83 ec 04             	sub    $0x4,%esp
f010d58a:	68 00 85 12 f0       	push   $0xf0128500
f010d58f:	68 45 01 00 00       	push   $0x145
f010d594:	68 b6 84 12 f0       	push   $0xf01284b6
f010d599:	e8 7c 2d ff ff       	call   f010031a <_panic>
	}

	int userTrap = 0;
f010d59e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc(); //the current running Environment (if any)
f010d5a5:	e8 c6 d1 ff ff       	call   f010a770 <get_cpu_proc>
f010d5aa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	if ((tf->tf_cs & 3) == 3)
f010d5ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b0:	8b 40 34             	mov    0x34(%eax),%eax
f010d5b3:	0f b7 c0             	movzwl %ax,%eax
f010d5b6:	83 e0 03             	and    $0x3,%eax
f010d5b9:	83 f8 03             	cmp    $0x3,%eax
f010d5bc:	75 54                	jne    f010d612 <trap+0xbb>
	{
		assert(cur_env && cur_env->env_status == ENV_RUNNING);	//environment should be exist & run
f010d5be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010d5c2:	74 0b                	je     f010d5cf <trap+0x78>
f010d5c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5c7:	8b 40 18             	mov    0x18(%eax),%eax
f010d5ca:	83 f8 02             	cmp    $0x2,%eax
f010d5cd:	74 19                	je     f010d5e8 <trap+0x91>
f010d5cf:	68 44 85 12 f0       	push   $0xf0128544
f010d5d4:	68 72 85 12 f0       	push   $0xf0128572
f010d5d9:	68 4d 01 00 00       	push   $0x14d
f010d5de:	68 b6 84 12 f0       	push   $0xf01284b6
f010d5e3:	e8 32 2d ff ff       	call   f010031a <_panic>
		//cprintf("curenv->env_tf @ %x, tf param @ %x\n", curenv->env_tf , tf);
		assert(cur_env->env_tf == tf);	//tf should be placed in the kernel stack of this process (@e->env_tf)
f010d5e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5eb:	8b 00                	mov    (%eax),%eax
f010d5ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d5f0:	74 19                	je     f010d60b <trap+0xb4>
f010d5f2:	68 87 85 12 f0       	push   $0xf0128587
f010d5f7:	68 72 85 12 f0       	push   $0xf0128572
f010d5fc:	68 4f 01 00 00       	push   $0x14f
f010d601:	68 b6 84 12 f0       	push   $0xf01284b6
f010d606:	e8 0f 2d ff ff       	call   f010031a <_panic>
		userTrap = 1;
f010d60b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//	if (tf->tf_trapno == T_SYSCALL)
	//	{
	//		cprintf("System Call #%d\n", tf->tf_regs.reg_eax);
	//	}
	//[3] Handle the incoming trap/interrupt
	if (tf->tf_trapno >= IRQ_OFFSET && tf->tf_trapno < IRQ_OFFSET + MAX_IRQS)
f010d612:	8b 45 08             	mov    0x8(%ebp),%eax
f010d615:	8b 40 28             	mov    0x28(%eax),%eax
f010d618:	83 f8 1f             	cmp    $0x1f,%eax
f010d61b:	76 1b                	jbe    f010d638 <trap+0xe1>
f010d61d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d620:	8b 40 28             	mov    0x28(%eax),%eax
f010d623:	83 f8 2f             	cmp    $0x2f,%eax
f010d626:	77 10                	ja     f010d638 <trap+0xe1>
	{
		irq_dispatch(tf);
f010d628:	83 ec 0c             	sub    $0xc,%esp
f010d62b:	ff 75 08             	pushl  0x8(%ebp)
f010d62e:	e8 8c fd ff ff       	call   f010d3bf <irq_dispatch>
f010d633:	83 c4 10             	add    $0x10,%esp
f010d636:	eb 0e                	jmp    f010d646 <trap+0xef>
	}
	else
	{
		trap_dispatch(tf);
f010d638:	83 ec 0c             	sub    $0xc,%esp
f010d63b:	ff 75 08             	pushl  0x8(%ebp)
f010d63e:	e8 c4 fd ff ff       	call   f010d407 <trap_dispatch>
f010d643:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d646:	9c                   	pushf  
f010d647:	58                   	pop    %eax
f010d648:	89 45 f4             	mov    %eax,-0xc(%ebp)
        return eflags;
f010d64b:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//cprintf("will be returned to the trapret() \n");
	/*2024: will be returned to the trapret() in trapentry.S which return to the caller*/

	//[4] Make sure that the interrupt is disabled before executing the trapret()
	uint32 IEN = read_eflags() & FL_IF;
f010d64e:	25 00 02 00 00       	and    $0x200,%eax
f010d653:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(IEN == 0);
f010d656:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d65a:	74 19                	je     f010d675 <trap+0x11e>
f010d65c:	68 9d 85 12 f0       	push   $0xf012859d
f010d661:	68 72 85 12 f0       	push   $0xf0128572
f010d666:	68 66 01 00 00       	push   $0x166
f010d66b:	68 b6 84 12 f0       	push   $0xf01284b6
f010d670:	e8 a5 2c ff ff       	call   f010031a <_panic>

	//cprintf("will resume the clock\n");

	//[5] Resume the clock
	kclock_resume();
f010d675:	e8 36 76 ff ff       	call   f0104cb0 <kclock_resume>
	//	cprintf("\nclock is resumed with counter = %d.\n", kclock_read_cnt0_latch());
	//	cprintf("[tf] tf @%x - tf.cs = %x - tf.eip = %x - tf.eax = %d\n", tf, tf->tf_cs,tf->tf_eip, tf->tf_regs.reg_eax );
}
f010d67a:	90                   	nop
f010d67b:	c9                   	leave  
f010d67c:	c3                   	ret    
f010d67d:	90                   	nop

f010d67e <DBL_FAULT>:
	jmp _alltraps

.text
/* Lab 3: Your code here for generating entry points for the different traps.
*/
TRAPHANDLER(DBL_FAULT, T_DBLFLT)					//8 double fault
f010d67e:	6a 08                	push   $0x8
f010d680:	e9 ed 00 00 00       	jmp    f010d772 <_alltraps>
f010d685:	90                   	nop

f010d686 <PAGE_FAULT>:
TRAPHANDLER(PAGE_FAULT, T_PGFLT)					//14 page fault
f010d686:	6a 0e                	push   $0xe
f010d688:	e9 e5 00 00 00       	jmp    f010d772 <_alltraps>
f010d68d:	90                   	nop

f010d68e <IRQ0_CLK_HANDLER>:
TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER, IRQ0_Clock)		//32 the first IRQ (clock iterrrupt)
f010d68e:	6a 00                	push   $0x0
f010d690:	6a 20                	push   $0x20
f010d692:	e9 db 00 00 00       	jmp    f010d772 <_alltraps>
f010d697:	90                   	nop

f010d698 <IRQ1_KBD_HANDLER>:
TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER, IRQ1_KB	)		//33 keyboard interrupt request
f010d698:	6a 00                	push   $0x0
f010d69a:	6a 21                	push   $0x21
f010d69c:	e9 d1 00 00 00       	jmp    f010d772 <_alltraps>
f010d6a1:	90                   	nop

f010d6a2 <SYSCALL_HANDLER>:
TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)		//48 SYSTEM CALLS
f010d6a2:	6a 00                	push   $0x0
f010d6a4:	6a 30                	push   $0x30
f010d6a6:	e9 c7 00 00 00       	jmp    f010d772 <_alltraps>
f010d6ab:	90                   	nop

f010d6ac <ALL_FAULTS0>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)		//0			// divide error
f010d6ac:	6a 00                	push   $0x0
f010d6ae:	6a 00                	push   $0x0
f010d6b0:	e9 bd 00 00 00       	jmp    f010d772 <_alltraps>
f010d6b5:	90                   	nop

f010d6b6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )	//1			// debug exception
f010d6b6:	6a 00                	push   $0x0
f010d6b8:	6a 01                	push   $0x1
f010d6ba:	e9 b3 00 00 00       	jmp    f010d772 <_alltraps>
f010d6bf:	90                   	nop

f010d6c0 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )//2			// NMI: non-maskable interrupt
f010d6c0:	6a 00                	push   $0x0
f010d6c2:	6a 02                	push   $0x2
f010d6c4:	e9 a9 00 00 00       	jmp    f010d772 <_alltraps>
f010d6c9:	90                   	nop

f010d6ca <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT     )//3			// breakpoint
f010d6ca:	6a 00                	push   $0x0
f010d6cc:	6a 03                	push   $0x3
f010d6ce:	e9 9f 00 00 00       	jmp    f010d772 <_alltraps>
f010d6d3:	90                   	nop

f010d6d4 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW     )//4			// overflow
f010d6d4:	6a 00                	push   $0x0
f010d6d6:	6a 04                	push   $0x4
f010d6d8:	e9 95 00 00 00       	jmp    f010d772 <_alltraps>
f010d6dd:	90                   	nop

f010d6de <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND     )//5			// bounds check
f010d6de:	6a 00                	push   $0x0
f010d6e0:	6a 05                	push   $0x5
f010d6e2:	e9 8b 00 00 00       	jmp    f010d772 <_alltraps>
f010d6e7:	90                   	nop

f010d6e8 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP     )//6			// illegal opcode
f010d6e8:	6a 00                	push   $0x0
f010d6ea:	6a 06                	push   $0x6
f010d6ec:	e9 81 00 00 00       	jmp    f010d772 <_alltraps>
f010d6f1:	90                   	nop

f010d6f2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE    )//7			// device not available
f010d6f2:	6a 00                	push   $0x0
f010d6f4:	6a 07                	push   $0x7
f010d6f6:	eb 7a                	jmp    f010d772 <_alltraps>

f010d6f8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS8,  T_DBLFLT)     	//8			// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS9,  9   )		//9			// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )	//10		// invalid task switch segment
f010d6f8:	6a 0a                	push   $0xa
f010d6fa:	eb 76                	jmp    f010d772 <_alltraps>

f010d6fc <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )	//11		// segment not present
f010d6fc:	6a 0b                	push   $0xb
f010d6fe:	eb 72                	jmp    f010d772 <_alltraps>

f010d700 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )	//12		// stack exception
f010d700:	6a 0c                	push   $0xc
f010d702:	eb 6e                	jmp    f010d772 <_alltraps>

f010d704 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )	//13		// General protection fault
f010d704:	6a 0d                	push   $0xd
f010d706:	eb 6a                	jmp    f010d772 <_alltraps>

f010d708 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS14,  T_PGFLT)     	//14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )			//15 		// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR    )//16		// floating point error
f010d708:	6a 00                	push   $0x0
f010d70a:	6a 10                	push   $0x10
f010d70c:	eb 64                	jmp    f010d772 <_alltraps>

f010d70e <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )	//17		// Alignment check
f010d70e:	6a 11                	push   $0x11
f010d710:	eb 60                	jmp    f010d772 <_alltraps>

f010d712 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK     )//18		// machine check
f010d712:	6a 00                	push   $0x0
f010d714:	6a 12                	push   $0x12
f010d716:	eb 5a                	jmp    f010d772 <_alltraps>

f010d718 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )	//19		// the last one
f010d718:	6a 00                	push   $0x0
f010d71a:	6a 13                	push   $0x13
f010d71c:	eb 54                	jmp    f010d772 <_alltraps>

f010d71e <ALL_FAULTS34>:

//TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER,IRQ0_Clock)			//32 the first IRQ (clock iterrrupt)
//TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER,IRQ1_KB	)			//33 keyboard interrupt request
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010d71e:	6a 00                	push   $0x0
f010d720:	6a 22                	push   $0x22
f010d722:	eb 4e                	jmp    f010d772 <_alltraps>

f010d724 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010d724:	6a 00                	push   $0x0
f010d726:	6a 23                	push   $0x23
f010d728:	eb 48                	jmp    f010d772 <_alltraps>

f010d72a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010d72a:	6a 00                	push   $0x0
f010d72c:	6a 24                	push   $0x24
f010d72e:	eb 42                	jmp    f010d772 <_alltraps>

f010d730 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010d730:	6a 00                	push   $0x0
f010d732:	6a 25                	push   $0x25
f010d734:	eb 3c                	jmp    f010d772 <_alltraps>

f010d736 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010d736:	6a 00                	push   $0x0
f010d738:	6a 26                	push   $0x26
f010d73a:	eb 36                	jmp    f010d772 <_alltraps>

f010d73c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010d73c:	6a 00                	push   $0x0
f010d73e:	6a 27                	push   $0x27
f010d740:	eb 30                	jmp    f010d772 <_alltraps>

f010d742 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010d742:	6a 00                	push   $0x0
f010d744:	6a 28                	push   $0x28
f010d746:	eb 2a                	jmp    f010d772 <_alltraps>

f010d748 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010d748:	6a 00                	push   $0x0
f010d74a:	6a 29                	push   $0x29
f010d74c:	eb 24                	jmp    f010d772 <_alltraps>

f010d74e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010d74e:	6a 00                	push   $0x0
f010d750:	6a 2a                	push   $0x2a
f010d752:	eb 1e                	jmp    f010d772 <_alltraps>

f010d754 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010d754:	6a 00                	push   $0x0
f010d756:	6a 2b                	push   $0x2b
f010d758:	eb 18                	jmp    f010d772 <_alltraps>

f010d75a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010d75a:	6a 00                	push   $0x0
f010d75c:	6a 2c                	push   $0x2c
f010d75e:	eb 12                	jmp    f010d772 <_alltraps>

f010d760 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010d760:	6a 00                	push   $0x0
f010d762:	6a 2d                	push   $0x2d
f010d764:	eb 0c                	jmp    f010d772 <_alltraps>

f010d766 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010d766:	6a 00                	push   $0x0
f010d768:	6a 2e                	push   $0x2e
f010d76a:	eb 06                	jmp    f010d772 <_alltraps>

f010d76c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 		//the last IRQ
f010d76c:	6a 00                	push   $0x0
f010d76e:	6a 2f                	push   $0x2f
f010d770:	eb 00                	jmp    f010d772 <_alltraps>

f010d772 <_alltraps>:

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
push 	%ds
f010d772:	1e                   	push   %ds
push 	%es
f010d773:	06                   	push   %es
pushal
f010d774:	60                   	pusha  

mov 	$(GD_KD), %ax
f010d775:	66 b8 10 00          	mov    $0x10,%ax
mov 	%ax,%ds
f010d779:	8e d8                	mov    %eax,%ds
mov 	%ax,%es
f010d77b:	8e c0                	mov    %eax,%es

push 	%esp /* push the pointer to the tf into the stack to be passed as a param to the trap()*/
f010d77d:	54                   	push   %esp
call 	trap
f010d77e:	e8 d4 fd ff ff       	call   f010d557 <trap>

pop 	%ecx /* pop the pointer to the tf from the stack so that the stack top is at the beginning values of the registers pushed by pusha*/
f010d783:	59                   	pop    %ecx

f010d784 <trapret>:
.globl trapret
trapret:
popal
f010d784:	61                   	popa   
pop 	%es
f010d785:	07                   	pop    %es
pop 	%ds
f010d786:	1f                   	pop    %ds
add 	$(8),%esp /*skipping the trap_no and the error code so that the stack top is at the old eip value*/
f010d787:	83 c4 08             	add    $0x8,%esp
iret
f010d78a:	cf                   	iret   

f010d78b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010d78b:	55                   	push   %ebp
f010d78c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010d78e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d791:	8b 15 20 8f 55 f0    	mov    0xf0558f20,%edx
f010d797:	29 d0                	sub    %edx,%eax
f010d799:	c1 f8 03             	sar    $0x3,%eax
f010d79c:	89 c2                	mov    %eax,%edx
f010d79e:	89 d0                	mov    %edx,%eax
f010d7a0:	c1 e0 02             	shl    $0x2,%eax
f010d7a3:	01 d0                	add    %edx,%eax
f010d7a5:	c1 e0 02             	shl    $0x2,%eax
f010d7a8:	01 d0                	add    %edx,%eax
f010d7aa:	c1 e0 02             	shl    $0x2,%eax
f010d7ad:	01 d0                	add    %edx,%eax
f010d7af:	89 c1                	mov    %eax,%ecx
f010d7b1:	c1 e1 08             	shl    $0x8,%ecx
f010d7b4:	01 c8                	add    %ecx,%eax
f010d7b6:	89 c1                	mov    %eax,%ecx
f010d7b8:	c1 e1 10             	shl    $0x10,%ecx
f010d7bb:	01 c8                	add    %ecx,%eax
f010d7bd:	01 c0                	add    %eax,%eax
f010d7bf:	01 d0                	add    %edx,%eax
}
f010d7c1:	5d                   	pop    %ebp
f010d7c2:	c3                   	ret    

f010d7c3 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010d7c3:	55                   	push   %ebp
f010d7c4:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010d7c6:	ff 75 08             	pushl  0x8(%ebp)
f010d7c9:	e8 bd ff ff ff       	call   f010d78b <to_frame_number>
f010d7ce:	83 c4 04             	add    $0x4,%esp
f010d7d1:	c1 e0 0c             	shl    $0xc,%eax
}
f010d7d4:	c9                   	leave  
f010d7d5:	c3                   	ret    

f010d7d6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010d7d6:	55                   	push   %ebp
f010d7d7:	89 e5                	mov    %esp,%ebp
f010d7d9:	83 ec 18             	sub    $0x18,%esp
f010d7dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010d7df:	88 45 f4             	mov    %al,-0xc(%ebp)
	//2024 - better to use locks instead (to support multiprocessors)
	pushcli();	//disable interrupts
f010d7e2:	e8 d9 99 ff ff       	call   f01071c0 <pushcli>
		// Destroy the environment if not.

		// LAB 3: Your code here.

		// Print the string supplied by the user.
		if (printProgName)
f010d7e7:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010d7eb:	74 23                	je     f010d810 <sys_cputs+0x3a>
			cprintf("[%s %d] ",cur_env->prog_name, cur_env->env_id);
f010d7ed:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010d7f2:	8b 40 10             	mov    0x10(%eax),%eax
f010d7f5:	8b 15 c4 76 57 f0    	mov    0xf05776c4,%edx
f010d7fb:	83 c2 20             	add    $0x20,%edx
f010d7fe:	83 ec 04             	sub    $0x4,%esp
f010d801:	50                   	push   %eax
f010d802:	52                   	push   %edx
f010d803:	68 50 87 12 f0       	push   $0xf0128750
f010d808:	e8 5f 37 ff ff       	call   f0100f6c <cprintf>
f010d80d:	83 c4 10             	add    $0x10,%esp
		cprintf("%.*s",len, s);
f010d810:	83 ec 04             	sub    $0x4,%esp
f010d813:	ff 75 08             	pushl  0x8(%ebp)
f010d816:	ff 75 0c             	pushl  0xc(%ebp)
f010d819:	68 59 87 12 f0       	push   $0xf0128759
f010d81e:	e8 49 37 ff ff       	call   f0100f6c <cprintf>
f010d823:	83 c4 10             	add    $0x10,%esp
	}
	popcli();	//enable interrupts
f010d826:	e8 e7 99 ff ff       	call   f0107212 <popcli>
}
f010d82b:	90                   	nop
f010d82c:	c9                   	leave  
f010d82d:	c3                   	ret    

f010d82e <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010d82e:	55                   	push   %ebp
f010d82f:	89 e5                	mov    %esp,%ebp
f010d831:	83 ec 18             	sub    $0x18,%esp
f010d834:	8b 45 08             	mov    0x8(%ebp),%eax
f010d837:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010d83a:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010d83e:	83 ec 08             	sub    $0x8,%esp
f010d841:	50                   	push   %eax
f010d842:	68 5e 87 12 f0       	push   $0xf012875e
f010d847:	e8 20 37 ff ff       	call   f0100f6c <cprintf>
f010d84c:	83 c4 10             	add    $0x10,%esp
}
f010d84f:	90                   	nop
f010d850:	c9                   	leave  
f010d851:	c3                   	ret    

f010d852 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d852:	55                   	push   %ebp
f010d853:	89 e5                	mov    %esp,%ebp
f010d855:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d858:	9c                   	pushf  
f010d859:	58                   	pop    %eax
f010d85a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010d85d:	8b 45 ec             	mov    -0x14(%ebp),%eax
	int c;
	int IEN = read_eflags() & FL_IF;
f010d860:	25 00 02 00 00       	and    $0x200,%eax
f010d865:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (IEN) /*Interrupt-Enabled I/O*/
f010d868:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d86c:	74 10                	je     f010d87e <sys_cgetc+0x2c>
	{
		// The cons_getc2() primitive doesn't wait for a character
		while ((c = cons_getc2()) == 0)
f010d86e:	e8 32 35 ff ff       	call   f0100da5 <cons_getc2>
f010d873:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d876:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d87a:	74 f2                	je     f010d86e <sys_cgetc+0x1c>
f010d87c:	eb 0e                	jmp    f010d88c <sys_cgetc+0x3a>
	else	/*Programmed I/O*/
	{
		//cprintf("\n(((((((Programmed I/O))))))\n");
		// The cons_getc() primitive doesn't wait for a character,
		// but the sys_cgetc() system call does.
		while ((c = cons_getc()) == 0)
f010d87e:	e8 c7 34 ff ff       	call   f0100d4a <cons_getc>
f010d883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d88a:	74 f2                	je     f010d87e <sys_cgetc+0x2c>
			/* do nothing */;
		}
	}
	//cprintf("\nCHAR %d is READ from KB, IEN = %d\n", c, read_eflags() & FL_IF);

	return c;
f010d88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d88f:	c9                   	leave  
f010d890:	c3                   	ret    

f010d891 <sys_lock_cons>:

//Lock the console so that no other processes can read from KB or output to the monitor
void sys_lock_cons(void)
{
f010d891:	55                   	push   %ebp
f010d892:	89 e5                	mov    %esp,%ebp
f010d894:	83 ec 08             	sub    $0x8,%esp
	cons_lock();
f010d897:	e8 f5 35 ff ff       	call   f0100e91 <cons_lock>
}
f010d89c:	90                   	nop
f010d89d:	c9                   	leave  
f010d89e:	c3                   	ret    

f010d89f <sys_unlock_cons>:
//Unlock the console so that other processes can read from KB or output to the monitor
void sys_unlock_cons(void)
{
f010d89f:	55                   	push   %ebp
f010d8a0:	89 e5                	mov    %esp,%ebp
f010d8a2:	83 ec 08             	sub    $0x8,%esp
	cons_unlock();
f010d8a5:	e8 2e 36 ff ff       	call   f0100ed8 <cons_unlock>
}
f010d8aa:	90                   	nop
f010d8ab:	c9                   	leave  
f010d8ac:	c3                   	ret    

f010d8ad <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d8ad:	55                   	push   %ebp
f010d8ae:	89 e5                	mov    %esp,%ebp
f010d8b0:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = cur_env;
f010d8b3:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010d8b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d8bb:	83 ec 0c             	sub    $0xc,%esp
f010d8be:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010d8c1:	50                   	push   %eax
f010d8c2:	e8 09 a9 ff ff       	call   f01081d0 <allocate_frame>
f010d8c7:	83 c4 10             	add    $0x10,%esp
f010d8ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d8cd:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d8d1:	75 08                	jne    f010d8db <__sys_allocate_page+0x2e>
		return r ;
f010d8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8d6:	e9 d0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d8db:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8de:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d8e3:	77 0c                	ja     f010d8f1 <__sys_allocate_page+0x44>
f010d8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8e8:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d8ed:	85 c0                	test   %eax,%eax
f010d8ef:	74 0a                	je     f010d8fb <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d8f1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d8f6:	e9 b0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d8fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8fe:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d903:	83 f8 04             	cmp    $0x4,%eax
f010d906:	74 0a                	je     f010d912 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d908:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d90d:	e9 99 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d912:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d915:	83 ec 0c             	sub    $0xc,%esp
f010d918:	50                   	push   %eax
f010d919:	e8 a5 fe ff ff       	call   f010d7c3 <to_physical_address>
f010d91e:	83 c4 10             	add    $0x10,%esp
f010d921:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010d924:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d927:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d92a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d92d:	c1 e8 0c             	shr    $0xc,%eax
f010d930:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d933:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f010d938:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d93b:	72 17                	jb     f010d954 <__sys_allocate_page+0xa7>
f010d93d:	ff 75 e8             	pushl  -0x18(%ebp)
f010d940:	68 64 87 12 f0       	push   $0xf0128764
f010d945:	68 b5 00 00 00       	push   $0xb5
f010d94a:	68 93 87 12 f0       	push   $0xf0128793
f010d94f:	e8 c6 29 ff ff       	call   f010031a <_panic>
f010d954:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d957:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010d95c:	83 ec 04             	sub    $0x4,%esp
f010d95f:	68 00 10 00 00       	push   $0x1000
f010d964:	6a 00                	push   $0x0
f010d966:	50                   	push   %eax
f010d967:	e8 31 4b 01 00       	call   f012249d <memset>
f010d96c:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d96f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d972:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d978:	8b 40 64             	mov    0x64(%eax),%eax
f010d97b:	ff 75 0c             	pushl  0xc(%ebp)
f010d97e:	51                   	push   %ecx
f010d97f:	52                   	push   %edx
f010d980:	50                   	push   %eax
f010d981:	e8 60 ac ff ff       	call   f01085e6 <map_frame>
f010d986:	83 c4 10             	add    $0x10,%esp
f010d989:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d98c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d990:	75 14                	jne    f010d9a6 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010d992:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d995:	83 ec 0c             	sub    $0xc,%esp
f010d998:	50                   	push   %eax
f010d999:	e8 3f aa ff ff       	call   f01083dd <decrement_references>
f010d99e:	83 c4 10             	add    $0x10,%esp
		return r;
f010d9a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9a4:	eb 05                	jmp    f010d9ab <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010d9a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9ab:	c9                   	leave  
f010d9ac:	c3                   	ret    

f010d9ad <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d9ad:	55                   	push   %ebp
f010d9ae:	89 e5                	mov    %esp,%ebp
f010d9b0:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d9b3:	83 ec 04             	sub    $0x4,%esp
f010d9b6:	68 a7 87 12 f0       	push   $0xf01287a7
f010d9bb:	68 dc 00 00 00       	push   $0xdc
f010d9c0:	68 93 87 12 f0       	push   $0xf0128793
f010d9c5:	e8 50 29 ff ff       	call   f010031a <_panic>

f010d9ca <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d9ca:	55                   	push   %ebp
f010d9cb:	89 e5                	mov    %esp,%ebp
f010d9cd:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d9d0:	83 ec 04             	sub    $0x4,%esp
f010d9d3:	68 c8 87 12 f0       	push   $0xf01287c8
f010d9d8:	68 ed 00 00 00       	push   $0xed
f010d9dd:	68 93 87 12 f0       	push   $0xf0128793
f010d9e2:	e8 33 29 ff ff       	call   f010031a <_panic>

f010d9e7 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d9e7:	55                   	push   %ebp
f010d9e8:	89 e5                	mov    %esp,%ebp
f010d9ea:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(cur_env->env_page_directory, start_virtual_address, size);
f010d9ed:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010d9f2:	8b 40 64             	mov    0x64(%eax),%eax
f010d9f5:	83 ec 04             	sub    $0x4,%esp
f010d9f8:	ff 75 0c             	pushl  0xc(%ebp)
f010d9fb:	ff 75 08             	pushl  0x8(%ebp)
f010d9fe:	50                   	push   %eax
f010d9ff:	e8 4e bd ff ff       	call   f0109752 <calculate_required_frames>
f010da04:	83 c4 10             	add    $0x10,%esp
}
f010da07:	c9                   	leave  
f010da08:	c3                   	ret    

f010da09 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010da09:	55                   	push   %ebp
f010da0a:	89 e5                	mov    %esp,%ebp
f010da0c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da0f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da12:	83 ec 0c             	sub    $0xc,%esp
f010da15:	50                   	push   %eax
f010da16:	e8 83 ae ff ff       	call   f010889e <calculate_available_frames>
f010da1b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010da1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da24:	01 d0                	add    %edx,%eax
}
f010da26:	c9                   	leave  
f010da27:	c3                   	ret    

f010da28 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010da28:	55                   	push   %ebp
f010da29:	89 e5                	mov    %esp,%ebp
f010da2b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da31:	83 ec 0c             	sub    $0xc,%esp
f010da34:	50                   	push   %eax
f010da35:	e8 64 ae ff ff       	call   f010889e <calculate_available_frames>
f010da3a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010da3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010da40:	c9                   	leave  
f010da41:	c3                   	ret    

f010da42 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010da42:	55                   	push   %ebp
f010da43:	89 e5                	mov    %esp,%ebp
f010da45:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da4b:	83 ec 0c             	sub    $0xc,%esp
f010da4e:	50                   	push   %eax
f010da4f:	e8 4a ae ff ff       	call   f010889e <calculate_available_frames>
f010da54:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010da57:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010da5a:	c9                   	leave  
f010da5b:	c3                   	ret    

f010da5c <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010da5c:	55                   	push   %ebp
f010da5d:	89 e5                	mov    %esp,%ebp
f010da5f:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010da62:	83 ec 0c             	sub    $0xc,%esp
f010da65:	ff 75 08             	pushl  0x8(%ebp)
f010da68:	e8 bb 35 01 00       	call   f0121028 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010da6d:	83 c4 10             	add    $0x10,%esp
}
f010da70:	c9                   	leave  
f010da71:	c3                   	ret    

f010da72 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010da72:	55                   	push   %ebp
f010da73:	89 e5                	mov    %esp,%ebp
f010da75:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010da78:	e8 d6 34 01 00       	call   f0120f53 <scarce_memory>
}
f010da7d:	90                   	nop
f010da7e:	c9                   	leave  
f010da7f:	c3                   	ret    

f010da80 <sys_clearFFL>:

void sys_clearFFL()
{
f010da80:	55                   	push   %ebp
f010da81:	89 e5                	mov    %esp,%ebp
f010da83:	83 ec 18             	sub    $0x18,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
f010da86:	83 ec 0c             	sub    $0xc,%esp
f010da89:	68 40 65 55 f0       	push   $0xf0556540
f010da8e:	e8 44 10 00 00       	call   f010ead7 <acquire_spinlock>
f010da93:	83 c4 10             	add    $0x10,%esp
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
f010da96:	a1 2c 65 55 f0       	mov    0xf055652c,%eax
f010da9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010da9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010daa5:	eb 12                	jmp    f010dab9 <sys_clearFFL+0x39>
		{
			allocate_frame(&ptr_tmp_FI) ;
f010daa7:	83 ec 0c             	sub    $0xc,%esp
f010daaa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010daad:	50                   	push   %eax
f010daae:	e8 1d a7 ff ff       	call   f01081d0 <allocate_frame>
f010dab3:	83 c4 10             	add    $0x10,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010dab6:	ff 45 f4             	incl   -0xc(%ebp)
f010dab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dabc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dabf:	7c e6                	jl     f010daa7 <sys_clearFFL+0x27>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010dac1:	83 ec 0c             	sub    $0xc,%esp
f010dac4:	68 40 65 55 f0       	push   $0xf0556540
f010dac9:	e8 90 10 00 00       	call   f010eb5e <release_spinlock>
f010dace:	83 c4 10             	add    $0x10,%esp
}
f010dad1:	90                   	nop
f010dad2:	c9                   	leave  
f010dad3:	c3                   	ret    

f010dad4 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010dad4:	55                   	push   %ebp
f010dad5:	89 e5                	mov    %esp,%ebp
f010dad7:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(cur_env);
f010dada:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dadf:	83 ec 0c             	sub    $0xc,%esp
f010dae2:	50                   	push   %eax
f010dae3:	e8 87 6c ff ff       	call   f010476f <pf_calculate_allocated_pages>
f010dae8:	83 c4 10             	add    $0x10,%esp
}
f010daeb:	c9                   	leave  
f010daec:	c3                   	ret    

f010daed <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010daed:	55                   	push   %ebp
f010daee:	89 e5                	mov    %esp,%ebp
f010daf0:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010daf3:	e8 91 0c 00 00       	call   f010e789 <isBufferingEnabled>
f010daf8:	84 c0                	test   %al,%al
f010dafa:	74 19                	je     f010db15 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
f010dafc:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010db01:	83 ec 04             	sub    $0x4,%esp
f010db04:	ff 75 0c             	pushl  0xc(%ebp)
f010db07:	ff 75 08             	pushl  0x8(%ebp)
f010db0a:	50                   	push   %eax
f010db0b:	e8 8d bc ff ff       	call   f010979d <__free_user_mem_with_buffering>
f010db10:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
	}
	return;
f010db13:	eb 18                	jmp    f010db2d <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
f010db15:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010db1a:	83 ec 04             	sub    $0x4,%esp
f010db1d:	ff 75 0c             	pushl  0xc(%ebp)
f010db20:	ff 75 08             	pushl  0x8(%ebp)
f010db23:	50                   	push   %eax
f010db24:	e8 66 bc ff ff       	call   f010978f <free_user_mem>
f010db29:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010db2c:	90                   	nop
}
f010db2d:	c9                   	leave  
f010db2e:	c3                   	ret    

f010db2f <check_Param>:
void check_Param(uint32 virtual_address)
{
f010db2f:	55                   	push   %ebp
f010db30:	89 e5                	mov    %esp,%ebp
f010db32:	83 ec 08             	sub    $0x8,%esp
	if(virtual_address == 0)
f010db35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010db39:	75 07                	jne    f010db42 <check_Param+0x13>
	{
		env_exit();
f010db3b:	e8 ee cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db40:	eb 25                	jmp    f010db67 <check_Param+0x38>
{
	if(virtual_address == 0)
	{
		env_exit();
	}
	else if(virtual_address <= USER_HEAP_MAX && virtual_address >= USER_HEAP_START)
f010db42:	81 7d 08 00 00 00 a0 	cmpl   $0xa0000000,0x8(%ebp)
f010db49:	77 0e                	ja     f010db59 <check_Param+0x2a>
f010db4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010db4e:	85 c0                	test   %eax,%eax
f010db50:	79 07                	jns    f010db59 <check_Param+0x2a>
	{
		env_exit();
f010db52:	e8 d7 cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db57:	eb 0e                	jmp    f010db67 <check_Param+0x38>
	}
	else if(virtual_address <= USER_HEAP_MAX && virtual_address >= USER_HEAP_START)
	{
		env_exit();
	}
	else if(virtual_address >= KERNEL_BASE)
f010db59:	81 7d 08 ff ff ff ef 	cmpl   $0xefffffff,0x8(%ebp)
f010db60:	76 05                	jbe    f010db67 <check_Param+0x38>
	{
		env_exit();
f010db62:	e8 c7 cb ff ff       	call   f010a72e <env_exit>
	}
}
f010db67:	90                   	nop
f010db68:	c9                   	leave  
f010db69:	c3                   	ret    

f010db6a <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010db6a:	55                   	push   %ebp
f010db6b:	89 e5                	mov    %esp,%ebp
f010db6d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db70:	83 ec 0c             	sub    $0xc,%esp
f010db73:	ff 75 08             	pushl  0x8(%ebp)
f010db76:	e8 b4 ff ff ff       	call   f010db2f <check_Param>
f010db7b:	83 c4 10             	add    $0x10,%esp

	allocate_user_mem(cur_env, virtual_address, size);
f010db7e:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010db83:	83 ec 04             	sub    $0x4,%esp
f010db86:	ff 75 0c             	pushl  0xc(%ebp)
f010db89:	ff 75 08             	pushl  0x8(%ebp)
f010db8c:	50                   	push   %eax
f010db8d:	e8 ef bb ff ff       	call   f0109781 <allocate_user_mem>
f010db92:	83 c4 10             	add    $0x10,%esp
	return;
f010db95:	90                   	nop
}
f010db96:	c9                   	leave  
f010db97:	c3                   	ret    

f010db98 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010db98:	55                   	push   %ebp
f010db99:	89 e5                	mov    %esp,%ebp
f010db9b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db9e:	83 ec 0c             	sub    $0xc,%esp
f010dba1:	ff 75 08             	pushl  0x8(%ebp)
f010dba4:	e8 86 ff ff ff       	call   f010db2f <check_Param>
f010dba9:	83 c4 10             	add    $0x10,%esp

	allocate_chunk(cur_env->env_page_directory, virtual_address, size, perms);
f010dbac:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dbb1:	8b 40 64             	mov    0x64(%eax),%eax
f010dbb4:	ff 75 10             	pushl  0x10(%ebp)
f010dbb7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbba:	ff 75 08             	pushl  0x8(%ebp)
f010dbbd:	50                   	push   %eax
f010dbbe:	e8 5b bb ff ff       	call   f010971e <allocate_chunk>
f010dbc3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbc6:	90                   	nop
}
f010dbc7:	c9                   	leave  
f010dbc8:	c3                   	ret    

f010dbc9 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010dbc9:	55                   	push   %ebp
f010dbca:	89 e5                	mov    %esp,%ebp
f010dbcc:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(cur_env, src_virtual_address, dst_virtual_address, size);
f010dbcf:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dbd4:	ff 75 10             	pushl  0x10(%ebp)
f010dbd7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbda:	ff 75 08             	pushl  0x8(%ebp)
f010dbdd:	50                   	push   %eax
f010dbde:	e8 d7 bb ff ff       	call   f01097ba <move_user_mem>
f010dbe3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbe6:	90                   	nop
}
f010dbe7:	c9                   	leave  
f010dbe8:	c3                   	ret    

f010dbe9 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010dbe9:	55                   	push   %ebp
f010dbea:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010dbec:	a1 04 8f 55 f0       	mov    0xf0558f04,%eax
}
f010dbf1:	5d                   	pop    %ebp
f010dbf2:	c3                   	ret    

f010dbf3 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010dbf3:	55                   	push   %ebp
f010dbf4:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010dbf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbf9:	a3 04 8f 55 f0       	mov    %eax,0xf0558f04
}
f010dbfe:	90                   	nop
f010dbff:	5d                   	pop    %ebp
f010dc00:	c3                   	ret    

f010dc01 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010dc01:	55                   	push   %ebp
f010dc02:	89 e5                	mov    %esp,%ebp
f010dc04:	83 ec 18             	sub    $0x18,%esp
f010dc07:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc0a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(cur_env->env_id, shareName, size, isWritable, virtual_address);
f010dc0d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010dc11:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dc16:	8b 40 10             	mov    0x10(%eax),%eax
f010dc19:	83 ec 0c             	sub    $0xc,%esp
f010dc1c:	ff 75 14             	pushl  0x14(%ebp)
f010dc1f:	52                   	push   %edx
f010dc20:	ff 75 0c             	pushl  0xc(%ebp)
f010dc23:	ff 75 08             	pushl  0x8(%ebp)
f010dc26:	50                   	push   %eax
f010dc27:	e8 dd ad ff ff       	call   f0108a09 <createSharedObject>
f010dc2c:	83 c4 20             	add    $0x20,%esp
}
f010dc2f:	c9                   	leave  
f010dc30:	c3                   	ret    

f010dc31 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010dc31:	55                   	push   %ebp
f010dc32:	89 e5                	mov    %esp,%ebp
f010dc34:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010dc37:	83 ec 08             	sub    $0x8,%esp
f010dc3a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc3d:	ff 75 08             	pushl  0x8(%ebp)
f010dc40:	e8 e4 ad ff ff       	call   f0108a29 <getSizeOfSharedObject>
f010dc45:	83 c4 10             	add    $0x10,%esp
}
f010dc48:	c9                   	leave  
f010dc49:	c3                   	ret    

f010dc4a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010dc4a:	55                   	push   %ebp
f010dc4b:	89 e5                	mov    %esp,%ebp
f010dc4d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010dc50:	83 ec 04             	sub    $0x4,%esp
f010dc53:	ff 75 10             	pushl  0x10(%ebp)
f010dc56:	ff 75 0c             	pushl  0xc(%ebp)
f010dc59:	ff 75 08             	pushl  0x8(%ebp)
f010dc5c:	e8 f7 ad ff ff       	call   f0108a58 <getSharedObject>
f010dc61:	83 c4 10             	add    $0x10,%esp
}
f010dc64:	c9                   	leave  
f010dc65:	c3                   	ret    

f010dc66 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010dc66:	55                   	push   %ebp
f010dc67:	89 e5                	mov    %esp,%ebp
f010dc69:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010dc6c:	83 ec 08             	sub    $0x8,%esp
f010dc6f:	ff 75 0c             	pushl  0xc(%ebp)
f010dc72:	ff 75 08             	pushl  0x8(%ebp)
f010dc75:	e8 fb ad ff ff       	call   f0108a75 <freeSharedObject>
f010dc7a:	83 c4 10             	add    $0x10,%esp
}
f010dc7d:	c9                   	leave  
f010dc7e:	c3                   	ret    

f010dc7f <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010dc7f:	55                   	push   %ebp
f010dc80:	89 e5                	mov    %esp,%ebp
	return cur_env->env_id;
f010dc82:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dc87:	8b 40 10             	mov    0x10(%eax),%eax
}
f010dc8a:	5d                   	pop    %ebp
f010dc8b:	c3                   	ret    

f010dc8c <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010dc8c:	55                   	push   %ebp
f010dc8d:	89 e5                	mov    %esp,%ebp
	//return cur_env->env_id;
	return (cur_env - envs) ;
f010dc8f:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dc94:	89 c2                	mov    %eax,%edx
f010dc96:	a1 10 5a 55 f0       	mov    0xf0555a10,%eax
f010dc9b:	29 c2                	sub    %eax,%edx
f010dc9d:	89 d0                	mov    %edx,%eax
f010dc9f:	c1 f8 02             	sar    $0x2,%eax
f010dca2:	89 c2                	mov    %eax,%edx
f010dca4:	89 d0                	mov    %edx,%eax
f010dca6:	c1 e0 02             	shl    $0x2,%eax
f010dca9:	01 d0                	add    %edx,%eax
f010dcab:	c1 e0 02             	shl    $0x2,%eax
f010dcae:	01 d0                	add    %edx,%eax
f010dcb0:	c1 e0 02             	shl    $0x2,%eax
f010dcb3:	01 d0                	add    %edx,%eax
f010dcb5:	c1 e0 02             	shl    $0x2,%eax
f010dcb8:	01 d0                	add    %edx,%eax
f010dcba:	c1 e0 08             	shl    $0x8,%eax
f010dcbd:	29 d0                	sub    %edx,%eax
f010dcbf:	c1 e0 08             	shl    $0x8,%eax
f010dcc2:	29 d0                	sub    %edx,%eax
f010dcc4:	c1 e0 03             	shl    $0x3,%eax
f010dcc7:	01 d0                	add    %edx,%eax
f010dcc9:	c1 e0 03             	shl    $0x3,%eax
f010dccc:	01 d0                	add    %edx,%eax
f010dcce:	01 c0                	add    %eax,%eax
f010dcd0:	01 d0                	add    %edx,%eax
}
f010dcd2:	5d                   	pop    %ebp
f010dcd3:	c3                   	ret    

f010dcd4 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010dcd4:	55                   	push   %ebp
f010dcd5:	89 e5                	mov    %esp,%ebp
	return cur_env->env_parent_id;
f010dcd7:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dcdc:	8b 40 14             	mov    0x14(%eax),%eax
}
f010dcdf:	5d                   	pop    %ebp
f010dce0:	c3                   	ret    

f010dce1 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010dce1:	55                   	push   %ebp
f010dce2:	89 e5                	mov    %esp,%ebp
f010dce4:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010dce7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010dceb:	75 0a                	jne    f010dcf7 <sys_destroy_env+0x16>
	{
		e = cur_env ;
f010dced:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dcf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010dcf5:	eb 22                	jmp    f010dd19 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010dcf7:	83 ec 04             	sub    $0x4,%esp
f010dcfa:	6a 00                	push   $0x0
f010dcfc:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010dcff:	50                   	push   %eax
f010dd00:	ff 75 08             	pushl  0x8(%ebp)
f010dd03:	e8 b8 ca ff ff       	call   f010a7c0 <envid2env>
f010dd08:	83 c4 10             	add    $0x10,%esp
f010dd0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dd0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dd12:	79 05                	jns    f010dd19 <sys_destroy_env+0x38>
	{
		return r;
f010dd14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd17:	eb 5e                	jmp    f010dd77 <sys_destroy_env+0x96>
	}

	if (e == cur_env)
f010dd19:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd1c:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dd21:	39 c2                	cmp    %eax,%edx
f010dd23:	75 1b                	jne    f010dd40 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", cur_env->env_id);
f010dd25:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dd2a:	8b 40 10             	mov    0x10(%eax),%eax
f010dd2d:	83 ec 08             	sub    $0x8,%esp
f010dd30:	50                   	push   %eax
f010dd31:	68 e7 87 12 f0       	push   $0xf01287e7
f010dd36:	e8 31 32 ff ff       	call   f0100f6c <cprintf>
f010dd3b:	83 c4 10             	add    $0x10,%esp
f010dd3e:	eb 20                	jmp    f010dd60 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", cur_env->env_id, e->env_id);
f010dd40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd43:	8b 50 10             	mov    0x10(%eax),%edx
f010dd46:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010dd4b:	8b 40 10             	mov    0x10(%eax),%eax
f010dd4e:	83 ec 04             	sub    $0x4,%esp
f010dd51:	52                   	push   %edx
f010dd52:	50                   	push   %eax
f010dd53:	68 02 88 12 f0       	push   $0xf0128802
f010dd58:	e8 0f 32 ff ff       	call   f0100f6c <cprintf>
f010dd5d:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010dd60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd63:	8b 40 10             	mov    0x10(%eax),%eax
f010dd66:	83 ec 0c             	sub    $0xc,%esp
f010dd69:	50                   	push   %eax
f010dd6a:	e8 f4 7c ff ff       	call   f0105a63 <sched_kill_env>
f010dd6f:	83 c4 10             	add    $0x10,%esp

	return 0;
f010dd72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd77:	c9                   	leave  
f010dd78:	c3                   	ret    

f010dd79 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010dd79:	55                   	push   %ebp
f010dd7a:	89 e5                	mov    %esp,%ebp
f010dd7c:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010dd7f:	e8 aa c9 ff ff       	call   f010a72e <env_exit>

	//2024: if returned here, then it's not the current environment. So, just return
	//env_run_cmd_prmpt();
	//context_switch(&(cur_env->context), mycpu()->scheduler);

}
f010dd84:	90                   	nop
f010dd85:	c9                   	leave  
f010dd86:	c3                   	ret    

f010dd87 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010dd87:	55                   	push   %ebp
f010dd88:	89 e5                	mov    %esp,%ebp
f010dd8a:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\nAttempt to create a new env\n");

	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010dd8d:	ff 75 14             	pushl  0x14(%ebp)
f010dd90:	ff 75 10             	pushl  0x10(%ebp)
f010dd93:	ff 75 0c             	pushl  0xc(%ebp)
f010dd96:	ff 75 08             	pushl  0x8(%ebp)
f010dd99:	e8 d2 bc ff ff       	call   f0109a70 <env_create>
f010dd9e:	83 c4 10             	add    $0x10,%esp
f010dda1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010dda4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dda8:	75 07                	jne    f010ddb1 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ddaa:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ddaf:	eb 14                	jmp    f010ddc5 <sys_create_env+0x3e>
	}
	//cprintf("\nENV %d is created\n", env->env_id);

	//2015
	sched_new_env(env);
f010ddb1:	83 ec 0c             	sub    $0xc,%esp
f010ddb4:	ff 75 f4             	pushl  -0xc(%ebp)
f010ddb7:	e8 e9 78 ff ff       	call   f01056a5 <sched_new_env>
f010ddbc:	83 c4 10             	add    $0x10,%esp

	//cprintf("\nENV %d is scheduled as NEW\n", env->env_id);

	return env->env_id;
f010ddbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddc2:	8b 40 10             	mov    0x10(%eax),%eax
}
f010ddc5:	c9                   	leave  
f010ddc6:	c3                   	ret    

f010ddc7 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ddc7:	55                   	push   %ebp
f010ddc8:	89 e5                	mov    %esp,%ebp
f010ddca:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ddcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddd0:	83 ec 0c             	sub    $0xc,%esp
f010ddd3:	50                   	push   %eax
f010ddd4:	e8 22 79 ff ff       	call   f01056fb <sched_run_env>
f010ddd9:	83 c4 10             	add    $0x10,%esp
}
f010dddc:	90                   	nop
f010dddd:	c9                   	leave  
f010ddde:	c3                   	ret    

f010dddf <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010dddf:	55                   	push   %ebp
f010dde0:	89 e5                	mov    %esp,%ebp
f010dde2:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010dde5:	0f 31                	rdtsc  
f010dde7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ddea:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010dded:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddf3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ddf6:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ddf9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ddfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ddff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de02:	89 01                	mov    %eax,(%ecx)
f010de04:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010de07:	8b 45 08             	mov    0x8(%ebp),%eax
f010de0a:	c9                   	leave  
f010de0b:	c2 04 00             	ret    $0x4

f010de0e <sys_rcr2>:

uint32 sys_rcr2()
{
f010de0e:	55                   	push   %ebp
f010de0f:	89 e5                	mov    %esp,%ebp
f010de11:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010de14:	0f 20 d0             	mov    %cr2,%eax
f010de17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010de1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010de1d:	90                   	nop
}
f010de1e:	c9                   	leave  
f010de1f:	c3                   	ret    

f010de20 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010de20:	55                   	push   %ebp
f010de21:	89 e5                	mov    %esp,%ebp
f010de23:	83 ec 04             	sub    $0x4,%esp
f010de26:	8b 45 08             	mov    0x8(%ebp),%eax
f010de29:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010de2c:	8a 45 fc             	mov    -0x4(%ebp),%al
f010de2f:	a2 80 62 55 f0       	mov    %al,0xf0556280
}
f010de34:	90                   	nop
f010de35:	c9                   	leave  
f010de36:	c3                   	ret    

f010de37 <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010de37:	55                   	push   %ebp
f010de38:	89 e5                	mov    %esp,%ebp
f010de3a:	56                   	push   %esi
f010de3b:	53                   	push   %ebx
f010de3c:	83 ec 10             	sub    $0x10,%esp
	cur_env = get_cpu_proc();
f010de3f:	e8 2c c9 ff ff       	call   f010a770 <get_cpu_proc>
f010de44:	a3 c4 76 57 f0       	mov    %eax,0xf05776c4
	assert(cur_env != NULL);
f010de49:	a1 c4 76 57 f0       	mov    0xf05776c4,%eax
f010de4e:	85 c0                	test   %eax,%eax
f010de50:	75 19                	jne    f010de6b <syscall+0x34>
f010de52:	68 1a 88 12 f0       	push   $0xf012881a
f010de57:	68 2a 88 12 f0       	push   $0xf012882a
f010de5c:	68 06 02 00 00       	push   $0x206
f010de61:	68 93 87 12 f0       	push   $0xf0128793
f010de66:	e8 af 24 ff ff       	call   f010031a <_panic>

	//cprintf("syscallno = %d\n", syscallno);
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010de6b:	83 7d 08 2b          	cmpl   $0x2b,0x8(%ebp)
f010de6f:	0f 87 bc 03 00 00    	ja     f010e231 <syscall+0x3fa>
f010de75:	8b 45 08             	mov    0x8(%ebp),%eax
f010de78:	c1 e0 02             	shl    $0x2,%eax
f010de7b:	05 40 88 12 f0       	add    $0xf0128840,%eax
f010de80:	8b 00                	mov    (%eax),%eax
f010de82:	ff e0                	jmp    *%eax
	{
	//TODO: [PROJECT'24.MS1 - #02] [2] SYSTEM CALLS - Add suitable code here

	//======================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010de84:	8b 45 14             	mov    0x14(%ebp),%eax
f010de87:	0f b6 d0             	movzbl %al,%edx
f010de8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de8d:	83 ec 04             	sub    $0x4,%esp
f010de90:	52                   	push   %edx
f010de91:	ff 75 10             	pushl  0x10(%ebp)
f010de94:	50                   	push   %eax
f010de95:	e8 3c f9 ff ff       	call   f010d7d6 <sys_cputs>
f010de9a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de9d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dea2:	e9 8f 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010dea7:	e8 a6 f9 ff ff       	call   f010d852 <sys_cgetc>
f010deac:	e9 85 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_lock_cons:
		sys_lock_cons();
f010deb1:	e8 db f9 ff ff       	call   f010d891 <sys_lock_cons>
		return 0;
f010deb6:	b8 00 00 00 00       	mov    $0x0,%eax
f010debb:	e9 76 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_unlock_cons:
		sys_unlock_cons();
f010dec0:	e8 da f9 ff ff       	call   f010d89f <sys_unlock_cons>
		return 0;
f010dec5:	b8 00 00 00 00       	mov    $0x0,%eax
f010deca:	e9 67 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010decf:	83 ec 08             	sub    $0x8,%esp
f010ded2:	ff 75 10             	pushl  0x10(%ebp)
f010ded5:	ff 75 0c             	pushl  0xc(%ebp)
f010ded8:	e8 0a fb ff ff       	call   f010d9e7 <sys_calculate_required_frames>
f010dedd:	83 c4 10             	add    $0x10,%esp
f010dee0:	e9 51 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010dee5:	e8 1f fb ff ff       	call   f010da09 <sys_calculate_free_frames>
f010deea:	e9 47 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010deef:	e8 34 fb ff ff       	call   f010da28 <sys_calculate_modified_frames>
f010def4:	e9 3d 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010def9:	e8 44 fb ff ff       	call   f010da42 <sys_calculate_notmod_frames>
f010defe:	e9 33 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010df03:	e8 cc fb ff ff       	call   f010dad4 <sys_pf_calculate_allocated_pages>
f010df08:	e9 29 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010df0d:	83 ec 0c             	sub    $0xc,%esp
f010df10:	ff 75 0c             	pushl  0xc(%ebp)
f010df13:	e8 44 fb ff ff       	call   f010da5c <sys_calculate_pages_tobe_removed_ready_exit>
f010df18:	83 c4 10             	add    $0x10,%esp
f010df1b:	e9 16 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010df20:	e8 4d fb ff ff       	call   f010da72 <sys_scarce_memory>
		return 0;
f010df25:	b8 00 00 00 00       	mov    $0x0,%eax
f010df2a:	e9 07 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010df2f:	83 ec 04             	sub    $0x4,%esp
f010df32:	ff 75 14             	pushl  0x14(%ebp)
f010df35:	ff 75 10             	pushl  0x10(%ebp)
f010df38:	ff 75 0c             	pushl  0xc(%ebp)
f010df3b:	e8 58 fc ff ff       	call   f010db98 <sys_allocate_chunk>
f010df40:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df43:	b8 00 00 00 00       	mov    $0x0,%eax
f010df48:	e9 e9 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010df4d:	8b 55 10             	mov    0x10(%ebp),%edx
f010df50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df53:	83 ec 08             	sub    $0x8,%esp
f010df56:	52                   	push   %edx
f010df57:	50                   	push   %eax
f010df58:	e8 50 f9 ff ff       	call   f010d8ad <__sys_allocate_page>
f010df5d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df60:	b8 00 00 00 00       	mov    $0x0,%eax
f010df65:	e9 cc 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010df6a:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010df6d:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010df70:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010df73:	8b 55 10             	mov    0x10(%ebp),%edx
f010df76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df79:	83 ec 0c             	sub    $0xc,%esp
f010df7c:	56                   	push   %esi
f010df7d:	53                   	push   %ebx
f010df7e:	51                   	push   %ecx
f010df7f:	52                   	push   %edx
f010df80:	50                   	push   %eax
f010df81:	e8 27 fa ff ff       	call   f010d9ad <__sys_map_frame>
f010df86:	83 c4 20             	add    $0x20,%esp
		return 0;
f010df89:	b8 00 00 00 00       	mov    $0x0,%eax
f010df8e:	e9 a3 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010df93:	8b 55 10             	mov    0x10(%ebp),%edx
f010df96:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df99:	83 ec 08             	sub    $0x8,%esp
f010df9c:	52                   	push   %edx
f010df9d:	50                   	push   %eax
f010df9e:	e8 27 fa ff ff       	call   f010d9ca <__sys_unmap_frame>
f010dfa3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfa6:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfab:	e9 86 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dfb0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfb3:	0f be c0             	movsbl %al,%eax
f010dfb6:	83 ec 0c             	sub    $0xc,%esp
f010dfb9:	50                   	push   %eax
f010dfba:	e8 6f f8 ff ff       	call   f010d82e <sys_cputc>
f010dfbf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfc2:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfc7:	e9 6a 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dfcc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfcf:	0f be c0             	movsbl %al,%eax
f010dfd2:	83 ec 0c             	sub    $0xc,%esp
f010dfd5:	50                   	push   %eax
f010dfd6:	e8 a5 fa ff ff       	call   f010da80 <sys_clearFFL>
f010dfdb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfde:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfe3:	e9 4e 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010dfe8:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010dfeb:	8b 45 14             	mov    0x14(%ebp),%eax
f010dfee:	0f b6 d0             	movzbl %al,%edx
f010dff1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dff4:	51                   	push   %ecx
f010dff5:	52                   	push   %edx
f010dff6:	ff 75 10             	pushl  0x10(%ebp)
f010dff9:	50                   	push   %eax
f010dffa:	e8 02 fc ff ff       	call   f010dc01 <sys_createSharedObject>
f010dfff:	83 c4 10             	add    $0x10,%esp
f010e002:	e9 2f 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010e007:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e00a:	8b 55 10             	mov    0x10(%ebp),%edx
f010e00d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e010:	83 ec 04             	sub    $0x4,%esp
f010e013:	51                   	push   %ecx
f010e014:	52                   	push   %edx
f010e015:	50                   	push   %eax
f010e016:	e8 2f fc ff ff       	call   f010dc4a <sys_getSharedObject>
f010e01b:	83 c4 10             	add    $0x10,%esp
f010e01e:	e9 13 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010e023:	8b 55 10             	mov    0x10(%ebp),%edx
f010e026:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e029:	83 ec 08             	sub    $0x8,%esp
f010e02c:	52                   	push   %edx
f010e02d:	50                   	push   %eax
f010e02e:	e8 33 fc ff ff       	call   f010dc66 <sys_freeSharedObject>
f010e033:	83 c4 10             	add    $0x10,%esp
f010e036:	e9 fb 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010e03b:	8b 55 10             	mov    0x10(%ebp),%edx
f010e03e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e041:	83 ec 08             	sub    $0x8,%esp
f010e044:	52                   	push   %edx
f010e045:	50                   	push   %eax
f010e046:	e8 e6 fb ff ff       	call   f010dc31 <sys_getSizeOfSharedObject>
f010e04b:	83 c4 10             	add    $0x10,%esp
f010e04e:	e9 e3 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010e053:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e056:	ff 75 18             	pushl  0x18(%ebp)
f010e059:	ff 75 14             	pushl  0x14(%ebp)
f010e05c:	ff 75 10             	pushl  0x10(%ebp)
f010e05f:	50                   	push   %eax
f010e060:	e8 22 fd ff ff       	call   f010dd87 <sys_create_env>
f010e065:	83 c4 10             	add    $0x10,%esp
f010e068:	e9 c9 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010e06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e070:	83 ec 0c             	sub    $0xc,%esp
f010e073:	50                   	push   %eax
f010e074:	e8 4e fd ff ff       	call   f010ddc7 <sys_run_env>
f010e079:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e07c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e081:	e9 b0 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010e086:	e8 01 fc ff ff       	call   f010dc8c <sys_getenvindex>
f010e08b:	e9 a6 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010e090:	e8 ea fb ff ff       	call   f010dc7f <sys_getenvid>
f010e095:	e9 9c 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010e09a:	e8 35 fc ff ff       	call   f010dcd4 <sys_getparentenvid>
f010e09f:	e9 92 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010e0a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0a7:	83 ec 0c             	sub    $0xc,%esp
f010e0aa:	50                   	push   %eax
f010e0ab:	e8 31 fc ff ff       	call   f010dce1 <sys_destroy_env>
f010e0b0:	83 c4 10             	add    $0x10,%esp
f010e0b3:	e9 7e 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010e0b8:	e8 bc fc ff ff       	call   f010dd79 <sys_exit_env>
		return 0;
f010e0bd:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0c2:	e9 6f 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010e0c7:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010e0ca:	83 ec 0c             	sub    $0xc,%esp
f010e0cd:	50                   	push   %eax
f010e0ce:	e8 0c fd ff ff       	call   f010dddf <sys_get_virtual_time>
f010e0d3:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010e0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010e0dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010e0df:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010e0e2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e0e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0e8:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010e0ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e0ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e0f0:	89 10                	mov    %edx,(%eax)
		return 0;
f010e0f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0f7:	e9 3a 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010e0fc:	83 ec 04             	sub    $0x4,%esp
f010e0ff:	ff 75 14             	pushl  0x14(%ebp)
f010e102:	ff 75 10             	pushl  0x10(%ebp)
f010e105:	ff 75 0c             	pushl  0xc(%ebp)
f010e108:	e8 bc fa ff ff       	call   f010dbc9 <sys_move_user_mem>
f010e10d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e110:	b8 00 00 00 00       	mov    $0x0,%eax
f010e115:	e9 1c 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010e11a:	e8 ef fc ff ff       	call   f010de0e <sys_rcr2>
f010e11f:	e9 12 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010e124:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e127:	0f b6 c0             	movzbl %al,%eax
f010e12a:	83 ec 0c             	sub    $0xc,%esp
f010e12d:	50                   	push   %eax
f010e12e:	e8 ed fc ff ff       	call   f010de20 <sys_bypassPageFault>
f010e133:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e136:	b8 00 00 00 00       	mov    $0x0,%eax
f010e13b:	e9 f6 00 00 00       	jmp    f010e236 <syscall+0x3ff>

	case SYS_rsttst:
		rsttst();
f010e140:	e8 19 27 01 00       	call   f012085e <rsttst>
		return 0;
f010e145:	b8 00 00 00 00       	mov    $0x0,%eax
f010e14a:	e9 e7 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_inctst:
		inctst();
f010e14f:	e8 52 27 01 00       	call   f01208a6 <inctst>
		return 0;
f010e154:	b8 00 00 00 00       	mov    $0x0,%eax
f010e159:	e9 d8 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_chktst:
		chktst(a1);
f010e15e:	83 ec 0c             	sub    $0xc,%esp
f010e161:	ff 75 0c             	pushl  0xc(%ebp)
f010e164:	e8 7f 28 01 00       	call   f01209e8 <chktst>
f010e169:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e16c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e171:	e9 c0 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_gettst:
		return gettst();
f010e176:	e8 5f 27 01 00       	call   f01208da <gettst>
f010e17b:	e9 b6 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010e180:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010e183:	8b 45 18             	mov    0x18(%ebp),%eax
f010e186:	0f be c0             	movsbl %al,%eax
f010e189:	83 ec 0c             	sub    $0xc,%esp
f010e18c:	52                   	push   %edx
f010e18d:	50                   	push   %eax
f010e18e:	ff 75 14             	pushl  0x14(%ebp)
f010e191:	ff 75 10             	pushl  0x10(%ebp)
f010e194:	ff 75 0c             	pushl  0xc(%ebp)
f010e197:	e8 48 27 01 00       	call   f01208e4 <tst>
f010e19c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010e19f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1a4:	e9 8d 00 00 00       	jmp    f010e236 <syscall+0x3ff>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010e1a9:	e8 3b fa ff ff       	call   f010dbe9 <sys_get_heap_strategy>
f010e1ae:	e9 83 00 00 00       	jmp    f010e236 <syscall+0x3ff>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010e1b3:	83 ec 0c             	sub    $0xc,%esp
f010e1b6:	ff 75 0c             	pushl  0xc(%ebp)
f010e1b9:	e8 35 fa ff ff       	call   f010dbf3 <sys_set_uheap_strategy>
f010e1be:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e1c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1c6:	eb 6e                	jmp    f010e236 <syscall+0x3ff>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010e1c8:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010e1cb:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e1ce:	8b 55 10             	mov    0x10(%ebp),%edx
f010e1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1d4:	53                   	push   %ebx
f010e1d5:	51                   	push   %ecx
f010e1d6:	52                   	push   %edx
f010e1d7:	50                   	push   %eax
f010e1d8:	e8 98 4b 00 00       	call   f0112d75 <sys_check_LRU_lists>
f010e1dd:	83 c4 10             	add    $0x10,%esp
f010e1e0:	eb 54                	jmp    f010e236 <syscall+0x3ff>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010e1e2:	8b 55 10             	mov    0x10(%ebp),%edx
f010e1e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e8:	83 ec 08             	sub    $0x8,%esp
f010e1eb:	52                   	push   %edx
f010e1ec:	50                   	push   %eax
f010e1ed:	e8 45 4d 00 00       	call   f0112f37 <sys_check_LRU_lists_free>
f010e1f2:	83 c4 10             	add    $0x10,%esp
f010e1f5:	eb 3f                	jmp    f010e236 <syscall+0x3ff>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010e1f7:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010e1fa:	8b 55 10             	mov    0x10(%ebp),%edx
f010e1fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e200:	51                   	push   %ecx
f010e201:	ff 75 14             	pushl  0x14(%ebp)
f010e204:	52                   	push   %edx
f010e205:	50                   	push   %eax
f010e206:	e8 b9 4e 00 00       	call   f01130c4 <sys_check_WS_list>
f010e20b:	83 c4 10             	add    $0x10,%esp
f010e20e:	eb 26                	jmp    f010e236 <syscall+0x3ff>

	case SYS_utilities:
		sys_utilities((char*)a1, (int)a2);
f010e210:	8b 55 10             	mov    0x10(%ebp),%edx
f010e213:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e216:	83 ec 08             	sub    $0x8,%esp
f010e219:	52                   	push   %edx
f010e21a:	50                   	push   %eax
f010e21b:	e8 c9 29 01 00       	call   f0120be9 <sys_utilities>
f010e220:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e223:	b8 00 00 00 00       	mov    $0x0,%eax
f010e228:	eb 0c                	jmp    f010e236 <syscall+0x3ff>

	case NSYSCALLS:
		return 	-E_INVAL;
f010e22a:	b8 03 00 00 00       	mov    $0x3,%eax
f010e22f:	eb 05                	jmp    f010e236 <syscall+0x3ff>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010e231:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010e236:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e239:	5b                   	pop    %ebx
f010e23a:	5e                   	pop    %esi
f010e23b:	5d                   	pop    %ebp
f010e23c:	c3                   	ret    

f010e23d <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010e23d:	55                   	push   %ebp
f010e23e:	89 e5                	mov    %esp,%ebp
f010e240:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010e243:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e246:	8b 00                	mov    (%eax),%eax
f010e248:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e24b:	8b 45 10             	mov    0x10(%ebp),%eax
f010e24e:	8b 00                	mov    (%eax),%eax
f010e250:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e253:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010e25a:	e9 ca 00 00 00       	jmp    f010e329 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010e25f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e262:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010e265:	01 d0                	add    %edx,%eax
f010e267:	89 c2                	mov    %eax,%edx
f010e269:	c1 ea 1f             	shr    $0x1f,%edx
f010e26c:	01 d0                	add    %edx,%eax
f010e26e:	d1 f8                	sar    %eax
f010e270:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e273:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e276:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e279:	eb 03                	jmp    f010e27e <stab_binsearch+0x41>
			m--;
f010e27b:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e27e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e281:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e284:	7c 1e                	jl     f010e2a4 <stab_binsearch+0x67>
f010e286:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e289:	89 d0                	mov    %edx,%eax
f010e28b:	01 c0                	add    %eax,%eax
f010e28d:	01 d0                	add    %edx,%eax
f010e28f:	c1 e0 02             	shl    $0x2,%eax
f010e292:	89 c2                	mov    %eax,%edx
f010e294:	8b 45 08             	mov    0x8(%ebp),%eax
f010e297:	01 d0                	add    %edx,%eax
f010e299:	8a 40 04             	mov    0x4(%eax),%al
f010e29c:	0f b6 c0             	movzbl %al,%eax
f010e29f:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e2a2:	75 d7                	jne    f010e27b <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010e2a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e2a7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e2aa:	7d 09                	jge    f010e2b5 <stab_binsearch+0x78>
			l = true_m + 1;
f010e2ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2af:	40                   	inc    %eax
f010e2b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010e2b3:	eb 74                	jmp    f010e329 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010e2b5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010e2bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2bf:	89 d0                	mov    %edx,%eax
f010e2c1:	01 c0                	add    %eax,%eax
f010e2c3:	01 d0                	add    %edx,%eax
f010e2c5:	c1 e0 02             	shl    $0x2,%eax
f010e2c8:	89 c2                	mov    %eax,%edx
f010e2ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2cd:	01 d0                	add    %edx,%eax
f010e2cf:	8b 40 08             	mov    0x8(%eax),%eax
f010e2d2:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e2d5:	73 11                	jae    f010e2e8 <stab_binsearch+0xab>
			*region_left = m;
f010e2d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2dd:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010e2df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2e2:	40                   	inc    %eax
f010e2e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e2e6:	eb 41                	jmp    f010e329 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010e2e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2eb:	89 d0                	mov    %edx,%eax
f010e2ed:	01 c0                	add    %eax,%eax
f010e2ef:	01 d0                	add    %edx,%eax
f010e2f1:	c1 e0 02             	shl    $0x2,%eax
f010e2f4:	89 c2                	mov    %eax,%edx
f010e2f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2f9:	01 d0                	add    %edx,%eax
f010e2fb:	8b 40 08             	mov    0x8(%eax),%eax
f010e2fe:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e301:	76 14                	jbe    f010e317 <stab_binsearch+0xda>
			*region_right = m - 1;
f010e303:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e306:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e309:	8b 45 10             	mov    0x10(%ebp),%eax
f010e30c:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010e30e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e311:	48                   	dec    %eax
f010e312:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e315:	eb 12                	jmp    f010e329 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010e317:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e31a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e31d:	89 10                	mov    %edx,(%eax)
			l = m;
f010e31f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e322:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010e325:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010e329:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010e32c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010e32f:	0f 8e 2a ff ff ff    	jle    f010e25f <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010e335:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e339:	75 0f                	jne    f010e34a <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010e33b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e33e:	8b 00                	mov    (%eax),%eax
f010e340:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e343:	8b 45 10             	mov    0x10(%ebp),%eax
f010e346:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010e348:	eb 3d                	jmp    f010e387 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e34a:	8b 45 10             	mov    0x10(%ebp),%eax
f010e34d:	8b 00                	mov    (%eax),%eax
f010e34f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e352:	eb 03                	jmp    f010e357 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010e354:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010e357:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e35a:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e35c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e35f:	7d 1e                	jge    f010e37f <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010e361:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e364:	89 d0                	mov    %edx,%eax
f010e366:	01 c0                	add    %eax,%eax
f010e368:	01 d0                	add    %edx,%eax
f010e36a:	c1 e0 02             	shl    $0x2,%eax
f010e36d:	89 c2                	mov    %eax,%edx
f010e36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e372:	01 d0                	add    %edx,%eax
f010e374:	8a 40 04             	mov    0x4(%eax),%al
f010e377:	0f b6 c0             	movzbl %al,%eax
f010e37a:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e37d:	75 d5                	jne    f010e354 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010e37f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e382:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e385:	89 10                	mov    %edx,(%eax)
	}
}
f010e387:	90                   	nop
f010e388:	c9                   	leave  
f010e389:	c3                   	ret    

f010e38a <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010e38a:	55                   	push   %ebp
f010e38b:	89 e5                	mov    %esp,%ebp
f010e38d:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010e390:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e393:	c7 00 f0 88 12 f0    	movl   $0xf01288f0,(%eax)
	info->eip_line = 0;
f010e399:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e39c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010e3a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3a6:	c7 40 08 f0 88 12 f0 	movl   $0xf01288f0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010e3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3b0:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e3b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3ba:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3bd:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e3c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3cd:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e3d2:	76 1e                	jbe    f010e3f2 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e3d4:	c7 45 f4 e0 fc 12 f0 	movl   $0xf012fce0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e3db:	c7 45 f0 a4 2f 16 f0 	movl   $0xf0162fa4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e3e2:	c7 45 ec a5 2f 16 f0 	movl   $0xf0162fa5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e3e9:	c7 45 e8 cc 46 17 f0 	movl   $0xf01746cc,-0x18(%ebp)
f010e3f0:	eb 2a                	jmp    f010e41c <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e3f2:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e3f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e3fc:	8b 00                	mov    (%eax),%eax
f010e3fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e401:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e404:	8b 40 04             	mov    0x4(%eax),%eax
f010e407:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e40a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e40d:	8b 40 08             	mov    0x8(%eax),%eax
f010e410:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e413:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e416:	8b 40 0c             	mov    0xc(%eax),%eax
f010e419:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e41c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e41f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e422:	76 0a                	jbe    f010e42e <debuginfo_eip+0xa4>
f010e424:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e427:	48                   	dec    %eax
f010e428:	8a 00                	mov    (%eax),%al
f010e42a:	84 c0                	test   %al,%al
f010e42c:	74 0a                	je     f010e438 <debuginfo_eip+0xae>
		return -1;
f010e42e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e433:	e9 01 02 00 00       	jmp    f010e639 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e438:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e43f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e442:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e445:	29 c2                	sub    %eax,%edx
f010e447:	89 d0                	mov    %edx,%eax
f010e449:	c1 f8 02             	sar    $0x2,%eax
f010e44c:	89 c2                	mov    %eax,%edx
f010e44e:	89 d0                	mov    %edx,%eax
f010e450:	c1 e0 02             	shl    $0x2,%eax
f010e453:	01 d0                	add    %edx,%eax
f010e455:	c1 e0 02             	shl    $0x2,%eax
f010e458:	01 d0                	add    %edx,%eax
f010e45a:	c1 e0 02             	shl    $0x2,%eax
f010e45d:	01 d0                	add    %edx,%eax
f010e45f:	89 c1                	mov    %eax,%ecx
f010e461:	c1 e1 08             	shl    $0x8,%ecx
f010e464:	01 c8                	add    %ecx,%eax
f010e466:	89 c1                	mov    %eax,%ecx
f010e468:	c1 e1 10             	shl    $0x10,%ecx
f010e46b:	01 c8                	add    %ecx,%eax
f010e46d:	01 c0                	add    %eax,%eax
f010e46f:	01 d0                	add    %edx,%eax
f010e471:	48                   	dec    %eax
f010e472:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e475:	ff 75 08             	pushl  0x8(%ebp)
f010e478:	6a 64                	push   $0x64
f010e47a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e47d:	50                   	push   %eax
f010e47e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e481:	50                   	push   %eax
f010e482:	ff 75 f4             	pushl  -0xc(%ebp)
f010e485:	e8 b3 fd ff ff       	call   f010e23d <stab_binsearch>
f010e48a:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e48d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e490:	85 c0                	test   %eax,%eax
f010e492:	75 0a                	jne    f010e49e <debuginfo_eip+0x114>
		return -1;
f010e494:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e499:	e9 9b 01 00 00       	jmp    f010e639 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e49e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e4a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e4a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e4a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e4aa:	ff 75 08             	pushl  0x8(%ebp)
f010e4ad:	6a 24                	push   $0x24
f010e4af:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e4b2:	50                   	push   %eax
f010e4b3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e4b6:	50                   	push   %eax
f010e4b7:	ff 75 f4             	pushl  -0xc(%ebp)
f010e4ba:	e8 7e fd ff ff       	call   f010e23d <stab_binsearch>
f010e4bf:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e4c2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e4c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e4c8:	39 c2                	cmp    %eax,%edx
f010e4ca:	0f 8f 86 00 00 00    	jg     f010e556 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e4d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e4d3:	89 c2                	mov    %eax,%edx
f010e4d5:	89 d0                	mov    %edx,%eax
f010e4d7:	01 c0                	add    %eax,%eax
f010e4d9:	01 d0                	add    %edx,%eax
f010e4db:	c1 e0 02             	shl    $0x2,%eax
f010e4de:	89 c2                	mov    %eax,%edx
f010e4e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e4e3:	01 d0                	add    %edx,%eax
f010e4e5:	8b 00                	mov    (%eax),%eax
f010e4e7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e4ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e4ed:	29 d1                	sub    %edx,%ecx
f010e4ef:	89 ca                	mov    %ecx,%edx
f010e4f1:	39 d0                	cmp    %edx,%eax
f010e4f3:	73 22                	jae    f010e517 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e4f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e4f8:	89 c2                	mov    %eax,%edx
f010e4fa:	89 d0                	mov    %edx,%eax
f010e4fc:	01 c0                	add    %eax,%eax
f010e4fe:	01 d0                	add    %edx,%eax
f010e500:	c1 e0 02             	shl    $0x2,%eax
f010e503:	89 c2                	mov    %eax,%edx
f010e505:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e508:	01 d0                	add    %edx,%eax
f010e50a:	8b 10                	mov    (%eax),%edx
f010e50c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e50f:	01 c2                	add    %eax,%edx
f010e511:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e514:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e517:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e51a:	89 c2                	mov    %eax,%edx
f010e51c:	89 d0                	mov    %edx,%eax
f010e51e:	01 c0                	add    %eax,%eax
f010e520:	01 d0                	add    %edx,%eax
f010e522:	c1 e0 02             	shl    $0x2,%eax
f010e525:	89 c2                	mov    %eax,%edx
f010e527:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e52a:	01 d0                	add    %edx,%eax
f010e52c:	8b 50 08             	mov    0x8(%eax),%edx
f010e52f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e532:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e535:	8b 55 08             	mov    0x8(%ebp),%edx
f010e538:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e53b:	8b 40 10             	mov    0x10(%eax),%eax
f010e53e:	29 c2                	sub    %eax,%edx
f010e540:	89 d0                	mov    %edx,%eax
f010e542:	c1 f8 02             	sar    $0x2,%eax
f010e545:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e548:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e54b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e54e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e551:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e554:	eb 15                	jmp    f010e56b <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e556:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e559:	8b 55 08             	mov    0x8(%ebp),%edx
f010e55c:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e55f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e562:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e565:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e568:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e56b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e56e:	8b 40 08             	mov    0x8(%eax),%eax
f010e571:	83 ec 08             	sub    $0x8,%esp
f010e574:	6a 3a                	push   $0x3a
f010e576:	50                   	push   %eax
f010e577:	e8 f5 3e 01 00       	call   f0122471 <strfind>
f010e57c:	83 c4 10             	add    $0x10,%esp
f010e57f:	89 c2                	mov    %eax,%edx
f010e581:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e584:	8b 40 08             	mov    0x8(%eax),%eax
f010e587:	29 c2                	sub    %eax,%edx
f010e589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e58c:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e58f:	eb 03                	jmp    f010e594 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e591:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e594:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e597:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e59a:	7c 4e                	jl     f010e5ea <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e59c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e59f:	89 d0                	mov    %edx,%eax
f010e5a1:	01 c0                	add    %eax,%eax
f010e5a3:	01 d0                	add    %edx,%eax
f010e5a5:	c1 e0 02             	shl    $0x2,%eax
f010e5a8:	89 c2                	mov    %eax,%edx
f010e5aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5ad:	01 d0                	add    %edx,%eax
f010e5af:	8a 40 04             	mov    0x4(%eax),%al
f010e5b2:	3c 84                	cmp    $0x84,%al
f010e5b4:	74 34                	je     f010e5ea <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e5b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5b9:	89 d0                	mov    %edx,%eax
f010e5bb:	01 c0                	add    %eax,%eax
f010e5bd:	01 d0                	add    %edx,%eax
f010e5bf:	c1 e0 02             	shl    $0x2,%eax
f010e5c2:	89 c2                	mov    %eax,%edx
f010e5c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5c7:	01 d0                	add    %edx,%eax
f010e5c9:	8a 40 04             	mov    0x4(%eax),%al
f010e5cc:	3c 64                	cmp    $0x64,%al
f010e5ce:	75 c1                	jne    f010e591 <debuginfo_eip+0x207>
f010e5d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5d3:	89 d0                	mov    %edx,%eax
f010e5d5:	01 c0                	add    %eax,%eax
f010e5d7:	01 d0                	add    %edx,%eax
f010e5d9:	c1 e0 02             	shl    $0x2,%eax
f010e5dc:	89 c2                	mov    %eax,%edx
f010e5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5e1:	01 d0                	add    %edx,%eax
f010e5e3:	8b 40 08             	mov    0x8(%eax),%eax
f010e5e6:	85 c0                	test   %eax,%eax
f010e5e8:	74 a7                	je     f010e591 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e5ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5ed:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e5f0:	7c 42                	jl     f010e634 <debuginfo_eip+0x2aa>
f010e5f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5f5:	89 d0                	mov    %edx,%eax
f010e5f7:	01 c0                	add    %eax,%eax
f010e5f9:	01 d0                	add    %edx,%eax
f010e5fb:	c1 e0 02             	shl    $0x2,%eax
f010e5fe:	89 c2                	mov    %eax,%edx
f010e600:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e603:	01 d0                	add    %edx,%eax
f010e605:	8b 00                	mov    (%eax),%eax
f010e607:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e60a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e60d:	29 d1                	sub    %edx,%ecx
f010e60f:	89 ca                	mov    %ecx,%edx
f010e611:	39 d0                	cmp    %edx,%eax
f010e613:	73 1f                	jae    f010e634 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e615:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e618:	89 d0                	mov    %edx,%eax
f010e61a:	01 c0                	add    %eax,%eax
f010e61c:	01 d0                	add    %edx,%eax
f010e61e:	c1 e0 02             	shl    $0x2,%eax
f010e621:	89 c2                	mov    %eax,%edx
f010e623:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e626:	01 d0                	add    %edx,%eax
f010e628:	8b 10                	mov    (%eax),%edx
f010e62a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e62d:	01 c2                	add    %eax,%edx
f010e62f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e632:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e634:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e639:	c9                   	leave  
f010e63a:	c3                   	ret    

f010e63b <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e63b:	55                   	push   %ebp
f010e63c:	89 e5                	mov    %esp,%ebp
f010e63e:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e641:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e645:	74 1c                	je     f010e663 <setPageReplacmentAlgorithmLRU+0x28>
f010e647:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e64b:	74 16                	je     f010e663 <setPageReplacmentAlgorithmLRU+0x28>
f010e64d:	68 fc 88 12 f0       	push   $0xf01288fc
f010e652:	68 46 89 12 f0       	push   $0xf0128946
f010e657:	6a 19                	push   $0x19
f010e659:	68 5b 89 12 f0       	push   $0xf012895b
f010e65e:	e8 b7 1c ff ff       	call   f010031a <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e663:	8b 45 08             	mov    0x8(%ebp),%eax
f010e666:	a3 68 91 55 f0       	mov    %eax,0xf0559168
}
f010e66b:	90                   	nop
f010e66c:	c9                   	leave  
f010e66d:	c3                   	ret    

f010e66e <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e66e:	55                   	push   %ebp
f010e66f:	89 e5                	mov    %esp,%ebp
f010e671:	c7 05 68 91 55 f0 03 	movl   $0x3,0xf0559168
f010e678:	00 00 00 
f010e67b:	90                   	nop
f010e67c:	5d                   	pop    %ebp
f010e67d:	c3                   	ret    

f010e67e <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e67e:	55                   	push   %ebp
f010e67f:	89 e5                	mov    %esp,%ebp
f010e681:	c7 05 68 91 55 f0 04 	movl   $0x4,0xf0559168
f010e688:	00 00 00 
f010e68b:	90                   	nop
f010e68c:	5d                   	pop    %ebp
f010e68d:	c3                   	ret    

f010e68e <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e68e:	55                   	push   %ebp
f010e68f:	89 e5                	mov    %esp,%ebp
f010e691:	c7 05 68 91 55 f0 05 	movl   $0x5,0xf0559168
f010e698:	00 00 00 
f010e69b:	90                   	nop
f010e69c:	5d                   	pop    %ebp
f010e69d:	c3                   	ret    

f010e69e <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e69e:	55                   	push   %ebp
f010e69f:	89 e5                	mov    %esp,%ebp
f010e6a1:	c7 05 68 91 55 f0 07 	movl   $0x7,0xf0559168
f010e6a8:	00 00 00 
f010e6ab:	90                   	nop
f010e6ac:	5d                   	pop    %ebp
f010e6ad:	c3                   	ret    

f010e6ae <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e6ae:	55                   	push   %ebp
f010e6af:	89 e5                	mov    %esp,%ebp
f010e6b1:	c7 05 68 91 55 f0 06 	movl   $0x6,0xf0559168
f010e6b8:	00 00 00 
f010e6bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6be:	a3 00 65 55 f0       	mov    %eax,0xf0556500
f010e6c3:	90                   	nop
f010e6c4:	5d                   	pop    %ebp
f010e6c5:	c3                   	ret    

f010e6c6 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e6c6:	55                   	push   %ebp
f010e6c7:	89 e5                	mov    %esp,%ebp
f010e6c9:	8b 15 68 91 55 f0    	mov    0xf0559168,%edx
f010e6cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6d2:	39 c2                	cmp    %eax,%edx
f010e6d4:	0f 94 c0             	sete   %al
f010e6d7:	0f b6 c0             	movzbl %al,%eax
f010e6da:	5d                   	pop    %ebp
f010e6db:	c3                   	ret    

f010e6dc <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e6dc:	55                   	push   %ebp
f010e6dd:	89 e5                	mov    %esp,%ebp
f010e6df:	a1 68 91 55 f0       	mov    0xf0559168,%eax
f010e6e4:	83 f8 03             	cmp    $0x3,%eax
f010e6e7:	75 07                	jne    f010e6f0 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e6e9:	b8 01 00 00 00       	mov    $0x1,%eax
f010e6ee:	eb 05                	jmp    f010e6f5 <isPageReplacmentAlgorithmCLOCK+0x19>
f010e6f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010e6f5:	5d                   	pop    %ebp
f010e6f6:	c3                   	ret    

f010e6f7 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e6f7:	55                   	push   %ebp
f010e6f8:	89 e5                	mov    %esp,%ebp
f010e6fa:	a1 68 91 55 f0       	mov    0xf0559168,%eax
f010e6ff:	83 f8 04             	cmp    $0x4,%eax
f010e702:	75 07                	jne    f010e70b <isPageReplacmentAlgorithmFIFO+0x14>
f010e704:	b8 01 00 00 00       	mov    $0x1,%eax
f010e709:	eb 05                	jmp    f010e710 <isPageReplacmentAlgorithmFIFO+0x19>
f010e70b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e710:	5d                   	pop    %ebp
f010e711:	c3                   	ret    

f010e712 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e712:	55                   	push   %ebp
f010e713:	89 e5                	mov    %esp,%ebp
f010e715:	a1 68 91 55 f0       	mov    0xf0559168,%eax
f010e71a:	83 f8 05             	cmp    $0x5,%eax
f010e71d:	75 07                	jne    f010e726 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e71f:	b8 01 00 00 00       	mov    $0x1,%eax
f010e724:	eb 05                	jmp    f010e72b <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e726:	b8 00 00 00 00       	mov    $0x0,%eax
f010e72b:	5d                   	pop    %ebp
f010e72c:	c3                   	ret    

f010e72d <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e72d:	55                   	push   %ebp
f010e72e:	89 e5                	mov    %esp,%ebp
f010e730:	a1 68 91 55 f0       	mov    0xf0559168,%eax
f010e735:	83 f8 07             	cmp    $0x7,%eax
f010e738:	75 07                	jne    f010e741 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e73a:	b8 01 00 00 00       	mov    $0x1,%eax
f010e73f:	eb 05                	jmp    f010e746 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e741:	b8 00 00 00 00       	mov    $0x0,%eax
f010e746:	5d                   	pop    %ebp
f010e747:	c3                   	ret    

f010e748 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e748:	55                   	push   %ebp
f010e749:	89 e5                	mov    %esp,%ebp
f010e74b:	a1 68 91 55 f0       	mov    0xf0559168,%eax
f010e750:	83 f8 06             	cmp    $0x6,%eax
f010e753:	75 07                	jne    f010e75c <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e755:	b8 01 00 00 00       	mov    $0x1,%eax
f010e75a:	eb 05                	jmp    f010e761 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e75c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e761:	5d                   	pop    %ebp
f010e762:	c3                   	ret    

f010e763 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e763:	55                   	push   %ebp
f010e764:	89 e5                	mov    %esp,%ebp
f010e766:	8b 45 08             	mov    0x8(%ebp),%eax
f010e769:	a3 18 8f 55 f0       	mov    %eax,0xf0558f18
f010e76e:	90                   	nop
f010e76f:	5d                   	pop    %ebp
f010e770:	c3                   	ret    

f010e771 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e771:	55                   	push   %ebp
f010e772:	89 e5                	mov    %esp,%ebp
f010e774:	a1 18 8f 55 f0       	mov    0xf0558f18,%eax
f010e779:	5d                   	pop    %ebp
f010e77a:	c3                   	ret    

f010e77b <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e77b:	55                   	push   %ebp
f010e77c:	89 e5                	mov    %esp,%ebp
f010e77e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e781:	a3 d4 91 55 f0       	mov    %eax,0xf05591d4
f010e786:	90                   	nop
f010e787:	5d                   	pop    %ebp
f010e788:	c3                   	ret    

f010e789 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e789:	55                   	push   %ebp
f010e78a:	89 e5                	mov    %esp,%ebp
f010e78c:	a1 d4 91 55 f0       	mov    0xf05591d4,%eax
f010e791:	5d                   	pop    %ebp
f010e792:	c3                   	ret    

f010e793 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e793:	55                   	push   %ebp
f010e794:	89 e5                	mov    %esp,%ebp
f010e796:	8b 45 08             	mov    0x8(%ebp),%eax
f010e799:	a3 70 92 55 f0       	mov    %eax,0xf0559270
f010e79e:	90                   	nop
f010e79f:	5d                   	pop    %ebp
f010e7a0:	c3                   	ret    

f010e7a1 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e7a1:	55                   	push   %ebp
f010e7a2:	89 e5                	mov    %esp,%ebp
f010e7a4:	a1 70 92 55 f0       	mov    0xf0559270,%eax
f010e7a9:	5d                   	pop    %ebp
f010e7aa:	c3                   	ret    

f010e7ab <fault_handler>:
uint32 before_last_fault_va = 0;
int8 num_repeated_fault  = 0;

struct Env* last_faulted_env = NULL;
void fault_handler(struct Trapframe *tf)
{
f010e7ab:	55                   	push   %ebp
f010e7ac:	89 e5                	mov    %esp,%ebp
f010e7ae:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010e7b1:	0f 20 d0             	mov    %cr2,%eax
f010e7b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010e7b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
	/******************************************************/
	// Read processor's CR2 register to find the faulting address
	uint32 fault_va = rcr2();
f010e7ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	print_trapframe(tf);
	/******************************************************/

	//If same fault va for 3 times, then panic
	//UPDATE: 3 FAULTS MUST come from the same environment (or the kernel)
	struct Env* cur_env = get_cpu_proc();
f010e7bd:	e8 ae bf ff ff       	call   f010a770 <get_cpu_proc>
f010e7c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (last_fault_va == fault_va && last_faulted_env == cur_env)
f010e7c5:	a1 8c 62 55 f0       	mov    0xf055628c,%eax
f010e7ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e7cd:	75 50                	jne    f010e81f <fault_handler+0x74>
f010e7cf:	a1 98 62 55 f0       	mov    0xf0556298,%eax
f010e7d4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e7d7:	75 46                	jne    f010e81f <fault_handler+0x74>
	{
		num_repeated_fault++ ;
f010e7d9:	a0 94 62 55 f0       	mov    0xf0556294,%al
f010e7de:	40                   	inc    %eax
f010e7df:	a2 94 62 55 f0       	mov    %al,0xf0556294
		if (num_repeated_fault == 3)
f010e7e4:	a0 94 62 55 f0       	mov    0xf0556294,%al
f010e7e9:	3c 03                	cmp    $0x3,%al
f010e7eb:	75 4d                	jne    f010e83a <fault_handler+0x8f>
		{
			print_trapframe(tf);
f010e7ed:	83 ec 0c             	sub    $0xc,%esp
f010e7f0:	ff 75 08             	pushl  0x8(%ebp)
f010e7f3:	e8 bd e9 ff ff       	call   f010d1b5 <print_trapframe>
f010e7f8:	83 c4 10             	add    $0x10,%esp
			panic("Failed to handle fault! fault @ at va = %x from eip = %x causes va (%x) to be faulted for 3 successive times\n", before_last_fault_va, before_last_eip, fault_va);
f010e7fb:	8b 15 88 62 55 f0    	mov    0xf0556288,%edx
f010e801:	a1 90 62 55 f0       	mov    0xf0556290,%eax
f010e806:	83 ec 08             	sub    $0x8,%esp
f010e809:	ff 75 ec             	pushl  -0x14(%ebp)
f010e80c:	52                   	push   %edx
f010e80d:	50                   	push   %eax
f010e80e:	68 78 89 12 f0       	push   $0xf0128978
f010e813:	6a 57                	push   $0x57
f010e815:	68 5b 89 12 f0       	push   $0xf012895b
f010e81a:	e8 fb 1a ff ff       	call   f010031a <_panic>
		}
	}
	else
	{
		before_last_fault_va = last_fault_va;
f010e81f:	a1 8c 62 55 f0       	mov    0xf055628c,%eax
f010e824:	a3 90 62 55 f0       	mov    %eax,0xf0556290
		before_last_eip = last_eip;
f010e829:	a1 84 62 55 f0       	mov    0xf0556284,%eax
f010e82e:	a3 88 62 55 f0       	mov    %eax,0xf0556288
		num_repeated_fault = 0;
f010e833:	c6 05 94 62 55 f0 00 	movb   $0x0,0xf0556294
	}
	last_eip = (uint32)tf->tf_eip;
f010e83a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e83d:	8b 40 30             	mov    0x30(%eax),%eax
f010e840:	a3 84 62 55 f0       	mov    %eax,0xf0556284
	last_fault_va = fault_va ;
f010e845:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e848:	a3 8c 62 55 f0       	mov    %eax,0xf055628c
	last_faulted_env = cur_env;
f010e84d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e850:	a3 98 62 55 f0       	mov    %eax,0xf0556298
	/******************************************************/
	//2017: Check stack overflow for Kernel
	int userTrap = 0;
f010e855:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010e85c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e85f:	8b 40 34             	mov    0x34(%eax),%eax
f010e862:	0f b7 c0             	movzwl %ax,%eax
f010e865:	83 e0 03             	and    $0x3,%eax
f010e868:	83 f8 03             	cmp    $0x3,%eax
f010e86b:	75 07                	jne    f010e874 <fault_handler+0xc9>
		userTrap = 1;
f010e86d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	if (!userTrap)
f010e874:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e878:	0f 85 a9 00 00 00    	jne    f010e927 <fault_handler+0x17c>
	{
		struct cpu* c = mycpu();
f010e87e:	e8 7a 88 ff ff       	call   f01070fd <mycpu>
f010e883:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("trap from KERNEL\n");
		if (cur_env && fault_va >= (uint32)cur_env->kstack && fault_va < (uint32)cur_env->kstack + PAGE_SIZE)
f010e886:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010e88a:	74 2f                	je     f010e8bb <fault_handler+0x110>
f010e88c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e88f:	8b 40 70             	mov    0x70(%eax),%eax
f010e892:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e895:	77 24                	ja     f010e8bb <fault_handler+0x110>
f010e897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e89a:	8b 40 70             	mov    0x70(%eax),%eax
f010e89d:	05 00 10 00 00       	add    $0x1000,%eax
f010e8a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8a5:	76 14                	jbe    f010e8bb <fault_handler+0x110>
			panic("User Kernel Stack: overflow exception!");
f010e8a7:	83 ec 04             	sub    $0x4,%esp
f010e8aa:	68 e8 89 12 f0       	push   $0xf01289e8
f010e8af:	6a 6e                	push   $0x6e
f010e8b1:	68 5b 89 12 f0       	push   $0xf012895b
f010e8b6:	e8 5f 1a ff ff       	call   f010031a <_panic>
		else if (fault_va >= (uint32)c->stack && fault_va < (uint32)c->stack + PAGE_SIZE)
f010e8bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8be:	8b 40 08             	mov    0x8(%eax),%eax
f010e8c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8c4:	0f 87 83 00 00 00    	ja     f010e94d <fault_handler+0x1a2>
f010e8ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8cd:	8b 40 08             	mov    0x8(%eax),%eax
f010e8d0:	05 00 10 00 00       	add    $0x1000,%eax
f010e8d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8d8:	76 73                	jbe    f010e94d <fault_handler+0x1a2>
			panic("Sched Kernel Stack of CPU #%d: overflow exception!", c - CPUS);
f010e8da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8dd:	ba 00 8c 55 f0       	mov    $0xf0558c00,%edx
f010e8e2:	29 d0                	sub    %edx,%eax
f010e8e4:	c1 f8 03             	sar    $0x3,%eax
f010e8e7:	89 c2                	mov    %eax,%edx
f010e8e9:	89 d0                	mov    %edx,%eax
f010e8eb:	c1 e0 02             	shl    $0x2,%eax
f010e8ee:	01 d0                	add    %edx,%eax
f010e8f0:	01 c0                	add    %eax,%eax
f010e8f2:	01 d0                	add    %edx,%eax
f010e8f4:	c1 e0 03             	shl    $0x3,%eax
f010e8f7:	01 d0                	add    %edx,%eax
f010e8f9:	89 c1                	mov    %eax,%ecx
f010e8fb:	c1 e1 0b             	shl    $0xb,%ecx
f010e8fe:	01 c8                	add    %ecx,%eax
f010e900:	c1 e0 05             	shl    $0x5,%eax
f010e903:	01 d0                	add    %edx,%eax
f010e905:	c1 e0 02             	shl    $0x2,%eax
f010e908:	01 d0                	add    %edx,%eax
f010e90a:	01 c0                	add    %eax,%eax
f010e90c:	01 d0                	add    %edx,%eax
f010e90e:	c1 e0 03             	shl    $0x3,%eax
f010e911:	01 d0                	add    %edx,%eax
f010e913:	f7 d8                	neg    %eax
f010e915:	50                   	push   %eax
f010e916:	68 10 8a 12 f0       	push   $0xf0128a10
f010e91b:	6a 70                	push   $0x70
f010e91d:	68 5b 89 12 f0       	push   $0xf012895b
f010e922:	e8 f3 19 ff ff       	call   f010031a <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		//cprintf("trap from USER\n");
		if (fault_va >= USTACKTOP && fault_va < USER_TOP)
f010e927:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010e92e:	76 1d                	jbe    f010e94d <fault_handler+0x1a2>
f010e930:	81 7d ec ff ff bf ee 	cmpl   $0xeebfffff,-0x14(%ebp)
f010e937:	77 14                	ja     f010e94d <fault_handler+0x1a2>
			panic("User: stack underflow exception!");
f010e939:	83 ec 04             	sub    $0x4,%esp
f010e93c:	68 44 8a 12 f0       	push   $0xf0128a44
f010e941:	6a 7b                	push   $0x7b
f010e943:	68 5b 89 12 f0       	push   $0xf012895b
f010e948:	e8 cd 19 ff ff       	call   f010031a <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	//cprintf("curenv = %x\n", curenv);
	struct Env* faulted_env = cur_env;
f010e94d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e950:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (faulted_env == NULL)
f010e953:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e957:	75 25                	jne    f010e97e <fault_handler+0x1d3>
	{
		print_trapframe(tf);
f010e959:	83 ec 0c             	sub    $0xc,%esp
f010e95c:	ff 75 08             	pushl  0x8(%ebp)
f010e95f:	e8 51 e8 ff ff       	call   f010d1b5 <print_trapframe>
f010e964:	83 c4 10             	add    $0x10,%esp
		panic("faulted env == NULL!");
f010e967:	83 ec 04             	sub    $0x4,%esp
f010e96a:	68 65 8a 12 f0       	push   $0xf0128a65
f010e96f:	68 84 00 00 00       	push   $0x84
f010e974:	68 5b 89 12 f0       	push   $0xf012895b
f010e979:	e8 9c 19 ff ff       	call   f010031a <_panic>
	}
	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010e97e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e981:	8b 40 64             	mov    0x64(%eax),%eax
f010e984:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e987:	c1 ea 16             	shr    $0x16,%edx
f010e98a:	c1 e2 02             	shl    $0x2,%edx
f010e98d:	01 d0                	add    %edx,%eax
f010e98f:	8b 00                	mov    (%eax),%eax
f010e991:	83 e0 01             	and    $0x1,%eax
f010e994:	85 c0                	test   %eax,%eax
f010e996:	75 28                	jne    f010e9c0 <fault_handler+0x215>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		//		print_trapframe(tf);

		faulted_env->tableFaultsCounter ++ ;
f010e998:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e99b:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f010e9a1:	8d 50 01             	lea    0x1(%eax),%edx
f010e9a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9a7:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)

		table_fault_handler(faulted_env, fault_va);
f010e9ad:	83 ec 08             	sub    $0x8,%esp
f010e9b0:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9b3:	ff 75 e0             	pushl  -0x20(%ebp)
f010e9b6:	e8 8f 00 00 00       	call   f010ea4a <table_fault_handler>
f010e9bb:	83 c4 10             	add    $0x10,%esp
f010e9be:	eb 7b                	jmp    f010ea3b <fault_handler+0x290>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010e9c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9c3:	8b 40 64             	mov    0x64(%eax),%eax
f010e9c6:	83 ec 08             	sub    $0x8,%esp
f010e9c9:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9cc:	50                   	push   %eax
f010e9cd:	e8 1a a2 ff ff       	call   f0108bec <pt_get_page_permissions>
f010e9d2:	83 c4 10             	add    $0x10,%esp
f010e9d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (perms & PERM_PRESENT)
f010e9d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9db:	83 e0 01             	and    $0x1,%eax
f010e9de:	85 c0                	test   %eax,%eax
f010e9e0:	74 17                	je     f010e9f9 <fault_handler+0x24e>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010e9e2:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9e5:	68 7c 8a 12 f0       	push   $0xf0128a7c
f010e9ea:	68 a1 00 00 00       	push   $0xa1
f010e9ef:	68 5b 89 12 f0       	push   $0xf012895b
f010e9f4:	e8 21 19 ff ff       	call   f010031a <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010e9f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9fc:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010ea02:	8d 50 01             	lea    0x1(%eax),%edx
f010ea05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea08:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ea0e:	e8 76 fd ff ff       	call   f010e789 <isBufferingEnabled>
f010ea13:	84 c0                	test   %al,%al
f010ea15:	74 13                	je     f010ea2a <fault_handler+0x27f>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ea17:	83 ec 08             	sub    $0x8,%esp
f010ea1a:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea1d:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea20:	e8 64 00 00 00       	call   f010ea89 <__page_fault_handler_with_buffering>
f010ea25:	83 c4 10             	add    $0x10,%esp
f010ea28:	eb 11                	jmp    f010ea3b <fault_handler+0x290>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ea2a:	83 ec 08             	sub    $0x8,%esp
f010ea2d:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea30:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea33:	e8 34 00 00 00       	call   f010ea6c <page_fault_handler>
f010ea38:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ea3b:	0f 20 d8             	mov    %cr3,%eax
f010ea3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ea41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ea44:	0f 22 d8             	mov    %eax,%cr3

	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/
}
f010ea47:	90                   	nop
f010ea48:	c9                   	leave  
f010ea49:	c3                   	ret    

f010ea4a <table_fault_handler>:

//=========================
// [2] TABLE FAULT HANDLER:
//=========================
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010ea4a:	55                   	push   %ebp
f010ea4b:	89 e5                	mov    %esp,%ebp
f010ea4d:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010ea50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ea53:	8b 40 64             	mov    0x64(%eax),%eax
f010ea56:	83 ec 04             	sub    $0x4,%esp
f010ea59:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010ea5c:	52                   	push   %edx
f010ea5d:	ff 75 0c             	pushl  0xc(%ebp)
f010ea60:	50                   	push   %eax
f010ea61:	e8 cd 9a ff ff       	call   f0108533 <__static_cpt>
f010ea66:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010ea69:	90                   	nop
f010ea6a:	c9                   	leave  
f010ea6b:	c3                   	ret    

f010ea6c <page_fault_handler>:

//=========================
// [3] PAGE FAULT HANDLER:
//=========================
void page_fault_handler(struct Env * faulted_env, uint32 fault_va)
{
f010ea6c:	55                   	push   %ebp
f010ea6d:	89 e5                	mov    %esp,%ebp
f010ea6f:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24] [3] PAGE FAULT HANDLER
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010ea72:	83 ec 04             	sub    $0x4,%esp
f010ea75:	68 c0 8a 12 f0       	push   $0xf0128ac0
f010ea7a:	68 db 00 00 00       	push   $0xdb
f010ea7f:	68 5b 89 12 f0       	push   $0xf012895b
f010ea84:	e8 91 18 ff ff       	call   f010031a <_panic>

f010ea89 <__page_fault_handler_with_buffering>:
		panic("page_fault_handler() Replacement is not implemented yet...!!");
	}
}

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010ea89:	55                   	push   %ebp
f010ea8a:	89 e5                	mov    %esp,%ebp
f010ea8c:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] PAGE FAULT HANDLER WITH BUFFERING
	// your code is here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010ea8f:	83 ec 04             	sub    $0x4,%esp
f010ea92:	68 f4 8a 12 f0       	push   $0xf0128af4
f010ea97:	68 fc 00 00 00       	push   $0xfc
f010ea9c:	68 5b 89 12 f0       	push   $0xf012895b
f010eaa1:	e8 74 18 ff ff       	call   f010031a <_panic>

f010eaa6 <init_spinlock>:
#include "spinlock.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_spinlock(struct spinlock *lk, char *name)
{
f010eaa6:	55                   	push   %ebp
f010eaa7:	89 e5                	mov    %esp,%ebp
f010eaa9:	83 ec 08             	sub    $0x8,%esp
	strcpy(lk->name, name);
f010eaac:	8b 45 08             	mov    0x8(%ebp),%eax
f010eaaf:	83 c0 04             	add    $0x4,%eax
f010eab2:	83 ec 08             	sub    $0x8,%esp
f010eab5:	ff 75 0c             	pushl  0xc(%ebp)
f010eab8:	50                   	push   %eax
f010eab9:	e8 40 38 01 00       	call   f01222fe <strcpy>
f010eabe:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010eac1:	8b 45 08             	mov    0x8(%ebp),%eax
f010eac4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->cpu = 0;
f010eaca:	8b 45 08             	mov    0x8(%ebp),%eax
f010eacd:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
}
f010ead4:	90                   	nop
f010ead5:	c9                   	leave  
f010ead6:	c3                   	ret    

f010ead7 <acquire_spinlock>:
// Acquire the lock.
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void acquire_spinlock(struct spinlock *lk)
{
f010ead7:	55                   	push   %ebp
f010ead8:	89 e5                	mov    %esp,%ebp
f010eada:	53                   	push   %ebx
f010eadb:	83 ec 14             	sub    $0x14,%esp
	if(holding_spinlock(lk))
f010eade:	8b 45 08             	mov    0x8(%ebp),%eax
f010eae1:	83 ec 0c             	sub    $0xc,%esp
f010eae4:	50                   	push   %eax
f010eae5:	e8 06 02 00 00       	call   f010ecf0 <holding_spinlock>
f010eaea:	83 c4 10             	add    $0x10,%esp
f010eaed:	85 c0                	test   %eax,%eax
f010eaef:	74 18                	je     f010eb09 <acquire_spinlock+0x32>
		panic("acquire_spinlock: lock \"%s\" is already held by the same CPU.", lk->name);
f010eaf1:	8b 45 08             	mov    0x8(%ebp),%eax
f010eaf4:	83 c0 04             	add    $0x4,%eax
f010eaf7:	50                   	push   %eax
f010eaf8:	68 38 8b 12 f0       	push   $0xf0128b38
f010eafd:	6a 1f                	push   $0x1f
f010eaff:	68 75 8b 12 f0       	push   $0xf0128b75
f010eb04:	e8 11 18 ff ff       	call   f010031a <_panic>

	pushcli(); // disable interrupts to avoid deadlock (in case if interrupted from a higher priority (or event handler) just after holding the lock => the handler will stuck in busy-waiting and prevent the other from resuming)
f010eb09:	e8 b2 86 ff ff       	call   f01071c0 <pushcli>

	//cprintf("\nAttempt to acquire SPIN lock [%s] by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// The xchg is atomic.
	while(xchg(&lk->locked, 1) != 0) ;
f010eb0e:	90                   	nop
f010eb0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eb15:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f010eb1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010eb22:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010eb25:	f0 87 02             	lock xchg %eax,(%edx)
f010eb28:	89 45 ec             	mov    %eax,-0x14(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
f010eb2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb2e:	85 c0                	test   %eax,%eax
f010eb30:	75 dd                	jne    f010eb0f <acquire_spinlock+0x38>
	//cprintf("SPIN lock [%s] is ACQUIRED  by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that the critical section's memory
	// references happen after the lock is acquired.
	__sync_synchronize();
f010eb32:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Record info about lock acquisition for debugging.
	lk->cpu = mycpu();
f010eb37:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010eb3a:	e8 be 85 ff ff       	call   f01070fd <mycpu>
f010eb3f:	89 43 44             	mov    %eax,0x44(%ebx)
	getcallerpcs(&lk, lk->pcs);
f010eb42:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb45:	83 c0 48             	add    $0x48,%eax
f010eb48:	83 ec 08             	sub    $0x8,%esp
f010eb4b:	50                   	push   %eax
f010eb4c:	8d 45 08             	lea    0x8(%ebp),%eax
f010eb4f:	50                   	push   %eax
f010eb50:	e8 74 00 00 00       	call   f010ebc9 <getcallerpcs>
f010eb55:	83 c4 10             	add    $0x10,%esp

}
f010eb58:	90                   	nop
f010eb59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010eb5c:	c9                   	leave  
f010eb5d:	c3                   	ret    

f010eb5e <release_spinlock>:

// Release the lock.
void release_spinlock(struct spinlock *lk)
{
f010eb5e:	55                   	push   %ebp
f010eb5f:	89 e5                	mov    %esp,%ebp
f010eb61:	83 ec 08             	sub    $0x8,%esp
	if(!holding_spinlock(lk))
f010eb64:	83 ec 0c             	sub    $0xc,%esp
f010eb67:	ff 75 08             	pushl  0x8(%ebp)
f010eb6a:	e8 81 01 00 00       	call   f010ecf0 <holding_spinlock>
f010eb6f:	83 c4 10             	add    $0x10,%esp
f010eb72:	85 c0                	test   %eax,%eax
f010eb74:	75 26                	jne    f010eb9c <release_spinlock+0x3e>
	{
		printcallstack(lk);
f010eb76:	83 ec 0c             	sub    $0xc,%esp
f010eb79:	ff 75 08             	pushl  0x8(%ebp)
f010eb7c:	e8 08 01 00 00       	call   f010ec89 <printcallstack>
f010eb81:	83 c4 10             	add    $0x10,%esp
		panic("release: lock \"%s\" is either not held or held by another CPU!", lk->name);
f010eb84:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb87:	83 c0 04             	add    $0x4,%eax
f010eb8a:	50                   	push   %eax
f010eb8b:	68 8c 8b 12 f0       	push   $0xf0128b8c
f010eb90:	6a 3b                	push   $0x3b
f010eb92:	68 75 8b 12 f0       	push   $0xf0128b75
f010eb97:	e8 7e 17 ff ff       	call   f010031a <_panic>
	}
	lk->pcs[0] = 0;
f010eb9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb9f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
	lk->cpu = 0;
f010eba6:	8b 45 08             	mov    0x8(%ebp),%eax
f010eba9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that all the stores in the critical
	// section are visible to other cores before the lock is released.
	// Both the C compiler and the hardware may re-order loads and
	// stores; __sync_synchronize() tells them both not to.
	__sync_synchronize();
f010ebb0:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Release the lock, equivalent to lk->locked = 0.
	// This code can't use a C assignment, since it might
	// not be atomic. A real OS would use C atomics here.
	asm volatile("movl $0, %0" : "+m" (lk->locked) : );
f010ebb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebb8:	8b 55 08             	mov    0x8(%ebp),%edx
f010ebbb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	popcli();
f010ebc1:	e8 4c 86 ff ff       	call   f0107212 <popcli>
}
f010ebc6:	90                   	nop
f010ebc7:	c9                   	leave  
f010ebc8:	c3                   	ret    

f010ebc9 <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
int getcallerpcs(void *v, uint32 pcs[])
{
f010ebc9:	55                   	push   %ebp
f010ebca:	89 e5                	mov    %esp,%ebp
f010ebcc:	83 ec 28             	sub    $0x28,%esp
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
f010ebcf:	e8 9c bb ff ff       	call   f010a770 <get_cpu_proc>
f010ebd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct cpu* c = mycpu();
f010ebd7:	e8 21 85 ff ff       	call   f01070fd <mycpu>
f010ebdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ebp = (uint32*)v - 2;
f010ebdf:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebe2:	83 e8 08             	sub    $0x8,%eax
f010ebe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(i = 0; i < 10; i++)
f010ebe8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ebef:	eb 67                	jmp    f010ec58 <getcallerpcs+0x8f>
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ebf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ebf5:	74 67                	je     f010ec5e <getcallerpcs+0x95>
f010ebf7:	81 7d f4 ff ff 7f ef 	cmpl   $0xef7fffff,-0xc(%ebp)
f010ebfe:	76 5e                	jbe    f010ec5e <getcallerpcs+0x95>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec03:	8b 40 08             	mov    0x8(%eax),%eax
f010ec06:	05 00 80 00 00       	add    $0x8000,%eax
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ec0b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec0e:	77 10                	ja     f010ec20 <getcallerpcs+0x57>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec10:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec13:	8b 40 08             	mov    0x8(%eax),%eax
f010ec16:	05 00 90 00 00       	add    $0x9000,%eax
f010ec1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec1e:	77 3e                	ja     f010ec5e <getcallerpcs+0x95>
f010ec20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010ec24:	74 10                	je     f010ec36 <getcallerpcs+0x6d>
				(p && ebp >= (uint32*) (p->kstack + KERNEL_STACK_SIZE)))
f010ec26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec29:	8b 40 70             	mov    0x70(%eax),%eax
f010ec2c:	05 00 80 00 00       	add    $0x8000,%eax
f010ec31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec34:	76 28                	jbe    f010ec5e <getcallerpcs+0x95>
			break;
		pcs[i] = ebp[1];     // saved %eip
f010ec36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec40:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec43:	01 c2                	add    %eax,%edx
f010ec45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec48:	8b 40 04             	mov    0x4(%eax),%eax
f010ec4b:	89 02                	mov    %eax,(%edx)
		ebp = (uint32*)ebp[0]; // saved %ebp
f010ec4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec50:	8b 00                	mov    (%eax),%eax
f010ec52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
f010ec55:	ff 45 f0             	incl   -0x10(%ebp)
f010ec58:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010ec5c:	7e 93                	jle    f010ebf1 <getcallerpcs+0x28>
		pcs[i] = ebp[1];     // saved %eip
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
f010ec5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(; i < 10; i++)
f010ec64:	eb 18                	jmp    f010ec7e <getcallerpcs+0xb5>
		pcs[i] = 0;
f010ec66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec73:	01 d0                	add    %edx,%eax
f010ec75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
	for(; i < 10; i++)
f010ec7b:	ff 45 f0             	incl   -0x10(%ebp)
f010ec7e:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010ec82:	7e e2                	jle    f010ec66 <getcallerpcs+0x9d>
		pcs[i] = 0;
	return length ;
f010ec84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f010ec87:	c9                   	leave  
f010ec88:	c3                   	ret    

f010ec89 <printcallstack>:

void printcallstack(struct spinlock *lk)
{
f010ec89:	55                   	push   %ebp
f010ec8a:	89 e5                	mov    %esp,%ebp
f010ec8c:	83 ec 18             	sub    $0x18,%esp
	cprintf("\nCaller Stack:\n");
f010ec8f:	83 ec 0c             	sub    $0xc,%esp
f010ec92:	68 ca 8b 12 f0       	push   $0xf0128bca
f010ec97:	e8 d0 22 ff ff       	call   f0100f6c <cprintf>
f010ec9c:	83 c4 10             	add    $0x10,%esp
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
f010ec9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010eca2:	83 c0 48             	add    $0x48,%eax
f010eca5:	83 ec 08             	sub    $0x8,%esp
f010eca8:	50                   	push   %eax
f010eca9:	8d 45 08             	lea    0x8(%ebp),%eax
f010ecac:	50                   	push   %eax
f010ecad:	e8 17 ff ff ff       	call   f010ebc9 <getcallerpcs>
f010ecb2:	83 c4 10             	add    $0x10,%esp
f010ecb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < stacklen; ++i) {
f010ecb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ecbf:	eb 24                	jmp    f010ece5 <printcallstack+0x5c>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
f010ecc1:	8b 45 08             	mov    0x8(%ebp),%eax
f010ecc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ecc7:	83 c2 10             	add    $0x10,%edx
f010ecca:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
f010ecce:	83 ec 04             	sub    $0x4,%esp
f010ecd1:	50                   	push   %eax
f010ecd2:	ff 75 f4             	pushl  -0xc(%ebp)
f010ecd5:	68 da 8b 12 f0       	push   $0xf0128bda
f010ecda:	e8 8d 22 ff ff       	call   f0100f6c <cprintf>
f010ecdf:	83 c4 10             	add    $0x10,%esp

void printcallstack(struct spinlock *lk)
{
	cprintf("\nCaller Stack:\n");
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
	for (int i = 0; i < stacklen; ++i) {
f010ece2:	ff 45 f4             	incl   -0xc(%ebp)
f010ece5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ece8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eceb:	7c d4                	jl     f010ecc1 <printcallstack+0x38>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
	}
}
f010eced:	90                   	nop
f010ecee:	c9                   	leave  
f010ecef:	c3                   	ret    

f010ecf0 <holding_spinlock>:
// Check whether this cpu is holding the lock.
int holding_spinlock(struct spinlock *lock)
{
f010ecf0:	55                   	push   %ebp
f010ecf1:	89 e5                	mov    %esp,%ebp
f010ecf3:	53                   	push   %ebx
f010ecf4:	83 ec 14             	sub    $0x14,%esp
	int r;
	pushcli();
f010ecf7:	e8 c4 84 ff ff       	call   f01071c0 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
f010ecfc:	8b 45 08             	mov    0x8(%ebp),%eax
f010ecff:	8b 00                	mov    (%eax),%eax
f010ed01:	85 c0                	test   %eax,%eax
f010ed03:	74 16                	je     f010ed1b <holding_spinlock+0x2b>
f010ed05:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed08:	8b 58 44             	mov    0x44(%eax),%ebx
f010ed0b:	e8 ed 83 ff ff       	call   f01070fd <mycpu>
f010ed10:	39 c3                	cmp    %eax,%ebx
f010ed12:	75 07                	jne    f010ed1b <holding_spinlock+0x2b>
f010ed14:	b8 01 00 00 00       	mov    $0x1,%eax
f010ed19:	eb 05                	jmp    f010ed20 <holding_spinlock+0x30>
f010ed1b:	b8 00 00 00 00       	mov    $0x0,%eax
f010ed20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	popcli();
f010ed23:	e8 ea 84 ff ff       	call   f0107212 <popcli>
	return r;
f010ed28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ed2b:	83 c4 14             	add    $0x14,%esp
f010ed2e:	5b                   	pop    %ebx
f010ed2f:	5d                   	pop    %ebp
f010ed30:	c3                   	ret    

f010ed31 <init_sleeplock>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_sleeplock(struct sleeplock *lk, char *name)
{
f010ed31:	55                   	push   %ebp
f010ed32:	89 e5                	mov    %esp,%ebp
f010ed34:	83 ec 08             	sub    $0x8,%esp
	init_channel(&(lk->chan), "sleep lock channel");
f010ed37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed3a:	83 c0 74             	add    $0x74,%eax
f010ed3d:	83 ec 08             	sub    $0x8,%esp
f010ed40:	68 ec 8b 12 f0       	push   $0xf0128bec
f010ed45:	50                   	push   %eax
f010ed46:	e8 de 00 00 00       	call   f010ee29 <init_channel>
f010ed4b:	83 c4 10             	add    $0x10,%esp
	init_spinlock(&(lk->lk), "lock of sleep lock");
f010ed4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed51:	83 c0 04             	add    $0x4,%eax
f010ed54:	83 ec 08             	sub    $0x8,%esp
f010ed57:	68 ff 8b 12 f0       	push   $0xf0128bff
f010ed5c:	50                   	push   %eax
f010ed5d:	e8 44 fd ff ff       	call   f010eaa6 <init_spinlock>
f010ed62:	83 c4 10             	add    $0x10,%esp
	strcpy(lk->name, name);
f010ed65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed68:	05 c4 00 00 00       	add    $0xc4,%eax
f010ed6d:	83 ec 08             	sub    $0x8,%esp
f010ed70:	ff 75 0c             	pushl  0xc(%ebp)
f010ed73:	50                   	push   %eax
f010ed74:	e8 85 35 01 00       	call   f01222fe <strcpy>
f010ed79:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010ed7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->pid = 0;
f010ed85:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed88:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
f010ed8f:	00 00 00 
}
f010ed92:	90                   	nop
f010ed93:	c9                   	leave  
f010ed94:	c3                   	ret    

f010ed95 <holding_sleeplock>:
int holding_sleeplock(struct sleeplock *lk)
{
f010ed95:	55                   	push   %ebp
f010ed96:	89 e5                	mov    %esp,%ebp
f010ed98:	53                   	push   %ebx
f010ed99:	83 ec 14             	sub    $0x14,%esp
	int r;
	acquire_spinlock(&(lk->lk));
f010ed9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed9f:	83 c0 04             	add    $0x4,%eax
f010eda2:	83 ec 0c             	sub    $0xc,%esp
f010eda5:	50                   	push   %eax
f010eda6:	e8 2c fd ff ff       	call   f010ead7 <acquire_spinlock>
f010edab:	83 c4 10             	add    $0x10,%esp
	r = lk->locked && (lk->pid == get_cpu_proc()->env_id);
f010edae:	8b 45 08             	mov    0x8(%ebp),%eax
f010edb1:	8b 00                	mov    (%eax),%eax
f010edb3:	85 c0                	test   %eax,%eax
f010edb5:	74 1c                	je     f010edd3 <holding_sleeplock+0x3e>
f010edb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010edba:	8b 98 04 01 00 00    	mov    0x104(%eax),%ebx
f010edc0:	e8 ab b9 ff ff       	call   f010a770 <get_cpu_proc>
f010edc5:	8b 40 10             	mov    0x10(%eax),%eax
f010edc8:	39 c3                	cmp    %eax,%ebx
f010edca:	75 07                	jne    f010edd3 <holding_sleeplock+0x3e>
f010edcc:	b8 01 00 00 00       	mov    $0x1,%eax
f010edd1:	eb 05                	jmp    f010edd8 <holding_sleeplock+0x43>
f010edd3:	b8 00 00 00 00       	mov    $0x0,%eax
f010edd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	release_spinlock(&(lk->lk));
f010eddb:	8b 45 08             	mov    0x8(%ebp),%eax
f010edde:	83 c0 04             	add    $0x4,%eax
f010ede1:	83 ec 0c             	sub    $0xc,%esp
f010ede4:	50                   	push   %eax
f010ede5:	e8 74 fd ff ff       	call   f010eb5e <release_spinlock>
f010edea:	83 c4 10             	add    $0x10,%esp
	return r;
f010eded:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010edf0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010edf3:	c9                   	leave  
f010edf4:	c3                   	ret    

f010edf5 <acquire_sleeplock>:
//==========================================================================

void acquire_sleeplock(struct sleeplock *lk)
{
f010edf5:	55                   	push   %ebp
f010edf6:	89 e5                	mov    %esp,%ebp
f010edf8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #13] [4] LOCKS - acquire_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("acquire_sleeplock is not implemented yet");
f010edfb:	83 ec 04             	sub    $0x4,%esp
f010edfe:	68 14 8c 12 f0       	push   $0xf0128c14
f010ee03:	6a 25                	push   $0x25
f010ee05:	68 3d 8c 12 f0       	push   $0xf0128c3d
f010ee0a:	e8 0b 15 ff ff       	call   f010031a <_panic>

f010ee0f <release_sleeplock>:
	//Your Code is Here...

}

void release_sleeplock(struct sleeplock *lk)
{
f010ee0f:	55                   	push   %ebp
f010ee10:	89 e5                	mov    %esp,%ebp
f010ee12:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #14] [4] LOCKS - release_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("release_sleeplock is not implemented yet");
f010ee15:	83 ec 04             	sub    $0x4,%esp
f010ee18:	68 54 8c 12 f0       	push   $0xf0128c54
f010ee1d:	6a 2e                	push   $0x2e
f010ee1f:	68 3d 8c 12 f0       	push   $0xf0128c3d
f010ee24:	e8 f1 14 ff ff       	call   f010031a <_panic>

f010ee29 <init_channel>:
//===============================
// 1) INITIALIZE THE CHANNEL:
//===============================
// initialize its lock & queue
void init_channel(struct Channel *chan, char *name)
{
f010ee29:	55                   	push   %ebp
f010ee2a:	89 e5                	mov    %esp,%ebp
f010ee2c:	83 ec 08             	sub    $0x8,%esp
	strcpy(chan->name, name);
f010ee2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee32:	83 c0 10             	add    $0x10,%eax
f010ee35:	83 ec 08             	sub    $0x8,%esp
f010ee38:	ff 75 0c             	pushl  0xc(%ebp)
f010ee3b:	50                   	push   %eax
f010ee3c:	e8 bd 34 01 00       	call   f01222fe <strcpy>
f010ee41:	83 c4 10             	add    $0x10,%esp
	init_queue(&(chan->queue));
f010ee44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee47:	83 ec 0c             	sub    $0xc,%esp
f010ee4a:	50                   	push   %eax
f010ee4b:	e8 e7 60 ff ff       	call   f0104f37 <init_queue>
f010ee50:	83 c4 10             	add    $0x10,%esp
}
f010ee53:	90                   	nop
f010ee54:	c9                   	leave  
f010ee55:	c3                   	ret    

f010ee56 <sleep>:
//===============================
// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
// Ref: xv6-x86 OS code
void sleep(struct Channel *chan, struct spinlock* lk)
{
f010ee56:	55                   	push   %ebp
f010ee57:	89 e5                	mov    %esp,%ebp
f010ee59:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #10] [4] LOCKS - sleep
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("sleep is not implemented yet");
f010ee5c:	83 ec 04             	sub    $0x4,%esp
f010ee5f:	68 80 8c 12 f0       	push   $0xf0128c80
f010ee64:	6a 21                	push   $0x21
f010ee66:	68 9d 8c 12 f0       	push   $0xf0128c9d
f010ee6b:	e8 aa 14 ff ff       	call   f010031a <_panic>

f010ee70 <wakeup_one>:
// Wake up ONE process sleeping on chan.
// The qlock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes
void wakeup_one(struct Channel *chan)
{
f010ee70:	55                   	push   %ebp
f010ee71:	89 e5                	mov    %esp,%ebp
f010ee73:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #11] [4] LOCKS - wakeup_one
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wakeup_one is not implemented yet");
f010ee76:	83 ec 04             	sub    $0x4,%esp
f010ee79:	68 b4 8c 12 f0       	push   $0xf0128cb4
f010ee7e:	6a 31                	push   $0x31
f010ee80:	68 9d 8c 12 f0       	push   $0xf0128c9d
f010ee85:	e8 90 14 ff ff       	call   f010031a <_panic>

f010ee8a <wakeup_all>:
// The queues lock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes

void wakeup_all(struct Channel *chan)
{
f010ee8a:	55                   	push   %ebp
f010ee8b:	89 e5                	mov    %esp,%ebp
f010ee8d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #12] [4] LOCKS - wakeup_all
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wakeup_all is not implemented yet");
f010ee90:	83 ec 04             	sub    $0x4,%esp
f010ee93:	68 d8 8c 12 f0       	push   $0xf0128cd8
f010ee98:	6a 41                	push   $0x41
f010ee9a:	68 9d 8c 12 f0       	push   $0xf0128c9d
f010ee9f:	e8 76 14 ff ff       	call   f010031a <_panic>

f010eea4 <init_ksemaphore>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_ksemaphore(struct ksemaphore *ksem, int value, char *name)
{
f010eea4:	55                   	push   %ebp
f010eea5:	89 e5                	mov    %esp,%ebp
f010eea7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("init_ksemaphore is not implemented yet");
f010eeaa:	83 ec 04             	sub    $0x4,%esp
f010eead:	68 fc 8c 12 f0       	push   $0xf0128cfc
f010eeb2:	6a 13                	push   $0x13
f010eeb4:	68 23 8d 12 f0       	push   $0xf0128d23
f010eeb9:	e8 5c 14 ff ff       	call   f010031a <_panic>

f010eebe <wait_ksemaphore>:
	//Your Code is Here...
}

void wait_ksemaphore(struct ksemaphore *ksem)
{
f010eebe:	55                   	push   %ebp
f010eebf:	89 e5                	mov    %esp,%ebp
f010eec1:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wait_ksemaphore is not implemented yet");
f010eec4:	83 ec 04             	sub    $0x4,%esp
f010eec7:	68 3c 8d 12 f0       	push   $0xf0128d3c
f010eecc:	6a 1b                	push   $0x1b
f010eece:	68 23 8d 12 f0       	push   $0xf0128d23
f010eed3:	e8 42 14 ff ff       	call   f010031a <_panic>

f010eed8 <signal_ksemaphore>:
	//Your Code is Here...

}

void signal_ksemaphore(struct ksemaphore *ksem)
{
f010eed8:	55                   	push   %ebp
f010eed9:	89 e5                	mov    %esp,%ebp
f010eedb:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("signal_ksemaphore is not implemented yet");
f010eede:	83 ec 04             	sub    $0x4,%esp
f010eee1:	68 64 8d 12 f0       	push   $0xf0128d64
f010eee6:	6a 24                	push   $0x24
f010eee8:	68 23 8d 12 f0       	push   $0xf0128d23
f010eeed:	e8 28 14 ff ff       	call   f010031a <_panic>

f010eef2 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010eef2:	55                   	push   %ebp
f010eef3:	89 e5                	mov    %esp,%ebp
f010eef5:	c7 05 b0 8f 55 f0 01 	movl   $0x1,0xf0558fb0
f010eefc:	00 00 00 
f010eeff:	90                   	nop
f010ef00:	5d                   	pop    %ebp
f010ef01:	c3                   	ret    

f010ef02 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010ef02:	55                   	push   %ebp
f010ef03:	89 e5                	mov    %esp,%ebp
f010ef05:	c7 05 b0 8f 55 f0 02 	movl   $0x2,0xf0558fb0
f010ef0c:	00 00 00 
f010ef0f:	90                   	nop
f010ef10:	5d                   	pop    %ebp
f010ef11:	c3                   	ret    

f010ef12 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010ef12:	55                   	push   %ebp
f010ef13:	89 e5                	mov    %esp,%ebp
f010ef15:	c7 05 b0 8f 55 f0 03 	movl   $0x3,0xf0558fb0
f010ef1c:	00 00 00 
f010ef1f:	90                   	nop
f010ef20:	5d                   	pop    %ebp
f010ef21:	c3                   	ret    

f010ef22 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010ef22:	55                   	push   %ebp
f010ef23:	89 e5                	mov    %esp,%ebp
f010ef25:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f010ef2a:	83 f8 01             	cmp    $0x1,%eax
f010ef2d:	75 04                	jne    f010ef33 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010ef2f:	b0 01                	mov    $0x1,%al
f010ef31:	eb 02                	jmp    f010ef35 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010ef33:	b0 00                	mov    $0x0,%al
f010ef35:	5d                   	pop    %ebp
f010ef36:	c3                   	ret    

f010ef37 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010ef37:	55                   	push   %ebp
f010ef38:	89 e5                	mov    %esp,%ebp
f010ef3a:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f010ef3f:	83 f8 02             	cmp    $0x2,%eax
f010ef42:	75 04                	jne    f010ef48 <isKHeapPlacementStrategyBESTFIT+0x11>
f010ef44:	b0 01                	mov    $0x1,%al
f010ef46:	eb 02                	jmp    f010ef4a <isKHeapPlacementStrategyBESTFIT+0x13>
f010ef48:	b0 00                	mov    $0x0,%al
f010ef4a:	5d                   	pop    %ebp
f010ef4b:	c3                   	ret    

f010ef4c <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010ef4c:	55                   	push   %ebp
f010ef4d:	89 e5                	mov    %esp,%ebp
f010ef4f:	a1 b0 8f 55 f0       	mov    0xf0558fb0,%eax
f010ef54:	83 f8 03             	cmp    $0x3,%eax
f010ef57:	75 04                	jne    f010ef5d <isKHeapPlacementStrategyNEXTFIT+0x11>
f010ef59:	b0 01                	mov    $0x1,%al
f010ef5b:	eb 02                	jmp    f010ef5f <isKHeapPlacementStrategyNEXTFIT+0x13>
f010ef5d:	b0 00                	mov    $0x0,%al
f010ef5f:	5d                   	pop    %ebp
f010ef60:	c3                   	ret    

f010ef61 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010ef61:	55                   	push   %ebp
f010ef62:	89 e5                	mov    %esp,%ebp
f010ef64:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010ef67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ef6e:	eb 26                	jmp    f010ef96 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010ef70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ef73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ef7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef7d:	01 c2                	add    %eax,%edx
f010ef7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ef82:	40                   	inc    %eax
f010ef83:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ef8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef8d:	01 c8                	add    %ecx,%eax
f010ef8f:	8b 00                	mov    (%eax),%eax
f010ef91:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010ef93:	ff 45 f4             	incl   -0xc(%ebp)
f010ef96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ef99:	48                   	dec    %eax
f010ef9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ef9d:	7f d1                	jg     f010ef70 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010ef9f:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010efa2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010efa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010efb0:	eb 35                	jmp    f010efe7 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010efb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010efb5:	89 d0                	mov    %edx,%eax
f010efb7:	01 c0                	add    %eax,%eax
f010efb9:	01 d0                	add    %edx,%eax
f010efbb:	c1 e0 02             	shl    $0x2,%eax
f010efbe:	05 c0 dc 17 f0       	add    $0xf017dcc0,%eax
f010efc3:	8b 10                	mov    (%eax),%edx
f010efc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010efc8:	8b 00                	mov    (%eax),%eax
f010efca:	83 ec 08             	sub    $0x8,%esp
f010efcd:	52                   	push   %edx
f010efce:	50                   	push   %eax
f010efcf:	e8 e7 33 01 00       	call   f01223bb <strcmp>
f010efd4:	83 c4 10             	add    $0x10,%esp
f010efd7:	85 c0                	test   %eax,%eax
f010efd9:	75 09                	jne    f010efe4 <tst_handler+0x83>
		{
			test_found = 1;
f010efdb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010efe2:	eb 0f                	jmp    f010eff3 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010efe4:	ff 45 ec             	incl   -0x14(%ebp)
f010efe7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010efea:	a1 74 dd 17 f0       	mov    0xf017dd74,%eax
f010efef:	39 c2                	cmp    %eax,%edx
f010eff1:	72 bf                	jb     f010efb2 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010eff3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eff7:	74 29                	je     f010f022 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010eff9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010effc:	89 d0                	mov    %edx,%eax
f010effe:	01 c0                	add    %eax,%eax
f010f000:	01 d0                	add    %edx,%eax
f010f002:	c1 e0 02             	shl    $0x2,%eax
f010f005:	05 c8 dc 17 f0       	add    $0xf017dcc8,%eax
f010f00a:	8b 00                	mov    (%eax),%eax
f010f00c:	83 ec 08             	sub    $0x8,%esp
f010f00f:	ff 75 0c             	pushl  0xc(%ebp)
f010f012:	ff 75 08             	pushl  0x8(%ebp)
f010f015:	ff d0                	call   *%eax
f010f017:	83 c4 10             	add    $0x10,%esp
f010f01a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010f01d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f020:	eb 1b                	jmp    f010f03d <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010f022:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f025:	8b 00                	mov    (%eax),%eax
f010f027:	83 ec 08             	sub    $0x8,%esp
f010f02a:	50                   	push   %eax
f010f02b:	68 a4 90 12 f0       	push   $0xf01290a4
f010f030:	e8 37 1f ff ff       	call   f0100f6c <cprintf>
f010f035:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f038:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010f03d:	c9                   	leave  
f010f03e:	c3                   	ret    

f010f03f <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010f03f:	55                   	push   %ebp
f010f040:	89 e5                	mov    %esp,%ebp
f010f042:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010f045:	e8 34 0b 01 00       	call   f011fb7e <test_three_creation_functions>
	return 0;
f010f04a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f04f:	c9                   	leave  
f010f050:	c3                   	ret    

f010f051 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010f051:	55                   	push   %ebp
f010f052:	89 e5                	mov    %esp,%ebp
f010f054:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010f057:	e8 76 9a 00 00       	call   f0118ad2 <test_priority_normal_and_higher>
	return 0;
f010f05c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f061:	c9                   	leave  
f010f062:	c3                   	ret    

f010f063 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010f063:	55                   	push   %ebp
f010f064:	89 e5                	mov    %esp,%ebp
f010f066:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010f069:	e8 ce a4 00 00       	call   f011953c <test_priority_normal_and_lower>
	return 0;
f010f06e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f073:	c9                   	leave  
f010f074:	c3                   	ret    

f010f075 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010f075:	55                   	push   %ebp
f010f076:	89 e5                	mov    %esp,%ebp
f010f078:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010f07b:	e8 b6 0c 01 00       	call   f011fd36 <test_kfreeall>
	return 0;
f010f080:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f085:	c9                   	leave  
f010f086:	c3                   	ret    

f010f087 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010f087:	55                   	push   %ebp
f010f088:	89 e5                	mov    %esp,%ebp
f010f08a:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010f08d:	e8 c1 0c 01 00       	call   f011fd53 <test_kexpand>
	return 0;
f010f092:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f097:	c9                   	leave  
f010f098:	c3                   	ret    

f010f099 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010f099:	55                   	push   %ebp
f010f09a:	89 e5                	mov    %esp,%ebp
f010f09c:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010f09f:	e8 cc 0c 01 00       	call   f011fd70 <test_kshrink>
	return 0;
f010f0a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0a9:	c9                   	leave  
f010f0aa:	c3                   	ret    

f010f0ab <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010f0ab:	55                   	push   %ebp
f010f0ac:	89 e5                	mov    %esp,%ebp
f010f0ae:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010f0b1:	e8 d7 0c 01 00       	call   f011fd8d <test_kfreelast>
	return 0;
f010f0b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0bb:	c9                   	leave  
f010f0bc:	c3                   	ret    

f010f0bd <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010f0bd:	55                   	push   %ebp
f010f0be:	89 e5                	mov    %esp,%ebp
f010f0c0:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010f0c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f0c6:	83 c0 04             	add    $0x4,%eax
f010f0c9:	8b 00                	mov    (%eax),%eax
f010f0cb:	83 ec 04             	sub    $0x4,%esp
f010f0ce:	6a 0a                	push   $0xa
f010f0d0:	6a 00                	push   $0x0
f010f0d2:	50                   	push   %eax
f010f0d3:	e8 37 35 01 00       	call   f012260f <strtol>
f010f0d8:	83 c4 10             	add    $0x10,%esp
f010f0db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010f0de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010f0e5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
f010f0ec:	83 ec 0c             	sub    $0xc,%esp
f010f0ef:	68 60 64 55 f0       	push   $0xf0556460
f010f0f4:	e8 de f9 ff ff       	call   f010ead7 <acquire_spinlock>
f010f0f9:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f0fc:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f010f101:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f104:	eb 3b                	jmp    f010f141 <tst_sc_MLFQ+0x84>
			{
			if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010f106:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f109:	83 c0 20             	add    $0x20,%eax
f010f10c:	83 ec 08             	sub    $0x8,%esp
f010f10f:	68 b7 90 12 f0       	push   $0xf01290b7
f010f114:	50                   	push   %eax
f010f115:	e8 a1 32 01 00       	call   f01223bb <strcmp>
f010f11a:	83 c4 10             	add    $0x10,%esp
f010f11d:	85 c0                	test   %eax,%eax
f010f11f:	75 12                	jne    f010f133 <tst_sc_MLFQ+0x76>
			{
				if (firstTime)
f010f121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f125:	74 07                	je     f010f12e <tst_sc_MLFQ+0x71>
					firstTime = 0;
f010f127:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cnt++ ;
f010f12e:	ff 45 f4             	incl   -0xc(%ebp)
f010f131:	eb 06                	jmp    f010f139 <tst_sc_MLFQ+0x7c>
			}
			else if (!firstTime)
f010f133:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f137:	74 31                	je     f010f16a <tst_sc_MLFQ+0xad>
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f139:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f010f13e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f141:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f145:	74 08                	je     f010f14f <tst_sc_MLFQ+0x92>
f010f147:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f14a:	8b 40 08             	mov    0x8(%eax),%eax
f010f14d:	eb 05                	jmp    f010f154 <tst_sc_MLFQ+0x97>
f010f14f:	b8 00 00 00 00       	mov    $0x0,%eax
f010f154:	a3 e8 64 55 f0       	mov    %eax,0xf05564e8
f010f159:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f010f15e:	85 c0                	test   %eax,%eax
f010f160:	75 a4                	jne    f010f106 <tst_sc_MLFQ+0x49>
f010f162:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f166:	75 9e                	jne    f010f106 <tst_sc_MLFQ+0x49>
f010f168:	eb 01                	jmp    f010f16b <tst_sc_MLFQ+0xae>
				if (firstTime)
					firstTime = 0;
				cnt++ ;
			}
			else if (!firstTime)
				break;
f010f16a:	90                   	nop
			}
		if(cnt == numOfSlave2)
f010f16b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f16e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010f171:	75 12                	jne    f010f185 <tst_sc_MLFQ+0xc8>
		{
			cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010f173:	83 ec 0c             	sub    $0xc,%esp
f010f176:	68 c0 90 12 f0       	push   $0xf01290c0
f010f17b:	e8 ec 1d ff ff       	call   f0100f6c <cprintf>
f010f180:	83 c4 10             	add    $0x10,%esp
f010f183:	eb 17                	jmp    f010f19c <tst_sc_MLFQ+0xdf>
		}
		else
		{
			panic("MLFQScenario# failed\n");
f010f185:	83 ec 04             	sub    $0x4,%esp
f010f188:	68 f9 90 12 f0       	push   $0xf01290f9
f010f18d:	68 9b 00 00 00       	push   $0x9b
f010f192:	68 0f 91 12 f0       	push   $0xf012910f
f010f197:	e8 7e 11 ff ff       	call   f010031a <_panic>
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f010f19c:	83 ec 0c             	sub    $0xc,%esp
f010f19f:	68 60 64 55 f0       	push   $0xf0556460
f010f1a4:	e8 b5 f9 ff ff       	call   f010eb5e <release_spinlock>
f010f1a9:	83 c4 10             	add    $0x10,%esp
	return 0;
f010f1ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f1b1:	c9                   	leave  
f010f1b2:	c3                   	ret    

f010f1b3 <tst_bsd_nice>:


/*2023*/
int tst_bsd_nice(int number_of_arguments, char **arguments)
{
f010f1b3:	55                   	push   %ebp
f010f1b4:	89 e5                	mov    %esp,%ebp
f010f1b6:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments != 2)
f010f1b9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f1bd:	74 17                	je     f010f1d6 <tst_bsd_nice+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst bsd_nice <testnumber>\n");
f010f1bf:	83 ec 0c             	sub    $0xc,%esp
f010f1c2:	68 28 91 12 f0       	push   $0xf0129128
f010f1c7:	e8 a0 1d ff ff       	call   f0100f6c <cprintf>
f010f1cc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f1cf:	b8 00 00 00 00       	mov    $0x0,%eax
f010f1d4:	eb 45                	jmp    f010f21b <tst_bsd_nice+0x68>
	}
	int testNumber = strtol(arguments[1], NULL, 10);
f010f1d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f1d9:	83 c0 04             	add    $0x4,%eax
f010f1dc:	8b 00                	mov    (%eax),%eax
f010f1de:	83 ec 04             	sub    $0x4,%esp
f010f1e1:	6a 0a                	push   $0xa
f010f1e3:	6a 00                	push   $0x0
f010f1e5:	50                   	push   %eax
f010f1e6:	e8 24 34 01 00       	call   f012260f <strtol>
f010f1eb:	83 c4 10             	add    $0x10,%esp
f010f1ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	switch (testNumber)
f010f1f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f1f4:	83 f8 01             	cmp    $0x1,%eax
f010f1f7:	74 10                	je     f010f209 <tst_bsd_nice+0x56>
f010f1f9:	83 f8 02             	cmp    $0x2,%eax
f010f1fc:	74 12                	je     f010f210 <tst_bsd_nice+0x5d>
f010f1fe:	85 c0                	test   %eax,%eax
f010f200:	75 14                	jne    f010f216 <tst_bsd_nice+0x63>
	{
	case 0:
		test_bsd_nice_0();
f010f202:	e8 79 0e 01 00       	call   f0120080 <test_bsd_nice_0>
		break;
f010f207:	eb 0d                	jmp    f010f216 <tst_bsd_nice+0x63>
	case 1:
		test_bsd_nice_1();
f010f209:	e8 fc 10 01 00       	call   f012030a <test_bsd_nice_1>
		break;
f010f20e:	eb 06                	jmp    f010f216 <tst_bsd_nice+0x63>
	case 2:
		test_bsd_nice_2();
f010f210:	e8 09 13 01 00       	call   f012051e <test_bsd_nice_2>
		break;
f010f215:	90                   	nop
	}
	return 0;
f010f216:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f21b:	c9                   	leave  
f010f21c:	c3                   	ret    

f010f21d <tst_str2lower>:

int tst_str2lower(int number_of_arguments, char **arguments)
{
f010f21d:	55                   	push   %ebp
f010f21e:	89 e5                	mov    %esp,%ebp
f010f220:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 1)
f010f223:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010f227:	74 17                	je     f010f240 <tst_str2lower+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst str2lower\n");
f010f229:	83 ec 0c             	sub    $0xc,%esp
f010f22c:	68 68 91 12 f0       	push   $0xf0129168
f010f231:	e8 36 1d ff ff       	call   f0100f6c <cprintf>
f010f236:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f239:	b8 00 00 00 00       	mov    $0x0,%eax
f010f23e:	eb 0a                	jmp    f010f24a <tst_str2lower+0x2d>
	}

	test_str2lower_function();
f010f240:	e8 67 43 00 00       	call   f01135ac <test_str2lower_function>
	return 0;
f010f245:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f24a:	c9                   	leave  
f010f24b:	c3                   	ret    

f010f24c <tst_autocomplete>:

int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010f24c:	55                   	push   %ebp
f010f24d:	89 e5                	mov    %esp,%ebp
f010f24f:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010f252:	e8 8b 3f 00 00       	call   f01131e2 <TestAutoCompleteCommand>
f010f257:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010f25a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f25f:	c9                   	leave  
f010f260:	c3                   	ret    

f010f261 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010f261:	55                   	push   %ebp
f010f262:	89 e5                	mov    %esp,%ebp
f010f264:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f267:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f26b:	74 1a                	je     f010f287 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010f26d:	83 ec 0c             	sub    $0xc,%esp
f010f270:	68 9c 91 12 f0       	push   $0xf012919c
f010f275:	e8 f2 1c ff ff       	call   f0100f6c <cprintf>
f010f27a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f27d:	b8 00 00 00 00       	mov    $0x0,%eax
f010f282:	e9 2f 01 00 00       	jmp    f010f3b6 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010f287:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f28a:	83 c0 04             	add    $0x4,%eax
f010f28d:	8b 00                	mov    (%eax),%eax
f010f28f:	83 ec 08             	sub    $0x8,%esp
f010f292:	68 d9 91 12 f0       	push   $0xf01291d9
f010f297:	50                   	push   %eax
f010f298:	e8 1e 31 01 00       	call   f01223bb <strcmp>
f010f29d:	83 c4 10             	add    $0x10,%esp
f010f2a0:	85 c0                	test   %eax,%eax
f010f2a2:	75 0a                	jne    f010f2ae <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010f2a4:	e8 f4 07 00 00       	call   f010fa9d <test_initialize_dynamic_allocator>
f010f2a9:	e9 03 01 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010f2ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2b1:	83 c0 04             	add    $0x4,%eax
f010f2b4:	8b 00                	mov    (%eax),%eax
f010f2b6:	83 ec 08             	sub    $0x8,%esp
f010f2b9:	68 de 91 12 f0       	push   $0xf01291de
f010f2be:	50                   	push   %eax
f010f2bf:	e8 f7 30 01 00       	call   f01223bb <strcmp>
f010f2c4:	83 c4 10             	add    $0x10,%esp
f010f2c7:	85 c0                	test   %eax,%eax
f010f2c9:	75 0a                	jne    f010f2d5 <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010f2cb:	e8 9d 0c 00 00       	call   f010ff6d <test_alloc_block_FF>
f010f2d0:	e9 dc 00 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010f2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2d8:	83 c0 04             	add    $0x4,%eax
f010f2db:	8b 00                	mov    (%eax),%eax
f010f2dd:	83 ec 08             	sub    $0x8,%esp
f010f2e0:	68 e6 91 12 f0       	push   $0xf01291e6
f010f2e5:	50                   	push   %eax
f010f2e6:	e8 d0 30 01 00       	call   f01223bb <strcmp>
f010f2eb:	83 c4 10             	add    $0x10,%esp
f010f2ee:	85 c0                	test   %eax,%eax
f010f2f0:	75 0a                	jne    f010f2fc <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010f2f2:	e8 93 11 00 00       	call   f011048a <test_alloc_block_BF>
f010f2f7:	e9 b5 00 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010f2fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2ff:	83 c0 04             	add    $0x4,%eax
f010f302:	8b 00                	mov    (%eax),%eax
f010f304:	83 ec 08             	sub    $0x8,%esp
f010f307:	68 ee 91 12 f0       	push   $0xf01291ee
f010f30c:	50                   	push   %eax
f010f30d:	e8 a9 30 01 00       	call   f01223bb <strcmp>
f010f312:	83 c4 10             	add    $0x10,%esp
f010f315:	85 c0                	test   %eax,%eax
f010f317:	75 0a                	jne    f010f323 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010f319:	e8 ab 16 00 00       	call   f01109c9 <test_alloc_block_NF>
f010f31e:	e9 8e 00 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010f323:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f326:	83 c0 04             	add    $0x4,%eax
f010f329:	8b 00                	mov    (%eax),%eax
f010f32b:	83 ec 08             	sub    $0x8,%esp
f010f32e:	68 f6 91 12 f0       	push   $0xf01291f6
f010f333:	50                   	push   %eax
f010f334:	e8 82 30 01 00       	call   f01223bb <strcmp>
f010f339:	83 c4 10             	add    $0x10,%esp
f010f33c:	85 c0                	test   %eax,%eax
f010f33e:	75 07                	jne    f010f347 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010f340:	e8 8a 16 00 00       	call   f01109cf <test_free_block_FF>
f010f345:	eb 6a                	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010f347:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f34a:	83 c0 04             	add    $0x4,%eax
f010f34d:	8b 00                	mov    (%eax),%eax
f010f34f:	83 ec 08             	sub    $0x8,%esp
f010f352:	68 fd 91 12 f0       	push   $0xf01291fd
f010f357:	50                   	push   %eax
f010f358:	e8 5e 30 01 00       	call   f01223bb <strcmp>
f010f35d:	83 c4 10             	add    $0x10,%esp
f010f360:	85 c0                	test   %eax,%eax
f010f362:	75 07                	jne    f010f36b <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010f364:	e8 cd 22 00 00       	call   f0111636 <test_free_block_BF>
f010f369:	eb 46                	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010f36b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f36e:	83 c0 04             	add    $0x4,%eax
f010f371:	8b 00                	mov    (%eax),%eax
f010f373:	83 ec 08             	sub    $0x8,%esp
f010f376:	68 04 92 12 f0       	push   $0xf0129204
f010f37b:	50                   	push   %eax
f010f37c:	e8 3a 30 01 00       	call   f01223bb <strcmp>
f010f381:	83 c4 10             	add    $0x10,%esp
f010f384:	85 c0                	test   %eax,%eax
f010f386:	75 07                	jne    f010f38f <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010f388:	e8 20 2f 00 00       	call   f01122ad <test_free_block_NF>
f010f38d:	eb 22                	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010f38f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f392:	83 c0 04             	add    $0x4,%eax
f010f395:	8b 00                	mov    (%eax),%eax
f010f397:	83 ec 08             	sub    $0x8,%esp
f010f39a:	68 0b 92 12 f0       	push   $0xf012920b
f010f39f:	50                   	push   %eax
f010f3a0:	e8 16 30 01 00       	call   f01223bb <strcmp>
f010f3a5:	83 c4 10             	add    $0x10,%esp
f010f3a8:	85 c0                	test   %eax,%eax
f010f3aa:	75 05                	jne    f010f3b1 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010f3ac:	e8 19 2f 00 00       	call   f01122ca <test_realloc_block_FF>
		//test_realloc_block_FF_COMPLETE();
	}
	return 0;
f010f3b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f3b6:	c9                   	leave  
f010f3b7:	c3                   	ret    

f010f3b8 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010f3b8:	55                   	push   %ebp
f010f3b9:	89 e5                	mov    %esp,%ebp
f010f3bb:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f3be:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f3c2:	74 1a                	je     f010f3de <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010f3c4:	83 ec 0c             	sub    $0xc,%esp
f010f3c7:	68 18 92 12 f0       	push   $0xf0129218
f010f3cc:	e8 9b 1b ff ff       	call   f0100f6c <cprintf>
f010f3d1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f3d4:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3d9:	e9 e1 00 00 00       	jmp    f010f4bf <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010f3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3e1:	83 c0 04             	add    $0x4,%eax
f010f3e4:	8b 00                	mov    (%eax),%eax
f010f3e6:	83 ec 08             	sub    $0x8,%esp
f010f3e9:	68 51 92 12 f0       	push   $0xf0129251
f010f3ee:	50                   	push   %eax
f010f3ef:	e8 c7 2f 01 00       	call   f01223bb <strcmp>
f010f3f4:	83 c4 10             	add    $0x10,%esp
f010f3f7:	85 c0                	test   %eax,%eax
f010f3f9:	75 0a                	jne    f010f405 <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010f3fb:	e8 bf 4a 00 00       	call   f0113ebf <test_cut_paste_pages>
f010f400:	e9 b5 00 00 00       	jmp    f010f4ba <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010f405:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f408:	83 c0 04             	add    $0x4,%eax
f010f40b:	8b 00                	mov    (%eax),%eax
f010f40d:	83 ec 08             	sub    $0x8,%esp
f010f410:	68 5a 92 12 f0       	push   $0xf012925a
f010f415:	50                   	push   %eax
f010f416:	e8 a0 2f 01 00       	call   f01223bb <strcmp>
f010f41b:	83 c4 10             	add    $0x10,%esp
f010f41e:	85 c0                	test   %eax,%eax
f010f420:	75 0a                	jne    f010f42c <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010f422:	e8 e3 54 00 00       	call   f011490a <test_copy_paste_chunk>
f010f427:	e9 8e 00 00 00       	jmp    f010f4ba <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010f42c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f42f:	83 c0 04             	add    $0x4,%eax
f010f432:	8b 00                	mov    (%eax),%eax
f010f434:	83 ec 08             	sub    $0x8,%esp
f010f437:	68 64 92 12 f0       	push   $0xf0129264
f010f43c:	50                   	push   %eax
f010f43d:	e8 79 2f 01 00       	call   f01223bb <strcmp>
f010f442:	83 c4 10             	add    $0x10,%esp
f010f445:	85 c0                	test   %eax,%eax
f010f447:	75 07                	jne    f010f450 <tst_chunks+0x98>
	{
		test_share_chunk();
f010f449:	e8 ba 65 00 00       	call   f0115a08 <test_share_chunk>
f010f44e:	eb 6a                	jmp    f010f4ba <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010f450:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f453:	83 c0 04             	add    $0x4,%eax
f010f456:	8b 00                	mov    (%eax),%eax
f010f458:	83 ec 08             	sub    $0x8,%esp
f010f45b:	68 6a 92 12 f0       	push   $0xf012926a
f010f460:	50                   	push   %eax
f010f461:	e8 55 2f 01 00       	call   f01223bb <strcmp>
f010f466:	83 c4 10             	add    $0x10,%esp
f010f469:	85 c0                	test   %eax,%eax
f010f46b:	75 07                	jne    f010f474 <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010f46d:	e8 be 6f 00 00       	call   f0116430 <test_allocate_chunk>
f010f472:	eb 46                	jmp    f010f4ba <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010f474:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f477:	83 c0 04             	add    $0x4,%eax
f010f47a:	8b 00                	mov    (%eax),%eax
f010f47c:	83 ec 08             	sub    $0x8,%esp
f010f47f:	68 73 92 12 f0       	push   $0xf0129273
f010f484:	50                   	push   %eax
f010f485:	e8 31 2f 01 00       	call   f01223bb <strcmp>
f010f48a:	83 c4 10             	add    $0x10,%esp
f010f48d:	85 c0                	test   %eax,%eax
f010f48f:	75 07                	jne    f010f498 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010f491:	e8 a1 78 00 00       	call   f0116d37 <test_calculate_required_frames>
f010f496:	eb 22                	jmp    f010f4ba <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010f498:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f49b:	83 c0 04             	add    $0x4,%eax
f010f49e:	8b 00                	mov    (%eax),%eax
f010f4a0:	83 ec 08             	sub    $0x8,%esp
f010f4a3:	68 82 92 12 f0       	push   $0xf0129282
f010f4a8:	50                   	push   %eax
f010f4a9:	e8 0d 2f 01 00       	call   f01223bb <strcmp>
f010f4ae:	83 c4 10             	add    $0x10,%esp
f010f4b1:	85 c0                	test   %eax,%eax
f010f4b3:	75 05                	jne    f010f4ba <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010f4b5:	e8 f1 80 00 00       	call   f01175ab <test_calculate_allocated_space>
	}
	return 0;
f010f4ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f4bf:	c9                   	leave  
f010f4c0:	c3                   	ret    

f010f4c1 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010f4c1:	55                   	push   %ebp
f010f4c2:	89 e5                	mov    %esp,%ebp
f010f4c4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f4c7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f4cb:	74 1a                	je     f010f4e7 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010f4cd:	83 ec 0c             	sub    $0xc,%esp
f010f4d0:	68 94 92 12 f0       	push   $0xf0129294
f010f4d5:	e8 92 1a ff ff       	call   f0100f6c <cprintf>
f010f4da:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f4dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010f4e2:	e9 ba 00 00 00       	jmp    f010f5a1 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010f4e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4ea:	83 c0 04             	add    $0x4,%eax
f010f4ed:	8b 00                	mov    (%eax),%eax
f010f4ef:	83 ec 08             	sub    $0x8,%esp
f010f4f2:	68 ca 92 12 f0       	push   $0xf01292ca
f010f4f7:	50                   	push   %eax
f010f4f8:	e8 be 2e 01 00       	call   f01223bb <strcmp>
f010f4fd:	83 c4 10             	add    $0x10,%esp
f010f500:	85 c0                	test   %eax,%eax
f010f502:	75 0a                	jne    f010f50e <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010f504:	e8 29 44 00 00       	call   f0113932 <test_pt_set_page_permissions>
f010f509:	e9 8e 00 00 00       	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010f50e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f511:	83 c0 04             	add    $0x4,%eax
f010f514:	8b 00                	mov    (%eax),%eax
f010f516:	83 ec 08             	sub    $0x8,%esp
f010f519:	68 d2 92 12 f0       	push   $0xf01292d2
f010f51e:	50                   	push   %eax
f010f51f:	e8 97 2e 01 00       	call   f01223bb <strcmp>
f010f524:	83 c4 10             	add    $0x10,%esp
f010f527:	85 c0                	test   %eax,%eax
f010f529:	75 07                	jne    f010f532 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010f52b:	e8 71 46 00 00       	call   f0113ba1 <test_pt_set_page_permissions_invalid_va>
f010f530:	eb 6a                	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010f532:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f535:	83 c0 04             	add    $0x4,%eax
f010f538:	8b 00                	mov    (%eax),%eax
f010f53a:	83 ec 08             	sub    $0x8,%esp
f010f53d:	68 da 92 12 f0       	push   $0xf01292da
f010f542:	50                   	push   %eax
f010f543:	e8 73 2e 01 00       	call   f01223bb <strcmp>
f010f548:	83 c4 10             	add    $0x10,%esp
f010f54b:	85 c0                	test   %eax,%eax
f010f54d:	75 07                	jne    f010f556 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010f54f:	e8 96 46 00 00       	call   f0113bea <test_pt_get_page_permissions>
f010f554:	eb 46                	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010f556:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f559:	83 c0 04             	add    $0x4,%eax
f010f55c:	8b 00                	mov    (%eax),%eax
f010f55e:	83 ec 08             	sub    $0x8,%esp
f010f561:	68 e2 92 12 f0       	push   $0xf01292e2
f010f566:	50                   	push   %eax
f010f567:	e8 4f 2e 01 00       	call   f01223bb <strcmp>
f010f56c:	83 c4 10             	add    $0x10,%esp
f010f56f:	85 c0                	test   %eax,%eax
f010f571:	75 07                	jne    f010f57a <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010f573:	e8 b6 47 00 00       	call   f0113d2e <test_pt_clear_page_table_entry>
f010f578:	eb 22                	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010f57a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f57d:	83 c0 04             	add    $0x4,%eax
f010f580:	8b 00                	mov    (%eax),%eax
f010f582:	83 ec 08             	sub    $0x8,%esp
f010f585:	68 e9 92 12 f0       	push   $0xf01292e9
f010f58a:	50                   	push   %eax
f010f58b:	e8 2b 2e 01 00       	call   f01223bb <strcmp>
f010f590:	83 c4 10             	add    $0x10,%esp
f010f593:	85 c0                	test   %eax,%eax
f010f595:	75 05                	jne    f010f59c <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010f597:	e8 eb 48 00 00       	call   f0113e87 <test_pt_clear_page_table_entry_invalid_va>
	// Test 4-Convert virtual to physical: tstpg v2p
//	else if(strcmp(arguments[1], "v2p") == 0)
//	{
//		test_virtual_to_physical();
//	}
	return 0;
f010f59c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f5a1:	c9                   	leave  
f010f5a2:	c3                   	ret    

f010f5a3 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010f5a3:	55                   	push   %ebp
f010f5a4:	89 e5                	mov    %esp,%ebp
f010f5a6:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010f5a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5ac:	83 c0 08             	add    $0x8,%eax
f010f5af:	8b 00                	mov    (%eax),%eax
f010f5b1:	83 ec 08             	sub    $0x8,%esp
f010f5b4:	68 f0 92 12 f0       	push   $0xf01292f0
f010f5b9:	50                   	push   %eax
f010f5ba:	e8 fc 2d 01 00       	call   f01223bb <strcmp>
f010f5bf:	83 c4 10             	add    $0x10,%esp
f010f5c2:	85 c0                	test   %eax,%eax
f010f5c4:	75 20                	jne    f010f5e6 <tst_kheap+0x43>
f010f5c6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010f5ca:	74 1a                	je     f010f5e6 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010f5cc:	83 ec 0c             	sub    $0xc,%esp
f010f5cf:	68 f8 92 12 f0       	push   $0xf01292f8
f010f5d4:	e8 93 19 ff ff       	call   f0100f6c <cprintf>
f010f5d9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f5dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010f5e1:	e9 f6 03 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010f5e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5e9:	83 c0 08             	add    $0x8,%eax
f010f5ec:	8b 00                	mov    (%eax),%eax
f010f5ee:	83 ec 08             	sub    $0x8,%esp
f010f5f1:	68 f0 92 12 f0       	push   $0xf01292f0
f010f5f6:	50                   	push   %eax
f010f5f7:	e8 bf 2d 01 00       	call   f01223bb <strcmp>
f010f5fc:	83 c4 10             	add    $0x10,%esp
f010f5ff:	85 c0                	test   %eax,%eax
f010f601:	74 43                	je     f010f646 <tst_kheap+0xa3>
f010f603:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010f607:	74 3d                	je     f010f646 <tst_kheap+0xa3>
	{
		if (strcmp(arguments[2], "krealloc") != 0 && number_of_arguments != 5)
f010f609:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f60c:	83 c0 08             	add    $0x8,%eax
f010f60f:	8b 00                	mov    (%eax),%eax
f010f611:	83 ec 08             	sub    $0x8,%esp
f010f614:	68 48 93 12 f0       	push   $0xf0129348
f010f619:	50                   	push   %eax
f010f61a:	e8 9c 2d 01 00       	call   f01223bb <strcmp>
f010f61f:	83 c4 10             	add    $0x10,%esp
f010f622:	85 c0                	test   %eax,%eax
f010f624:	74 20                	je     f010f646 <tst_kheap+0xa3>
f010f626:	83 7d 08 05          	cmpl   $0x5,0x8(%ebp)
f010f62a:	74 1a                	je     f010f646 <tst_kheap+0xa3>
		{
			cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010f62c:	83 ec 0c             	sub    $0xc,%esp
f010f62f:	68 54 93 12 f0       	push   $0xf0129354
f010f634:	e8 33 19 ff ff       	call   f0100f6c <cprintf>
f010f639:	83 c4 10             	add    $0x10,%esp
			return 0;
f010f63c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f641:	e9 96 03 00 00       	jmp    f010f9dc <tst_kheap+0x439>
		}
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010f646:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f649:	83 c0 04             	add    $0x4,%eax
f010f64c:	8b 00                	mov    (%eax),%eax
f010f64e:	83 ec 08             	sub    $0x8,%esp
f010f651:	68 99 93 12 f0       	push   $0xf0129399
f010f656:	50                   	push   %eax
f010f657:	e8 5f 2d 01 00       	call   f01223bb <strcmp>
f010f65c:	83 c4 10             	add    $0x10,%esp
f010f65f:	85 c0                	test   %eax,%eax
f010f661:	74 1d                	je     f010f680 <tst_kheap+0xdd>
f010f663:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f666:	83 c0 04             	add    $0x4,%eax
f010f669:	8b 00                	mov    (%eax),%eax
f010f66b:	83 ec 08             	sub    $0x8,%esp
f010f66e:	68 9c 93 12 f0       	push   $0xf012939c
f010f673:	50                   	push   %eax
f010f674:	e8 42 2d 01 00       	call   f01223bb <strcmp>
f010f679:	83 c4 10             	add    $0x10,%esp
f010f67c:	85 c0                	test   %eax,%eax
f010f67e:	75 1a                	jne    f010f69a <tst_kheap+0xf7>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010f680:	e8 6d f8 ff ff       	call   f010eef2 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010f685:	83 ec 0c             	sub    $0xc,%esp
f010f688:	68 a0 93 12 f0       	push   $0xf01293a0
f010f68d:	e8 da 18 ff ff       	call   f0100f6c <cprintf>
f010f692:	83 c4 10             	add    $0x10,%esp
f010f695:	e9 a0 00 00 00       	jmp    f010f73a <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010f69a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f69d:	83 c0 04             	add    $0x4,%eax
f010f6a0:	8b 00                	mov    (%eax),%eax
f010f6a2:	83 ec 08             	sub    $0x8,%esp
f010f6a5:	68 cd 93 12 f0       	push   $0xf01293cd
f010f6aa:	50                   	push   %eax
f010f6ab:	e8 0b 2d 01 00       	call   f01223bb <strcmp>
f010f6b0:	83 c4 10             	add    $0x10,%esp
f010f6b3:	85 c0                	test   %eax,%eax
f010f6b5:	74 1d                	je     f010f6d4 <tst_kheap+0x131>
f010f6b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6ba:	83 c0 04             	add    $0x4,%eax
f010f6bd:	8b 00                	mov    (%eax),%eax
f010f6bf:	83 ec 08             	sub    $0x8,%esp
f010f6c2:	68 d0 93 12 f0       	push   $0xf01293d0
f010f6c7:	50                   	push   %eax
f010f6c8:	e8 ee 2c 01 00       	call   f01223bb <strcmp>
f010f6cd:	83 c4 10             	add    $0x10,%esp
f010f6d0:	85 c0                	test   %eax,%eax
f010f6d2:	75 17                	jne    f010f6eb <tst_kheap+0x148>
	{
		setKHeapPlacementStrategyBESTFIT();
f010f6d4:	e8 29 f8 ff ff       	call   f010ef02 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010f6d9:	83 ec 0c             	sub    $0xc,%esp
f010f6dc:	68 d4 93 12 f0       	push   $0xf01293d4
f010f6e1:	e8 86 18 ff ff       	call   f0100f6c <cprintf>
f010f6e6:	83 c4 10             	add    $0x10,%esp
f010f6e9:	eb 4f                	jmp    f010f73a <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010f6eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6ee:	83 c0 04             	add    $0x4,%eax
f010f6f1:	8b 00                	mov    (%eax),%eax
f010f6f3:	83 ec 08             	sub    $0x8,%esp
f010f6f6:	68 00 94 12 f0       	push   $0xf0129400
f010f6fb:	50                   	push   %eax
f010f6fc:	e8 ba 2c 01 00       	call   f01223bb <strcmp>
f010f701:	83 c4 10             	add    $0x10,%esp
f010f704:	85 c0                	test   %eax,%eax
f010f706:	74 1d                	je     f010f725 <tst_kheap+0x182>
f010f708:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f70b:	83 c0 04             	add    $0x4,%eax
f010f70e:	8b 00                	mov    (%eax),%eax
f010f710:	83 ec 08             	sub    $0x8,%esp
f010f713:	68 03 94 12 f0       	push   $0xf0129403
f010f718:	50                   	push   %eax
f010f719:	e8 9d 2c 01 00       	call   f01223bb <strcmp>
f010f71e:	83 c4 10             	add    $0x10,%esp
f010f721:	85 c0                	test   %eax,%eax
f010f723:	75 15                	jne    f010f73a <tst_kheap+0x197>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010f725:	e8 e8 f7 ff ff       	call   f010ef12 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010f72a:	83 ec 0c             	sub    $0xc,%esp
f010f72d:	68 08 94 12 f0       	push   $0xf0129408
f010f732:	e8 35 18 ff ff       	call   f0100f6c <cprintf>
f010f737:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tst kheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010f73a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f73d:	83 c0 08             	add    $0x8,%eax
f010f740:	8b 00                	mov    (%eax),%eax
f010f742:	83 ec 08             	sub    $0x8,%esp
f010f745:	68 f0 92 12 f0       	push   $0xf01292f0
f010f74a:	50                   	push   %eax
f010f74b:	e8 6b 2c 01 00       	call   f01223bb <strcmp>
f010f750:	83 c4 10             	add    $0x10,%esp
f010f753:	85 c0                	test   %eax,%eax
f010f755:	0f 85 13 01 00 00    	jne    f010f86e <tst_kheap+0x2cb>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f75b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f75e:	83 c0 0c             	add    $0xc,%eax
f010f761:	8b 00                	mov    (%eax),%eax
f010f763:	83 ec 04             	sub    $0x4,%esp
f010f766:	6a 0a                	push   $0xa
f010f768:	6a 00                	push   $0x0
f010f76a:	50                   	push   %eax
f010f76b:	e8 9f 2e 01 00       	call   f012260f <strtol>
f010f770:	83 c4 10             	add    $0x10,%esp
f010f773:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f776:	e8 a7 f7 ff ff       	call   f010ef22 <isKHeapPlacementStrategyFIRSTFIT>
f010f77b:	84 c0                	test   %al,%al
f010f77d:	74 54                	je     f010f7d3 <tst_kheap+0x230>
		{
			if (testNum == 0)
f010f77f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f783:	75 1a                	jne    f010f79f <tst_kheap+0x1fc>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f785:	83 ec 0c             	sub    $0xc,%esp
f010f788:	68 34 94 12 f0       	push   $0xf0129434
f010f78d:	e8 da 17 ff ff       	call   f0100f6c <cprintf>
f010f792:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f795:	b8 00 00 00 00       	mov    $0x0,%eax
f010f79a:	e9 3d 02 00 00       	jmp    f010f9dc <tst_kheap+0x439>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010f79f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f7a3:	75 0a                	jne    f010f7af <tst_kheap+0x20c>
				test_kmalloc();
f010f7a5:	e8 df a7 00 00       	call   f0119f89 <test_kmalloc>
f010f7aa:	e9 b5 00 00 00       	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f7af:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f7b3:	75 0a                	jne    f010f7bf <tst_kheap+0x21c>
				test_kmalloc_firstfit1();
f010f7b5:	e8 e9 b2 00 00       	call   f011aaa3 <test_kmalloc_firstfit1>
f010f7ba:	e9 a5 00 00 00       	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f7bf:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f7c3:	0f 85 9b 00 00 00    	jne    f010f864 <tst_kheap+0x2c1>
				test_kmalloc_firstfit2();
f010f7c9:	e8 69 bd 00 00       	call   f011b537 <test_kmalloc_firstfit2>
f010f7ce:	e9 91 00 00 00       	jmp    f010f864 <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010f7d3:	e8 5f f7 ff ff       	call   f010ef37 <isKHeapPlacementStrategyBESTFIT>
f010f7d8:	84 c0                	test   %al,%al
f010f7da:	74 47                	je     f010f823 <tst_kheap+0x280>
		{
			if (testNum == 0)
f010f7dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f7e0:	75 1a                	jne    f010f7fc <tst_kheap+0x259>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010f7e2:	83 ec 0c             	sub    $0xc,%esp
f010f7e5:	68 84 94 12 f0       	push   $0xf0129484
f010f7ea:	e8 7d 17 ff ff       	call   f0100f6c <cprintf>
f010f7ef:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f7f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010f7f7:	e9 e0 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
			}
			if (testNum == 1)
f010f7fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f800:	75 07                	jne    f010f809 <tst_kheap+0x266>
				test_kmalloc();
f010f802:	e8 82 a7 00 00       	call   f0119f89 <test_kmalloc>
f010f807:	eb 5b                	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f80d:	75 07                	jne    f010f816 <tst_kheap+0x273>
				test_kmalloc_bestfit1();
f010f80f:	e8 f0 02 01 00       	call   f011fb04 <test_kmalloc_bestfit1>
f010f814:	eb 4e                	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f816:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f81a:	75 48                	jne    f010f864 <tst_kheap+0x2c1>
				test_kmalloc_bestfit2();
f010f81c:	e8 00 03 01 00       	call   f011fb21 <test_kmalloc_bestfit2>
f010f821:	eb 41                	jmp    f010f864 <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010f823:	e8 24 f7 ff ff       	call   f010ef4c <isKHeapPlacementStrategyNEXTFIT>
f010f828:	84 c0                	test   %al,%al
f010f82a:	74 38                	je     f010f864 <tst_kheap+0x2c1>
		{
			if (testNum == 0)
f010f82c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f830:	75 1a                	jne    f010f84c <tst_kheap+0x2a9>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010f832:	83 ec 0c             	sub    $0xc,%esp
f010f835:	68 d4 94 12 f0       	push   $0xf01294d4
f010f83a:	e8 2d 17 ff ff       	call   f0100f6c <cprintf>
f010f83f:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f842:	b8 00 00 00 00       	mov    $0x0,%eax
f010f847:	e9 90 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
			}
			//Test cont. allocation
			if (testNum == 1)
f010f84c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f850:	75 07                	jne    f010f859 <tst_kheap+0x2b6>
				test_kmalloc();
f010f852:	e8 32 a7 00 00       	call   f0119f89 <test_kmalloc>
f010f857:	eb 0b                	jmp    f010f864 <tst_kheap+0x2c1>
			//Test nextfit strategy
			else if (testNum == 2)
f010f859:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f85d:	75 05                	jne    f010f864 <tst_kheap+0x2c1>
				test_kmalloc_nextfit();
f010f85f:	e8 80 02 01 00       	call   f011fae4 <test_kmalloc_nextfit>
		}
		return 0;
f010f864:	b8 00 00 00 00       	mov    $0x0,%eax
f010f869:	e9 6e 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 2-kfree: tst kheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010f86e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f871:	83 c0 08             	add    $0x8,%eax
f010f874:	8b 00                	mov    (%eax),%eax
f010f876:	83 ec 08             	sub    $0x8,%esp
f010f879:	68 22 95 12 f0       	push   $0xf0129522
f010f87e:	50                   	push   %eax
f010f87f:	e8 37 2b 01 00       	call   f01223bb <strcmp>
f010f884:	83 c4 10             	add    $0x10,%esp
f010f887:	85 c0                	test   %eax,%eax
f010f889:	75 28                	jne    f010f8b3 <tst_kheap+0x310>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010f88b:	e8 a7 f6 ff ff       	call   f010ef37 <isKHeapPlacementStrategyBESTFIT>
f010f890:	84 c0                	test   %al,%al
f010f892:	75 09                	jne    f010f89d <tst_kheap+0x2fa>
f010f894:	e8 89 f6 ff ff       	call   f010ef22 <isKHeapPlacementStrategyFIRSTFIT>
f010f899:	84 c0                	test   %al,%al
f010f89b:	74 07                	je     f010f8a4 <tst_kheap+0x301>
		{
			test_kfree_bestfirstfit();
f010f89d:	e8 4e c7 00 00       	call   f011bff0 <test_kfree_bestfirstfit>
f010f8a2:	eb 05                	jmp    f010f8a9 <tst_kheap+0x306>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010f8a4:	e8 b5 02 01 00       	call   f011fb5e <test_kfree>
		}
		return 0;
f010f8a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8ae:	e9 29 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 3-kphysaddr: tst kheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010f8b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f8b6:	83 c0 08             	add    $0x8,%eax
f010f8b9:	8b 00                	mov    (%eax),%eax
f010f8bb:	83 ec 08             	sub    $0x8,%esp
f010f8be:	68 28 95 12 f0       	push   $0xf0129528
f010f8c3:	50                   	push   %eax
f010f8c4:	e8 f2 2a 01 00       	call   f01223bb <strcmp>
f010f8c9:	83 c4 10             	add    $0x10,%esp
f010f8cc:	85 c0                	test   %eax,%eax
f010f8ce:	75 0f                	jne    f010f8df <tst_kheap+0x33c>
	{
		test_kheap_phys_addr();
f010f8d0:	e8 26 dd 00 00       	call   f011d5fb <test_kheap_phys_addr>
		return 0;
f010f8d5:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8da:	e9 fd 00 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 4-kvirtaddr: tst kheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010f8df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f8e2:	83 c0 08             	add    $0x8,%eax
f010f8e5:	8b 00                	mov    (%eax),%eax
f010f8e7:	83 ec 08             	sub    $0x8,%esp
f010f8ea:	68 32 95 12 f0       	push   $0xf0129532
f010f8ef:	50                   	push   %eax
f010f8f0:	e8 c6 2a 01 00       	call   f01223bb <strcmp>
f010f8f5:	83 c4 10             	add    $0x10,%esp
f010f8f8:	85 c0                	test   %eax,%eax
f010f8fa:	75 0f                	jne    f010f90b <tst_kheap+0x368>
	{
		test_kheap_virt_addr();
f010f8fc:	e8 74 ea 00 00       	call   f011e375 <test_kheap_virt_addr>
		return 0;
f010f901:	b8 00 00 00 00       	mov    $0x0,%eax
f010f906:	e9 d1 00 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 5-krealloc: tst kheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010f90b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f90e:	83 c0 08             	add    $0x8,%eax
f010f911:	8b 00                	mov    (%eax),%eax
f010f913:	83 ec 08             	sub    $0x8,%esp
f010f916:	68 48 93 12 f0       	push   $0xf0129348
f010f91b:	50                   	push   %eax
f010f91c:	e8 9a 2a 01 00       	call   f01223bb <strcmp>
f010f921:	83 c4 10             	add    $0x10,%esp
f010f924:	85 c0                	test   %eax,%eax
f010f926:	0f 85 89 00 00 00    	jne    f010f9b5 <tst_kheap+0x412>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f92c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f92f:	83 c0 0c             	add    $0xc,%eax
f010f932:	8b 00                	mov    (%eax),%eax
f010f934:	83 ec 04             	sub    $0x4,%esp
f010f937:	6a 0a                	push   $0xa
f010f939:	6a 00                	push   $0x0
f010f93b:	50                   	push   %eax
f010f93c:	e8 ce 2c 01 00       	call   f012260f <strtol>
f010f941:	83 c4 10             	add    $0x10,%esp
f010f944:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f947:	e8 d6 f5 ff ff       	call   f010ef22 <isKHeapPlacementStrategyFIRSTFIT>
f010f94c:	84 c0                	test   %al,%al
f010f94e:	74 42                	je     f010f992 <tst_kheap+0x3ef>
		{
			if (testNum == 0)
f010f950:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f954:	75 17                	jne    f010f96d <tst_kheap+0x3ca>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f956:	83 ec 0c             	sub    $0xc,%esp
f010f959:	68 34 94 12 f0       	push   $0xf0129434
f010f95e:	e8 09 16 ff ff       	call   f0100f6c <cprintf>
f010f963:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f966:	b8 00 00 00 00       	mov    $0x0,%eax
f010f96b:	eb 6f                	jmp    f010f9dc <tst_kheap+0x439>
			}
			if (testNum==1)
f010f96d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010f971:	75 07                	jne    f010f97a <tst_kheap+0x3d7>
				test_krealloc_FF1();
f010f973:	e8 cc 04 01 00       	call   f011fe44 <test_krealloc_FF1>
f010f978:	eb 18                	jmp    f010f992 <tst_kheap+0x3ef>
			else if (testNum==2)
f010f97a:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
f010f97e:	75 07                	jne    f010f987 <tst_kheap+0x3e4>
				test_krealloc_FF2();
f010f980:	e8 0c 05 01 00       	call   f011fe91 <test_krealloc_FF2>
f010f985:	eb 0b                	jmp    f010f992 <tst_kheap+0x3ef>
			else if (testNum==3)
f010f987:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f010f98b:	75 05                	jne    f010f992 <tst_kheap+0x3ef>
				test_krealloc_FF3();
f010f98d:	e8 4c 05 01 00       	call   f011fede <test_krealloc_FF3>
		}
		if (isKHeapPlacementStrategyNEXTFIT())
f010f992:	e8 b5 f5 ff ff       	call   f010ef4c <isKHeapPlacementStrategyNEXTFIT>
f010f997:	84 c0                	test   %al,%al
f010f999:	74 05                	je     f010f9a0 <tst_kheap+0x3fd>
		{
			test_krealloc();
f010f99b:	e8 0a 04 01 00       	call   f011fdaa <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010f9a0:	e8 92 f5 ff ff       	call   f010ef37 <isKHeapPlacementStrategyBESTFIT>
f010f9a5:	84 c0                	test   %al,%al
f010f9a7:	74 05                	je     f010f9ae <tst_kheap+0x40b>
		{
			test_krealloc_BF();
f010f9a9:	e8 49 04 01 00       	call   f011fdf7 <test_krealloc_BF>
		}
		return 0;
f010f9ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010f9b3:	eb 27                	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 6-sbr: tst kheap FF sbrk
	else if (strcmp(arguments[2], "sbrk") == 0)
f010f9b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f9b8:	83 c0 08             	add    $0x8,%eax
f010f9bb:	8b 00                	mov    (%eax),%eax
f010f9bd:	83 ec 08             	sub    $0x8,%esp
f010f9c0:	68 3c 95 12 f0       	push   $0xf012953c
f010f9c5:	50                   	push   %eax
f010f9c6:	e8 f0 29 01 00       	call   f01223bb <strcmp>
f010f9cb:	83 c4 10             	add    $0x10,%esp
f010f9ce:	85 c0                	test   %eax,%eax
f010f9d0:	75 05                	jne    f010f9d7 <tst_kheap+0x434>
	{
		test_ksbrk();
f010f9d2:	e8 38 f6 00 00       	call   f011f00f <test_ksbrk>
	}
	return 0;
f010f9d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f9dc:	c9                   	leave  
f010f9dd:	c3                   	ret    

f010f9de <check_block>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int check_block(void* va, void* expectedVA, uint32 expectedSize, uint8 expectedFlag)
{
f010f9de:	55                   	push   %ebp
f010f9df:	89 e5                	mov    %esp,%ebp
f010f9e1:	83 ec 28             	sub    $0x28,%esp
f010f9e4:	8b 45 14             	mov    0x14(%ebp),%eax
f010f9e7:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//Check returned va
	if(va != expectedVA)
f010f9ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010f9ed:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010f9f0:	74 1d                	je     f010fa0f <check_block+0x31>
	{
		cprintf("wrong block address. Expected %x, Actual %x\n", expectedVA, va);
f010f9f2:	83 ec 04             	sub    $0x4,%esp
f010f9f5:	ff 75 08             	pushl  0x8(%ebp)
f010f9f8:	ff 75 0c             	pushl  0xc(%ebp)
f010f9fb:	68 44 95 12 f0       	push   $0xf0129544
f010fa00:	e8 67 15 ff ff       	call   f0100f6c <cprintf>
f010fa05:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fa08:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa0d:	eb 55                	jmp    f010fa64 <check_block+0x86>
	}
	//Check header & footer
	uint32 header = *((uint32*)va-1);
f010fa0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010fa12:	8b 40 fc             	mov    -0x4(%eax),%eax
f010fa15:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 footer = *((uint32*)(va + expectedSize - 8));
f010fa18:	8b 45 10             	mov    0x10(%ebp),%eax
f010fa1b:	8d 50 f8             	lea    -0x8(%eax),%edx
f010fa1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010fa21:	01 d0                	add    %edx,%eax
f010fa23:	8b 00                	mov    (%eax),%eax
f010fa25:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 expectedData = expectedSize | expectedFlag ;
f010fa28:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010fa2c:	0b 45 10             	or     0x10(%ebp),%eax
f010fa2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(header != expectedData || footer != expectedData)
f010fa32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa35:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010fa38:	75 08                	jne    f010fa42 <check_block+0x64>
f010fa3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fa3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010fa40:	74 1d                	je     f010fa5f <check_block+0x81>
	{
		cprintf("wrong header/footer data. Expected %d, Actual H:%d F:%d\n", expectedData, header, footer);
f010fa42:	ff 75 f0             	pushl  -0x10(%ebp)
f010fa45:	ff 75 f4             	pushl  -0xc(%ebp)
f010fa48:	ff 75 ec             	pushl  -0x14(%ebp)
f010fa4b:	68 74 95 12 f0       	push   $0xf0129574
f010fa50:	e8 17 15 ff ff       	call   f0100f6c <cprintf>
f010fa55:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fa58:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa5d:	eb 05                	jmp    f010fa64 <check_block+0x86>
	}
	return 1;
f010fa5f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fa64:	c9                   	leave  
f010fa65:	c3                   	ret    

f010fa66 <check_list_size>:
int check_list_size(uint32 expectedListSize)
{
f010fa66:	55                   	push   %ebp
f010fa67:	89 e5                	mov    %esp,%ebp
f010fa69:	83 ec 08             	sub    $0x8,%esp
	if (LIST_SIZE(&freeBlocksList) != expectedListSize)
f010fa6c:	a1 bc 65 55 f0       	mov    0xf05565bc,%eax
f010fa71:	3b 45 08             	cmp    0x8(%ebp),%eax
f010fa74:	74 20                	je     f010fa96 <check_list_size+0x30>
	{
		cprintf("freeBlocksList: wrong size! expected %d, actual %d\n", expectedListSize, LIST_SIZE(&freeBlocksList));
f010fa76:	a1 bc 65 55 f0       	mov    0xf05565bc,%eax
f010fa7b:	83 ec 04             	sub    $0x4,%esp
f010fa7e:	50                   	push   %eax
f010fa7f:	ff 75 08             	pushl  0x8(%ebp)
f010fa82:	68 b0 95 12 f0       	push   $0xf01295b0
f010fa87:	e8 e0 14 ff ff       	call   f0100f6c <cprintf>
f010fa8c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fa8f:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa94:	eb 05                	jmp    f010fa9b <check_list_size+0x35>
	}
	return 1;
f010fa96:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fa9b:	c9                   	leave  
f010fa9c:	c3                   	ret    

f010fa9d <test_initialize_dynamic_allocator>:
/***********************************************************************************************************************/

void test_initialize_dynamic_allocator()
{
f010fa9d:	55                   	push   %ebp
f010fa9e:	89 e5                	mov    %esp,%ebp
f010faa0:	83 ec 28             	sub    $0x28,%esp
	panic("test_initialize_dynamic_allocator: the kernel heap should be diabled. make sure USE_KHEAP = 0");
	return;
#endif

	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010faa3:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010faaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010faad:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010fab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fab6:	83 c0 04             	add    $0x4,%eax
f010fab9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010fabf:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fac6:	83 ec 08             	sub    $0x8,%esp
f010fac9:	ff 75 f0             	pushl  -0x10(%ebp)
f010facc:	68 00 00 00 f6       	push   $0xf6000000
f010fad1:	e8 a9 33 01 00       	call   f0122e7f <initialize_dynamic_allocator>
f010fad6:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	uint32* daBeg = (uint32*) KERNEL_HEAP_START ;
f010fad9:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	uint32* daEnd = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - sizeof(int));
f010fae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fae3:	2d 04 00 00 0a       	sub    $0xa000004,%eax
f010fae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32* blkHeader = (uint32*) (KERNEL_HEAP_START + sizeof(int));
f010faeb:	c7 45 e4 04 00 00 f6 	movl   $0xf6000004,-0x1c(%ebp)
	uint32* blkFooter = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - 2*sizeof(int));
f010faf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010faf5:	2d 08 00 00 0a       	sub    $0xa000008,%eax
f010fafa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (*daBeg != 1 || *daEnd != 1 || (*blkHeader != initAllocatedSpace - 2*sizeof(int))|| (*blkFooter != initAllocatedSpace - 2*sizeof(int)))
f010fafd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb00:	8b 00                	mov    (%eax),%eax
f010fb02:	83 f8 01             	cmp    $0x1,%eax
f010fb05:	75 28                	jne    f010fb2f <test_initialize_dynamic_allocator+0x92>
f010fb07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fb0a:	8b 00                	mov    (%eax),%eax
f010fb0c:	83 f8 01             	cmp    $0x1,%eax
f010fb0f:	75 1e                	jne    f010fb2f <test_initialize_dynamic_allocator+0x92>
f010fb11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb14:	8b 00                	mov    (%eax),%eax
f010fb16:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fb19:	83 ea 08             	sub    $0x8,%edx
f010fb1c:	39 d0                	cmp    %edx,%eax
f010fb1e:	75 0f                	jne    f010fb2f <test_initialize_dynamic_allocator+0x92>
f010fb20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fb23:	8b 00                	mov    (%eax),%eax
f010fb25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fb28:	83 ea 08             	sub    $0x8,%edx
f010fb2b:	39 d0                	cmp    %edx,%eax
f010fb2d:	74 14                	je     f010fb43 <test_initialize_dynamic_allocator+0xa6>
	{
		panic("Content of header/footer and/or DA begin/end are not set correctly");
f010fb2f:	83 ec 04             	sub    $0x4,%esp
f010fb32:	68 e4 95 12 f0       	push   $0xf01295e4
f010fb37:	6a 53                	push   $0x53
f010fb39:	68 28 96 12 f0       	push   $0xf0129628
f010fb3e:	e8 d7 07 ff ff       	call   f010031a <_panic>
	}
	if (LIST_SIZE(&freeBlocksList) != 1 || (uint32)LIST_FIRST(&freeBlocksList) != KERNEL_HEAP_START + 2*sizeof(int))
f010fb43:	a1 bc 65 55 f0       	mov    0xf05565bc,%eax
f010fb48:	83 f8 01             	cmp    $0x1,%eax
f010fb4b:	75 0c                	jne    f010fb59 <test_initialize_dynamic_allocator+0xbc>
f010fb4d:	a1 b0 65 55 f0       	mov    0xf05565b0,%eax
f010fb52:	3d 08 00 00 f6       	cmp    $0xf6000008,%eax
f010fb57:	74 14                	je     f010fb6d <test_initialize_dynamic_allocator+0xd0>
	{
		panic("free block is not added correctly");
f010fb59:	83 ec 04             	sub    $0x4,%esp
f010fb5c:	68 4c 96 12 f0       	push   $0xf012964c
f010fb61:	6a 57                	push   $0x57
f010fb63:	68 28 96 12 f0       	push   $0xf0129628
f010fb68:	e8 ad 07 ff ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010fb6d:	83 ec 0c             	sub    $0xc,%esp
f010fb70:	68 70 96 12 f0       	push   $0xf0129670
f010fb75:	e8 f2 13 ff ff       	call   f0100f6c <cprintf>
f010fb7a:	83 c4 10             	add    $0x10,%esp
}
f010fb7d:	90                   	nop
f010fb7e:	c9                   	leave  
f010fb7f:	c3                   	ret    

f010fb80 <test_initial_alloc>:


int test_initial_alloc(int ALLOC_STRATEGY)
{
f010fb80:	55                   	push   %ebp
f010fb81:	89 e5                	mov    %esp,%ebp
f010fb83:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010fb86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010fb8d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010fb94:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fb9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fb9e:	83 ec 08             	sub    $0x8,%esp
f010fba1:	50                   	push   %eax
f010fba2:	68 00 00 00 f6       	push   $0xf6000000
f010fba7:	e8 d3 32 01 00       	call   f0122e7f <initialize_dynamic_allocator>
f010fbac:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010fbaf:	83 ec 0c             	sub    $0xc,%esp
f010fbb2:	68 c0 96 12 f0       	push   $0xf01296c0
f010fbb7:	e8 b0 13 ff ff       	call   f0100f6c <cprintf>
f010fbbc:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010fbbf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010fbc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fbc9:	89 c2                	mov    %eax,%edx
f010fbcb:	01 d2                	add    %edx,%edx
f010fbcd:	01 d0                	add    %edx,%eax
f010fbcf:	83 ec 08             	sub    $0x8,%esp
f010fbd2:	ff 75 08             	pushl  0x8(%ebp)
f010fbd5:	50                   	push   %eax
f010fbd6:	e8 76 31 01 00       	call   f0122d51 <alloc_block>
f010fbdb:	83 c4 10             	add    $0x10,%esp
f010fbde:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fbe1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fbe5:	74 17                	je     f010fbfe <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010fbe7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: should not be allocated.\n");
f010fbee:	83 ec 0c             	sub    $0xc,%esp
f010fbf1:	68 fc 96 12 f0       	push   $0xf01296fc
f010fbf6:	e8 71 13 ff ff       	call   f0100f6c <cprintf>
f010fbfb:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010fbfe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fc01:	83 ec 08             	sub    $0x8,%esp
f010fc04:	ff 75 08             	pushl  0x8(%ebp)
f010fc07:	50                   	push   %eax
f010fc08:	e8 44 31 01 00       	call   f0122d51 <alloc_block>
f010fc0d:	83 c4 10             	add    $0x10,%esp
f010fc10:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fc13:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fc17:	74 17                	je     f010fc30 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010fc19:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: should not be allocated.\n");
f010fc20:	83 ec 0c             	sub    $0xc,%esp
f010fc23:	68 2c 97 12 f0       	push   $0xf012972c
f010fc28:	e8 3f 13 ff ff       	call   f0100f6c <cprintf>
f010fc2d:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fc30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fc34:	74 04                	je     f010fc3a <test_initial_alloc+0xba>
	{
		eval += 5;
f010fc36:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010fc3a:	83 ec 0c             	sub    $0xc,%esp
f010fc3d:	68 5c 97 12 f0       	push   $0xf012975c
f010fc42:	e8 25 13 ff ff       	call   f0100f6c <cprintf>
f010fc47:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fc4a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	int totalSizes = 0;
f010fc51:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010fc58:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010fc5f:	eb 2a                	jmp    f010fc8b <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010fc61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fc64:	8b 14 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%edx
f010fc6b:	89 d0                	mov    %edx,%eax
f010fc6d:	c1 e0 02             	shl    $0x2,%eax
f010fc70:	01 d0                	add    %edx,%eax
f010fc72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fc79:	01 d0                	add    %edx,%eax
f010fc7b:	c1 e0 03             	shl    $0x3,%eax
f010fc7e:	89 c2                	mov    %eax,%edx
f010fc80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc83:	01 d0                	add    %edx,%eax
f010fc85:	89 45 ec             	mov    %eax,-0x14(%ebp)
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010fc88:	ff 45 e8             	incl   -0x18(%ebp)
f010fc8b:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010fc8f:	7e d0                	jle    f010fc61 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f010fc91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fc94:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010fc97:	83 e8 08             	sub    $0x8,%eax
f010fc9a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010fc9d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fca1:	7f 17                	jg     f010fcba <test_initial_alloc+0x13a>
	{
		is_correct = 0;
f010fca3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010fcaa:	83 ec 0c             	sub    $0xc,%esp
f010fcad:	68 a8 97 12 f0       	push   $0xf01297a8
f010fcb2:	e8 b5 12 ff ff       	call   f0100f6c <cprintf>
f010fcb7:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010fcba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f010fcc1:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fcc8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010fccf:	e9 f3 00 00 00       	jmp    f010fdc7 <test_initial_alloc+0x247>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fcd4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010fcdb:	e9 d7 00 00 00       	jmp    f010fdb7 <test_initial_alloc+0x237>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f010fce0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fce3:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f010fcea:	83 e8 08             	sub    $0x8,%eax
f010fced:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fcf0:	83 ec 08             	sub    $0x8,%esp
f010fcf3:	ff 75 08             	pushl  0x8(%ebp)
f010fcf6:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fcf9:	e8 53 30 01 00       	call   f0122d51 <alloc_block>
f010fcfe:	83 c4 10             	add    $0x10,%esp
f010fd01:	89 c2                	mov    %eax,%edx
f010fd03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd06:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f010fd0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd10:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f010fd17:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010fd1a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fd1d:	d1 e8                	shr    %eax
f010fd1f:	89 c2                	mov    %eax,%edx
f010fd21:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fd24:	01 c2                	add    %eax,%edx
f010fd26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd29:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010fd30:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fd33:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fd36:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fd39:	01 c2                	add    %eax,%edx
f010fd3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd3e:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
			//Check block
			expectedVA = (curVA + sizeOfMetaData/2);
f010fd45:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fd48:	83 c0 04             	add    $0x4,%eax
f010fd4b:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if (check_block(va, expectedVA, allocSizes[i], 1) == 0)
f010fd4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd51:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f010fd58:	6a 01                	push   $0x1
f010fd5a:	50                   	push   %eax
f010fd5b:	ff 75 c0             	pushl  -0x40(%ebp)
f010fd5e:	ff 75 cc             	pushl  -0x34(%ebp)
f010fd61:	e8 78 fc ff ff       	call   f010f9de <check_block>
f010fd66:	83 c4 10             	add    $0x10,%esp
f010fd69:	85 c0                	test   %eax,%eax
f010fd6b:	75 07                	jne    f010fd74 <test_initial_alloc+0x1f4>
			{
				is_correct = 0;
f010fd6d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			}
			curVA += allocSizes[i] ;
f010fd74:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd77:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f010fd7e:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010fd81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd84:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f010fd8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd8e:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010fd91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd94:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f010fd9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd9e:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010fda1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fda4:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f010fdab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdae:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010fdb1:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fdb4:	ff 45 d8             	incl   -0x28(%ebp)
f010fdb7:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010fdbe:	0f 8e 1c ff ff ff    	jle    f010fce0 <test_initial_alloc+0x160>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fdc4:	ff 45 dc             	incl   -0x24(%ebp)
f010fdc7:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010fdcb:	0f 8e 03 ff ff ff    	jle    f010fcd4 <test_initial_alloc+0x154>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010fdd1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fdd5:	74 04                	je     f010fddb <test_initial_alloc+0x25b>
	{
		eval += 15;
f010fdd7:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}
	if (check_list_size(1))
f010fddb:	83 ec 0c             	sub    $0xc,%esp
f010fdde:	6a 01                	push   $0x1
f010fde0:	e8 81 fc ff ff       	call   f010fa66 <check_list_size>
f010fde5:	83 c4 10             	add    $0x10,%esp
f010fde8:	85 c0                	test   %eax,%eax
f010fdea:	74 04                	je     f010fdf0 <test_initial_alloc+0x270>
	{
		eval += 5;
f010fdec:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010fdf0:	83 ec 0c             	sub    $0xc,%esp
f010fdf3:	68 24 98 12 f0       	push   $0xf0129824
f010fdf8:	e8 6f 11 ff ff       	call   f0100f6c <cprintf>
f010fdfd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe00:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData;
f010fe07:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe0a:	83 e8 08             	sub    $0x8,%eax
f010fe0d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fe10:	83 ec 08             	sub    $0x8,%esp
f010fe13:	ff 75 08             	pushl  0x8(%ebp)
f010fe16:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe19:	e8 33 2f 01 00       	call   f0122d51 <alloc_block>
f010fe1e:	83 c4 10             	add    $0x10,%esp
f010fe21:	89 c2                	mov    %eax,%edx
f010fe23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe26:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f010fe2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe30:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f010fe37:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010fe3a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fe3d:	d1 e8                	shr    %eax
f010fe3f:	89 c2                	mov    %eax,%edx
f010fe41:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe44:	01 c2                	add    %eax,%edx
f010fe46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe49:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010fe50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fe53:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fe56:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe59:	01 c2                	add    %eax,%edx
f010fe5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe5e:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
	//Check block
	expectedVA = (curVA + sizeOfMetaData/2);
f010fe65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fe68:	83 c0 04             	add    $0x4,%eax
f010fe6b:	89 45 c0             	mov    %eax,-0x40(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, remainSize, 1) ;
f010fe6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe72:	74 17                	je     f010fe8b <test_initial_alloc+0x30b>
f010fe74:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe77:	6a 01                	push   $0x1
f010fe79:	50                   	push   %eax
f010fe7a:	ff 75 c0             	pushl  -0x40(%ebp)
f010fe7d:	ff 75 cc             	pushl  -0x34(%ebp)
f010fe80:	e8 59 fb ff ff       	call   f010f9de <check_block>
f010fe85:	83 c4 10             	add    $0x10,%esp
f010fe88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct) is_correct = check_list_size(0);
f010fe8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe8f:	74 10                	je     f010fea1 <test_initial_alloc+0x321>
f010fe91:	83 ec 0c             	sub    $0xc,%esp
f010fe94:	6a 00                	push   $0x0
f010fe96:	e8 cb fb ff ff       	call   f010fa66 <check_list_size>
f010fe9b:	83 c4 10             	add    $0x10,%esp
f010fe9e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	*(startVAs[idx]) = idx ;
f010fea1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fea4:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f010feab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010feae:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010feb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010feb4:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f010febb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010febe:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010fec1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fec4:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f010fecb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fece:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010fed1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fed5:	74 04                	je     f010fedb <test_initial_alloc+0x35b>
	{
		eval += 5;
f010fed7:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010fedb:	83 ec 0c             	sub    $0xc,%esp
f010fede:	68 70 98 12 f0       	push   $0xf0129870
f010fee3:	e8 84 10 ff ff       	call   f0100f6c <cprintf>
f010fee8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010feeb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010fef2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010fef9:	eb 5b                	jmp    f010ff56 <test_initial_alloc+0x3d6>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010fefb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fefe:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f010ff05:	66 8b 00             	mov    (%eax),%ax
f010ff08:	98                   	cwtl   
f010ff09:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ff0c:	75 26                	jne    f010ff34 <test_initial_alloc+0x3b4>
f010ff0e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ff11:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f010ff18:	66 8b 00             	mov    (%eax),%ax
f010ff1b:	98                   	cwtl   
f010ff1c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ff1f:	75 13                	jne    f010ff34 <test_initial_alloc+0x3b4>
f010ff21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ff24:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f010ff2b:	66 8b 00             	mov    (%eax),%ax
f010ff2e:	98                   	cwtl   
f010ff2f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ff32:	74 1f                	je     f010ff53 <test_initial_alloc+0x3d3>
		{
			is_correct = 0;
f010ff34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010ff3b:	83 ec 04             	sub    $0x4,%esp
f010ff3e:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ff41:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ff44:	68 a4 98 12 f0       	push   $0xf01298a4
f010ff49:	e8 1e 10 ff ff       	call   f0100f6c <cprintf>
f010ff4e:	83 c4 10             	add    $0x10,%esp
			break;
f010ff51:	eb 0b                	jmp    f010ff5e <test_initial_alloc+0x3de>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010ff53:	ff 45 d4             	incl   -0x2c(%ebp)
f010ff56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ff59:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010ff5c:	7c 9d                	jl     f010fefb <test_initial_alloc+0x37b>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010ff5e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff62:	74 04                	je     f010ff68 <test_initial_alloc+0x3e8>
	{
		eval += 10;
f010ff64:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010ff68:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ff6b:	c9                   	leave  
f010ff6c:	c3                   	ret    

f010ff6d <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010ff6d:	55                   	push   %ebp
f010ff6e:	89 e5                	mov    %esp,%ebp
f010ff70:	57                   	push   %edi
f010ff71:	56                   	push   %esi
f010ff72:	53                   	push   %ebx
f010ff73:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ff79:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ff80:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ff87:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010ff8e:	83 ec 0c             	sub    $0xc,%esp
f010ff91:	68 f4 98 12 f0       	push   $0xf01298f4
f010ff96:	e8 d1 0f ff ff       	call   f0100f6c <cprintf>
f010ff9b:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010ff9e:	83 ec 0c             	sub    $0xc,%esp
f010ffa1:	68 30 99 12 f0       	push   $0xf0129930
f010ffa6:	e8 c1 0f ff ff       	call   f0100f6c <cprintf>
f010ffab:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010ffae:	83 ec 0c             	sub    $0xc,%esp
f010ffb1:	68 f4 98 12 f0       	push   $0xf01298f4
f010ffb6:	e8 b1 0f ff ff       	call   f0100f6c <cprintf>
f010ffbb:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010ffbe:	83 ec 0c             	sub    $0xc,%esp
f010ffc1:	6a 01                	push   $0x1
f010ffc3:	e8 b8 fb ff ff       	call   f010fb80 <test_initial_alloc>
f010ffc8:	83 c4 10             	add    $0x10,%esp
f010ffcb:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010ffce:	83 ec 0c             	sub    $0xc,%esp
f010ffd1:	68 6c 99 12 f0       	push   $0xf012996c
f010ffd6:	e8 91 0f ff ff       	call   f0100f6c <cprintf>
f010ffdb:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010ffde:	83 ec 0c             	sub    $0xc,%esp
f010ffe1:	68 a4 99 12 f0       	push   $0xf01299a4
f010ffe6:	e8 81 0f ff ff       	call   f0100f6c <cprintf>
f010ffeb:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010ffee:	83 ec 0c             	sub    $0xc,%esp
f010fff1:	68 6c 99 12 f0       	push   $0xf012996c
f010fff6:	e8 71 0f ff ff       	call   f0100f6c <cprintf>
f010fffb:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010fffe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110005:	eb 2c                	jmp    f0110033 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110007:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011000a:	89 d0                	mov    %edx,%eax
f011000c:	c1 e0 02             	shl    $0x2,%eax
f011000f:	01 d0                	add    %edx,%eax
f0110011:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110018:	01 d0                	add    %edx,%eax
f011001a:	c1 e0 03             	shl    $0x3,%eax
f011001d:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110024:	83 ec 0c             	sub    $0xc,%esp
f0110027:	50                   	push   %eax
f0110028:	e8 20 31 01 00       	call   f012314d <free_block>
f011002d:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110030:	ff 45 dc             	incl   -0x24(%ebp)
f0110033:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110037:	7e ce                	jle    f0110007 <test_alloc_block_FF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	//Check number of freed blocks
	is_correct = check_list_size(numOfAllocs);
f0110039:	83 ec 0c             	sub    $0xc,%esp
f011003c:	6a 07                	push   $0x7
f011003e:	e8 23 fa ff ff       	call   f010fa66 <check_list_size>
f0110043:	83 c4 10             	add    $0x10,%esp
f0110046:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f0110049:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011004d:	74 04                	je     f0110053 <test_alloc_block_FF+0xe6>
	{
		eval += 10;
f011004f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f0110053:	83 ec 0c             	sub    $0xc,%esp
f0110056:	68 c0 96 12 f0       	push   $0xf01296c0
f011005b:	e8 0c 0f ff ff       	call   f0100f6c <cprintf>
f0110060:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110063:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f011006a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110071:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110078:	eb 1f                	jmp    f0110099 <test_alloc_block_FF+0x12c>
	{
		if (allocSizes[i] > maxSize)
f011007a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011007d:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f0110084:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110087:	76 0d                	jbe    f0110096 <test_alloc_block_FF+0x129>
			maxSize = allocSizes[i] ;
f0110089:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011008c:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f0110093:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f0110096:	ff 45 d4             	incl   -0x2c(%ebp)
f0110099:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f011009d:	7e db                	jle    f011007a <test_alloc_block_FF+0x10d>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f011009f:	83 ec 08             	sub    $0x8,%esp
f01100a2:	6a 01                	push   $0x1
f01100a4:	ff 75 d8             	pushl  -0x28(%ebp)
f01100a7:	e8 a5 2c 01 00       	call   f0122d51 <alloc_block>
f01100ac:	83 c4 10             	add    $0x10,%esp
f01100af:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f01100b2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01100b6:	74 17                	je     f01100cf <test_alloc_block_FF+0x162>
	{
		is_correct = 0;
f01100b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f01100bf:	83 ec 0c             	sub    $0xc,%esp
f01100c2:	68 dc 99 12 f0       	push   $0xf01299dc
f01100c7:	e8 a0 0e ff ff       	call   f0100f6c <cprintf>
f01100cc:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f01100cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01100d3:	74 04                	je     f01100d9 <test_alloc_block_FF+0x16c>
	{
		eval += 5;
f01100d5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f01100d9:	83 ec 0c             	sub    $0xc,%esp
f01100dc:	68 54 9a 12 f0       	push   $0xf0129a54
f01100e1:	e8 86 0e ff ff       	call   f0100f6c <cprintf>
f01100e6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01100e9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	void* expectedVA;
	uint32 expectedNumFreeBlks;
#define numOfFFTests 3
	uint32 startVA = KERNEL_HEAP_START + sizeof(int); //just after the DA Begin block
f01100f0:	c7 45 c0 04 00 00 f6 	movl   $0xf6000004,-0x40(%ebp)
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f01100f7:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01100fa:	bb e0 9b 12 f0       	mov    $0xf0129be0,%ebx
f01100ff:	ba 03 00 00 00       	mov    $0x3,%edx
f0110104:	89 c7                	mov    %eax,%edi
f0110106:	89 de                	mov    %ebx,%esi
f0110108:	89 d1                	mov    %edx,%ecx
f011010a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f011010c:	a1 a0 89 57 f0       	mov    0xf05789a0,%eax
f0110111:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
f0110114:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110117:	83 c0 04             	add    $0x4,%eax
f011011a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011011d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110120:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0110123:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0110126:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110129:	01 d0                	add    %edx,%eax
f011012b:	83 c0 04             	add    $0x4,%eax
f011012e:	89 45 a8             	mov    %eax,-0x58(%ebp)
	short* tstStartVAs[numOfFFTests+2] ;
	short* tstMidVAs[numOfFFTests+2] ;
	short* tstEndVAs[numOfFFTests+2] ;
	for (int i = 0; i < numOfFFTests; ++i)
f0110131:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110138:	e9 c8 00 00 00       	jmp    f0110205 <test_alloc_block_FF+0x298>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f011013d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110140:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f0110144:	83 e8 08             	sub    $0x8,%eax
f0110147:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f011014a:	83 ec 08             	sub    $0x8,%esp
f011014d:	6a 01                	push   $0x1
f011014f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110152:	e8 fa 2b 01 00       	call   f0122d51 <alloc_block>
f0110157:	83 c4 10             	add    $0x10,%esp
f011015a:	89 c2                	mov    %eax,%edx
f011015c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011015f:	89 54 85 8c          	mov    %edx,-0x74(%ebp,%eax,4)
f0110163:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110166:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f011016a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f011016d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110170:	d1 e8                	shr    %eax
f0110172:	89 c2                	mov    %eax,%edx
f0110174:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110177:	01 c2                	add    %eax,%edx
f0110179:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011017c:	89 94 85 78 ff ff ff 	mov    %edx,-0x88(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f0110183:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110186:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110189:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011018c:	01 c2                	add    %eax,%edx
f011018e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110191:	89 94 85 64 ff ff ff 	mov    %edx,-0x9c(%ebp,%eax,4)
		//Check block
		cprintf("test#%d\n",i);
f0110198:	83 ec 08             	sub    $0x8,%esp
f011019b:	ff 75 d0             	pushl  -0x30(%ebp)
f011019e:	68 af 9a 12 f0       	push   $0xf0129aaf
f01101a3:	e8 c4 0d ff ff       	call   f0100f6c <cprintf>
f01101a8:	83 c4 10             	add    $0x10,%esp
		expectedVA = (void*)expectedVAs[i];
f01101ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101ae:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01101b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (check_block(va, expectedVA, testSizes[i], 1) == 0)
f01101b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101b8:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f01101bc:	6a 01                	push   $0x1
f01101be:	50                   	push   %eax
f01101bf:	ff 75 b8             	pushl  -0x48(%ebp)
f01101c2:	ff 75 c8             	pushl  -0x38(%ebp)
f01101c5:	e8 14 f8 ff ff       	call   f010f9de <check_block>
f01101ca:	83 c4 10             	add    $0x10,%esp
f01101cd:	85 c0                	test   %eax,%eax
f01101cf:	75 07                	jne    f01101d8 <test_alloc_block_FF+0x26b>
		{
			is_correct = 0;
f01101d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		*(tstStartVAs[i]) = 353;
f01101d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101db:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f01101df:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f01101e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101e7:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f01101ee:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f01101f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101f6:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f01101fd:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
	short* tstStartVAs[numOfFFTests+2] ;
	short* tstMidVAs[numOfFFTests+2] ;
	short* tstEndVAs[numOfFFTests+2] ;
	for (int i = 0; i < numOfFFTests; ++i)
f0110202:	ff 45 d0             	incl   -0x30(%ebp)
f0110205:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f0110209:	0f 8e 2e ff ff ff    	jle    f011013d <test_alloc_block_FF+0x1d0>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct) is_correct = check_list_size(numOfAllocs);
f011020f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110213:	74 10                	je     f0110225 <test_alloc_block_FF+0x2b8>
f0110215:	83 ec 0c             	sub    $0xc,%esp
f0110218:	6a 07                	push   $0x7
f011021a:	e8 47 f8 ff ff       	call   f010fa66 <check_list_size>
f011021f:	83 c4 10             	add    $0x10,%esp
f0110222:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f0110225:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110229:	74 04                	je     f011022f <test_alloc_block_FF+0x2c2>
	{
		eval += 15;
f011022b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f011022f:	83 ec 0c             	sub    $0xc,%esp
f0110232:	68 24 98 12 f0       	push   $0xf0129824
f0110237:	e8 30 0d ff ff       	call   f0100f6c <cprintf>
f011023c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011023f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData;
f0110246:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f011024d:	83 ec 08             	sub    $0x8,%esp
f0110250:	6a 01                	push   $0x1
f0110252:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110255:	e8 f7 2a 01 00       	call   f0122d51 <alloc_block>
f011025a:	83 c4 10             	add    $0x10,%esp
f011025d:	89 45 98             	mov    %eax,-0x68(%ebp)
f0110260:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110263:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f0110266:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110269:	d1 e8                	shr    %eax
f011026b:	89 c2                	mov    %eax,%edx
f011026d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110270:	01 d0                	add    %edx,%eax
f0110272:	89 45 84             	mov    %eax,-0x7c(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f0110275:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110278:	8d 50 fe             	lea    -0x2(%eax),%edx
f011027b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011027e:	01 d0                	add    %edx,%eax
f0110280:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	//Check block
	expectedVA = (void*)(startVA + testSizes[0] + testSizes[2] + sizeOfMetaData/2) ;
f0110286:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0110289:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011028c:	01 c2                	add    %eax,%edx
f011028e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110291:	01 d0                	add    %edx,%eax
f0110293:	83 c0 04             	add    $0x4,%eax
f0110296:	89 45 b8             	mov    %eax,-0x48(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, 2*kilo, 1);
f0110299:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011029d:	74 18                	je     f01102b7 <test_alloc_block_FF+0x34a>
f011029f:	6a 01                	push   $0x1
f01102a1:	68 00 08 00 00       	push   $0x800
f01102a6:	ff 75 b8             	pushl  -0x48(%ebp)
f01102a9:	ff 75 c8             	pushl  -0x38(%ebp)
f01102ac:	e8 2d f7 ff ff       	call   f010f9de <check_block>
f01102b1:	83 c4 10             	add    $0x10,%esp
f01102b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 1);
f01102b7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01102bb:	74 10                	je     f01102cd <test_alloc_block_FF+0x360>
f01102bd:	83 ec 0c             	sub    $0xc,%esp
f01102c0:	6a 06                	push   $0x6
f01102c2:	e8 9f f7 ff ff       	call   f010fa66 <check_list_size>
f01102c7:	83 c4 10             	add    $0x10,%esp
f01102ca:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfFFTests]) = 353 ;
f01102cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01102d0:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f01102d5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01102d8:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f01102dd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01102e3:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f01102e8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01102ec:	74 04                	je     f01102f2 <test_alloc_block_FF+0x385>
	{
		eval += 10;
f01102ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Try to allocate a block with a bit smaller size [internal fragmentation case]*/
	cprintf("	4: Try to allocate a block with a bit smaller size [internal fragmentation case]\n\n") ;
f01102f2:	83 ec 0c             	sub    $0xc,%esp
f01102f5:	68 b8 9a 12 f0       	push   $0xf0129ab8
f01102fa:	e8 6d 0c ff ff       	call   f0100f6c <cprintf>
f01102ff:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110302:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = allocSizes[1] - sizeOfMetaData - 10;
f0110309:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f011030e:	83 e8 12             	sub    $0x12,%eax
f0110311:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests+1] = alloc_block(actualSize, DA_FF);
f0110314:	83 ec 08             	sub    $0x8,%esp
f0110317:	6a 01                	push   $0x1
f0110319:	ff 75 c4             	pushl  -0x3c(%ebp)
f011031c:	e8 30 2a 01 00       	call   f0122d51 <alloc_block>
f0110321:	83 c4 10             	add    $0x10,%esp
f0110324:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0110327:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011032a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests+1] = va + actualSize/2 ;
f011032d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110330:	d1 e8                	shr    %eax
f0110332:	89 c2                	mov    %eax,%edx
f0110334:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110337:	01 d0                	add    %edx,%eax
f0110339:	89 45 88             	mov    %eax,-0x78(%ebp)
	tstEndVAs[numOfFFTests+1] = va + actualSize - sizeof(short);
f011033c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011033f:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110342:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110345:	01 d0                	add    %edx,%eax
f0110347:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
	//Check block
	expectedVA = startVAs[1*allocCntPerSize];
f011034d:	a1 00 7a 57 f0       	mov    0xf0577a00,%eax
f0110352:	89 45 b8             	mov    %eax,-0x48(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, allocSizes[1], 1);
f0110355:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110359:	74 19                	je     f0110374 <test_alloc_block_FF+0x407>
f011035b:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f0110360:	6a 01                	push   $0x1
f0110362:	50                   	push   %eax
f0110363:	ff 75 b8             	pushl  -0x48(%ebp)
f0110366:	ff 75 c8             	pushl  -0x38(%ebp)
f0110369:	e8 70 f6 ff ff       	call   f010f9de <check_block>
f011036e:	83 c4 10             	add    $0x10,%esp
f0110371:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 2);
f0110374:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110378:	74 10                	je     f011038a <test_alloc_block_FF+0x41d>
f011037a:	83 ec 0c             	sub    $0xc,%esp
f011037d:	6a 05                	push   $0x5
f011037f:	e8 e2 f6 ff ff       	call   f010fa66 <check_list_size>
f0110384:	83 c4 10             	add    $0x10,%esp
f0110387:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfFFTests+1]) = 353 ;
f011038a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011038d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests+1]) = 353 ;
f0110392:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110395:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests+1]) = 353 ;
f011039a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01103a0:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f01103a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01103a9:	74 04                	je     f01103af <test_alloc_block_FF+0x442>
	{
		eval += 10;
f01103ab:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
f01103af:	83 ec 0c             	sub    $0xc,%esp
f01103b2:	68 0c 9b 12 f0       	push   $0xf0129b0c
f01103b7:	e8 b0 0b ff ff       	call   f0100f6c <cprintf>
f01103bc:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01103bf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i < numOfFFTests + 2; ++i)
f01103c6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01103cd:	e9 88 00 00 00       	jmp    f011045a <test_alloc_block_FF+0x4ed>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f01103d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01103d5:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f01103d9:	66 8b 00             	mov    (%eax),%ax
f01103dc:	66 3d 61 01          	cmp    $0x161,%ax
f01103e0:	75 26                	jne    f0110408 <test_alloc_block_FF+0x49b>
f01103e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01103e5:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f01103ec:	66 8b 00             	mov    (%eax),%ax
f01103ef:	66 3d 61 01          	cmp    $0x161,%ax
f01103f3:	75 13                	jne    f0110408 <test_alloc_block_FF+0x49b>
f01103f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01103f8:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f01103ff:	66 8b 00             	mov    (%eax),%ax
f0110402:	66 3d 61 01          	cmp    $0x161,%ax
f0110406:	74 4f                	je     f0110457 <test_alloc_block_FF+0x4ea>
		{
			is_correct = 0;
f0110408:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f011040f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110412:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f0110419:	66 8b 00             	mov    (%eax),%ax
f011041c:	0f bf c8             	movswl %ax,%ecx
f011041f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110422:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f0110429:	66 8b 00             	mov    (%eax),%ax
f011042c:	0f bf d0             	movswl %ax,%edx
f011042f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110432:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110436:	66 8b 00             	mov    (%eax),%ax
f0110439:	98                   	cwtl   
f011043a:	83 ec 08             	sub    $0x8,%esp
f011043d:	51                   	push   %ecx
f011043e:	52                   	push   %edx
f011043f:	50                   	push   %eax
f0110440:	68 61 01 00 00       	push   $0x161
f0110445:	ff 75 cc             	pushl  -0x34(%ebp)
f0110448:	68 40 9b 12 f0       	push   $0xf0129b40
f011044d:	e8 1a 0b ff ff       	call   f0100f6c <cprintf>
f0110452:	83 c4 20             	add    $0x20,%esp
			break;
f0110455:	eb 0d                	jmp    f0110464 <test_alloc_block_FF+0x4f7>
	//====================================================================//
	/*FF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < numOfFFTests + 2; ++i)
f0110457:	ff 45 cc             	incl   -0x34(%ebp)
f011045a:	83 7d cc 04          	cmpl   $0x4,-0x34(%ebp)
f011045e:	0f 8e 6e ff ff ff    	jle    f01103d2 <test_alloc_block_FF+0x465>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f0110464:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110468:	74 04                	je     f011046e <test_alloc_block_FF+0x501>
	{
		eval += 10;
f011046a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f011046e:	83 ec 08             	sub    $0x8,%esp
f0110471:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110474:	68 ac 9b 12 f0       	push   $0xf0129bac
f0110479:	e8 ee 0a ff ff       	call   f0100f6c <cprintf>
f011047e:	83 c4 10             	add    $0x10,%esp
}
f0110481:	90                   	nop
f0110482:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110485:	5b                   	pop    %ebx
f0110486:	5e                   	pop    %esi
f0110487:	5f                   	pop    %edi
f0110488:	5d                   	pop    %ebp
f0110489:	c3                   	ret    

f011048a <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f011048a:	55                   	push   %ebp
f011048b:	89 e5                	mov    %esp,%ebp
f011048d:	57                   	push   %edi
f011048e:	56                   	push   %esi
f011048f:	53                   	push   %ebx
f0110490:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f0110496:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f011049d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f01104a4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f01104ab:	83 ec 0c             	sub    $0xc,%esp
f01104ae:	68 f4 98 12 f0       	push   $0xf01298f4
f01104b3:	e8 b4 0a ff ff       	call   f0100f6c <cprintf>
f01104b8:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f01104bb:	83 ec 0c             	sub    $0xc,%esp
f01104be:	68 30 99 12 f0       	push   $0xf0129930
f01104c3:	e8 a4 0a ff ff       	call   f0100f6c <cprintf>
f01104c8:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f01104cb:	83 ec 0c             	sub    $0xc,%esp
f01104ce:	68 f4 98 12 f0       	push   $0xf01298f4
f01104d3:	e8 94 0a ff ff       	call   f0100f6c <cprintf>
f01104d8:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f01104db:	83 ec 0c             	sub    $0xc,%esp
f01104de:	6a 03                	push   $0x3
f01104e0:	e8 9b f6 ff ff       	call   f010fb80 <test_initial_alloc>
f01104e5:	83 c4 10             	add    $0x10,%esp
f01104e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f01104eb:	83 ec 0c             	sub    $0xc,%esp
f01104ee:	68 6c 99 12 f0       	push   $0xf012996c
f01104f3:	e8 74 0a ff ff       	call   f0100f6c <cprintf>
f01104f8:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f01104fb:	83 ec 0c             	sub    $0xc,%esp
f01104fe:	68 a4 99 12 f0       	push   $0xf01299a4
f0110503:	e8 64 0a ff ff       	call   f0100f6c <cprintf>
f0110508:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f011050b:	83 ec 0c             	sub    $0xc,%esp
f011050e:	68 6c 99 12 f0       	push   $0xf012996c
f0110513:	e8 54 0a ff ff       	call   f0100f6c <cprintf>
f0110518:	83 c4 10             	add    $0x10,%esp
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011051b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110522:	eb 2c                	jmp    f0110550 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110524:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0110527:	89 d0                	mov    %edx,%eax
f0110529:	c1 e0 02             	shl    $0x2,%eax
f011052c:	01 d0                	add    %edx,%eax
f011052e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110535:	01 d0                	add    %edx,%eax
f0110537:	c1 e0 03             	shl    $0x3,%eax
f011053a:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110541:	83 ec 0c             	sub    $0xc,%esp
f0110544:	50                   	push   %eax
f0110545:	e8 03 2c 01 00       	call   f012314d <free_block>
f011054a:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011054d:	ff 45 dc             	incl   -0x24(%ebp)
f0110550:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110554:	7e ce                	jle    f0110524 <test_alloc_block_BF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	//Check number of freed blocks
	is_correct = check_list_size(numOfAllocs);
f0110556:	83 ec 0c             	sub    $0xc,%esp
f0110559:	6a 07                	push   $0x7
f011055b:	e8 06 f5 ff ff       	call   f010fa66 <check_list_size>
f0110560:	83 c4 10             	add    $0x10,%esp
f0110563:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f0110566:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011056a:	74 04                	je     f0110570 <test_alloc_block_BF+0xe6>
	{
		eval += 10;
f011056c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f0110570:	83 ec 0c             	sub    $0xc,%esp
f0110573:	68 c0 96 12 f0       	push   $0xf01296c0
f0110578:	e8 ef 09 ff ff       	call   f0100f6c <cprintf>
f011057d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110580:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f0110587:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f011058e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110595:	eb 1f                	jmp    f01105b6 <test_alloc_block_BF+0x12c>
	{
		if (allocSizes[i] > maxSize)
f0110597:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011059a:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01105a1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105a4:	76 0d                	jbe    f01105b3 <test_alloc_block_BF+0x129>
			maxSize = allocSizes[i] ;
f01105a6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01105a9:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01105b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f01105b3:	ff 45 d4             	incl   -0x2c(%ebp)
f01105b6:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f01105ba:	7e db                	jle    f0110597 <test_alloc_block_BF+0x10d>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f01105bc:	83 ec 08             	sub    $0x8,%esp
f01105bf:	6a 03                	push   $0x3
f01105c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01105c4:	e8 88 27 01 00       	call   f0122d51 <alloc_block>
f01105c9:	83 c4 10             	add    $0x10,%esp
f01105cc:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f01105cf:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01105d3:	74 17                	je     f01105ec <test_alloc_block_BF+0x162>
	{
		is_correct = 0;
f01105d5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f01105dc:	83 ec 0c             	sub    $0xc,%esp
f01105df:	68 ec 9b 12 f0       	push   $0xf0129bec
f01105e4:	e8 83 09 ff ff       	call   f0100f6c <cprintf>
f01105e9:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01105ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01105f0:	74 04                	je     f01105f6 <test_alloc_block_BF+0x16c>
	{
		eval += 5;
f01105f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f01105f6:	83 ec 0c             	sub    $0xc,%esp
f01105f9:	68 54 9a 12 f0       	push   $0xf0129a54
f01105fe:	e8 69 09 ff ff       	call   f0100f6c <cprintf>
f0110603:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110606:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {
f011060d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0110610:	bb 48 9d 12 f0       	mov    $0xf0129d48,%ebx
f0110615:	ba 05 00 00 00       	mov    $0x5,%edx
f011061a:	89 c7                	mov    %eax,%edi
f011061c:	89 de                	mov    %ebx,%esi
f011061e:	89 d1                	mov    %edx,%ecx
f0110620:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			/*only 1 can fit*/4*kilo + kilo/2,
			/*many can fit*/ 1*kilo + kilo/4,
			/*many can fit*/kilo/2,
			/*many can fit*/kilo/2,
			/*only 1 can fit (@head)*/3*kilo } ;
	uint32 startOf1st1KB = (uint32)startVAs[2*allocCntPerSize];
f0110622:	a1 20 7d 57 f0       	mov    0xf0577d20,%eax
f0110627:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f011062a:	a1 60 83 57 f0       	mov    0xf0578360,%eax
f011062f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f0110632:	a1 a0 89 57 f0       	mov    0xf05789a0,%eax
f0110637:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st2KB + testSizes[1],startOf1st1KB, KERNEL_HEAP_START + 2*sizeof(int)};
f011063a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011063d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0110640:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110643:	89 45 90             	mov    %eax,-0x70(%ebp)
f0110646:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0110649:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011064c:	01 d0                	add    %edx,%eax
f011064e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0110651:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110654:	89 45 98             	mov    %eax,-0x68(%ebp)
f0110657:	c7 45 9c 08 00 00 f6 	movl   $0xf6000008,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+2] ;
	short* tstMidVAs[numOfBFTests+2] ;
	short* tstEndVAs[numOfBFTests+2] ;
	for (int i = 0; i < numOfBFTests; ++i)
f011065e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110665:	e9 d1 00 00 00       	jmp    f011073b <test_alloc_block_BF+0x2b1>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f011066a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011066d:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f0110671:	83 e8 08             	sub    $0x8,%eax
f0110674:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f0110677:	83 ec 08             	sub    $0x8,%esp
f011067a:	6a 03                	push   $0x3
f011067c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011067f:	e8 cd 26 01 00       	call   f0122d51 <alloc_block>
f0110684:	83 c4 10             	add    $0x10,%esp
f0110687:	89 c2                	mov    %eax,%edx
f0110689:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011068c:	89 94 85 70 ff ff ff 	mov    %edx,-0x90(%ebp,%eax,4)
f0110693:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110696:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f011069d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f01106a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01106a3:	d1 e8                	shr    %eax
f01106a5:	89 c2                	mov    %eax,%edx
f01106a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01106aa:	01 c2                	add    %eax,%edx
f01106ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106af:	89 94 85 54 ff ff ff 	mov    %edx,-0xac(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f01106b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01106b9:	8d 50 fe             	lea    -0x2(%eax),%edx
f01106bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01106bf:	01 c2                	add    %eax,%edx
f01106c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106c4:	89 94 85 38 ff ff ff 	mov    %edx,-0xc8(%ebp,%eax,4)

		//Check block
		cprintf("test#%d\n",i);
f01106cb:	83 ec 08             	sub    $0x8,%esp
f01106ce:	ff 75 d0             	pushl  -0x30(%ebp)
f01106d1:	68 af 9a 12 f0       	push   $0xf0129aaf
f01106d6:	e8 91 08 ff ff       	call   f0100f6c <cprintf>
f01106db:	83 c4 10             	add    $0x10,%esp
		expectedVA = (void*)expectedVAs[i];
f01106de:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106e1:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f01106e5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if (check_block(va, expectedVA, testSizes[i], 1) == 0)
f01106e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106eb:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01106ef:	6a 01                	push   $0x1
f01106f1:	50                   	push   %eax
f01106f2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01106f5:	ff 75 c8             	pushl  -0x38(%ebp)
f01106f8:	e8 e1 f2 ff ff       	call   f010f9de <check_block>
f01106fd:	83 c4 10             	add    $0x10,%esp
f0110700:	85 c0                	test   %eax,%eax
f0110702:	75 07                	jne    f011070b <test_alloc_block_BF+0x281>
		{
			is_correct = 0;
f0110704:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		*(tstStartVAs[i]) = 353;
f011070b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011070e:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110715:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f011071a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011071d:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110724:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f0110729:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011072c:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f0110733:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st2KB + testSizes[1],startOf1st1KB, KERNEL_HEAP_START + 2*sizeof(int)};
	short* tstStartVAs[numOfBFTests+2] ;
	short* tstMidVAs[numOfBFTests+2] ;
	short* tstEndVAs[numOfBFTests+2] ;
	for (int i = 0; i < numOfBFTests; ++i)
f0110738:	ff 45 d0             	incl   -0x30(%ebp)
f011073b:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f011073f:	0f 8e 25 ff ff ff    	jle    f011066a <test_alloc_block_BF+0x1e0>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct) is_correct = check_list_size(numOfAllocs);
f0110745:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110749:	74 10                	je     f011075b <test_alloc_block_BF+0x2d1>
f011074b:	83 ec 0c             	sub    $0xc,%esp
f011074e:	6a 07                	push   $0x7
f0110750:	e8 11 f3 ff ff       	call   f010fa66 <check_list_size>
f0110755:	83 c4 10             	add    $0x10,%esp
f0110758:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f011075b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011075f:	74 04                	je     f0110765 <test_alloc_block_BF+0x2db>
	{
		eval += 15;
f0110761:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f0110765:	83 ec 0c             	sub    $0xc,%esp
f0110768:	68 64 9c 12 f0       	push   $0xf0129c64
f011076d:	e8 fa 07 ff ff       	call   f0100f6c <cprintf>
f0110772:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110775:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData;
f011077c:	c7 45 c4 f8 00 00 00 	movl   $0xf8,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f0110783:	83 ec 08             	sub    $0x8,%esp
f0110786:	6a 03                	push   $0x3
f0110788:	ff 75 c4             	pushl  -0x3c(%ebp)
f011078b:	e8 c1 25 01 00       	call   f0122d51 <alloc_block>
f0110790:	83 c4 10             	add    $0x10,%esp
f0110793:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0110796:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110799:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f011079c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011079f:	d1 e8                	shr    %eax
f01107a1:	89 c2                	mov    %eax,%edx
f01107a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01107a6:	01 d0                	add    %edx,%eax
f01107a8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f01107ae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01107b1:	8d 50 fe             	lea    -0x2(%eax),%edx
f01107b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01107b7:	01 d0                	add    %edx,%eax
f01107b9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	//Check returned va
	expectedVA = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f01107bf:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01107c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01107c5:	01 c2                	add    %eax,%edx
f01107c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01107ca:	01 d0                	add    %edx,%eax
f01107cc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (is_correct) is_correct = check_block(va, expectedVA, kilo/4, 1);
f01107cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01107d3:	74 18                	je     f01107ed <test_alloc_block_BF+0x363>
f01107d5:	6a 01                	push   $0x1
f01107d7:	68 00 01 00 00       	push   $0x100
f01107dc:	ff 75 b4             	pushl  -0x4c(%ebp)
f01107df:	ff 75 c8             	pushl  -0x38(%ebp)
f01107e2:	e8 f7 f1 ff ff       	call   f010f9de <check_block>
f01107e7:	83 c4 10             	add    $0x10,%esp
f01107ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs-1);
f01107ed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01107f1:	74 10                	je     f0110803 <test_alloc_block_BF+0x379>
f01107f3:	83 ec 0c             	sub    $0xc,%esp
f01107f6:	6a 06                	push   $0x6
f01107f8:	e8 69 f2 ff ff       	call   f010fa66 <check_list_size>
f01107fd:	83 c4 10             	add    $0x10,%esp
f0110800:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfBFTests]) = 353 ;
f0110803:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110806:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f011080b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110811:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f0110816:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011081c:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110821:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110825:	74 04                	je     f011082b <test_alloc_block_BF+0x3a1>
	{
		eval += 10;
f0110827:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Try to allocate a block with a bit smaller size [internal fragmentation case]*/
	cprintf("	4: Try to allocate a block with a bit smaller size [internal fragmentation case]\n\n") ;
f011082b:	83 ec 0c             	sub    $0xc,%esp
f011082e:	68 b8 9a 12 f0       	push   $0xf0129ab8
f0110833:	e8 34 07 ff ff       	call   f0100f6c <cprintf>
f0110838:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011083b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = allocSizes[5] - sizeOfMetaData - 2;
f0110842:	a1 8c dd 17 f0       	mov    0xf017dd8c,%eax
f0110847:	83 e8 0a             	sub    $0xa,%eax
f011084a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests+1] = alloc_block(actualSize, DA_BF);
f011084d:	83 ec 08             	sub    $0x8,%esp
f0110850:	6a 03                	push   $0x3
f0110852:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110855:	e8 f7 24 01 00       	call   f0122d51 <alloc_block>
f011085a:	83 c4 10             	add    $0x10,%esp
f011085d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0110860:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110863:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests+1] = va + 2 ;
f0110866:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110869:	83 c0 02             	add    $0x2,%eax
f011086c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	tstEndVAs[numOfBFTests+1] = va + actualSize - sizeof(short);
f0110872:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110875:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110878:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011087b:	01 d0                	add    %edx,%eax
f011087d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
	//Check block
	expectedVA = startVAs[5*allocCntPerSize];
f0110883:	a1 80 86 57 f0       	mov    0xf0578680,%eax
f0110888:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, allocSizes[5], 1);
f011088b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011088f:	74 19                	je     f01108aa <test_alloc_block_BF+0x420>
f0110891:	a1 8c dd 17 f0       	mov    0xf017dd8c,%eax
f0110896:	6a 01                	push   $0x1
f0110898:	50                   	push   %eax
f0110899:	ff 75 b4             	pushl  -0x4c(%ebp)
f011089c:	ff 75 c8             	pushl  -0x38(%ebp)
f011089f:	e8 3a f1 ff ff       	call   f010f9de <check_block>
f01108a4:	83 c4 10             	add    $0x10,%esp
f01108a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 2);
f01108aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01108ae:	74 10                	je     f01108c0 <test_alloc_block_BF+0x436>
f01108b0:	83 ec 0c             	sub    $0xc,%esp
f01108b3:	6a 05                	push   $0x5
f01108b5:	e8 ac f1 ff ff       	call   f010fa66 <check_list_size>
f01108ba:	83 c4 10             	add    $0x10,%esp
f01108bd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfBFTests+1]) = 353 ;
f01108c0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01108c3:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests+1]) = 353 ;
f01108c8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01108ce:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests+1]) = 353 ;
f01108d3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01108d9:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f01108de:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01108e2:	74 04                	je     f01108e8 <test_alloc_block_BF+0x45e>
	{
		eval += 10;
f01108e4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
f01108e8:	83 ec 0c             	sub    $0xc,%esp
f01108eb:	68 0c 9b 12 f0       	push   $0xf0129b0c
f01108f0:	e8 77 06 ff ff       	call   f0100f6c <cprintf>
f01108f5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01108f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i < numOfBFTests+2; ++i)
f01108ff:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110906:	e9 8e 00 00 00       	jmp    f0110999 <test_alloc_block_BF+0x50f>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f011090b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011090e:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110915:	66 8b 00             	mov    (%eax),%ax
f0110918:	66 3d 61 01          	cmp    $0x161,%ax
f011091c:	75 26                	jne    f0110944 <test_alloc_block_BF+0x4ba>
f011091e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110921:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110928:	66 8b 00             	mov    (%eax),%ax
f011092b:	66 3d 61 01          	cmp    $0x161,%ax
f011092f:	75 13                	jne    f0110944 <test_alloc_block_BF+0x4ba>
f0110931:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110934:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f011093b:	66 8b 00             	mov    (%eax),%ax
f011093e:	66 3d 61 01          	cmp    $0x161,%ax
f0110942:	74 52                	je     f0110996 <test_alloc_block_BF+0x50c>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f0110944:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f011094b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011094e:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f0110955:	66 8b 00             	mov    (%eax),%ax
f0110958:	0f bf c8             	movswl %ax,%ecx
f011095b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011095e:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110965:	66 8b 00             	mov    (%eax),%ax
f0110968:	0f bf d0             	movswl %ax,%edx
f011096b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011096e:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110975:	66 8b 00             	mov    (%eax),%ax
f0110978:	98                   	cwtl   
f0110979:	83 ec 08             	sub    $0x8,%esp
f011097c:	51                   	push   %ecx
f011097d:	52                   	push   %edx
f011097e:	50                   	push   %eax
f011097f:	68 61 01 00 00       	push   $0x161
f0110984:	ff 75 cc             	pushl  -0x34(%ebp)
f0110987:	68 a8 9c 12 f0       	push   $0xf0129ca8
f011098c:	e8 db 05 ff ff       	call   f0100f6c <cprintf>
f0110991:	83 c4 20             	add    $0x20,%esp
			break;
f0110994:	eb 0d                	jmp    f01109a3 <test_alloc_block_BF+0x519>
	//====================================================================//
	/*BF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < numOfBFTests+2; ++i)
f0110996:	ff 45 cc             	incl   -0x34(%ebp)
f0110999:	83 7d cc 06          	cmpl   $0x6,-0x34(%ebp)
f011099d:	0f 8e 68 ff ff ff    	jle    f011090b <test_alloc_block_BF+0x481>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f01109a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01109a7:	74 04                	je     f01109ad <test_alloc_block_BF+0x523>
	{
		eval += 10;
f01109a9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f01109ad:	83 ec 08             	sub    $0x8,%esp
f01109b0:	ff 75 e4             	pushl  -0x1c(%ebp)
f01109b3:	68 14 9d 12 f0       	push   $0xf0129d14
f01109b8:	e8 af 05 ff ff       	call   f0100f6c <cprintf>
f01109bd:	83 c4 10             	add    $0x10,%esp
}
f01109c0:	90                   	nop
f01109c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01109c4:	5b                   	pop    %ebx
f01109c5:	5e                   	pop    %esi
f01109c6:	5f                   	pop    %edi
f01109c7:	5d                   	pop    %ebp
f01109c8:	c3                   	ret    

f01109c9 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f01109c9:	55                   	push   %ebp
f01109ca:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f01109cc:	90                   	nop
f01109cd:	5d                   	pop    %ebp
f01109ce:	c3                   	ret    

f01109cf <test_free_block_FF>:

void test_free_block_FF()
{
f01109cf:	55                   	push   %ebp
f01109d0:	89 e5                	mov    %esp,%ebp
f01109d2:	53                   	push   %ebx
f01109d3:	81 ec 94 00 00 00    	sub    $0x94,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f01109d9:	83 ec 0c             	sub    $0xc,%esp
f01109dc:	68 5c 9d 12 f0       	push   $0xf0129d5c
f01109e1:	e8 86 05 ff ff       	call   f0100f6c <cprintf>
f01109e6:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f01109e9:	83 ec 0c             	sub    $0xc,%esp
f01109ec:	68 9c 9d 12 f0       	push   $0xf0129d9c
f01109f1:	e8 76 05 ff ff       	call   f0100f6c <cprintf>
f01109f6:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f01109f9:	83 ec 0c             	sub    $0xc,%esp
f01109fc:	68 5c 9d 12 f0       	push   $0xf0129d5c
f0110a01:	e8 66 05 ff ff       	call   f0100f6c <cprintf>
f0110a06:	83 c4 10             	add    $0x10,%esp
	void*expected_va ;

	int eval = 0;
f0110a09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f0110a10:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110a17:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a1a:	83 ec 08             	sub    $0x8,%esp
f0110a1d:	50                   	push   %eax
f0110a1e:	68 00 00 00 f6       	push   $0xf6000000
f0110a23:	e8 57 24 01 00       	call   f0122e7f <initialize_dynamic_allocator>
f0110a28:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f0110a2b:	83 ec 0c             	sub    $0xc,%esp
f0110a2e:	68 dc 9d 12 f0       	push   $0xf0129ddc
f0110a33:	e8 34 05 ff ff       	call   f0100f6c <cprintf>
f0110a38:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f0110a3b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110a42:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110a49:	eb 2a                	jmp    f0110a75 <test_free_block_FF+0xa6>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110a4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110a4e:	8b 14 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%edx
f0110a55:	89 d0                	mov    %edx,%eax
f0110a57:	c1 e0 02             	shl    $0x2,%eax
f0110a5a:	01 d0                	add    %edx,%eax
f0110a5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110a63:	01 d0                	add    %edx,%eax
f0110a65:	c1 e0 03             	shl    $0x3,%eax
f0110a68:	89 c2                	mov    %eax,%edx
f0110a6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a6d:	01 d0                	add    %edx,%eax
f0110a6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110a72:	ff 45 e8             	incl   -0x18(%ebp)
f0110a75:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110a79:	7e d0                	jle    f0110a4b <test_free_block_FF+0x7c>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f0110a7b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a7e:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110a81:	83 e8 08             	sub    $0x8,%eax
f0110a84:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f0110a87:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110a8b:	7f 17                	jg     f0110aa4 <test_free_block_FF+0xd5>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110a8d:	83 ec 04             	sub    $0x4,%esp
f0110a90:	68 34 9e 12 f0       	push   $0xf0129e34
f0110a95:	68 68 02 00 00       	push   $0x268
f0110a9a:	68 28 96 12 f0       	push   $0xf0129628
f0110a9f:	e8 76 f8 fe ff       	call   f010031a <_panic>

	int idx = 0;
f0110aa4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f0110aab:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110ab2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110ab9:	e9 0b 01 00 00       	jmp    f0110bc9 <test_free_block_FF+0x1fa>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110abe:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110ac5:	e9 ef 00 00 00       	jmp    f0110bb9 <test_free_block_FF+0x1ea>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f0110aca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110acd:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f0110ad4:	83 e8 08             	sub    $0x8,%eax
f0110ad7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f0110ada:	83 ec 08             	sub    $0x8,%esp
f0110add:	6a 01                	push   $0x1
f0110adf:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110ae2:	e8 6a 22 01 00       	call   f0122d51 <alloc_block>
f0110ae7:	83 c4 10             	add    $0x10,%esp
f0110aea:	89 c2                	mov    %eax,%edx
f0110aec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110aef:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f0110af6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110af9:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110b00:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110b03:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110b06:	d1 e8                	shr    %eax
f0110b08:	89 c2                	mov    %eax,%edx
f0110b0a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110b0d:	01 c2                	add    %eax,%edx
f0110b0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b12:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110b19:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110b1c:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110b1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110b22:	01 c2                	add    %eax,%edx
f0110b24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b27:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
			//Check returned va
			expected_va = curVA + sizeOfMetaData/2;
f0110b2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110b31:	83 c0 04             	add    $0x4,%eax
f0110b34:	89 45 bc             	mov    %eax,-0x44(%ebp)
			if (check_block(va, expected_va, allocSizes[i], 1) == 0)
f0110b37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110b3a:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f0110b41:	6a 01                	push   $0x1
f0110b43:	50                   	push   %eax
f0110b44:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b47:	ff 75 c0             	pushl  -0x40(%ebp)
f0110b4a:	e8 8f ee ff ff       	call   f010f9de <check_block>
f0110b4f:	83 c4 10             	add    $0x10,%esp
f0110b52:	85 c0                	test   %eax,%eax
f0110b54:	75 20                	jne    f0110b76 <test_free_block_FF+0x1a7>
				//			if(va != (curVA + sizeOfMetaData/2))
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, expected_va ,va);
f0110b56:	83 ec 08             	sub    $0x8,%esp
f0110b59:	ff 75 c0             	pushl  -0x40(%ebp)
f0110b5c:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b5f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110b62:	68 ac 9e 12 f0       	push   $0xf0129eac
f0110b67:	68 79 02 00 00       	push   $0x279
f0110b6c:	68 28 96 12 f0       	push   $0xf0129628
f0110b71:	e8 a4 f7 fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f0110b76:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110b79:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f0110b80:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0110b83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b86:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0110b8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b90:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110b93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b96:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f0110b9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ba0:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110ba3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ba6:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f0110bad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bb0:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110bb3:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110bb6:	ff 45 d8             	incl   -0x28(%ebp)
f0110bb9:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0110bc0:	0f 8e 04 ff ff ff    	jle    f0110aca <test_free_block_FF+0xfb>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110bc6:	ff 45 dc             	incl   -0x24(%ebp)
f0110bc9:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110bcd:	0f 8e eb fe ff ff    	jle    f0110abe <test_free_block_FF+0xef>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0110bd3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110bd6:	83 e8 08             	sub    $0x8,%eax
f0110bd9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f0110bdc:	83 ec 08             	sub    $0x8,%esp
f0110bdf:	6a 01                	push   $0x1
f0110be1:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110be4:	e8 68 21 01 00       	call   f0122d51 <alloc_block>
f0110be9:	83 c4 10             	add    $0x10,%esp
f0110bec:	89 c2                	mov    %eax,%edx
f0110bee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bf1:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f0110bf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bfb:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110c02:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110c05:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110c08:	d1 e8                	shr    %eax
f0110c0a:	89 c2                	mov    %eax,%edx
f0110c0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c0f:	01 c2                	add    %eax,%edx
f0110c11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c14:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110c1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110c1e:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110c21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c24:	01 c2                	add    %eax,%edx
f0110c26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c29:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
	//Check returned va
	expected_va = curVA + sizeOfMetaData/2;
f0110c30:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110c33:	83 c0 04             	add    $0x4,%eax
f0110c36:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (check_block(va, expected_va, remainSize, 1) == 0)
f0110c39:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c3c:	6a 01                	push   $0x1
f0110c3e:	50                   	push   %eax
f0110c3f:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c42:	ff 75 c0             	pushl  -0x40(%ebp)
f0110c45:	e8 94 ed ff ff       	call   f010f9de <check_block>
f0110c4a:	83 c4 10             	add    $0x10,%esp
f0110c4d:	85 c0                	test   %eax,%eax
f0110c4f:	75 1d                	jne    f0110c6e <test_free_block_FF+0x29f>
		//			if(va != (curVA + sizeOfMetaData/2))
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x",  expected_va ,va);
f0110c51:	83 ec 0c             	sub    $0xc,%esp
f0110c54:	ff 75 c0             	pushl  -0x40(%ebp)
f0110c57:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c5a:	68 10 9f 12 f0       	push   $0xf0129f10
f0110c5f:	68 8c 02 00 00       	push   $0x28c
f0110c64:	68 28 96 12 f0       	push   $0xf0129628
f0110c69:	e8 ac f6 fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f0110c6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c71:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0110c78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c7b:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0110c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c81:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f0110c88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c8b:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0110c8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c91:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f0110c98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c9b:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f0110c9e:	83 ec 0c             	sub    $0xc,%esp
f0110ca1:	68 70 9f 12 f0       	push   $0xf0129f70
f0110ca6:	e8 c1 02 ff ff       	call   f0100f6c <cprintf>
f0110cab:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110cae:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f0110cb5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110cbc:	eb 5b                	jmp    f0110d19 <test_free_block_FF+0x34a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110cbe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110cc1:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110cc8:	66 8b 00             	mov    (%eax),%ax
f0110ccb:	98                   	cwtl   
f0110ccc:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110ccf:	75 26                	jne    f0110cf7 <test_free_block_FF+0x328>
f0110cd1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110cd4:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f0110cdb:	66 8b 00             	mov    (%eax),%ax
f0110cde:	98                   	cwtl   
f0110cdf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110ce2:	75 13                	jne    f0110cf7 <test_free_block_FF+0x328>
f0110ce4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110ce7:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f0110cee:	66 8b 00             	mov    (%eax),%ax
f0110cf1:	98                   	cwtl   
f0110cf2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110cf5:	74 1f                	je     f0110d16 <test_free_block_FF+0x347>
		{
			is_correct = 0;
f0110cf7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f0110cfe:	83 ec 04             	sub    $0x4,%esp
f0110d01:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d04:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d07:	68 a4 9f 12 f0       	push   $0xf0129fa4
f0110d0c:	e8 5b 02 ff ff       	call   f0100f6c <cprintf>
f0110d11:	83 c4 10             	add    $0x10,%esp
			break;
f0110d14:	eb 0b                	jmp    f0110d21 <test_free_block_FF+0x352>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f0110d16:	ff 45 d4             	incl   -0x2c(%ebp)
f0110d19:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110d1c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110d1f:	7c 9d                	jl     f0110cbe <test_free_block_FF+0x2ef>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110d21:	83 ec 0c             	sub    $0xc,%esp
f0110d24:	68 f4 9f 12 f0       	push   $0xf0129ff4
f0110d29:	e8 3e 02 ff ff       	call   f0100f6c <cprintf>
f0110d2e:	83 c4 10             	add    $0x10,%esp
	uint32 block_size, block_status, expected_size, *blk_header, *blk_footer;
	is_correct = 1;
f0110d31:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110d38:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110d3f:	e9 9b 00 00 00       	jmp    f0110ddf <test_free_block_FF+0x410>
	{
		cprintf("test#%d\n",i);
f0110d44:	83 ec 08             	sub    $0x8,%esp
f0110d47:	ff 75 d0             	pushl  -0x30(%ebp)
f0110d4a:	68 af 9a 12 f0       	push   $0xf0129aaf
f0110d4f:	e8 18 02 ff ff       	call   f0100f6c <cprintf>
f0110d54:	83 c4 10             	add    $0x10,%esp
		free_block(startVAs[i*allocCntPerSize]);
f0110d57:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110d5a:	89 d0                	mov    %edx,%eax
f0110d5c:	c1 e0 02             	shl    $0x2,%eax
f0110d5f:	01 d0                	add    %edx,%eax
f0110d61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110d68:	01 d0                	add    %edx,%eax
f0110d6a:	c1 e0 03             	shl    $0x3,%eax
f0110d6d:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110d74:	83 ec 0c             	sub    $0xc,%esp
f0110d77:	50                   	push   %eax
f0110d78:	e8 d0 23 01 00       	call   f012314d <free_block>
f0110d7d:	83 c4 10             	add    $0x10,%esp
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
f0110d80:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110d83:	8b 0c 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%ecx
f0110d8a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110d8d:	89 d0                	mov    %edx,%eax
f0110d8f:	c1 e0 02             	shl    $0x2,%eax
f0110d92:	01 d0                	add    %edx,%eax
f0110d94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110d9b:	01 d0                	add    %edx,%eax
f0110d9d:	c1 e0 03             	shl    $0x3,%eax
f0110da0:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0110da7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110daa:	89 d8                	mov    %ebx,%eax
f0110dac:	c1 e0 02             	shl    $0x2,%eax
f0110daf:	01 d8                	add    %ebx,%eax
f0110db1:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0110db8:	01 d8                	add    %ebx,%eax
f0110dba:	c1 e0 03             	shl    $0x3,%eax
f0110dbd:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110dc4:	6a 00                	push   $0x0
f0110dc6:	51                   	push   %ecx
f0110dc7:	52                   	push   %edx
f0110dc8:	50                   	push   %eax
f0110dc9:	e8 10 ec ff ff       	call   f010f9de <check_block>
f0110dce:	83 c4 10             	add    $0x10,%esp
f0110dd1:	85 c0                	test   %eax,%eax
f0110dd3:	75 07                	jne    f0110ddc <test_free_block_FF+0x40d>
		{
			is_correct = 0;
f0110dd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	uint32 block_size, block_status, expected_size, *blk_header, *blk_footer;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110ddc:	ff 45 d0             	incl   -0x30(%ebp)
f0110ddf:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0110de3:	0f 8e 5b ff ff ff    	jle    f0110d44 <test_free_block_FF+0x375>
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
		{
			is_correct = 0;
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0110de9:	c7 45 b8 07 00 00 00 	movl   $0x7,-0x48(%ebp)
	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0110df0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110df4:	74 11                	je     f0110e07 <test_free_block_FF+0x438>
f0110df6:	83 ec 0c             	sub    $0xc,%esp
f0110df9:	ff 75 b8             	pushl  -0x48(%ebp)
f0110dfc:	e8 65 ec ff ff       	call   f010fa66 <check_list_size>
f0110e01:	83 c4 10             	add    $0x10,%esp
f0110e04:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f0110e07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e0b:	74 04                	je     f0110e11 <test_free_block_FF+0x442>
	{
		eval += 10;
f0110e0d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f0110e11:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110e18:	a1 c0 8c 57 f0       	mov    0xf0578cc0,%eax
f0110e1d:	83 ec 0c             	sub    $0xc,%esp
f0110e20:	50                   	push   %eax
f0110e21:	e8 27 23 01 00       	call   f012314d <free_block>
f0110e26:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[numOfAllocs*allocCntPerSize], startVAs[numOfAllocs*allocCntPerSize], remainSize, 0);
f0110e29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e2d:	74 1e                	je     f0110e4d <test_free_block_FF+0x47e>
f0110e2f:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0110e32:	8b 15 c0 8c 57 f0    	mov    0xf0578cc0,%edx
f0110e38:	a1 c0 8c 57 f0       	mov    0xf0578cc0,%eax
f0110e3d:	6a 00                	push   $0x0
f0110e3f:	51                   	push   %ecx
f0110e40:	52                   	push   %edx
f0110e41:	50                   	push   %eax
f0110e42:	e8 97 eb ff ff       	call   f010f9de <check_block>
f0110e47:	83 c4 10             	add    $0x10,%esp
f0110e4a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0110e4d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e50:	83 e8 08             	sub    $0x8,%eax
f0110e53:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110e56:	83 ec 08             	sub    $0x8,%esp
f0110e59:	6a 01                	push   $0x1
f0110e5b:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110e5e:	e8 ee 1e 01 00       	call   f0122d51 <alloc_block>
f0110e63:	83 c4 10             	add    $0x10,%esp
f0110e66:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check block
	expected_va = (curVA + sizeOfMetaData/2);
f0110e69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110e6c:	83 c0 04             	add    $0x4,%eax
f0110e6f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (is_correct) is_correct = check_block(va, expected_va, remainSize, 1);
f0110e72:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e76:	74 17                	je     f0110e8f <test_free_block_FF+0x4c0>
f0110e78:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e7b:	6a 01                	push   $0x1
f0110e7d:	50                   	push   %eax
f0110e7e:	ff 75 bc             	pushl  -0x44(%ebp)
f0110e81:	ff 75 c0             	pushl  -0x40(%ebp)
f0110e84:	e8 55 eb ff ff       	call   f010f9de <check_block>
f0110e89:	83 c4 10             	add    $0x10,%esp
f0110e8c:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110e8f:	a1 bc 8c 57 f0       	mov    0xf0578cbc,%eax
f0110e94:	83 ec 0c             	sub    $0xc,%esp
f0110e97:	50                   	push   %eax
f0110e98:	e8 b0 22 01 00       	call   f012314d <free_block>
f0110e9d:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[numOfAllocs*allocCntPerSize-1], startVAs[numOfAllocs*allocCntPerSize-1], allocSizes[numOfAllocs-1], 0);
f0110ea0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110ea4:	74 21                	je     f0110ec7 <test_free_block_FF+0x4f8>
f0110ea6:	8b 0d 90 dd 17 f0    	mov    0xf017dd90,%ecx
f0110eac:	8b 15 bc 8c 57 f0    	mov    0xf0578cbc,%edx
f0110eb2:	a1 bc 8c 57 f0       	mov    0xf0578cbc,%eax
f0110eb7:	6a 00                	push   $0x0
f0110eb9:	51                   	push   %ecx
f0110eba:	52                   	push   %edx
f0110ebb:	50                   	push   %eax
f0110ebc:	e8 1d eb ff ff       	call   f010f9de <check_block>
f0110ec1:	83 c4 10             	add    $0x10,%esp
f0110ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f0110ec7:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f0110ecc:	83 e8 08             	sub    $0x8,%eax
f0110ecf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110ed2:	83 ec 08             	sub    $0x8,%esp
f0110ed5:	6a 01                	push   $0x1
f0110ed7:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110eda:	e8 72 1e 01 00       	call   f0122d51 <alloc_block>
f0110edf:	83 c4 10             	add    $0x10,%esp
f0110ee2:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected_va = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f0110ee5:	c7 45 bc 08 00 00 f6 	movl   $0xf6000008,-0x44(%ebp)
	if (is_correct) is_correct = check_block(va, expected_va, allocSizes[0], 1);
f0110eec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110ef0:	74 19                	je     f0110f0b <test_free_block_FF+0x53c>
f0110ef2:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f0110ef7:	6a 01                	push   $0x1
f0110ef9:	50                   	push   %eax
f0110efa:	ff 75 bc             	pushl  -0x44(%ebp)
f0110efd:	ff 75 c0             	pushl  -0x40(%ebp)
f0110f00:	e8 d9 ea ff ff       	call   f010f9de <check_block>
f0110f05:	83 c4 10             	add    $0x10,%esp
f0110f08:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Free 2nd block
	free_block(startVAs[1]);
f0110f0b:	a1 e4 76 57 f0       	mov    0xf05776e4,%eax
f0110f10:	83 ec 0c             	sub    $0xc,%esp
f0110f13:	50                   	push   %eax
f0110f14:	e8 34 22 01 00       	call   f012314d <free_block>
f0110f19:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[1], startVAs[1], allocSizes[0], 0);
f0110f1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f20:	74 21                	je     f0110f43 <test_free_block_FF+0x574>
f0110f22:	8b 0d 78 dd 17 f0    	mov    0xf017dd78,%ecx
f0110f28:	8b 15 e4 76 57 f0    	mov    0xf05776e4,%edx
f0110f2e:	a1 e4 76 57 f0       	mov    0xf05776e4,%eax
f0110f33:	6a 00                	push   $0x0
f0110f35:	51                   	push   %ecx
f0110f36:	52                   	push   %edx
f0110f37:	50                   	push   %eax
f0110f38:	e8 a1 ea ff ff       	call   f010f9de <check_block>
f0110f3d:	83 c4 10             	add    $0x10,%esp
f0110f40:	89 45 f0             	mov    %eax,-0x10(%ebp)

	expectedNumOfFreeBlks++ ;
f0110f43:	ff 45 b8             	incl   -0x48(%ebp)
	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0110f46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f4a:	74 11                	je     f0110f5d <test_free_block_FF+0x58e>
f0110f4c:	83 ec 0c             	sub    $0xc,%esp
f0110f4f:	ff 75 b8             	pushl  -0x48(%ebp)
f0110f52:	e8 0f eb ff ff       	call   f010fa66 <check_list_size>
f0110f57:	83 c4 10             	add    $0x10,%esp
f0110f5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f0110f5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f61:	74 04                	je     f0110f67 <test_free_block_FF+0x598>
	{
		eval += 10;
f0110f63:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110f67:	83 ec 0c             	sub    $0xc,%esp
f0110f6a:	68 24 a0 12 f0       	push   $0xf012a024
f0110f6f:	e8 f8 ff fe ff       	call   f0100f6c <cprintf>
f0110f74:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110f77:	83 ec 0c             	sub    $0xc,%esp
f0110f7a:	68 60 a0 12 f0       	push   $0xf012a060
f0110f7f:	e8 e8 ff fe ff       	call   f0100f6c <cprintf>
f0110f84:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110f87:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110f8e:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110f95:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110f98:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110f9f:	83 ec 0c             	sub    $0xc,%esp
f0110fa2:	50                   	push   %eax
f0110fa3:	e8 a5 21 01 00       	call   f012314d <free_block>
f0110fa8:	83 c4 10             	add    $0x10,%esp
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f0110fab:	8b 15 90 dd 17 f0    	mov    0xf017dd90,%edx
f0110fb1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fb4:	01 d0                	add    %edx,%eax
f0110fb6:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0110fb9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110fbc:	48                   	dec    %eax
f0110fbd:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0110fc4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110fc7:	48                   	dec    %eax
f0110fc8:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0110fcf:	6a 00                	push   $0x0
f0110fd1:	ff 75 b0             	pushl  -0x50(%ebp)
f0110fd4:	52                   	push   %edx
f0110fd5:	50                   	push   %eax
f0110fd6:	e8 03 ea ff ff       	call   f010f9de <check_block>
f0110fdb:	83 c4 10             	add    $0x10,%esp
f0110fde:	85 c0                	test   %eax,%eax
f0110fe0:	75 07                	jne    f0110fe9 <test_free_block_FF+0x61a>
	{
		is_correct = 0;
f0110fe2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110fe9:	83 ec 0c             	sub    $0xc,%esp
f0110fec:	68 75 a0 12 f0       	push   $0xf012a075
f0110ff1:	e8 76 ff fe ff       	call   f0100f6c <cprintf>
f0110ff6:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0110ff9:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0111000:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111003:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f011100a:	83 ec 0c             	sub    $0xc,%esp
f011100d:	50                   	push   %eax
f011100e:	e8 3a 21 01 00       	call   f012314d <free_block>
f0111013:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[2]+allocSizes[2];
f0111016:	8b 15 80 dd 17 f0    	mov    0xf017dd80,%edx
f011101c:	a1 80 dd 17 f0       	mov    0xf017dd80,%eax
f0111021:	01 d0                	add    %edx,%eax
f0111023:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111026:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111029:	48                   	dec    %eax
f011102a:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111031:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111034:	48                   	dec    %eax
f0111035:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f011103c:	6a 00                	push   $0x0
f011103e:	ff 75 b0             	pushl  -0x50(%ebp)
f0111041:	52                   	push   %edx
f0111042:	50                   	push   %eax
f0111043:	e8 96 e9 ff ff       	call   f010f9de <check_block>
f0111048:	83 c4 10             	add    $0x10,%esp
f011104b:	85 c0                	test   %eax,%eax
f011104d:	75 07                	jne    f0111056 <test_free_block_FF+0x687>
	{
		is_correct = 0;
f011104f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111056:	83 ec 0c             	sub    $0xc,%esp
f0111059:	ff 75 b8             	pushl  -0x48(%ebp)
f011105c:	e8 05 ea ff ff       	call   f010fa66 <check_list_size>
f0111061:	83 c4 10             	add    $0x10,%esp
f0111064:	85 c0                	test   %eax,%eax
f0111066:	75 07                	jne    f011106f <test_free_block_FF+0x6a0>
	{
		is_correct = 0;
f0111068:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	if (is_correct)
f011106f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111073:	74 04                	je     f0111079 <test_free_block_FF+0x6aa>
	{
		eval += 15;
f0111075:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0111079:	83 ec 0c             	sub    $0xc,%esp
f011107c:	68 90 a0 12 f0       	push   $0xf012a090
f0111081:	e8 e6 fe fe ff       	call   f0100f6c <cprintf>
f0111086:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0111089:	83 ec 0c             	sub    $0xc,%esp
f011108c:	68 c8 a0 12 f0       	push   $0xf012a0c8
f0111091:	e8 d6 fe fe ff       	call   f0100f6c <cprintf>
f0111096:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111099:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f01110a0:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01110a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110aa:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01110b1:	83 ec 0c             	sub    $0xc,%esp
f01110b4:	50                   	push   %eax
f01110b5:	e8 93 20 01 00       	call   f012314d <free_block>
f01110ba:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[0];
f01110bd:	8b 15 78 dd 17 f0    	mov    0xf017dd78,%edx
f01110c3:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f01110c8:	01 d0                	add    %edx,%eax
f01110ca:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f01110cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110d0:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f01110d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110da:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01110e1:	6a 00                	push   $0x0
f01110e3:	ff 75 b0             	pushl  -0x50(%ebp)
f01110e6:	52                   	push   %edx
f01110e7:	50                   	push   %eax
f01110e8:	e8 f1 e8 ff ff       	call   f010f9de <check_block>
f01110ed:	83 c4 10             	add    $0x10,%esp
f01110f0:	85 c0                	test   %eax,%eax
f01110f2:	75 07                	jne    f01110fb <test_free_block_FF+0x72c>
	{
		is_correct = 0;
f01110f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f01110fb:	83 ec 0c             	sub    $0xc,%esp
f01110fe:	68 dd a0 12 f0       	push   $0xf012a0dd
f0111103:	e8 64 fe fe ff       	call   f0100f6c <cprintf>
f0111108:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f011110b:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0111112:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111115:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f011111c:	83 ec 0c             	sub    $0xc,%esp
f011111f:	50                   	push   %eax
f0111120:	e8 28 20 01 00       	call   f012314d <free_block>
f0111125:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0111128:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011112b:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111132:	83 ec 0c             	sub    $0xc,%esp
f0111135:	50                   	push   %eax
f0111136:	e8 df 1b 01 00       	call   f0122d1a <get_block_size>
f011113b:	83 c4 10             	add    $0x10,%esp
f011113e:	89 45 ac             	mov    %eax,-0x54(%ebp)
	expected_size = allocSizes[0]+allocSizes[1];
f0111141:	8b 15 78 dd 17 f0    	mov    0xf017dd78,%edx
f0111147:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f011114c:	01 d0                	add    %edx,%eax
f011114e:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111151:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111154:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f011115b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011115e:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111165:	6a 00                	push   $0x0
f0111167:	ff 75 b0             	pushl  -0x50(%ebp)
f011116a:	52                   	push   %edx
f011116b:	50                   	push   %eax
f011116c:	e8 6d e8 ff ff       	call   f010f9de <check_block>
f0111171:	83 c4 10             	add    $0x10,%esp
f0111174:	85 c0                	test   %eax,%eax
f0111176:	75 07                	jne    f011117f <test_free_block_FF+0x7b0>
	{
		is_correct = 0;
f0111178:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f011117f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111183:	74 11                	je     f0111196 <test_free_block_FF+0x7c7>
f0111185:	83 ec 0c             	sub    $0xc,%esp
f0111188:	ff 75 b8             	pushl  -0x48(%ebp)
f011118b:	e8 d6 e8 ff ff       	call   f010fa66 <check_list_size>
f0111190:	83 c4 10             	add    $0x10,%esp
f0111193:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f0111196:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011119a:	74 04                	je     f01111a0 <test_free_block_FF+0x7d1>
	{
		eval += 15;
f011119c:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f01111a0:	83 ec 0c             	sub    $0xc,%esp
f01111a3:	68 f8 a0 12 f0       	push   $0xf012a0f8
f01111a8:	e8 bf fd fe ff       	call   f0100f6c <cprintf>
f01111ad:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f01111b7:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);	//no merge
f01111be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01111c1:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01111c8:	83 ec 0c             	sub    $0xc,%esp
f01111cb:	50                   	push   %eax
f01111cc:	e8 7c 1f 01 00       	call   f012314d <free_block>
f01111d1:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks++;
f01111d4:	ff 45 b8             	incl   -0x48(%ebp)

	blockIndex = 4*allocCntPerSize - 1 ;
f01111d7:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);	//merge with prev & next
f01111de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01111e1:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01111e8:	83 ec 0c             	sub    $0xc,%esp
f01111eb:	50                   	push   %eax
f01111ec:	e8 5c 1f 01 00       	call   f012314d <free_block>
f01111f1:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks--;
f01111f4:	ff 4d b8             	decl   -0x48(%ebp)

	block_size = get_block_size(startVAs[blockIndex-1]) ;
f01111f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01111fa:	48                   	dec    %eax
f01111fb:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111202:	83 ec 0c             	sub    $0xc,%esp
f0111205:	50                   	push   %eax
f0111206:	e8 0f 1b 01 00       	call   f0122d1a <get_block_size>
f011120b:	83 c4 10             	add    $0x10,%esp
f011120e:	89 45 ac             	mov    %eax,-0x54(%ebp)
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f0111211:	8b 15 84 dd 17 f0    	mov    0xf017dd84,%edx
f0111217:	a1 84 dd 17 f0       	mov    0xf017dd84,%eax
f011121c:	01 c2                	add    %eax,%edx
f011121e:	a1 88 dd 17 f0       	mov    0xf017dd88,%eax
f0111223:	01 d0                	add    %edx,%eax
f0111225:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111228:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011122b:	48                   	dec    %eax
f011122c:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111233:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111236:	48                   	dec    %eax
f0111237:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f011123e:	6a 00                	push   $0x0
f0111240:	ff 75 b0             	pushl  -0x50(%ebp)
f0111243:	52                   	push   %edx
f0111244:	50                   	push   %eax
f0111245:	e8 94 e7 ff ff       	call   f010f9de <check_block>
f011124a:	83 c4 10             	add    $0x10,%esp
f011124d:	85 c0                	test   %eax,%eax
f011124f:	75 07                	jne    f0111258 <test_free_block_FF+0x889>
	{
		is_correct = 0;
f0111251:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0111258:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011125c:	74 11                	je     f011126f <test_free_block_FF+0x8a0>
f011125e:	83 ec 0c             	sub    $0xc,%esp
f0111261:	ff 75 b8             	pushl  -0x48(%ebp)
f0111264:	e8 fd e7 ff ff       	call   f010fa66 <check_list_size>
f0111269:	83 c4 10             	add    $0x10,%esp
f011126c:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (is_correct)
f011126f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111273:	74 04                	je     f0111279 <test_free_block_FF+0x8aa>
	{
		eval += 20;
f0111275:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0111279:	83 ec 0c             	sub    $0xc,%esp
f011127c:	68 38 a1 12 f0       	push   $0xf012a138
f0111281:	e8 e6 fc fe ff       	call   f0100f6c <cprintf>
f0111286:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f0111289:	83 ec 0c             	sub    $0xc,%esp
f011128c:	68 7c a1 12 f0       	push   $0xf012a17c
f0111291:	e8 d6 fc fe ff       	call   f0100f6c <cprintf>
f0111296:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111299:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData;
f01112a0:	c7 45 c4 f8 13 00 00 	movl   $0x13f8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01112a7:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f01112ae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01112b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01112b4:	01 d0                	add    %edx,%eax
f01112b6:	83 c0 07             	add    $0x7,%eax
f01112b9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01112bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01112bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01112c4:	f7 75 a8             	divl   -0x58(%ebp)
f01112c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01112ca:	29 d0                	sub    %edx,%eax
f01112cc:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01112cf:	83 ec 08             	sub    $0x8,%esp
f01112d2:	6a 01                	push   $0x1
f01112d4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01112d7:	e8 75 1a 01 00       	call   f0122d51 <alloc_block>
f01112dc:	83 c4 10             	add    $0x10,%esp
f01112df:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f01112e2:	c7 45 a0 08 00 00 f6 	movl   $0xf6000008,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01112e9:	6a 01                	push   $0x1
f01112eb:	ff 75 b0             	pushl  -0x50(%ebp)
f01112ee:	ff 75 a0             	pushl  -0x60(%ebp)
f01112f1:	ff 75 c0             	pushl  -0x40(%ebp)
f01112f4:	e8 e5 e6 ff ff       	call   f010f9de <check_block>
f01112f9:	83 c4 10             	add    $0x10,%esp
f01112fc:	85 c0                	test   %eax,%eax
f01112fe:	75 17                	jne    f0111317 <test_free_block_FF+0x948>
	{
		is_correct = 0;
f0111300:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: Failed\n");
f0111307:	83 ec 0c             	sub    $0xc,%esp
f011130a:	68 a2 a1 12 f0       	push   $0xf012a1a2
f011130f:	e8 58 fc fe ff       	call   f0100f6c <cprintf>
f0111314:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData;
f0111317:	c7 45 c4 f8 0b 00 00 	movl   $0xbf8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f011131e:	c7 45 9c 02 00 00 00 	movl   $0x2,-0x64(%ebp)
f0111325:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111328:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011132b:	01 d0                	add    %edx,%eax
f011132d:	83 c0 07             	add    $0x7,%eax
f0111330:	89 45 98             	mov    %eax,-0x68(%ebp)
f0111333:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111336:	ba 00 00 00 00       	mov    $0x0,%edx
f011133b:	f7 75 9c             	divl   -0x64(%ebp)
f011133e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111341:	29 d0                	sub    %edx,%eax
f0111343:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111346:	83 ec 08             	sub    $0x8,%esp
f0111349:	6a 01                	push   $0x1
f011134b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011134e:	e8 fe 19 01 00       	call   f0122d51 <alloc_block>
f0111353:	83 c4 10             	add    $0x10,%esp
f0111356:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeof(int) + 5*kilo + sizeOfMetaData/2);
f0111359:	c7 45 a0 08 14 00 f6 	movl   $0xf6001408,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111360:	6a 01                	push   $0x1
f0111362:	ff 75 b0             	pushl  -0x50(%ebp)
f0111365:	ff 75 a0             	pushl  -0x60(%ebp)
f0111368:	ff 75 c0             	pushl  -0x40(%ebp)
f011136b:	e8 6e e6 ff ff       	call   f010f9de <check_block>
f0111370:	83 c4 10             	add    $0x10,%esp
f0111373:	85 c0                	test   %eax,%eax
f0111375:	75 17                	jne    f011138e <test_free_block_FF+0x9bf>
	{
		is_correct = 0;
f0111377:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: Failed\n");
f011137e:	83 ec 0c             	sub    $0xc,%esp
f0111381:	68 c0 a1 12 f0       	push   $0xf012a1c0
f0111386:	e8 e1 fb fe ff       	call   f0100f6c <cprintf>
f011138b:	83 c4 10             	add    $0x10,%esp
	}

	expectedNumOfFreeBlks--;
f011138e:	ff 4d b8             	decl   -0x48(%ebp)

	/*INTERNAL FRAGMENTATION CASE*/
	actualSize = 4*kilo + 10 ;
f0111391:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	expected_size = MAX(ROUNDUP(actualSize + sizeOfMetaData, 2), allocSizes[0]+allocSizes[1]) ;
f0111398:	c7 45 94 02 00 00 00 	movl   $0x2,-0x6c(%ebp)
f011139f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01113a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01113a5:	01 d0                	add    %edx,%eax
f01113a7:	83 c0 07             	add    $0x7,%eax
f01113aa:	89 45 90             	mov    %eax,-0x70(%ebp)
f01113ad:	8b 45 90             	mov    -0x70(%ebp),%eax
f01113b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01113b5:	f7 75 94             	divl   -0x6c(%ebp)
f01113b8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01113bb:	29 d0                	sub    %edx,%eax
f01113bd:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01113c0:	8b 15 78 dd 17 f0    	mov    0xf017dd78,%edx
f01113c6:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f01113cb:	01 d0                	add    %edx,%eax
f01113cd:	89 45 88             	mov    %eax,-0x78(%ebp)
f01113d0:	8b 55 88             	mov    -0x78(%ebp),%edx
f01113d3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01113d6:	39 d0                	cmp    %edx,%eax
f01113d8:	73 02                	jae    f01113dc <test_free_block_FF+0xa0d>
f01113da:	89 d0                	mov    %edx,%eax
f01113dc:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01113df:	83 ec 08             	sub    $0x8,%esp
f01113e2:	6a 01                	push   $0x1
f01113e4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01113e7:	e8 65 19 01 00       	call   f0122d51 <alloc_block>
f01113ec:	83 c4 10             	add    $0x10,%esp
f01113ef:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f01113f2:	a1 fc 79 57 f0       	mov    0xf05779fc,%eax
f01113f7:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01113fa:	6a 01                	push   $0x1
f01113fc:	ff 75 b0             	pushl  -0x50(%ebp)
f01113ff:	ff 75 a0             	pushl  -0x60(%ebp)
f0111402:	ff 75 c0             	pushl  -0x40(%ebp)
f0111405:	e8 d4 e5 ff ff       	call   f010f9de <check_block>
f011140a:	83 c4 10             	add    $0x10,%esp
f011140d:	85 c0                	test   %eax,%eax
f011140f:	75 17                	jne    f0111428 <test_free_block_FF+0xa59>
	{
		is_correct = 0;
f0111411:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: Failed INTERNAL FRAGMENTATION CASE\n");
f0111418:	83 ec 0c             	sub    $0xc,%esp
f011141b:	68 e0 a1 12 f0       	push   $0xf012a1e0
f0111420:	e8 47 fb fe ff       	call   f0100f6c <cprintf>
f0111425:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0111428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011142c:	74 04                	je     f0111432 <test_free_block_FF+0xa63>
	{
		eval += 10;
f011142e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	expectedNumOfFreeBlks--;
f0111432:	ff 4d b8             	decl   -0x48(%ebp)

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0111435:	83 ec 0c             	sub    $0xc,%esp
f0111438:	68 1c a2 12 f0       	push   $0xf012a21c
f011143d:	e8 2a fb fe ff       	call   f0100f6c <cprintf>
f0111442:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111445:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f011144c:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0111453:	c7 45 84 02 00 00 00 	movl   $0x2,-0x7c(%ebp)
f011145a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011145d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0111460:	01 d0                	add    %edx,%eax
f0111462:	83 c0 07             	add    $0x7,%eax
f0111465:	89 45 80             	mov    %eax,-0x80(%ebp)
f0111468:	8b 45 80             	mov    -0x80(%ebp),%eax
f011146b:	ba 00 00 00 00       	mov    $0x0,%edx
f0111470:	f7 75 84             	divl   -0x7c(%ebp)
f0111473:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111476:	29 d0                	sub    %edx,%eax
f0111478:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011147b:	83 ec 08             	sub    $0x8,%esp
f011147e:	6a 01                	push   $0x1
f0111480:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111483:	e8 c9 18 01 00       	call   f0122d51 <alloc_block>
f0111488:	83 c4 10             	add    $0x10,%esp
f011148b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f011148e:	a1 58 83 57 f0       	mov    0xf0578358,%eax
f0111493:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111496:	6a 01                	push   $0x1
f0111498:	ff 75 b0             	pushl  -0x50(%ebp)
f011149b:	ff 75 a0             	pushl  -0x60(%ebp)
f011149e:	ff 75 c0             	pushl  -0x40(%ebp)
f01114a1:	e8 38 e5 ff ff       	call   f010f9de <check_block>
f01114a6:	83 c4 10             	add    $0x10,%esp
f01114a9:	85 c0                	test   %eax,%eax
f01114ab:	75 17                	jne    f01114c4 <test_free_block_FF+0xaf5>
	{
		is_correct = 0;
f01114ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.4: Failed\n");
f01114b4:	83 ec 0c             	sub    $0xc,%esp
f01114b7:	68 49 a2 12 f0       	push   $0xf012a249
f01114bc:	e8 ab fa fe ff       	call   f0100f6c <cprintf>
f01114c1:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01114c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01114c8:	74 04                	je     f01114ce <test_free_block_FF+0xaff>
	{
		eval += 10;
f01114ca:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f01114ce:	83 ec 0c             	sub    $0xc,%esp
f01114d1:	68 68 a2 12 f0       	push   $0xf012a268
f01114d6:	e8 91 fa fe ff       	call   f0100f6c <cprintf>
f01114db:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01114de:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData;
f01114e5:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01114ec:	c7 85 7c ff ff ff 02 	movl   $0x2,-0x84(%ebp)
f01114f3:	00 00 00 
f01114f6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01114f9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01114ff:	01 d0                	add    %edx,%eax
f0111501:	83 c0 07             	add    $0x7,%eax
f0111504:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011150a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111510:	ba 00 00 00 00       	mov    $0x0,%edx
f0111515:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011151b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111521:	29 d0                	sub    %edx,%eax
f0111523:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111526:	83 ec 08             	sub    $0x8,%esp
f0111529:	6a 01                	push   $0x1
f011152b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011152e:	e8 1e 18 01 00       	call   f0122d51 <alloc_block>
f0111533:	83 c4 10             	add    $0x10,%esp
f0111536:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0111539:	a1 20 7d 57 f0       	mov    0xf0577d20,%eax
f011153e:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111541:	6a 01                	push   $0x1
f0111543:	ff 75 b0             	pushl  -0x50(%ebp)
f0111546:	ff 75 a0             	pushl  -0x60(%ebp)
f0111549:	ff 75 c0             	pushl  -0x40(%ebp)
f011154c:	e8 8d e4 ff ff       	call   f010f9de <check_block>
f0111551:	83 c4 10             	add    $0x10,%esp
f0111554:	85 c0                	test   %eax,%eax
f0111556:	75 17                	jne    f011156f <test_free_block_FF+0xba0>
	{
		is_correct = 0;
f0111558:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.5: Failed\n");
f011155f:	83 ec 0c             	sub    $0xc,%esp
f0111562:	68 8e a2 12 f0       	push   $0xf012a28e
f0111567:	e8 00 fa fe ff       	call   f0100f6c <cprintf>
f011156c:	83 c4 10             	add    $0x10,%esp
	}

	expectedNumOfFreeBlks--;
f011156f:	ff 4d b8             	decl   -0x48(%ebp)

	actualSize = 8*kilo - sizeOfMetaData;
f0111572:	c7 45 c4 f8 1f 00 00 	movl   $0x1ff8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0111579:	c7 85 74 ff ff ff 02 	movl   $0x2,-0x8c(%ebp)
f0111580:	00 00 00 
f0111583:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111586:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011158c:	01 d0                	add    %edx,%eax
f011158e:	83 c0 07             	add    $0x7,%eax
f0111591:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0111597:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011159d:	ba 00 00 00 00       	mov    $0x0,%edx
f01115a2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01115a8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01115ae:	29 d0                	sub    %edx,%eax
f01115b0:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01115b3:	83 ec 08             	sub    $0x8,%esp
f01115b6:	6a 01                	push   $0x1
f01115b8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01115bb:	e8 91 17 01 00       	call   f0122d51 <alloc_block>
f01115c0:	83 c4 10             	add    $0x10,%esp
f01115c3:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f01115c6:	a1 bc 8c 57 f0       	mov    0xf0578cbc,%eax
f01115cb:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01115ce:	6a 01                	push   $0x1
f01115d0:	ff 75 b0             	pushl  -0x50(%ebp)
f01115d3:	ff 75 a0             	pushl  -0x60(%ebp)
f01115d6:	ff 75 c0             	pushl  -0x40(%ebp)
f01115d9:	e8 00 e4 ff ff       	call   f010f9de <check_block>
f01115de:	83 c4 10             	add    $0x10,%esp
f01115e1:	85 c0                	test   %eax,%eax
f01115e3:	75 17                	jne    f01115fc <test_free_block_FF+0xc2d>
	{
		is_correct = 0;
f01115e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.6: Failed\n");
f01115ec:	83 ec 0c             	sub    $0xc,%esp
f01115ef:	68 ac a2 12 f0       	push   $0xf012a2ac
f01115f4:	e8 73 f9 fe ff       	call   f0100f6c <cprintf>
f01115f9:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f01115fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111600:	74 11                	je     f0111613 <test_free_block_FF+0xc44>
f0111602:	83 ec 0c             	sub    $0xc,%esp
f0111605:	ff 75 b8             	pushl  -0x48(%ebp)
f0111608:	e8 59 e4 ff ff       	call   f010fa66 <check_list_size>
f011160d:	83 c4 10             	add    $0x10,%esp
f0111610:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (is_correct)
f0111613:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111617:	74 04                	je     f011161d <test_free_block_FF+0xc4e>
	{
		eval += 10;
f0111619:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f011161d:	83 ec 08             	sub    $0x8,%esp
f0111620:	ff 75 f4             	pushl  -0xc(%ebp)
f0111623:	68 cc a2 12 f0       	push   $0xf012a2cc
f0111628:	e8 3f f9 fe ff       	call   f0100f6c <cprintf>
f011162d:	83 c4 10             	add    $0x10,%esp

}
f0111630:	90                   	nop
f0111631:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0111634:	c9                   	leave  
f0111635:	c3                   	ret    

f0111636 <test_free_block_BF>:

void test_free_block_BF()
{
f0111636:	55                   	push   %ebp
f0111637:	89 e5                	mov    %esp,%ebp
f0111639:	53                   	push   %ebx
f011163a:	81 ec 84 00 00 00    	sub    $0x84,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0111640:	83 ec 0c             	sub    $0xc,%esp
f0111643:	68 5c 9d 12 f0       	push   $0xf0129d5c
f0111648:	e8 1f f9 fe ff       	call   f0100f6c <cprintf>
f011164d:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f0111650:	83 ec 0c             	sub    $0xc,%esp
f0111653:	68 9c 9d 12 f0       	push   $0xf0129d9c
f0111658:	e8 0f f9 fe ff       	call   f0100f6c <cprintf>
f011165d:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f0111660:	83 ec 0c             	sub    $0xc,%esp
f0111663:	68 5c 9d 12 f0       	push   $0xf0129d5c
f0111668:	e8 ff f8 fe ff       	call   f0100f6c <cprintf>
f011166d:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f0111670:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0111677:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011167a:	83 ec 08             	sub    $0x8,%esp
f011167d:	50                   	push   %eax
f011167e:	68 00 00 00 f6       	push   $0xf6000000
f0111683:	e8 f7 17 01 00       	call   f0122e7f <initialize_dynamic_allocator>
f0111688:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f011168b:	83 ec 0c             	sub    $0xc,%esp
f011168e:	68 dc 9d 12 f0       	push   $0xf0129ddc
f0111693:	e8 d4 f8 fe ff       	call   f0100f6c <cprintf>
f0111698:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f011169b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01116a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01116a9:	eb 2a                	jmp    f01116d5 <test_free_block_BF+0x9f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01116ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01116ae:	8b 14 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%edx
f01116b5:	89 d0                	mov    %edx,%eax
f01116b7:	c1 e0 02             	shl    $0x2,%eax
f01116ba:	01 d0                	add    %edx,%eax
f01116bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01116c3:	01 d0                	add    %edx,%eax
f01116c5:	c1 e0 03             	shl    $0x3,%eax
f01116c8:	89 c2                	mov    %eax,%edx
f01116ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01116cd:	01 d0                	add    %edx,%eax
f01116cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01116d2:	ff 45 f0             	incl   -0x10(%ebp)
f01116d5:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f01116d9:	7e d0                	jle    f01116ab <test_free_block_BF+0x75>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f01116db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01116de:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01116e1:	83 e8 08             	sub    $0x8,%eax
f01116e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f01116e7:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01116eb:	7f 17                	jg     f0111704 <test_free_block_BF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01116ed:	83 ec 04             	sub    $0x4,%esp
f01116f0:	68 34 9e 12 f0       	push   $0xf0129e34
f01116f5:	68 b1 03 00 00       	push   $0x3b1
f01116fa:	68 28 96 12 f0       	push   $0xf0129628
f01116ff:	e8 16 ec fe ff       	call   f010031a <_panic>

	int idx = 0;
f0111704:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f011170b:	c7 45 e8 04 00 00 f6 	movl   $0xf6000004,-0x18(%ebp)

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
f0111712:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0111719:	e9 0f 01 00 00       	jmp    f011182d <test_free_block_BF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011171e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0111725:	e9 f3 00 00 00       	jmp    f011181d <test_free_block_BF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f011172a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011172d:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f0111734:	83 e8 08             	sub    $0x8,%eax
f0111737:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f011173a:	83 ec 08             	sub    $0x8,%esp
f011173d:	6a 03                	push   $0x3
f011173f:	ff 75 cc             	pushl  -0x34(%ebp)
f0111742:	e8 0a 16 01 00       	call   f0122d51 <alloc_block>
f0111747:	83 c4 10             	add    $0x10,%esp
f011174a:	89 c2                	mov    %eax,%edx
f011174c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011174f:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f0111756:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111759:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111760:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0111763:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111766:	d1 e8                	shr    %eax
f0111768:	89 c2                	mov    %eax,%edx
f011176a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011176d:	01 c2                	add    %eax,%edx
f011176f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111772:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0111779:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011177c:	8d 50 fe             	lea    -0x2(%eax),%edx
f011177f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111782:	01 c2                	add    %eax,%edx
f0111784:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111787:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
			//Check returned va
			expected_va = curVA + sizeOfMetaData/2;
f011178e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111791:	83 c0 04             	add    $0x4,%eax
f0111794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			if (check_block(va, expected_va, allocSizes[i], 1) == 0)
f0111797:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011179a:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01117a1:	6a 01                	push   $0x1
f01117a3:	50                   	push   %eax
f01117a4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01117a7:	ff 75 c8             	pushl  -0x38(%ebp)
f01117aa:	e8 2f e2 ff ff       	call   f010f9de <check_block>
f01117af:	83 c4 10             	add    $0x10,%esp
f01117b2:	85 c0                	test   %eax,%eax
f01117b4:	75 24                	jne    f01117da <test_free_block_BF+0x1a4>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f01117b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01117b9:	83 c0 08             	add    $0x8,%eax
f01117bc:	83 ec 08             	sub    $0x8,%esp
f01117bf:	ff 75 c8             	pushl  -0x38(%ebp)
f01117c2:	50                   	push   %eax
f01117c3:	ff 75 ec             	pushl  -0x14(%ebp)
f01117c6:	68 08 a3 12 f0       	push   $0xf012a308
f01117cb:	68 c3 03 00 00       	push   $0x3c3
f01117d0:	68 28 96 12 f0       	push   $0xf0129628
f01117d5:	e8 40 eb fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f01117da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117dd:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01117e4:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f01117e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117ea:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f01117f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117f4:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01117f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117fa:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f0111801:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111804:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111807:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011180a:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f0111811:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111814:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0111817:	ff 45 ec             	incl   -0x14(%ebp)

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011181a:	ff 45 e0             	incl   -0x20(%ebp)
f011181d:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0111824:	0f 8e 00 ff ff ff    	jle    f011172a <test_free_block_BF+0xf4>
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
f011182a:	ff 45 e4             	incl   -0x1c(%ebp)
f011182d:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f0111831:	0f 8e e7 fe ff ff    	jle    f011171e <test_free_block_BF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0111837:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011183a:	83 e8 08             	sub    $0x8,%eax
f011183d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0111840:	83 ec 08             	sub    $0x8,%esp
f0111843:	6a 03                	push   $0x3
f0111845:	ff 75 cc             	pushl  -0x34(%ebp)
f0111848:	e8 04 15 01 00       	call   f0122d51 <alloc_block>
f011184d:	83 c4 10             	add    $0x10,%esp
f0111850:	89 c2                	mov    %eax,%edx
f0111852:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111855:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f011185c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011185f:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111866:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0111869:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011186c:	d1 e8                	shr    %eax
f011186e:	89 c2                	mov    %eax,%edx
f0111870:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111873:	01 c2                	add    %eax,%edx
f0111875:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111878:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f011187f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111882:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111885:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111888:	01 c2                	add    %eax,%edx
f011188a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011188d:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
	//Check returned va
	expected_va = curVA + sizeOfMetaData/2;
f0111894:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111897:	83 c0 04             	add    $0x4,%eax
f011189a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (check_block(va, expected_va, remainSize, 1) == 0)
f011189d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118a0:	6a 01                	push   $0x1
f01118a2:	50                   	push   %eax
f01118a3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01118a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01118a9:	e8 30 e1 ff ff       	call   f010f9de <check_block>
f01118ae:	83 c4 10             	add    $0x10,%esp
f01118b1:	85 c0                	test   %eax,%eax
f01118b3:	75 17                	jne    f01118cc <test_free_block_BF+0x296>
		panic("test_free_block #1: WRONG ALLOC - alloc_block_BF return wrong address.");
f01118b5:	83 ec 04             	sub    $0x4,%esp
f01118b8:	68 6c a3 12 f0       	push   $0xf012a36c
f01118bd:	68 d5 03 00 00       	push   $0x3d5
f01118c2:	68 28 96 12 f0       	push   $0xf0129628
f01118c7:	e8 4e ea fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f01118cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118cf:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f01118d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118d9:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01118dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118df:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f01118e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118e9:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01118ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118ef:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f01118f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118f9:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f01118fc:	83 ec 0c             	sub    $0xc,%esp
f01118ff:	68 70 9f 12 f0       	push   $0xf0129f70
f0111904:	e8 63 f6 fe ff       	call   f0100f6c <cprintf>
f0111909:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f011190c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0111913:	eb 59                	jmp    f011196e <test_free_block_BF+0x338>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0111915:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111918:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f011191f:	66 8b 00             	mov    (%eax),%ax
f0111922:	98                   	cwtl   
f0111923:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111926:	75 26                	jne    f011194e <test_free_block_BF+0x318>
f0111928:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011192b:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f0111932:	66 8b 00             	mov    (%eax),%ax
f0111935:	98                   	cwtl   
f0111936:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111939:	75 13                	jne    f011194e <test_free_block_BF+0x318>
f011193b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011193e:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f0111945:	66 8b 00             	mov    (%eax),%ax
f0111948:	98                   	cwtl   
f0111949:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011194c:	74 1d                	je     f011196b <test_free_block_BF+0x335>
			panic("test_free_block #2.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f011194e:	83 ec 0c             	sub    $0xc,%esp
f0111951:	ff 75 dc             	pushl  -0x24(%ebp)
f0111954:	ff 75 dc             	pushl  -0x24(%ebp)
f0111957:	68 b4 a3 12 f0       	push   $0xf012a3b4
f011195c:	68 e1 03 00 00       	push   $0x3e1
f0111961:	68 28 96 12 f0       	push   $0xf0129628
f0111966:	e8 af e9 fe ff       	call   f010031a <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f011196b:	ff 45 dc             	incl   -0x24(%ebp)
f011196e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111971:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0111974:	7c 9f                	jl     f0111915 <test_free_block_BF+0x2df>
			panic("test_free_block #2.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0111976:	83 ec 0c             	sub    $0xc,%esp
f0111979:	68 f4 9f 12 f0       	push   $0xf0129ff4
f011197e:	e8 e9 f5 fe ff       	call   f0100f6c <cprintf>
f0111983:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111986:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011198d:	e9 98 00 00 00       	jmp    f0111a2a <test_free_block_BF+0x3f4>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0111992:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0111995:	89 d0                	mov    %edx,%eax
f0111997:	c1 e0 02             	shl    $0x2,%eax
f011199a:	01 d0                	add    %edx,%eax
f011199c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01119a3:	01 d0                	add    %edx,%eax
f01119a5:	c1 e0 03             	shl    $0x3,%eax
f01119a8:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01119af:	83 ec 0c             	sub    $0xc,%esp
f01119b2:	50                   	push   %eax
f01119b3:	e8 95 17 01 00       	call   f012314d <free_block>
f01119b8:	83 c4 10             	add    $0x10,%esp
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
f01119bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01119be:	8b 0c 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%ecx
f01119c5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01119c8:	89 d0                	mov    %edx,%eax
f01119ca:	c1 e0 02             	shl    $0x2,%eax
f01119cd:	01 d0                	add    %edx,%eax
f01119cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01119d6:	01 d0                	add    %edx,%eax
f01119d8:	c1 e0 03             	shl    $0x3,%eax
f01119db:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f01119e2:	8b 5d d8             	mov    -0x28(%ebp),%ebx
f01119e5:	89 d8                	mov    %ebx,%eax
f01119e7:	c1 e0 02             	shl    $0x2,%eax
f01119ea:	01 d8                	add    %ebx,%eax
f01119ec:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01119f3:	01 d8                	add    %ebx,%eax
f01119f5:	c1 e0 03             	shl    $0x3,%eax
f01119f8:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01119ff:	6a 00                	push   $0x0
f0111a01:	51                   	push   %ecx
f0111a02:	52                   	push   %edx
f0111a03:	50                   	push   %eax
f0111a04:	e8 d5 df ff ff       	call   f010f9de <check_block>
f0111a09:	83 c4 10             	add    $0x10,%esp
f0111a0c:	85 c0                	test   %eax,%eax
f0111a0e:	75 17                	jne    f0111a27 <test_free_block_BF+0x3f1>
		{
			panic("3.1 Failed");
f0111a10:	83 ec 04             	sub    $0x4,%esp
f0111a13:	68 03 a4 12 f0       	push   $0xf012a403
f0111a18:	68 ee 03 00 00       	push   $0x3ee
f0111a1d:	68 28 96 12 f0       	push   $0xf0129628
f0111a22:	e8 f3 e8 fe ff       	call   f010031a <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111a27:	ff 45 d8             	incl   -0x28(%ebp)
f0111a2a:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f0111a2e:	0f 8e 5e ff ff ff    	jle    f0111992 <test_free_block_BF+0x35c>
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
		{
			panic("3.1 Failed");
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0111a34:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111a3b:	83 ec 0c             	sub    $0xc,%esp
f0111a3e:	ff 75 c0             	pushl  -0x40(%ebp)
f0111a41:	e8 20 e0 ff ff       	call   f010fa66 <check_list_size>
f0111a46:	83 c4 10             	add    $0x10,%esp
f0111a49:	85 c0                	test   %eax,%eax
f0111a4b:	75 17                	jne    f0111a64 <test_free_block_BF+0x42e>
	{
		panic("3.2 Failed");
f0111a4d:	83 ec 04             	sub    $0x4,%esp
f0111a50:	68 0e a4 12 f0       	push   $0xf012a40e
f0111a55:	68 f4 03 00 00       	push   $0x3f4
f0111a5a:	68 28 96 12 f0       	push   $0xf0129628
f0111a5f:	e8 b6 e8 fe ff       	call   f010031a <_panic>
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0111a64:	a1 c0 8c 57 f0       	mov    0xf0578cc0,%eax
f0111a69:	83 ec 0c             	sub    $0xc,%esp
f0111a6c:	50                   	push   %eax
f0111a6d:	e8 db 16 01 00       	call   f012314d <free_block>
f0111a72:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[numOfAllocs*allocCntPerSize], startVAs[numOfAllocs*allocCntPerSize], remainSize, 0) == 0)
f0111a75:	8b 4d d0             	mov    -0x30(%ebp),%ecx
f0111a78:	8b 15 c0 8c 57 f0    	mov    0xf0578cc0,%edx
f0111a7e:	a1 c0 8c 57 f0       	mov    0xf0578cc0,%eax
f0111a83:	6a 00                	push   $0x0
f0111a85:	51                   	push   %ecx
f0111a86:	52                   	push   %edx
f0111a87:	50                   	push   %eax
f0111a88:	e8 51 df ff ff       	call   f010f9de <check_block>
f0111a8d:	83 c4 10             	add    $0x10,%esp
f0111a90:	85 c0                	test   %eax,%eax
f0111a92:	75 17                	jne    f0111aab <test_free_block_BF+0x475>
		panic("3.3 Failed");
f0111a94:	83 ec 04             	sub    $0x4,%esp
f0111a97:	68 19 a4 12 f0       	push   $0xf012a419
f0111a9c:	68 fa 03 00 00       	push   $0x3fa
f0111aa1:	68 28 96 12 f0       	push   $0xf0129628
f0111aa6:	e8 6f e8 fe ff       	call   f010031a <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0111aab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111aae:	83 e8 08             	sub    $0x8,%eax
f0111ab1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111ab4:	83 ec 08             	sub    $0x8,%esp
f0111ab7:	6a 03                	push   $0x3
f0111ab9:	ff 75 cc             	pushl  -0x34(%ebp)
f0111abc:	e8 90 12 01 00       	call   f0122d51 <alloc_block>
f0111ac1:	83 c4 10             	add    $0x10,%esp
f0111ac4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected_va = (curVA + sizeOfMetaData/2);
f0111ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111aca:	83 c0 04             	add    $0x4,%eax
f0111acd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if(check_block(va, expected_va, remainSize, 1) == 0)
f0111ad0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111ad3:	6a 01                	push   $0x1
f0111ad5:	50                   	push   %eax
f0111ad6:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111ad9:	ff 75 c8             	pushl  -0x38(%ebp)
f0111adc:	e8 fd de ff ff       	call   f010f9de <check_block>
f0111ae1:	83 c4 10             	add    $0x10,%esp
f0111ae4:	85 c0                	test   %eax,%eax
f0111ae6:	75 17                	jne    f0111aff <test_free_block_BF+0x4c9>
		panic("3.4 Failed");
f0111ae8:	83 ec 04             	sub    $0x4,%esp
f0111aeb:	68 24 a4 12 f0       	push   $0xf012a424
f0111af0:	68 02 04 00 00       	push   $0x402
f0111af5:	68 28 96 12 f0       	push   $0xf0129628
f0111afa:	e8 1b e8 fe ff       	call   f010031a <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0111aff:	a1 bc 8c 57 f0       	mov    0xf0578cbc,%eax
f0111b04:	83 ec 0c             	sub    $0xc,%esp
f0111b07:	50                   	push   %eax
f0111b08:	e8 40 16 01 00       	call   f012314d <free_block>
f0111b0d:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[numOfAllocs*allocCntPerSize-1], startVAs[numOfAllocs*allocCntPerSize-1], allocSizes[numOfAllocs-1], 0) == 0)
f0111b10:	8b 0d 90 dd 17 f0    	mov    0xf017dd90,%ecx
f0111b16:	8b 15 bc 8c 57 f0    	mov    0xf0578cbc,%edx
f0111b1c:	a1 bc 8c 57 f0       	mov    0xf0578cbc,%eax
f0111b21:	6a 00                	push   $0x0
f0111b23:	51                   	push   %ecx
f0111b24:	52                   	push   %edx
f0111b25:	50                   	push   %eax
f0111b26:	e8 b3 de ff ff       	call   f010f9de <check_block>
f0111b2b:	83 c4 10             	add    $0x10,%esp
f0111b2e:	85 c0                	test   %eax,%eax
f0111b30:	75 17                	jne    f0111b49 <test_free_block_BF+0x513>
		panic("3.5 Failed");
f0111b32:	83 ec 04             	sub    $0x4,%esp
f0111b35:	68 2f a4 12 f0       	push   $0xf012a42f
f0111b3a:	68 07 04 00 00       	push   $0x407
f0111b3f:	68 28 96 12 f0       	push   $0xf0129628
f0111b44:	e8 d1 e7 fe ff       	call   f010031a <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f0111b49:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f0111b4e:	83 e8 08             	sub    $0x8,%eax
f0111b51:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111b54:	83 ec 08             	sub    $0x8,%esp
f0111b57:	6a 03                	push   $0x3
f0111b59:	ff 75 cc             	pushl  -0x34(%ebp)
f0111b5c:	e8 f0 11 01 00       	call   f0122d51 <alloc_block>
f0111b61:	83 c4 10             	add    $0x10,%esp
f0111b64:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected_va = (void*)(KERNEL_HEAP_START + 2*sizeof(int));
f0111b67:	c7 45 c4 08 00 00 f6 	movl   $0xf6000008,-0x3c(%ebp)
	if(check_block(va, expected_va, allocSizes[0], 1) == 0)
f0111b6e:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f0111b73:	6a 01                	push   $0x1
f0111b75:	50                   	push   %eax
f0111b76:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111b79:	ff 75 c8             	pushl  -0x38(%ebp)
f0111b7c:	e8 5d de ff ff       	call   f010f9de <check_block>
f0111b81:	83 c4 10             	add    $0x10,%esp
f0111b84:	85 c0                	test   %eax,%eax
f0111b86:	75 17                	jne    f0111b9f <test_free_block_BF+0x569>
		panic("3.6 Failed");
f0111b88:	83 ec 04             	sub    $0x4,%esp
f0111b8b:	68 3a a4 12 f0       	push   $0xf012a43a
f0111b90:	68 0f 04 00 00       	push   $0x40f
f0111b95:	68 28 96 12 f0       	push   $0xf0129628
f0111b9a:	e8 7b e7 fe ff       	call   f010031a <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0111b9f:	a1 e4 76 57 f0       	mov    0xf05776e4,%eax
f0111ba4:	83 ec 0c             	sub    $0xc,%esp
f0111ba7:	50                   	push   %eax
f0111ba8:	e8 a0 15 01 00       	call   f012314d <free_block>
f0111bad:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[1], startVAs[1], allocSizes[0], 0) == 0)
f0111bb0:	8b 0d 78 dd 17 f0    	mov    0xf017dd78,%ecx
f0111bb6:	8b 15 e4 76 57 f0    	mov    0xf05776e4,%edx
f0111bbc:	a1 e4 76 57 f0       	mov    0xf05776e4,%eax
f0111bc1:	6a 00                	push   $0x0
f0111bc3:	51                   	push   %ecx
f0111bc4:	52                   	push   %edx
f0111bc5:	50                   	push   %eax
f0111bc6:	e8 13 de ff ff       	call   f010f9de <check_block>
f0111bcb:	83 c4 10             	add    $0x10,%esp
f0111bce:	85 c0                	test   %eax,%eax
f0111bd0:	75 17                	jne    f0111be9 <test_free_block_BF+0x5b3>
		panic("3.7 Failed");
f0111bd2:	83 ec 04             	sub    $0x4,%esp
f0111bd5:	68 45 a4 12 f0       	push   $0xf012a445
f0111bda:	68 14 04 00 00       	push   $0x414
f0111bdf:	68 28 96 12 f0       	push   $0xf0129628
f0111be4:	e8 31 e7 fe ff       	call   f010031a <_panic>

	expectedNumOfFreeBlks++ ;
f0111be9:	ff 45 c0             	incl   -0x40(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111bec:	83 ec 0c             	sub    $0xc,%esp
f0111bef:	ff 75 c0             	pushl  -0x40(%ebp)
f0111bf2:	e8 6f de ff ff       	call   f010fa66 <check_list_size>
f0111bf7:	83 c4 10             	add    $0x10,%esp
f0111bfa:	85 c0                	test   %eax,%eax
f0111bfc:	75 17                	jne    f0111c15 <test_free_block_BF+0x5df>
	{
		panic("3.8 Failed");
f0111bfe:	83 ec 04             	sub    $0x4,%esp
f0111c01:	68 50 a4 12 f0       	push   $0xf012a450
f0111c06:	68 19 04 00 00       	push   $0x419
f0111c0b:	68 28 96 12 f0       	push   $0xf0129628
f0111c10:	e8 05 e7 fe ff       	call   f010031a <_panic>
	}

	uint32 block_size, block_status;
	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0111c15:	83 ec 0c             	sub    $0xc,%esp
f0111c18:	68 24 a0 12 f0       	push   $0xf012a024
f0111c1d:	e8 4a f3 fe ff       	call   f0100f6c <cprintf>
f0111c22:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0111c25:	83 ec 0c             	sub    $0xc,%esp
f0111c28:	68 60 a0 12 f0       	push   $0xf012a060
f0111c2d:	e8 3a f3 fe ff       	call   f0100f6c <cprintf>
f0111c32:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0111c35:	c7 45 bc 78 05 00 00 	movl   $0x578,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111c3c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111c3f:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111c46:	83 ec 0c             	sub    $0xc,%esp
f0111c49:	50                   	push   %eax
f0111c4a:	e8 fe 14 01 00       	call   f012314d <free_block>
f0111c4f:	83 c4 10             	add    $0x10,%esp
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f0111c52:	8b 15 90 dd 17 f0    	mov    0xf017dd90,%edx
f0111c58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111c5b:	01 d0                	add    %edx,%eax
f0111c5d:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111c60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111c63:	48                   	dec    %eax
f0111c64:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111c6b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111c6e:	48                   	dec    %eax
f0111c6f:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111c76:	6a 00                	push   $0x0
f0111c78:	ff 75 b8             	pushl  -0x48(%ebp)
f0111c7b:	52                   	push   %edx
f0111c7c:	50                   	push   %eax
f0111c7d:	e8 5c dd ff ff       	call   f010f9de <check_block>
f0111c82:	83 c4 10             	add    $0x10,%esp
f0111c85:	85 c0                	test   %eax,%eax
f0111c87:	75 17                	jne    f0111ca0 <test_free_block_BF+0x66a>
	{
		panic("4.1 Failed");
f0111c89:	83 ec 04             	sub    $0x4,%esp
f0111c8c:	68 5b a4 12 f0       	push   $0xf012a45b
f0111c91:	68 27 04 00 00       	push   $0x427
f0111c96:	68 28 96 12 f0       	push   $0xf0129628
f0111c9b:	e8 7a e6 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0111ca0:	83 ec 0c             	sub    $0xc,%esp
f0111ca3:	68 75 a0 12 f0       	push   $0xf012a075
f0111ca8:	e8 bf f2 fe ff       	call   f0100f6c <cprintf>
f0111cad:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0111cb0:	c7 45 bc 91 01 00 00 	movl   $0x191,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111cb7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111cba:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111cc1:	83 ec 0c             	sub    $0xc,%esp
f0111cc4:	50                   	push   %eax
f0111cc5:	e8 83 14 01 00       	call   f012314d <free_block>
f0111cca:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[2]+allocSizes[2];
f0111ccd:	8b 15 80 dd 17 f0    	mov    0xf017dd80,%edx
f0111cd3:	a1 80 dd 17 f0       	mov    0xf017dd80,%eax
f0111cd8:	01 d0                	add    %edx,%eax
f0111cda:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111cdd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ce0:	48                   	dec    %eax
f0111ce1:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111ce8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ceb:	48                   	dec    %eax
f0111cec:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111cf3:	6a 00                	push   $0x0
f0111cf5:	ff 75 b8             	pushl  -0x48(%ebp)
f0111cf8:	52                   	push   %edx
f0111cf9:	50                   	push   %eax
f0111cfa:	e8 df dc ff ff       	call   f010f9de <check_block>
f0111cff:	83 c4 10             	add    $0x10,%esp
f0111d02:	85 c0                	test   %eax,%eax
f0111d04:	75 17                	jne    f0111d1d <test_free_block_BF+0x6e7>
	{
		panic("4.2 Failed");
f0111d06:	83 ec 04             	sub    $0x4,%esp
f0111d09:	68 66 a4 12 f0       	push   $0xf012a466
f0111d0e:	68 31 04 00 00       	push   $0x431
f0111d13:	68 28 96 12 f0       	push   $0xf0129628
f0111d18:	e8 fd e5 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0111d1d:	83 ec 0c             	sub    $0xc,%esp
f0111d20:	68 90 a0 12 f0       	push   $0xf012a090
f0111d25:	e8 42 f2 fe ff       	call   f0100f6c <cprintf>
f0111d2a:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0111d2d:	83 ec 0c             	sub    $0xc,%esp
f0111d30:	68 c8 a0 12 f0       	push   $0xf012a0c8
f0111d35:	e8 32 f2 fe ff       	call   f0100f6c <cprintf>
f0111d3a:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0111d3d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111d44:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d47:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111d4e:	83 ec 0c             	sub    $0xc,%esp
f0111d51:	50                   	push   %eax
f0111d52:	e8 f6 13 01 00       	call   f012314d <free_block>
f0111d57:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[0];
f0111d5a:	8b 15 78 dd 17 f0    	mov    0xf017dd78,%edx
f0111d60:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f0111d65:	01 d0                	add    %edx,%eax
f0111d67:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111d6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d6d:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111d74:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d77:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111d7e:	6a 00                	push   $0x0
f0111d80:	ff 75 b8             	pushl  -0x48(%ebp)
f0111d83:	52                   	push   %edx
f0111d84:	50                   	push   %eax
f0111d85:	e8 54 dc ff ff       	call   f010f9de <check_block>
f0111d8a:	83 c4 10             	add    $0x10,%esp
f0111d8d:	85 c0                	test   %eax,%eax
f0111d8f:	75 17                	jne    f0111da8 <test_free_block_BF+0x772>
	{
		panic("5.1 Failed");
f0111d91:	83 ec 04             	sub    $0x4,%esp
f0111d94:	68 71 a4 12 f0       	push   $0xf012a471
f0111d99:	68 3c 04 00 00       	push   $0x43c
f0111d9e:	68 28 96 12 f0       	push   $0xf0129628
f0111da3:	e8 72 e5 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0111da8:	83 ec 0c             	sub    $0xc,%esp
f0111dab:	68 dd a0 12 f0       	push   $0xf012a0dd
f0111db0:	e8 b7 f1 fe ff       	call   f0100f6c <cprintf>
f0111db5:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0111db8:	c7 45 bc c7 00 00 00 	movl   $0xc7,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111dbf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111dc2:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111dc9:	83 ec 0c             	sub    $0xc,%esp
f0111dcc:	50                   	push   %eax
f0111dcd:	e8 7b 13 01 00       	call   f012314d <free_block>
f0111dd2:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[1];
f0111dd5:	8b 15 78 dd 17 f0    	mov    0xf017dd78,%edx
f0111ddb:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f0111de0:	01 d0                	add    %edx,%eax
f0111de2:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111de5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111de8:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111def:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111df2:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111df9:	6a 00                	push   $0x0
f0111dfb:	ff 75 b8             	pushl  -0x48(%ebp)
f0111dfe:	52                   	push   %edx
f0111dff:	50                   	push   %eax
f0111e00:	e8 d9 db ff ff       	call   f010f9de <check_block>
f0111e05:	83 c4 10             	add    $0x10,%esp
f0111e08:	85 c0                	test   %eax,%eax
f0111e0a:	75 17                	jne    f0111e23 <test_free_block_BF+0x7ed>
	{
		panic("5.2 Failed");
f0111e0c:	83 ec 04             	sub    $0x4,%esp
f0111e0f:	68 7c a4 12 f0       	push   $0xf012a47c
f0111e14:	68 46 04 00 00       	push   $0x446
f0111e19:	68 28 96 12 f0       	push   $0xf0129628
f0111e1e:	e8 f7 e4 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0111e23:	83 ec 0c             	sub    $0xc,%esp
f0111e26:	68 f8 a0 12 f0       	push   $0xf012a0f8
f0111e2b:	e8 3c f1 fe ff       	call   f0100f6c <cprintf>
f0111e30:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0111e33:	c7 45 bc 1e 03 00 00 	movl   $0x31e,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111e3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e3d:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111e44:	83 ec 0c             	sub    $0xc,%esp
f0111e47:	50                   	push   %eax
f0111e48:	e8 00 13 01 00       	call   f012314d <free_block>
f0111e4d:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0111e50:	c7 45 bc 1f 03 00 00 	movl   $0x31f,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111e57:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e5a:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111e61:	83 ec 0c             	sub    $0xc,%esp
f0111e64:	50                   	push   %eax
f0111e65:	e8 e3 12 01 00       	call   f012314d <free_block>
f0111e6a:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f0111e6d:	8b 15 84 dd 17 f0    	mov    0xf017dd84,%edx
f0111e73:	a1 84 dd 17 f0       	mov    0xf017dd84,%eax
f0111e78:	01 c2                	add    %eax,%edx
f0111e7a:	a1 88 dd 17 f0       	mov    0xf017dd88,%eax
f0111e7f:	01 d0                	add    %edx,%eax
f0111e81:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111e84:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e87:	48                   	dec    %eax
f0111e88:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0111e8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e92:	48                   	dec    %eax
f0111e93:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0111e9a:	6a 00                	push   $0x0
f0111e9c:	ff 75 b8             	pushl  -0x48(%ebp)
f0111e9f:	52                   	push   %edx
f0111ea0:	50                   	push   %eax
f0111ea1:	e8 38 db ff ff       	call   f010f9de <check_block>
f0111ea6:	83 c4 10             	add    $0x10,%esp
f0111ea9:	85 c0                	test   %eax,%eax
f0111eab:	75 17                	jne    f0111ec4 <test_free_block_BF+0x88e>
	{
		panic("6.1 Failed");
f0111ead:	83 ec 04             	sub    $0x4,%esp
f0111eb0:	68 87 a4 12 f0       	push   $0xf012a487
f0111eb5:	68 53 04 00 00       	push   $0x453
f0111eba:	68 28 96 12 f0       	push   $0xf0129628
f0111ebf:	e8 56 e4 fe ff       	call   f010031a <_panic>
	}
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111ec4:	83 ec 0c             	sub    $0xc,%esp
f0111ec7:	ff 75 c0             	pushl  -0x40(%ebp)
f0111eca:	e8 97 db ff ff       	call   f010fa66 <check_list_size>
f0111ecf:	83 c4 10             	add    $0x10,%esp
f0111ed2:	85 c0                	test   %eax,%eax
f0111ed4:	75 17                	jne    f0111eed <test_free_block_BF+0x8b7>
	{
		panic("6.2 Failed");
f0111ed6:	83 ec 04             	sub    $0x4,%esp
f0111ed9:	68 92 a4 12 f0       	push   $0xf012a492
f0111ede:	68 57 04 00 00       	push   $0x457
f0111ee3:	68 28 96 12 f0       	push   $0xf0129628
f0111ee8:	e8 2d e4 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0111eed:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData ;
f0111ef4:	c7 45 cc f8 1b 00 00 	movl   $0x1bf8,-0x34(%ebp)
		expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0111efb:	c7 45 b0 02 00 00 00 	movl   $0x2,-0x50(%ebp)
f0111f02:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0111f05:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111f08:	01 d0                	add    %edx,%eax
f0111f0a:	83 c0 07             	add    $0x7,%eax
f0111f0d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0111f10:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f13:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f18:	f7 75 b0             	divl   -0x50(%ebp)
f0111f1b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f1e:	29 d0                	sub    %edx,%eax
f0111f20:	89 45 b8             	mov    %eax,-0x48(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0111f23:	83 ec 08             	sub    $0x8,%esp
f0111f26:	6a 03                	push   $0x3
f0111f28:	ff 75 cc             	pushl  -0x34(%ebp)
f0111f2b:	e8 21 0e 01 00       	call   f0122d51 <alloc_block>
f0111f30:	83 c4 10             	add    $0x10,%esp
f0111f33:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0111f36:	a1 a0 89 57 f0       	mov    0xf05789a0,%eax
f0111f3b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if (check_block(va, expected, expected_size, 1) == 0)
f0111f3e:	6a 01                	push   $0x1
f0111f40:	ff 75 b8             	pushl  -0x48(%ebp)
f0111f43:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111f46:	ff 75 c8             	pushl  -0x38(%ebp)
f0111f49:	e8 90 da ff ff       	call   f010f9de <check_block>
f0111f4e:	83 c4 10             	add    $0x10,%esp
f0111f51:	85 c0                	test   %eax,%eax
f0111f53:	75 17                	jne    f0111f6c <test_free_block_BF+0x936>
		{
			panic("6.3 Failed");
f0111f55:	83 ec 04             	sub    $0x4,%esp
f0111f58:	68 9d a4 12 f0       	push   $0xf012a49d
f0111f5d:	68 65 04 00 00       	push   $0x465
f0111f62:	68 28 96 12 f0       	push   $0xf0129628
f0111f67:	e8 ae e3 fe ff       	call   f010031a <_panic>
		}
		expectedNumOfFreeBlks--;
f0111f6c:	ff 4d c0             	decl   -0x40(%ebp)
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0111f6f:	83 ec 0c             	sub    $0xc,%esp
f0111f72:	68 38 a1 12 f0       	push   $0xf012a138
f0111f77:	e8 f0 ef fe ff       	call   f0100f6c <cprintf>
f0111f7c:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0111f7f:	83 ec 0c             	sub    $0xc,%esp
f0111f82:	68 a8 a4 12 f0       	push   $0xf012a4a8
f0111f87:	e8 e0 ef fe ff       	call   f0100f6c <cprintf>
f0111f8c:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData;
f0111f8f:	c7 45 cc f8 07 00 00 	movl   $0x7f8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0111f96:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f0111f9d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0111fa0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111fa3:	01 d0                	add    %edx,%eax
f0111fa5:	83 c0 07             	add    $0x7,%eax
f0111fa8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0111fab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111fae:	ba 00 00 00 00       	mov    $0x0,%edx
f0111fb3:	f7 75 a8             	divl   -0x58(%ebp)
f0111fb6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111fb9:	29 d0                	sub    %edx,%eax
f0111fbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111fbe:	83 ec 08             	sub    $0x8,%esp
f0111fc1:	6a 03                	push   $0x3
f0111fc3:	ff 75 cc             	pushl  -0x34(%ebp)
f0111fc6:	e8 86 0d 01 00       	call   f0122d51 <alloc_block>
f0111fcb:	83 c4 10             	add    $0x10,%esp
f0111fce:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0111fd1:	a1 20 7d 57 f0       	mov    0xf0577d20,%eax
f0111fd6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111fd9:	6a 01                	push   $0x1
f0111fdb:	ff 75 b8             	pushl  -0x48(%ebp)
f0111fde:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111fe1:	ff 75 c8             	pushl  -0x38(%ebp)
f0111fe4:	e8 f5 d9 ff ff       	call   f010f9de <check_block>
f0111fe9:	83 c4 10             	add    $0x10,%esp
f0111fec:	85 c0                	test   %eax,%eax
f0111fee:	75 17                	jne    f0112007 <test_free_block_BF+0x9d1>
	{
		panic("7.1 Failed");
f0111ff0:	83 ec 04             	sub    $0x4,%esp
f0111ff3:	68 ce a4 12 f0       	push   $0xf012a4ce
f0111ff8:	68 74 04 00 00       	push   $0x474
f0111ffd:	68 28 96 12 f0       	push   $0xf0129628
f0112002:	e8 13 e3 fe ff       	call   f010031a <_panic>
	}

	expectedNumOfFreeBlks--;
f0112007:	ff 4d c0             	decl   -0x40(%ebp)

	actualSize = 8*kilo;
f011200a:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112011:	c7 45 a0 02 00 00 00 	movl   $0x2,-0x60(%ebp)
f0112018:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011201b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011201e:	01 d0                	add    %edx,%eax
f0112020:	83 c0 07             	add    $0x7,%eax
f0112023:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0112026:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112029:	ba 00 00 00 00       	mov    $0x0,%edx
f011202e:	f7 75 a0             	divl   -0x60(%ebp)
f0112031:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112034:	29 d0                	sub    %edx,%eax
f0112036:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112039:	83 ec 08             	sub    $0x8,%esp
f011203c:	6a 03                	push   $0x3
f011203e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112041:	e8 0b 0d 01 00       	call   f0122d51 <alloc_block>
f0112046:	83 c4 10             	add    $0x10,%esp
f0112049:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f011204c:	a1 bc 8c 57 f0       	mov    0xf0578cbc,%eax
f0112051:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112054:	6a 01                	push   $0x1
f0112056:	ff 75 b8             	pushl  -0x48(%ebp)
f0112059:	ff 75 b4             	pushl  -0x4c(%ebp)
f011205c:	ff 75 c8             	pushl  -0x38(%ebp)
f011205f:	e8 7a d9 ff ff       	call   f010f9de <check_block>
f0112064:	83 c4 10             	add    $0x10,%esp
f0112067:	85 c0                	test   %eax,%eax
f0112069:	75 17                	jne    f0112082 <test_free_block_BF+0xa4c>
	{
		panic("7.2 Failed");
f011206b:	83 ec 04             	sub    $0x4,%esp
f011206e:	68 d9 a4 12 f0       	push   $0xf012a4d9
f0112073:	68 80 04 00 00       	push   $0x480
f0112078:	68 28 96 12 f0       	push   $0xf0129628
f011207d:	e8 98 e2 fe ff       	call   f010031a <_panic>
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0112082:	83 ec 0c             	sub    $0xc,%esp
f0112085:	68 1c a2 12 f0       	push   $0xf012a21c
f011208a:	e8 dd ee fe ff       	call   f0100f6c <cprintf>
f011208f:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0112092:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112099:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%ebp)
f01120a0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01120a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01120a6:	01 d0                	add    %edx,%eax
f01120a8:	83 c0 07             	add    $0x7,%eax
f01120ab:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01120ae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01120b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01120b6:	f7 75 98             	divl   -0x68(%ebp)
f01120b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01120bc:	29 d0                	sub    %edx,%eax
f01120be:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01120c1:	83 ec 08             	sub    $0x8,%esp
f01120c4:	6a 03                	push   $0x3
f01120c6:	ff 75 cc             	pushl  -0x34(%ebp)
f01120c9:	e8 83 0c 01 00       	call   f0122d51 <alloc_block>
f01120ce:	83 c4 10             	add    $0x10,%esp
f01120d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f01120d4:	a1 58 83 57 f0       	mov    0xf0578358,%eax
f01120d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01120dc:	6a 01                	push   $0x1
f01120de:	ff 75 b8             	pushl  -0x48(%ebp)
f01120e1:	ff 75 b4             	pushl  -0x4c(%ebp)
f01120e4:	ff 75 c8             	pushl  -0x38(%ebp)
f01120e7:	e8 f2 d8 ff ff       	call   f010f9de <check_block>
f01120ec:	83 c4 10             	add    $0x10,%esp
f01120ef:	85 c0                	test   %eax,%eax
f01120f1:	75 17                	jne    f011210a <test_free_block_BF+0xad4>
	{
		panic("7.3 Failed");
f01120f3:	83 ec 04             	sub    $0x4,%esp
f01120f6:	68 e4 a4 12 f0       	push   $0xf012a4e4
f01120fb:	68 8b 04 00 00       	push   $0x48b
f0112100:	68 28 96 12 f0       	push   $0xf0129628
f0112105:	e8 10 e2 fe ff       	call   f010031a <_panic>
	}

	cprintf("		7.3: in block coalesces with NEXT [INTERNAL FRAGMENTATION]\n\n") ;
f011210a:	83 ec 0c             	sub    $0xc,%esp
f011210d:	68 f0 a4 12 f0       	push   $0xf012a4f0
f0112112:	e8 55 ee fe ff       	call   f0100f6c <cprintf>
f0112117:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f011211a:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	expected_size = allocSizes[0]+allocSizes[1]; //ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112121:	8b 15 78 dd 17 f0    	mov    0xf017dd78,%edx
f0112127:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f011212c:	01 d0                	add    %edx,%eax
f011212e:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112131:	83 ec 08             	sub    $0x8,%esp
f0112134:	6a 03                	push   $0x3
f0112136:	ff 75 cc             	pushl  -0x34(%ebp)
f0112139:	e8 13 0c 01 00       	call   f0122d51 <alloc_block>
f011213e:	83 c4 10             	add    $0x10,%esp
f0112141:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0112144:	a1 fc 79 57 f0       	mov    0xf05779fc,%eax
f0112149:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011214c:	6a 01                	push   $0x1
f011214e:	ff 75 b8             	pushl  -0x48(%ebp)
f0112151:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112154:	ff 75 c8             	pushl  -0x38(%ebp)
f0112157:	e8 82 d8 ff ff       	call   f010f9de <check_block>
f011215c:	83 c4 10             	add    $0x10,%esp
f011215f:	85 c0                	test   %eax,%eax
f0112161:	75 17                	jne    f011217a <test_free_block_BF+0xb44>
	{
		panic("7.4 Failed");
f0112163:	83 ec 04             	sub    $0x4,%esp
f0112166:	68 2f a5 12 f0       	push   $0xf012a52f
f011216b:	68 96 04 00 00       	push   $0x496
f0112170:	68 28 96 12 f0       	push   $0xf0129628
f0112175:	e8 a0 e1 fe ff       	call   f010031a <_panic>
	}
	expectedNumOfFreeBlks--;
f011217a:	ff 4d c0             	decl   -0x40(%ebp)

	actualSize = 5*kilo - sizeOfMetaData;
f011217d:	c7 45 cc f8 13 00 00 	movl   $0x13f8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112184:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)
f011218b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011218e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112191:	01 d0                	add    %edx,%eax
f0112193:	83 c0 07             	add    $0x7,%eax
f0112196:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0112199:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011219c:	ba 00 00 00 00       	mov    $0x0,%edx
f01121a1:	f7 75 90             	divl   -0x70(%ebp)
f01121a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01121a7:	29 d0                	sub    %edx,%eax
f01121a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01121ac:	83 ec 08             	sub    $0x8,%esp
f01121af:	6a 03                	push   $0x3
f01121b1:	ff 75 cc             	pushl  -0x34(%ebp)
f01121b4:	e8 98 0b 01 00       	call   f0122d51 <alloc_block>
f01121b9:	83 c4 10             	add    $0x10,%esp
f01121bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData);
f01121bf:	c7 45 b4 08 00 00 f6 	movl   $0xf6000008,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01121c6:	6a 01                	push   $0x1
f01121c8:	ff 75 b8             	pushl  -0x48(%ebp)
f01121cb:	ff 75 b4             	pushl  -0x4c(%ebp)
f01121ce:	ff 75 c8             	pushl  -0x38(%ebp)
f01121d1:	e8 08 d8 ff ff       	call   f010f9de <check_block>
f01121d6:	83 c4 10             	add    $0x10,%esp
f01121d9:	85 c0                	test   %eax,%eax
f01121db:	75 17                	jne    f01121f4 <test_free_block_BF+0xbbe>
	{
		panic("7.5 Failed");
f01121dd:	83 ec 04             	sub    $0x4,%esp
f01121e0:	68 3a a5 12 f0       	push   $0xf012a53a
f01121e5:	68 a1 04 00 00       	push   $0x4a1
f01121ea:	68 28 96 12 f0       	push   $0xf0129628
f01121ef:	e8 26 e1 fe ff       	call   f010031a <_panic>
	}

	actualSize = 3*kilo - sizeOfMetaData;
f01121f4:	c7 45 cc f8 0b 00 00 	movl   $0xbf8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f01121fb:	c7 45 88 02 00 00 00 	movl   $0x2,-0x78(%ebp)
f0112202:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0112205:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112208:	01 d0                	add    %edx,%eax
f011220a:	83 c0 07             	add    $0x7,%eax
f011220d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0112210:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112213:	ba 00 00 00 00       	mov    $0x0,%edx
f0112218:	f7 75 88             	divl   -0x78(%ebp)
f011221b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011221e:	29 d0                	sub    %edx,%eax
f0112220:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112223:	83 ec 08             	sub    $0x8,%esp
f0112226:	6a 03                	push   $0x3
f0112228:	ff 75 cc             	pushl  -0x34(%ebp)
f011222b:	e8 21 0b 01 00       	call   f0122d51 <alloc_block>
f0112230:	83 c4 10             	add    $0x10,%esp
f0112233:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData);
f0112236:	c7 45 b4 08 14 00 f6 	movl   $0xf6001408,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011223d:	6a 01                	push   $0x1
f011223f:	ff 75 b8             	pushl  -0x48(%ebp)
f0112242:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112245:	ff 75 c8             	pushl  -0x38(%ebp)
f0112248:	e8 91 d7 ff ff       	call   f010f9de <check_block>
f011224d:	83 c4 10             	add    $0x10,%esp
f0112250:	85 c0                	test   %eax,%eax
f0112252:	75 17                	jne    f011226b <test_free_block_BF+0xc35>
	{
		panic("7.6 Failed");
f0112254:	83 ec 04             	sub    $0x4,%esp
f0112257:	68 45 a5 12 f0       	push   $0xf012a545
f011225c:	68 ab 04 00 00       	push   $0x4ab
f0112261:	68 28 96 12 f0       	push   $0xf0129628
f0112266:	e8 af e0 fe ff       	call   f010031a <_panic>
	}
	expectedNumOfFreeBlks--;
f011226b:	ff 4d c0             	decl   -0x40(%ebp)

	if (check_list_size(expectedNumOfFreeBlks) == 0)
f011226e:	83 ec 0c             	sub    $0xc,%esp
f0112271:	ff 75 c0             	pushl  -0x40(%ebp)
f0112274:	e8 ed d7 ff ff       	call   f010fa66 <check_list_size>
f0112279:	83 c4 10             	add    $0x10,%esp
f011227c:	85 c0                	test   %eax,%eax
f011227e:	75 17                	jne    f0112297 <test_free_block_BF+0xc61>
	{
		panic("7.7 Failed");
f0112280:	83 ec 04             	sub    $0x4,%esp
f0112283:	68 50 a5 12 f0       	push   $0xf012a550
f0112288:	68 b1 04 00 00       	push   $0x4b1
f011228d:	68 28 96 12 f0       	push   $0xf0129628
f0112292:	e8 83 e0 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0112297:	83 ec 0c             	sub    $0xc,%esp
f011229a:	68 5c a5 12 f0       	push   $0xf012a55c
f011229f:	e8 c8 ec fe ff       	call   f0100f6c <cprintf>
f01122a4:	83 c4 10             	add    $0x10,%esp

}
f01122a7:	90                   	nop
f01122a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01122ab:	c9                   	leave  
f01122ac:	c3                   	ret    

f01122ad <test_free_block_NF>:

void test_free_block_NF()
{
f01122ad:	55                   	push   %ebp
f01122ae:	89 e5                	mov    %esp,%ebp
f01122b0:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f01122b3:	83 ec 04             	sub    $0x4,%esp
f01122b6:	68 a5 a5 12 f0       	push   $0xf012a5a5
f01122bb:	68 ba 04 00 00       	push   $0x4ba
f01122c0:	68 28 96 12 f0       	push   $0xf0129628
f01122c5:	e8 50 e0 fe ff       	call   f010031a <_panic>

f01122ca <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f01122ca:	55                   	push   %ebp
f01122cb:	89 e5                	mov    %esp,%ebp
f01122cd:	81 ec 98 00 00 00    	sub    $0x98,%esp
#endif

	//TODO: [PROJECT'24.MS1 - #09] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	cprintf("===================================================\n");
f01122d3:	83 ec 0c             	sub    $0xc,%esp
f01122d6:	68 b8 a5 12 f0       	push   $0xf012a5b8
f01122db:	e8 8c ec fe ff       	call   f0100f6c <cprintf>
f01122e0:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f01122e3:	83 ec 0c             	sub    $0xc,%esp
f01122e6:	68 f0 a5 12 f0       	push   $0xf012a5f0
f01122eb:	e8 7c ec fe ff       	call   f0100f6c <cprintf>
f01122f0:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f01122f3:	83 ec 0c             	sub    $0xc,%esp
f01122f6:	68 28 a6 12 f0       	push   $0xf012a628
f01122fb:	e8 6c ec fe ff       	call   f0100f6c <cprintf>
f0112300:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0112303:	83 ec 0c             	sub    $0xc,%esp
f0112306:	68 b8 a5 12 f0       	push   $0xf012a5b8
f011230b:	e8 5c ec fe ff       	call   f0100f6c <cprintf>
f0112310:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f0112313:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f011231a:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0112321:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112324:	83 ec 08             	sub    $0x8,%esp
f0112327:	50                   	push   %eax
f0112328:	68 00 00 00 f6       	push   $0xf6000000
f011232d:	e8 4d 0b 01 00       	call   f0122e7f <initialize_dynamic_allocator>
f0112332:	83 c4 10             	add    $0x10,%esp
	void * va, *expectedVA ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0112335:	83 ec 0c             	sub    $0xc,%esp
f0112338:	68 60 a6 12 f0       	push   $0xf012a660
f011233d:	e8 2a ec fe ff       	call   f0100f6c <cprintf>
f0112342:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112345:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f011234c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0112353:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011235a:	eb 2a                	jmp    f0112386 <test_realloc_block_FF+0xbc>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f011235c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011235f:	8b 14 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%edx
f0112366:	89 d0                	mov    %edx,%eax
f0112368:	c1 e0 02             	shl    $0x2,%eax
f011236b:	01 d0                	add    %edx,%eax
f011236d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0112374:	01 d0                	add    %edx,%eax
f0112376:	c1 e0 03             	shl    $0x3,%eax
f0112379:	89 c2                	mov    %eax,%edx
f011237b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011237e:	01 d0                	add    %edx,%eax
f0112380:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0112383:	ff 45 e8             	incl   -0x18(%ebp)
f0112386:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f011238a:	7e d0                	jle    f011235c <test_realloc_block_FF+0x92>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f011238c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011238f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0112392:	83 e8 08             	sub    $0x8,%eax
f0112395:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0112398:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011239c:	7f 17                	jg     f01123b5 <test_realloc_block_FF+0xeb>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f011239e:	83 ec 04             	sub    $0x4,%esp
f01123a1:	68 90 a6 12 f0       	push   $0xf012a690
f01123a6:	68 e1 04 00 00       	push   $0x4e1
f01123ab:	68 28 96 12 f0       	push   $0xf0129628
f01123b0:	e8 65 df fe ff       	call   f010031a <_panic>

	int idx = 0;
f01123b5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
f01123bc:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01123c3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01123ca:	e9 2f 01 00 00       	jmp    f01124fe <test_realloc_block_FF+0x234>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01123cf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01123d6:	e9 13 01 00 00       	jmp    f01124ee <test_realloc_block_FF+0x224>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f01123db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01123de:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01123e5:	83 e8 08             	sub    $0x8,%eax
f01123e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
			expectedSize = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01123eb:	c7 45 bc 02 00 00 00 	movl   $0x2,-0x44(%ebp)
f01123f2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01123f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01123f8:	01 d0                	add    %edx,%eax
f01123fa:	83 c0 07             	add    $0x7,%eax
f01123fd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0112400:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112403:	ba 00 00 00 00       	mov    $0x0,%edx
f0112408:	f7 75 bc             	divl   -0x44(%ebp)
f011240b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011240e:	29 d0                	sub    %edx,%eax
f0112410:	89 45 b4             	mov    %eax,-0x4c(%ebp)
			expectedVA = (curVA + sizeOfMetaData/2);
f0112413:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112416:	83 c0 04             	add    $0x4,%eax
f0112419:	89 45 b0             	mov    %eax,-0x50(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f011241c:	83 ec 08             	sub    $0x8,%esp
f011241f:	ff 75 c0             	pushl  -0x40(%ebp)
f0112422:	6a 00                	push   $0x0
f0112424:	e8 41 0d 01 00       	call   f012316a <realloc_block_FF>
f0112429:	83 c4 10             	add    $0x10,%esp
f011242c:	89 c2                	mov    %eax,%edx
f011242e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112431:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f0112438:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011243b:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112442:	89 45 ac             	mov    %eax,-0x54(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0112445:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112448:	d1 e8                	shr    %eax
f011244a:	89 c2                	mov    %eax,%edx
f011244c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011244f:	01 c2                	add    %eax,%edx
f0112451:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112454:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f011245b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011245e:	8d 50 fe             	lea    -0x2(%eax),%edx
f0112461:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112464:	01 c2                	add    %eax,%edx
f0112466:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112469:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
			if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112470:	6a 01                	push   $0x1
f0112472:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112475:	ff 75 b0             	pushl  -0x50(%ebp)
f0112478:	ff 75 ac             	pushl  -0x54(%ebp)
f011247b:	e8 5e d5 ff ff       	call   f010f9de <check_block>
f0112480:	83 c4 10             	add    $0x10,%esp
f0112483:	85 c0                	test   %eax,%eax
f0112485:	75 24                	jne    f01124ab <test_realloc_block_FF+0x1e1>
			{
				panic("test_realloc_block_FF #1.1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f0112487:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011248a:	83 c0 08             	add    $0x8,%eax
f011248d:	83 ec 08             	sub    $0x8,%esp
f0112490:	ff 75 ac             	pushl  -0x54(%ebp)
f0112493:	50                   	push   %eax
f0112494:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112497:	68 10 a7 12 f0       	push   $0xf012a710
f011249c:	68 f2 04 00 00       	push   $0x4f2
f01124a1:	68 28 96 12 f0       	push   $0xf0129628
f01124a6:	e8 6f de fe ff       	call   f010031a <_panic>
			}
			curVA += allocSizes[i] ;
f01124ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01124ae:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01124b5:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f01124b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124bb:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f01124c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124c5:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01124c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124cb:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f01124d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124d5:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01124d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124db:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f01124e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124e5:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01124e8:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01124eb:	ff 45 d8             	incl   -0x28(%ebp)
f01124ee:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f01124f5:	0f 8e e0 fe ff ff    	jle    f01123db <test_realloc_block_FF+0x111>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01124fb:	ff 45 dc             	incl   -0x24(%ebp)
f01124fe:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0112502:	0f 8e c7 fe ff ff    	jle    f01123cf <test_realloc_block_FF+0x105>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0112508:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011250b:	83 e8 08             	sub    $0x8,%eax
f011250e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	expectedSize = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0112511:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f0112518:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011251b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011251e:	01 d0                	add    %edx,%eax
f0112520:	83 c0 07             	add    $0x7,%eax
f0112523:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0112526:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112529:	ba 00 00 00 00       	mov    $0x0,%edx
f011252e:	f7 75 a8             	divl   -0x58(%ebp)
f0112531:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112534:	29 d0                	sub    %edx,%eax
f0112536:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	expectedVA = (curVA + sizeOfMetaData/2);
f0112539:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011253c:	83 c0 04             	add    $0x4,%eax
f011253f:	89 45 b0             	mov    %eax,-0x50(%ebp)

	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0112542:	83 ec 08             	sub    $0x8,%esp
f0112545:	ff 75 c0             	pushl  -0x40(%ebp)
f0112548:	6a 00                	push   $0x0
f011254a:	e8 1b 0c 01 00       	call   f012316a <realloc_block_FF>
f011254f:	83 c4 10             	add    $0x10,%esp
f0112552:	89 c2                	mov    %eax,%edx
f0112554:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112557:	89 14 85 e0 76 57 f0 	mov    %edx,-0xfa88920(,%eax,4)
f011255e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112561:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112568:	89 45 ac             	mov    %eax,-0x54(%ebp)

	midVAs[idx] = va + actualSize/2 ;
f011256b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011256e:	d1 e8                	shr    %eax
f0112570:	89 c2                	mov    %eax,%edx
f0112572:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112575:	01 c2                	add    %eax,%edx
f0112577:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011257a:	89 14 85 e0 a2 57 f0 	mov    %edx,-0xfa85d20(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0112581:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112584:	8d 50 fe             	lea    -0x2(%eax),%edx
f0112587:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011258a:	01 c2                	add    %eax,%edx
f011258c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011258f:	89 14 85 e0 8c 57 f0 	mov    %edx,-0xfa87320(,%eax,4)
	//Check returned va
	if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112596:	6a 01                	push   $0x1
f0112598:	ff 75 b4             	pushl  -0x4c(%ebp)
f011259b:	ff 75 b0             	pushl  -0x50(%ebp)
f011259e:	ff 75 ac             	pushl  -0x54(%ebp)
f01125a1:	e8 38 d4 ff ff       	call   f010f9de <check_block>
f01125a6:	83 c4 10             	add    $0x10,%esp
f01125a9:	85 c0                	test   %eax,%eax
f01125ab:	75 17                	jne    f01125c4 <test_realloc_block_FF+0x2fa>
	{
		panic("test_realloc_block_FF #1.2.0: WRONG ALLOC - it return wrong address.");
f01125ad:	83 ec 04             	sub    $0x4,%esp
f01125b0:	68 70 a7 12 f0       	push   $0xf012a770
f01125b5:	68 09 05 00 00       	push   $0x509
f01125ba:	68 28 96 12 f0       	push   $0xf0129628
f01125bf:	e8 56 dd fe ff       	call   f010031a <_panic>
	}
	*(startVAs[idx]) = idx ;
f01125c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125c7:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f01125ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125d1:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01125d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125d7:	8b 14 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%edx
f01125de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125e1:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01125e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125e7:	8b 14 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%edx
f01125ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125f1:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01125f4:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01125fb:	eb 59                	jmp    f0112656 <test_realloc_block_FF+0x38c>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01125fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112600:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112607:	66 8b 00             	mov    (%eax),%ax
f011260a:	98                   	cwtl   
f011260b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011260e:	75 26                	jne    f0112636 <test_realloc_block_FF+0x36c>
f0112610:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112613:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f011261a:	66 8b 00             	mov    (%eax),%ax
f011261d:	98                   	cwtl   
f011261e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0112621:	75 13                	jne    f0112636 <test_realloc_block_FF+0x36c>
f0112623:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112626:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f011262d:	66 8b 00             	mov    (%eax),%ax
f0112630:	98                   	cwtl   
f0112631:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0112634:	74 1d                	je     f0112653 <test_realloc_block_FF+0x389>
			panic("test_realloc_block_FF #1.3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0112636:	83 ec 0c             	sub    $0xc,%esp
f0112639:	ff 75 d4             	pushl  -0x2c(%ebp)
f011263c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011263f:	68 b8 a7 12 f0       	push   $0xf012a7b8
f0112644:	68 14 05 00 00       	push   $0x514
f0112649:	68 28 96 12 f0       	push   $0xf0129628
f011264e:	e8 c7 dc fe ff       	call   f010031a <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0112653:	ff 45 d4             	incl   -0x2c(%ebp)
f0112656:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112659:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011265c:	7c 9f                	jl     f01125fd <test_realloc_block_FF+0x333>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #1.3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f011265e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112662:	74 04                	je     f0112668 <test_realloc_block_FF+0x39e>
	{
		eval += 10;
f0112664:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f0112668:	83 ec 0c             	sub    $0xc,%esp
f011266b:	68 10 a8 12 f0       	push   $0xf012a810
f0112670:	e8 f7 e8 fe ff       	call   f0100f6c <cprintf>
f0112675:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112678:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011267f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0112686:	e9 f1 00 00 00       	jmp    f011277c <test_realloc_block_FF+0x4b2>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f011268b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011268e:	89 d0                	mov    %edx,%eax
f0112690:	c1 e0 02             	shl    $0x2,%eax
f0112693:	01 d0                	add    %edx,%eax
f0112695:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011269c:	01 d0                	add    %edx,%eax
f011269e:	c1 e0 03             	shl    $0x3,%eax
f01126a1:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01126a8:	83 ec 08             	sub    $0x8,%esp
f01126ab:	6a 00                	push   $0x0
f01126ad:	50                   	push   %eax
f01126ae:	e8 b7 0a 01 00       	call   f012316a <realloc_block_FF>
f01126b3:	83 c4 10             	add    $0x10,%esp
f01126b6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01126b9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01126bc:	89 d0                	mov    %edx,%eax
f01126be:	c1 e0 02             	shl    $0x2,%eax
f01126c1:	01 d0                	add    %edx,%eax
f01126c3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01126ca:	01 d0                	add    %edx,%eax
f01126cc:	c1 e0 03             	shl    $0x3,%eax
f01126cf:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01126d6:	83 ec 0c             	sub    $0xc,%esp
f01126d9:	50                   	push   %eax
f01126da:	e8 3b 06 01 00       	call   f0122d1a <get_block_size>
f01126df:	83 c4 10             	add    $0x10,%esp
f01126e2:	89 45 a0             	mov    %eax,-0x60(%ebp)
		expectedSize = allocSizes[i];
f01126e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01126e8:	8b 04 85 78 dd 17 f0 	mov    -0xfe82288(,%eax,4),%eax
f01126ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = va;
f01126f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126f5:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], expectedSize, 0) == 0)
f01126f8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01126fb:	89 d0                	mov    %edx,%eax
f01126fd:	c1 e0 02             	shl    $0x2,%eax
f0112700:	01 d0                	add    %edx,%eax
f0112702:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0112709:	01 d0                	add    %edx,%eax
f011270b:	c1 e0 03             	shl    $0x3,%eax
f011270e:	8b 14 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%edx
f0112715:	8b 4d d0             	mov    -0x30(%ebp),%ecx
f0112718:	89 c8                	mov    %ecx,%eax
f011271a:	c1 e0 02             	shl    $0x2,%eax
f011271d:	01 c8                	add    %ecx,%eax
f011271f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112726:	01 c8                	add    %ecx,%eax
f0112728:	c1 e0 03             	shl    $0x3,%eax
f011272b:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112732:	6a 00                	push   $0x0
f0112734:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112737:	52                   	push   %edx
f0112738:	50                   	push   %eax
f0112739:	e8 a0 d2 ff ff       	call   f010f9de <check_block>
f011273e:	83 c4 10             	add    $0x10,%esp
f0112741:	85 c0                	test   %eax,%eax
f0112743:	75 17                	jne    f011275c <test_realloc_block_FF+0x492>
		{
			panic("test_realloc_block_FF #2.1.%d: Failed.", i);
f0112745:	ff 75 d0             	pushl  -0x30(%ebp)
f0112748:	68 40 a8 12 f0       	push   $0xf012a840
f011274d:	68 2c 05 00 00       	push   $0x52c
f0112752:	68 28 96 12 f0       	push   $0xf0129628
f0112757:	e8 be db fe ff       	call   f010031a <_panic>
		}
		if(va != NULL)
f011275c:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0112760:	74 17                	je     f0112779 <test_realloc_block_FF+0x4af>
			panic("test_realloc_block_FF #2.2.%d: it should return NULL.", i);
f0112762:	ff 75 d0             	pushl  -0x30(%ebp)
f0112765:	68 68 a8 12 f0       	push   $0xf012a868
f011276a:	68 2f 05 00 00       	push   $0x52f
f011276f:	68 28 96 12 f0       	push   $0xf0129628
f0112774:	e8 a1 db fe ff       	call   f010031a <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0112779:	ff 45 d0             	incl   -0x30(%ebp)
f011277c:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0112780:	0f 8e 05 ff ff ff    	jle    f011268b <test_realloc_block_FF+0x3c1>
		if(va != NULL)
			panic("test_realloc_block_FF #2.2.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f0112786:	83 ec 08             	sub    $0x8,%esp
f0112789:	6a 00                	push   $0x0
f011278b:	6a 00                	push   $0x0
f011278d:	e8 d8 09 01 00       	call   f012316a <realloc_block_FF>
f0112792:	83 c4 10             	add    $0x10,%esp
f0112795:	89 45 ac             	mov    %eax,-0x54(%ebp)
	if(va != NULL)
f0112798:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f011279c:	74 17                	je     f01127b5 <test_realloc_block_FF+0x4eb>
		panic("test_realloc_block_FF #2.3.0: it should return NULL.");
f011279e:	83 ec 04             	sub    $0x4,%esp
f01127a1:	68 a0 a8 12 f0       	push   $0xf012a8a0
f01127a6:	68 35 05 00 00       	push   $0x535
f01127ab:	68 28 96 12 f0       	push   $0xf0129628
f01127b0:	e8 65 db fe ff       	call   f010031a <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01127b5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01127bc:	eb 6b                	jmp    f0112829 <test_realloc_block_FF+0x55f>
	{
		if (i % allocCntPerSize == 0)
f01127be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01127c1:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f01127c6:	99                   	cltd   
f01127c7:	f7 f9                	idiv   %ecx
f01127c9:	89 d0                	mov    %edx,%eax
f01127cb:	85 c0                	test   %eax,%eax
f01127cd:	74 56                	je     f0112825 <test_realloc_block_FF+0x55b>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01127cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01127d2:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01127d9:	66 8b 00             	mov    (%eax),%ax
f01127dc:	98                   	cwtl   
f01127dd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01127e0:	75 26                	jne    f0112808 <test_realloc_block_FF+0x53e>
f01127e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01127e5:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f01127ec:	66 8b 00             	mov    (%eax),%ax
f01127ef:	98                   	cwtl   
f01127f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01127f3:	75 13                	jne    f0112808 <test_realloc_block_FF+0x53e>
f01127f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01127f8:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f01127ff:	66 8b 00             	mov    (%eax),%ax
f0112802:	98                   	cwtl   
f0112803:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112806:	74 1e                	je     f0112826 <test_realloc_block_FF+0x55c>
			panic("test_realloc_block_FF #2.4.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0112808:	83 ec 0c             	sub    $0xc,%esp
f011280b:	ff 75 cc             	pushl  -0x34(%ebp)
f011280e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112811:	68 d8 a8 12 f0       	push   $0xf012a8d8
f0112816:	68 3e 05 00 00       	push   $0x53e
f011281b:	68 28 96 12 f0       	push   $0xf0129628
f0112820:	e8 f5 da fe ff       	call   f010031a <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f0112825:	90                   	nop
	if(va != NULL)
		panic("test_realloc_block_FF #2.3.0: it should return NULL.");

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0112826:	ff 45 cc             	incl   -0x34(%ebp)
f0112829:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011282c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011282f:	7c 8d                	jl     f01127be <test_realloc_block_FF+0x4f4>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #2.4.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0112831:	c7 45 9c 07 00 00 00 	movl   $0x7,-0x64(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0112838:	83 ec 0c             	sub    $0xc,%esp
f011283b:	ff 75 9c             	pushl  -0x64(%ebp)
f011283e:	e8 23 d2 ff ff       	call   f010fa66 <check_list_size>
f0112843:	83 c4 10             	add    $0x10,%esp
f0112846:	85 c0                	test   %eax,%eax
f0112848:	75 17                	jne    f0112861 <test_realloc_block_FF+0x597>
	{
		panic("2.5 Failed");
f011284a:	83 ec 04             	sub    $0x4,%esp
f011284d:	68 2f a9 12 f0       	push   $0xf012a92f
f0112852:	68 44 05 00 00       	push   $0x544
f0112857:	68 28 96 12 f0       	push   $0xf0129628
f011285c:	e8 b9 da fe ff       	call   f010031a <_panic>
	}

	if (is_correct)
f0112861:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112865:	74 04                	je     f011286b <test_realloc_block_FF+0x5a1>
	{
		eval += 10;
f0112867:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f011286b:	83 ec 0c             	sub    $0xc,%esp
f011286e:	68 3c a9 12 f0       	push   $0xf012a93c
f0112873:	e8 f4 e6 fe ff       	call   f0100f6c <cprintf>
f0112878:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, newBlockIndex;
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f011287b:	83 ec 0c             	sub    $0xc,%esp
f011287e:	68 74 a9 12 f0       	push   $0xf012a974
f0112883:	e8 e4 e6 fe ff       	call   f0100f6c <cprintf>
f0112888:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011288b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0112892:	c7 45 98 1f 03 00 00 	movl   $0x31f,-0x68(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData;
f0112899:	a1 84 dd 17 f0       	mov    0xf017dd84,%eax
f011289e:	8b 15 88 dd 17 f0    	mov    0xf017dd88,%edx
f01128a4:	d1 ea                	shr    %edx
f01128a6:	01 d0                	add    %edx,%eax
f01128a8:	83 e8 08             	sub    $0x8,%eax
f01128ab:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f01128ae:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)
f01128b5:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01128b8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01128bb:	01 d0                	add    %edx,%eax
f01128bd:	83 c0 07             	add    $0x7,%eax
f01128c0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01128c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01128c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01128cb:	f7 75 90             	divl   -0x70(%ebp)
f01128ce:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01128d1:	29 d0                	sub    %edx,%eax
f01128d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f01128d6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01128d9:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01128e0:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01128e3:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01128e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01128e9:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01128f0:	83 ec 08             	sub    $0x8,%esp
f01128f3:	52                   	push   %edx
f01128f4:	50                   	push   %eax
f01128f5:	e8 70 08 01 00       	call   f012316a <realloc_block_FF>
f01128fa:	83 c4 10             	add    $0x10,%esp
f01128fd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		//check return address
		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112900:	6a 01                	push   $0x1
f0112902:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112905:	ff 75 b0             	pushl  -0x50(%ebp)
f0112908:	ff 75 ac             	pushl  -0x54(%ebp)
f011290b:	e8 ce d0 ff ff       	call   f010f9de <check_block>
f0112910:	83 c4 10             	add    $0x10,%esp
f0112913:	85 c0                	test   %eax,%eax
f0112915:	75 17                	jne    f011292e <test_realloc_block_FF+0x664>
		{
			is_correct = 0;
f0112917:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.1.1: Failed\n");
f011291e:	83 ec 0c             	sub    $0xc,%esp
f0112921:	68 ac a9 12 f0       	push   $0xf012a9ac
f0112926:	e8 41 e6 fe ff       	call   f0100f6c <cprintf>
f011292b:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f011292e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112931:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112938:	66 8b 00             	mov    (%eax),%ax
f011293b:	98                   	cwtl   
f011293c:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011293f:	75 26                	jne    f0112967 <test_realloc_block_FF+0x69d>
f0112941:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112944:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f011294b:	66 8b 00             	mov    (%eax),%ax
f011294e:	98                   	cwtl   
f011294f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112952:	75 13                	jne    f0112967 <test_realloc_block_FF+0x69d>
f0112954:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112957:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f011295e:	66 8b 00             	mov    (%eax),%ax
f0112961:	98                   	cwtl   
f0112962:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112965:	74 1a                	je     f0112981 <test_realloc_block_FF+0x6b7>
		{
			is_correct = 0;
f0112967:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.1.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f011296e:	83 ec 08             	sub    $0x8,%esp
f0112971:	ff 75 98             	pushl  -0x68(%ebp)
f0112974:	68 d4 a9 12 f0       	push   $0xf012a9d4
f0112979:	e8 ee e5 fe ff       	call   f0100f6c <cprintf>
f011297e:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0112981:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112985:	74 04                	je     f011298b <test_realloc_block_FF+0x6c1>
	{
		eval += 25;
f0112987:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f011298b:	83 ec 0c             	sub    $0xc,%esp
f011298e:	68 34 aa 12 f0       	push   $0xf012aa34
f0112993:	e8 d4 e5 fe ff       	call   f0100f6c <cprintf>
f0112998:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011299b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01129a2:	c7 45 98 1f 03 00 00 	movl   $0x31f,-0x68(%ebp)
		//new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData;
		new_size = allocSizes[3] + allocSizes[4] - sizeOfMetaData;
f01129a9:	8b 15 84 dd 17 f0    	mov    0xf017dd84,%edx
f01129af:	a1 88 dd 17 f0       	mov    0xf017dd88,%eax
f01129b4:	01 d0                	add    %edx,%eax
f01129b6:	83 e8 08             	sub    $0x8,%eax
f01129b9:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f01129bc:	c7 45 88 02 00 00 00 	movl   $0x2,-0x78(%ebp)
f01129c3:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01129c6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01129c9:	01 d0                	add    %edx,%eax
f01129cb:	83 c0 07             	add    $0x7,%eax
f01129ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01129d1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01129d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01129d9:	f7 75 88             	divl   -0x78(%ebp)
f01129dc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01129df:	29 d0                	sub    %edx,%eax
f01129e1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f01129e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129e7:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01129ee:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01129f1:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01129f4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129f7:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f01129fe:	83 ec 08             	sub    $0x8,%esp
f0112a01:	52                   	push   %edx
f0112a02:	50                   	push   %eax
f0112a03:	e8 62 07 01 00       	call   f012316a <realloc_block_FF>
f0112a08:	83 c4 10             	add    $0x10,%esp
f0112a0b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		expectedNumOfFreeBlks--;
f0112a0e:	ff 4d 9c             	decl   -0x64(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112a11:	6a 01                	push   $0x1
f0112a13:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112a16:	ff 75 b0             	pushl  -0x50(%ebp)
f0112a19:	ff 75 ac             	pushl  -0x54(%ebp)
f0112a1c:	e8 bd cf ff ff       	call   f010f9de <check_block>
f0112a21:	83 c4 10             	add    $0x10,%esp
f0112a24:	85 c0                	test   %eax,%eax
f0112a26:	75 17                	jne    f0112a3f <test_realloc_block_FF+0x775>
		{
			is_correct = 0;
f0112a28:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.2.1: Failed\n");
f0112a2f:	83 ec 0c             	sub    $0xc,%esp
f0112a32:	68 70 aa 12 f0       	push   $0xf012aa70
f0112a37:	e8 30 e5 fe ff       	call   f0100f6c <cprintf>
f0112a3c:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0112a3f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a42:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112a49:	66 8b 00             	mov    (%eax),%ax
f0112a4c:	98                   	cwtl   
f0112a4d:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112a50:	75 26                	jne    f0112a78 <test_realloc_block_FF+0x7ae>
f0112a52:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a55:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f0112a5c:	66 8b 00             	mov    (%eax),%ax
f0112a5f:	98                   	cwtl   
f0112a60:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112a63:	75 13                	jne    f0112a78 <test_realloc_block_FF+0x7ae>
f0112a65:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a68:	8b 04 85 e0 8c 57 f0 	mov    -0xfa87320(,%eax,4),%eax
f0112a6f:	66 8b 00             	mov    (%eax),%ax
f0112a72:	98                   	cwtl   
f0112a73:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112a76:	74 1a                	je     f0112a92 <test_realloc_block_FF+0x7c8>
		{
			is_correct = 0;
f0112a78:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.2.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112a7f:	83 ec 08             	sub    $0x8,%esp
f0112a82:	ff 75 98             	pushl  -0x68(%ebp)
f0112a85:	68 98 aa 12 f0       	push   $0xf012aa98
f0112a8a:	e8 dd e4 fe ff       	call   f0100f6c <cprintf>
f0112a8f:	83 c4 10             	add    $0x10,%esp
		}

		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112a92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112a96:	74 11                	je     f0112aa9 <test_realloc_block_FF+0x7df>
f0112a98:	83 ec 0c             	sub    $0xc,%esp
f0112a9b:	ff 75 9c             	pushl  -0x64(%ebp)
f0112a9e:	e8 c3 cf ff ff       	call   f010fa66 <check_list_size>
f0112aa3:	83 c4 10             	add    $0x10,%esp
f0112aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	}
	if (is_correct)
f0112aa9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112aad:	74 04                	je     f0112ab3 <test_realloc_block_FF+0x7e9>
	{
		eval += 25;
f0112aaf:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//====================================================================//
	//[4] Test realloc with decreased sizes
	//====================================================================//
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0112ab3:	83 ec 0c             	sub    $0xc,%esp
f0112ab6:	68 f8 aa 12 f0       	push   $0xf012aaf8
f0112abb:	e8 ac e4 fe ff       	call   f0100f6c <cprintf>
f0112ac0:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0112ac3:	83 ec 0c             	sub    $0xc,%esp
f0112ac6:	68 30 ab 12 f0       	push   $0xf012ab30
f0112acb:	e8 9c e4 fe ff       	call   f0100f6c <cprintf>
f0112ad0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112ad3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f0112ada:	c7 45 98 01 00 00 00 	movl   $0x1,-0x68(%ebp)
		old_size = allocSizes[0] - sizeOfMetaData; /*4KB - sizeOfMetaData*/;
f0112ae1:	a1 78 dd 17 f0       	mov    0xf017dd78,%eax
f0112ae6:	83 e8 08             	sub    $0x8,%eax
f0112ae9:	89 45 80             	mov    %eax,-0x80(%ebp)
		new_size = old_size - 1*kilo ;
f0112aec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112aef:	2d 00 04 00 00       	sub    $0x400,%eax
f0112af4:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f0112af7:	c7 85 7c ff ff ff 02 	movl   $0x2,-0x84(%ebp)
f0112afe:	00 00 00 
f0112b01:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112b04:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112b0a:	01 d0                	add    %edx,%eax
f0112b0c:	83 c0 07             	add    $0x7,%eax
f0112b0f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0112b15:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112b1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b20:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0112b26:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112b2c:	29 d0                	sub    %edx,%eax
f0112b2e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112b31:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b34:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112b3b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112b3e:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112b41:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b44:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112b4b:	83 ec 08             	sub    $0x8,%esp
f0112b4e:	52                   	push   %edx
f0112b4f:	50                   	push   %eax
f0112b50:	e8 15 06 01 00       	call   f012316a <realloc_block_FF>
f0112b55:	83 c4 10             	add    $0x10,%esp
f0112b58:	89 45 ac             	mov    %eax,-0x54(%ebp)

		expectedNumOfFreeBlks++;
f0112b5b:	ff 45 9c             	incl   -0x64(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112b5e:	6a 01                	push   $0x1
f0112b60:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b63:	ff 75 b0             	pushl  -0x50(%ebp)
f0112b66:	ff 75 ac             	pushl  -0x54(%ebp)
f0112b69:	e8 70 ce ff ff       	call   f010f9de <check_block>
f0112b6e:	83 c4 10             	add    $0x10,%esp
f0112b71:	85 c0                	test   %eax,%eax
f0112b73:	75 17                	jne    f0112b8c <test_realloc_block_FF+0x8c2>
		{
			is_correct = 0;
f0112b75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.1: Failed\n");
f0112b7c:	83 ec 0c             	sub    $0xc,%esp
f0112b7f:	68 5c ab 12 f0       	push   $0xf012ab5c
f0112b84:	e8 e3 e3 fe ff       	call   f0100f6c <cprintf>
f0112b89:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockElement *newBlkAddr = (struct BlockElement *)(va + new_size + 2*sizeof(int));
f0112b8c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112b8f:	8d 50 08             	lea    0x8(%eax),%edx
f0112b92:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112b95:	01 d0                	add    %edx,%eax
f0112b97:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		cprintf("\nrealloc Test: newBlkAddr @va %x\n", newBlkAddr);
f0112b9d:	83 ec 08             	sub    $0x8,%esp
f0112ba0:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112ba6:	68 84 ab 12 f0       	push   $0xf012ab84
f0112bab:	e8 bc e3 fe ff       	call   f0100f6c <cprintf>
f0112bb0:	83 c4 10             	add    $0x10,%esp
		expectedSize = 1*kilo ;
f0112bb3:	c7 45 b4 00 04 00 00 	movl   $0x400,-0x4c(%ebp)
		if (check_block(newBlkAddr, newBlkAddr, expectedSize, 0) == 0)
f0112bba:	6a 00                	push   $0x0
f0112bbc:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112bbf:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112bc5:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112bcb:	e8 0e ce ff ff       	call   f010f9de <check_block>
f0112bd0:	83 c4 10             	add    $0x10,%esp
f0112bd3:	85 c0                	test   %eax,%eax
f0112bd5:	75 17                	jne    f0112bee <test_realloc_block_FF+0x924>
		{
			is_correct = 0;
f0112bd7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.2: Failed\n");
f0112bde:	83 ec 0c             	sub    $0xc,%esp
f0112be1:	68 a8 ab 12 f0       	push   $0xf012aba8
f0112be6:	e8 81 e3 fe ff       	call   f0100f6c <cprintf>
f0112beb:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0112bee:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112bf1:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112bf8:	66 8b 00             	mov    (%eax),%ax
f0112bfb:	98                   	cwtl   
f0112bfc:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112bff:	75 13                	jne    f0112c14 <test_realloc_block_FF+0x94a>
f0112c01:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c04:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f0112c0b:	66 8b 00             	mov    (%eax),%ax
f0112c0e:	98                   	cwtl   
f0112c0f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112c12:	74 1a                	je     f0112c2e <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0112c14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.3: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112c1b:	83 ec 08             	sub    $0x8,%esp
f0112c1e:	ff 75 98             	pushl  -0x68(%ebp)
f0112c21:	68 d0 ab 12 f0       	push   $0xf012abd0
f0112c26:	e8 41 e3 fe ff       	call   f0100f6c <cprintf>
f0112c2b:	83 c4 10             	add    $0x10,%esp
		}

		//Check # free blocks
		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112c2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112c32:	74 11                	je     f0112c45 <test_realloc_block_FF+0x97b>
f0112c34:	83 ec 0c             	sub    $0xc,%esp
f0112c37:	ff 75 9c             	pushl  -0x64(%ebp)
f0112c3a:	e8 27 ce ff ff       	call   f010fa66 <check_list_size>
f0112c3f:	83 c4 10             	add    $0x10,%esp
f0112c42:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}
	if (is_correct)
f0112c45:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112c49:	74 04                	je     f0112c4f <test_realloc_block_FF+0x985>
	{
		eval += 15;
f0112c4b:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}
	cprintf("	4.2: next block is full (NO coalesce) [Internal Fragmentation]\n\n") ;
f0112c4f:	83 ec 0c             	sub    $0xc,%esp
f0112c52:	68 30 ac 12 f0       	push   $0xf012ac30
f0112c57:	e8 10 e3 fe ff       	call   f0100f6c <cprintf>
f0112c5c:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f0112c5f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 1*allocCntPerSize + 1;
f0112c66:	c7 45 98 c9 00 00 00 	movl   $0xc9,-0x68(%ebp)
		old_size = allocSizes[1] - sizeOfMetaData;/*20 B*/
f0112c6d:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f0112c72:	83 e8 08             	sub    $0x8,%eax
f0112c75:	89 45 80             	mov    %eax,-0x80(%ebp)
		new_size = old_size - 6;
f0112c78:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112c7b:	83 e8 06             	sub    $0x6,%eax
f0112c7e:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = allocSizes[1]; /*Same block size [Internal Framgmentation]*/
f0112c81:	a1 7c dd 17 f0       	mov    0xf017dd7c,%eax
f0112c86:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112c89:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c8c:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112c93:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112c96:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112c99:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c9c:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112ca3:	83 ec 08             	sub    $0x8,%esp
f0112ca6:	52                   	push   %edx
f0112ca7:	50                   	push   %eax
f0112ca8:	e8 bd 04 01 00       	call   f012316a <realloc_block_FF>
f0112cad:	83 c4 10             	add    $0x10,%esp
f0112cb0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112cb3:	6a 01                	push   $0x1
f0112cb5:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112cb8:	ff 75 b0             	pushl  -0x50(%ebp)
f0112cbb:	ff 75 ac             	pushl  -0x54(%ebp)
f0112cbe:	e8 1b cd ff ff       	call   f010f9de <check_block>
f0112cc3:	83 c4 10             	add    $0x10,%esp
f0112cc6:	85 c0                	test   %eax,%eax
f0112cc8:	75 17                	jne    f0112ce1 <test_realloc_block_FF+0xa17>
		{
			is_correct = 0;
f0112cca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.2.1: Failed\n");
f0112cd1:	83 ec 0c             	sub    $0xc,%esp
f0112cd4:	68 74 ac 12 f0       	push   $0xf012ac74
f0112cd9:	e8 8e e2 fe ff       	call   f0100f6c <cprintf>
f0112cde:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0112ce1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ce4:	8b 04 85 e0 76 57 f0 	mov    -0xfa88920(,%eax,4),%eax
f0112ceb:	66 8b 00             	mov    (%eax),%ax
f0112cee:	98                   	cwtl   
f0112cef:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112cf2:	75 13                	jne    f0112d07 <test_realloc_block_FF+0xa3d>
f0112cf4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112cf7:	8b 04 85 e0 a2 57 f0 	mov    -0xfa85d20(,%eax,4),%eax
f0112cfe:	66 8b 00             	mov    (%eax),%ax
f0112d01:	98                   	cwtl   
f0112d02:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112d05:	74 1a                	je     f0112d21 <test_realloc_block_FF+0xa57>
		{
			is_correct = 0;
f0112d07:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.2.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112d0e:	83 ec 08             	sub    $0x8,%esp
f0112d11:	ff 75 98             	pushl  -0x68(%ebp)
f0112d14:	68 9c ac 12 f0       	push   $0xf012ac9c
f0112d19:	e8 4e e2 fe ff       	call   f0100f6c <cprintf>
f0112d1e:	83 c4 10             	add    $0x10,%esp
		}

		//Check # free blocks
		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112d21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112d25:	74 11                	je     f0112d38 <test_realloc_block_FF+0xa6e>
f0112d27:	83 ec 0c             	sub    $0xc,%esp
f0112d2a:	ff 75 9c             	pushl  -0x64(%ebp)
f0112d2d:	e8 34 cd ff ff       	call   f010fa66 <check_list_size>
f0112d32:	83 c4 10             	add    $0x10,%esp
f0112d35:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}
	if (is_correct)
f0112d38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112d3c:	74 04                	je     f0112d42 <test_realloc_block_FF+0xa78>
	{
		eval += 15;
f0112d3e:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	cprintf("[PARTIAL] test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0112d42:	83 ec 08             	sub    $0x8,%esp
f0112d45:	ff 75 f4             	pushl  -0xc(%ebp)
f0112d48:	68 fc ac 12 f0       	push   $0xf012acfc
f0112d4d:	e8 1a e2 fe ff       	call   f0100f6c <cprintf>
f0112d52:	83 c4 10             	add    $0x10,%esp

}
f0112d55:	90                   	nop
f0112d56:	c9                   	leave  
f0112d57:	c3                   	ret    

f0112d58 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0112d58:	55                   	push   %ebp
f0112d59:	89 e5                	mov    %esp,%ebp
f0112d5b:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is UNSEEN test");
f0112d5e:	83 ec 04             	sub    $0x4,%esp
f0112d61:	68 45 ad 12 f0       	push   $0xf012ad45
f0112d66:	68 eb 05 00 00       	push   $0x5eb
f0112d6b:	68 28 96 12 f0       	push   $0xf0129628
f0112d70:	e8 a5 d5 fe ff       	call   f010031a <_panic>

f0112d75 <sys_check_LRU_lists>:
#include <kern/proc/user_environment.h>
#include <kern/mem/working_set_manager.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0112d75:	55                   	push   %ebp
f0112d76:	89 e5                	mov    %esp,%ebp
f0112d78:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0112d7b:	e8 f0 79 ff ff       	call   f010a770 <get_cpu_proc>
f0112d80:	89 45 e0             	mov    %eax,-0x20(%ebp)
	assert(cur_env != NULL);
f0112d83:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d87:	75 16                	jne    f0112d9f <sys_check_LRU_lists+0x2a>
f0112d89:	68 5c ad 12 f0       	push   $0xf012ad5c
f0112d8e:	68 6c ad 12 f0       	push   $0xf012ad6c
f0112d93:	6a 10                	push   $0x10
f0112d95:	68 81 ad 12 f0       	push   $0xf012ad81
f0112d9a:	e8 7b d5 fe ff       	call   f010031a <_panic>
	cprintf("CURRENT WS CONTENT BEFORE CHECKING:\n");
f0112d9f:	83 ec 0c             	sub    $0xc,%esp
f0112da2:	68 a0 ad 12 f0       	push   $0xf012ada0
f0112da7:	e8 c0 e1 fe ff       	call   f0100f6c <cprintf>
f0112dac:	83 c4 10             	add    $0x10,%esp
	env_page_ws_print(cur_env);
f0112daf:	83 ec 0c             	sub    $0xc,%esp
f0112db2:	ff 75 e0             	pushl  -0x20(%ebp)
f0112db5:	e8 4e 62 ff ff       	call   f0109008 <env_page_ws_print>
f0112dba:	83 c4 10             	add    $0x10,%esp

	struct Env* env = cur_env;
f0112dbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112dc0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	int active_list_validation = 1;
f0112dc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	int second_list_validation = 1;
f0112dca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0112dd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0112dd5:	0f 84 a5 00 00 00    	je     f0112e80 <sys_check_LRU_lists+0x10b>
	{
		int idx_active_list = 0;
f0112ddb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112de2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112de5:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0112deb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112dee:	eb 4a                	jmp    f0112e3a <sys_check_LRU_lists+0xc5>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0112df0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112df3:	8b 00                	mov    (%eax),%eax
f0112df5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0112df8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112dfb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112e00:	89 c2                	mov    %eax,%edx
f0112e02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112e05:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112e0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0112e0f:	01 c8                	add    %ecx,%eax
f0112e11:	8b 00                	mov    (%eax),%eax
f0112e13:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0112e16:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112e1e:	39 c2                	cmp    %eax,%edx
f0112e20:	74 09                	je     f0112e2b <sys_check_LRU_lists+0xb6>
			{
				active_list_validation = 0;
f0112e22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f0112e29:	eb 3e                	jmp    f0112e69 <sys_check_LRU_lists+0xf4>
			}
			idx_active_list++;
f0112e2b:	ff 45 e8             	incl   -0x18(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112e2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e31:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112e37:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112e3a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112e3e:	74 08                	je     f0112e48 <sys_check_LRU_lists+0xd3>
f0112e40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112e43:	8b 40 10             	mov    0x10(%eax),%eax
f0112e46:	eb 05                	jmp    f0112e4d <sys_check_LRU_lists+0xd8>
f0112e48:	b8 00 00 00 00       	mov    $0x0,%eax
f0112e4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0112e50:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0112e56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e59:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112e5f:	85 c0                	test   %eax,%eax
f0112e61:	75 8d                	jne    f0112df0 <sys_check_LRU_lists+0x7b>
f0112e63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112e67:	75 87                	jne    f0112df0 <sys_check_LRU_lists+0x7b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0112e69:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e6c:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f0112e72:	8b 45 10             	mov    0x10(%ebp),%eax
f0112e75:	39 c2                	cmp    %eax,%edx
f0112e77:	74 07                	je     f0112e80 <sys_check_LRU_lists+0x10b>
		{
			active_list_validation = 0;
f0112e79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0112e80:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0112e84:	0f 84 a5 00 00 00    	je     f0112f2f <sys_check_LRU_lists+0x1ba>
	{
		int idx_second_list = 0;
f0112e8a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0112e91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e94:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f0112e9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112e9d:	eb 4a                	jmp    f0112ee9 <sys_check_LRU_lists+0x174>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0112e9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112ea2:	8b 00                	mov    (%eax),%eax
f0112ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112ea7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112eaa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112eaf:	89 c2                	mov    %eax,%edx
f0112eb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112eb4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0112ebe:	01 c8                	add    %ecx,%eax
f0112ec0:	8b 00                	mov    (%eax),%eax
f0112ec2:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0112ec5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112ec8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112ecd:	39 c2                	cmp    %eax,%edx
f0112ecf:	74 09                	je     f0112eda <sys_check_LRU_lists+0x165>
			{
				second_list_validation = 0;
f0112ed1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				break;
f0112ed8:	eb 3e                	jmp    f0112f18 <sys_check_LRU_lists+0x1a3>
			}
			idx_second_list++;
f0112eda:	ff 45 e4             	incl   -0x1c(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0112edd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112ee0:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0112ee6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112ee9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112eed:	74 08                	je     f0112ef7 <sys_check_LRU_lists+0x182>
f0112eef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112ef2:	8b 40 10             	mov    0x10(%eax),%eax
f0112ef5:	eb 05                	jmp    f0112efc <sys_check_LRU_lists+0x187>
f0112ef7:	b8 00 00 00 00       	mov    $0x0,%eax
f0112efc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0112eff:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f0112f05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f08:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0112f0e:	85 c0                	test   %eax,%eax
f0112f10:	75 8d                	jne    f0112e9f <sys_check_LRU_lists+0x12a>
f0112f12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112f16:	75 87                	jne    f0112e9f <sys_check_LRU_lists+0x12a>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0112f18:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f1b:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f0112f21:	8b 45 14             	mov    0x14(%ebp),%eax
f0112f24:	39 c2                	cmp    %eax,%edx
f0112f26:	74 07                	je     f0112f2f <sys_check_LRU_lists+0x1ba>
			second_list_validation = 0;
f0112f28:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	return active_list_validation&second_list_validation;
f0112f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112f32:	23 45 f0             	and    -0x10(%ebp),%eax
}
f0112f35:	c9                   	leave  
f0112f36:	c3                   	ret    

f0112f37 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0112f37:	55                   	push   %ebp
f0112f38:	89 e5                	mov    %esp,%ebp
f0112f3a:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0112f3d:	e8 2e 78 ff ff       	call   f010a770 <get_cpu_proc>
f0112f42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f0112f45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0112f49:	75 16                	jne    f0112f61 <sys_check_LRU_lists_free+0x2a>
f0112f4b:	68 5c ad 12 f0       	push   $0xf012ad5c
f0112f50:	68 6c ad 12 f0       	push   $0xf012ad6c
f0112f55:	6a 45                	push   $0x45
f0112f57:	68 81 ad 12 f0       	push   $0xf012ad81
f0112f5c:	e8 b9 d3 fe ff       	call   f010031a <_panic>
	struct Env* env = cur_env;
f0112f61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112f64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	int list_validation_count = 0;
f0112f67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112f6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112f71:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0112f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0112f7a:	eb 65                	jmp    f0112fe1 <sys_check_LRU_lists_free+0xaa>
	{
		for(int var = 0; var < list_size; var++)
f0112f7c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0112f83:	eb 3a                	jmp    f0112fbf <sys_check_LRU_lists_free+0x88>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0112f85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112f88:	8b 00                	mov    (%eax),%eax
f0112f8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0112f8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112f90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112f95:	89 c2                	mov    %eax,%edx
f0112f97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112f9a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0112fa4:	01 c8                	add    %ecx,%eax
f0112fa6:	8b 00                	mov    (%eax),%eax
f0112fa8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112fab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112fae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112fb3:	39 c2                	cmp    %eax,%edx
f0112fb5:	75 05                	jne    f0112fbc <sys_check_LRU_lists_free+0x85>
			{
				list_validation_count++;
f0112fb7:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f0112fba:	eb 0b                	jmp    f0112fc7 <sys_check_LRU_lists_free+0x90>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0112fbc:	ff 45 ec             	incl   -0x14(%ebp)
f0112fbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112fc2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0112fc5:	7c be                	jl     f0112f85 <sys_check_LRU_lists_free+0x4e>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0112fc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0112fcb:	7e 08                	jle    f0112fd5 <sys_check_LRU_lists_free+0x9e>
			return list_validation_count;
f0112fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112fd0:	e9 ed 00 00 00       	jmp    f01130c2 <sys_check_LRU_lists_free+0x18b>
	assert(cur_env != NULL);
	struct Env* env = cur_env;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112fd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112fd8:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112fde:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0112fe1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112fe5:	74 08                	je     f0112fef <sys_check_LRU_lists_free+0xb8>
f0112fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112fea:	8b 40 10             	mov    0x10(%eax),%eax
f0112fed:	eb 05                	jmp    f0112ff4 <sys_check_LRU_lists_free+0xbd>
f0112fef:	b8 00 00 00 00       	mov    $0x0,%eax
f0112ff4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0112ff7:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0112ffd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113000:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0113006:	85 c0                	test   %eax,%eax
f0113008:	0f 85 6e ff ff ff    	jne    f0112f7c <sys_check_LRU_lists_free+0x45>
f011300e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113012:	0f 85 64 ff ff ff    	jne    f0112f7c <sys_check_LRU_lists_free+0x45>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0113018:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011301b:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f0113021:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0113024:	eb 62                	jmp    f0113088 <sys_check_LRU_lists_free+0x151>
	{
		for(int var = 0; var < list_size; var++)
f0113026:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011302d:	eb 3a                	jmp    f0113069 <sys_check_LRU_lists_free+0x132>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f011302f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113032:	8b 00                	mov    (%eax),%eax
f0113034:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0113037:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011303a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011303f:	89 c2                	mov    %eax,%edx
f0113041:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0113044:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011304b:	8b 45 08             	mov    0x8(%ebp),%eax
f011304e:	01 c8                	add    %ecx,%eax
f0113050:	8b 00                	mov    (%eax),%eax
f0113052:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0113055:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113058:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011305d:	39 c2                	cmp    %eax,%edx
f011305f:	75 05                	jne    f0113066 <sys_check_LRU_lists_free+0x12f>
			{
				list_validation_count++;
f0113061:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f0113064:	eb 0b                	jmp    f0113071 <sys_check_LRU_lists_free+0x13a>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0113066:	ff 45 e8             	incl   -0x18(%ebp)
f0113069:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011306c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011306f:	7c be                	jl     f011302f <sys_check_LRU_lists_free+0xf8>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0113071:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0113075:	7e 05                	jle    f011307c <sys_check_LRU_lists_free+0x145>
			return list_validation_count;
f0113077:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011307a:	eb 46                	jmp    f01130c2 <sys_check_LRU_lists_free+0x18b>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f011307c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011307f:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0113085:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0113088:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011308c:	74 08                	je     f0113096 <sys_check_LRU_lists_free+0x15f>
f011308e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113091:	8b 40 10             	mov    0x10(%eax),%eax
f0113094:	eb 05                	jmp    f011309b <sys_check_LRU_lists_free+0x164>
f0113096:	b8 00 00 00 00       	mov    $0x0,%eax
f011309b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011309e:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f01130a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01130a7:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01130ad:	85 c0                	test   %eax,%eax
f01130af:	0f 85 71 ff ff ff    	jne    f0113026 <sys_check_LRU_lists_free+0xef>
f01130b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01130b9:	0f 85 67 ff ff ff    	jne    f0113026 <sys_check_LRU_lists_free+0xef>
			return list_validation_count;

	}


	return list_validation_count;
f01130bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01130c2:	c9                   	leave  
f01130c3:	c3                   	ret    

f01130c4 <sys_check_WS_list>:
 * = 1: check entire list (order is important)
 * = 2: check only the existence of the given set of elements
 * = 3: check only the NOT existence of the given set of elements
 */
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_status)
{
f01130c4:	55                   	push   %ebp
f01130c5:	89 e5                	mov    %esp,%ebp
f01130c7:	83 ec 08             	sub    $0x8,%esp
		}
	}

	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f01130ca:	83 ec 04             	sub    $0x4,%esp
f01130cd:	68 c8 ad 12 f0       	push   $0xf012adc8
f01130d2:	68 ea 00 00 00       	push   $0xea
f01130d7:	68 81 ad 12 f0       	push   $0xf012ad81
f01130dc:	e8 39 d2 fe ff       	call   f010031a <_panic>

f01130e1 <hasExpectedCommands>:
	cprintf("=================\n\n");
	return 0;
}*/

int hasExpectedCommands(char **expectedCommands, int commandsCount)
{
f01130e1:	55                   	push   %ebp
f01130e2:	89 e5                	mov    %esp,%ebp
f01130e4:	83 ec 18             	sub    $0x18,%esp
	struct Command *cmd = NULL;
f01130e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (LIST_SIZE(&foundCommands) != commandsCount)
f01130ee:	8b 15 78 91 55 f0    	mov    0xf0559178,%edx
f01130f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01130f7:	39 c2                	cmp    %eax,%edx
f01130f9:	74 0a                	je     f0113105 <hasExpectedCommands+0x24>
		return 0;
f01130fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0113100:	e9 8b 00 00 00       	jmp    f0113190 <hasExpectedCommands+0xaf>

	LIST_FOREACH(cmd, &foundCommands)
f0113105:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f011310a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011310d:	eb 55                	jmp    f0113164 <hasExpectedCommands+0x83>
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f011310f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0113116:	eb 2a                	jmp    f0113142 <hasExpectedCommands+0x61>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
f0113118:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011311b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0113122:	8b 45 08             	mov    0x8(%ebp),%eax
f0113125:	01 d0                	add    %edx,%eax
f0113127:	8b 10                	mov    (%eax),%edx
f0113129:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011312c:	8b 00                	mov    (%eax),%eax
f011312e:	83 ec 08             	sub    $0x8,%esp
f0113131:	52                   	push   %edx
f0113132:	50                   	push   %eax
f0113133:	e8 83 f2 00 00       	call   f01223bb <strcmp>
f0113138:	83 c4 10             	add    $0x10,%esp
f011313b:	85 c0                	test   %eax,%eax
f011313d:	74 0d                	je     f011314c <hasExpectedCommands+0x6b>
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f011313f:	ff 45 f0             	incl   -0x10(%ebp)
f0113142:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113145:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0113148:	7c ce                	jl     f0113118 <hasExpectedCommands+0x37>
f011314a:	eb 01                	jmp    f011314d <hasExpectedCommands+0x6c>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
f011314c:	90                   	nop
		if (i == commandsCount)
f011314d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113150:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0113153:	75 07                	jne    f011315c <hasExpectedCommands+0x7b>
			return 0;
f0113155:	b8 00 00 00 00       	mov    $0x0,%eax
f011315a:	eb 34                	jmp    f0113190 <hasExpectedCommands+0xaf>
{
	struct Command *cmd = NULL;
	if (LIST_SIZE(&foundCommands) != commandsCount)
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
f011315c:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0113161:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0113164:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0113168:	74 08                	je     f0113172 <hasExpectedCommands+0x91>
f011316a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011316d:	8b 40 10             	mov    0x10(%eax),%eax
f0113170:	eb 05                	jmp    f0113177 <hasExpectedCommands+0x96>
f0113172:	b8 00 00 00 00       	mov    $0x0,%eax
f0113177:	a3 74 91 55 f0       	mov    %eax,0xf0559174
f011317c:	a1 74 91 55 f0       	mov    0xf0559174,%eax
f0113181:	85 c0                	test   %eax,%eax
f0113183:	75 8a                	jne    f011310f <hasExpectedCommands+0x2e>
f0113185:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0113189:	75 84                	jne    f011310f <hasExpectedCommands+0x2e>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
		if (i == commandsCount)
			return 0;
	}
	return 1;
f011318b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0113190:	c9                   	leave  
f0113191:	c3                   	ret    

f0113192 <getIndexOfCommand>:

int getIndexOfCommand(const char *commandName)
{
f0113192:	55                   	push   %ebp
f0113193:	89 e5                	mov    %esp,%ebp
f0113195:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0113198:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011319f:	eb 2e                	jmp    f01131cf <getIndexOfCommand+0x3d>
		if (strcmp(commands[i].name, commandName) == 0)
f01131a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01131a4:	89 d0                	mov    %edx,%eax
f01131a6:	01 c0                	add    %eax,%eax
f01131a8:	01 d0                	add    %edx,%eax
f01131aa:	c1 e0 03             	shl    $0x3,%eax
f01131ad:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01131b2:	8b 00                	mov    (%eax),%eax
f01131b4:	83 ec 08             	sub    $0x8,%esp
f01131b7:	ff 75 08             	pushl  0x8(%ebp)
f01131ba:	50                   	push   %eax
f01131bb:	e8 fb f1 00 00       	call   f01223bb <strcmp>
f01131c0:	83 c4 10             	add    $0x10,%esp
f01131c3:	85 c0                	test   %eax,%eax
f01131c5:	75 05                	jne    f01131cc <getIndexOfCommand+0x3a>
			return i;
f01131c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01131ca:	eb 14                	jmp    f01131e0 <getIndexOfCommand+0x4e>
}

int getIndexOfCommand(const char *commandName)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01131cc:	ff 45 f4             	incl   -0xc(%ebp)
f01131cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01131d2:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01131d7:	39 c2                	cmp    %eax,%edx
f01131d9:	72 c6                	jb     f01131a1 <getIndexOfCommand+0xf>
		if (strcmp(commands[i].name, commandName) == 0)
			return i;
	return -404;
f01131db:	b8 6c fe ff ff       	mov    $0xfffffe6c,%eax
}
f01131e0:	c9                   	leave  
f01131e1:	c3                   	ret    

f01131e2 <TestAutoCompleteCommand>:

int TestAutoCompleteCommand()
{
f01131e2:	55                   	push   %ebp
f01131e3:	89 e5                	mov    %esp,%ebp
f01131e5:	57                   	push   %edi
f01131e6:	56                   	push   %esi
f01131e7:	53                   	push   %ebx
f01131e8:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01131ee:	83 ec 0c             	sub    $0xc,%esp
f01131f1:	68 20 ae 12 f0       	push   $0xf012ae20
f01131f6:	e8 71 dd fe ff       	call   f0100f6c <cprintf>
f01131fb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01131fe:	83 ec 0c             	sub    $0xc,%esp
f0113201:	68 44 ae 12 f0       	push   $0xf012ae44
f0113206:	e8 61 dd fe ff       	call   f0100f6c <cprintf>
f011320b:	83 c4 10             	add    $0x10,%esp

	// CASE1: command is found with correct number of arguments
	int eval = 0;
f011320e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	char *args1[] = {"kernel_info"};
f0113215:	c7 45 8c 5f ae 12 f0 	movl   $0xf012ae5f,-0x74(%ebp)
	int ret = process_command(ARRAY_LENGTH(args1), args1);
f011321c:	83 ec 08             	sub    $0x8,%esp
f011321f:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0113222:	50                   	push   %eax
f0113223:	6a 01                	push   $0x1
f0113225:	e8 87 ef fe ff       	call   f01021b1 <process_command>
f011322a:	83 c4 10             	add    $0x10,%esp
f011322d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0113230:	83 ec 0c             	sub    $0xc,%esp
f0113233:	68 6c ae 12 f0       	push   $0xf012ae6c
f0113238:	e8 2f dd fe ff       	call   f0100f6c <cprintf>
f011323d:	83 c4 10             	add    $0x10,%esp
	if (ret == getIndexOfCommand(args1[0]) && LIST_EMPTY(&foundCommands))
f0113240:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113243:	83 ec 0c             	sub    $0xc,%esp
f0113246:	50                   	push   %eax
f0113247:	e8 46 ff ff ff       	call   f0113192 <getIndexOfCommand>
f011324c:	83 c4 10             	add    $0x10,%esp
f011324f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0113252:	75 0f                	jne    f0113263 <TestAutoCompleteCommand+0x81>
f0113254:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f0113259:	85 c0                	test   %eax,%eax
f011325b:	75 06                	jne    f0113263 <TestAutoCompleteCommand+0x81>
		eval += 15;
f011325d:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0113261:	eb 10                	jmp    f0113273 <TestAutoCompleteCommand+0x91>
	else
		cprintf("#1: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0113263:	83 ec 0c             	sub    $0xc,%esp
f0113266:	68 9c ae 12 f0       	push   $0xf012ae9c
f011326b:	e8 fc dc fe ff       	call   f0100f6c <cprintf>
f0113270:	83 c4 10             	add    $0x10,%esp

	// CASE2: command is not found BUT its chars are subsequence-matched with one or more commands
	// should print the commands that contains "clk" as subsequence
	cprintf("==>Testing now AUTOCOMPLETE for: clk\n");
f0113273:	83 ec 0c             	sub    $0xc,%esp
f0113276:	68 ec ae 12 f0       	push   $0xf012aeec
f011327b:	e8 ec dc fe ff       	call   f0100f6c <cprintf>
f0113280:	83 c4 10             	add    $0x10,%esp
	char *args2[] = {"clk"};
f0113283:	c7 45 88 12 af 12 f0 	movl   $0xf012af12,-0x78(%ebp)
	ret = process_command(ARRAY_LENGTH(args2), args2);
f011328a:	83 ec 08             	sub    $0x8,%esp
f011328d:	8d 45 88             	lea    -0x78(%ebp),%eax
f0113290:	50                   	push   %eax
f0113291:	6a 01                	push   $0x1
f0113293:	e8 19 ef fe ff       	call   f01021b1 <process_command>
f0113298:	83 c4 10             	add    $0x10,%esp
f011329b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"clock", "modifiedclock", "nclock"}, 3))
f011329e:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f01132a2:	75 30                	jne    f01132d4 <TestAutoCompleteCommand+0xf2>
f01132a4:	8d 45 90             	lea    -0x70(%ebp),%eax
f01132a7:	bb f0 b2 12 f0       	mov    $0xf012b2f0,%ebx
f01132ac:	ba 03 00 00 00       	mov    $0x3,%edx
f01132b1:	89 c7                	mov    %eax,%edi
f01132b3:	89 de                	mov    %ebx,%esi
f01132b5:	89 d1                	mov    %edx,%ecx
f01132b7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01132b9:	83 ec 08             	sub    $0x8,%esp
f01132bc:	6a 03                	push   $0x3
f01132be:	8d 45 90             	lea    -0x70(%ebp),%eax
f01132c1:	50                   	push   %eax
f01132c2:	e8 1a fe ff ff       	call   f01130e1 <hasExpectedCommands>
f01132c7:	83 c4 10             	add    $0x10,%esp
f01132ca:	85 c0                	test   %eax,%eax
f01132cc:	74 06                	je     f01132d4 <TestAutoCompleteCommand+0xf2>
		eval += 15;
f01132ce:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f01132d2:	eb 10                	jmp    f01132e4 <TestAutoCompleteCommand+0x102>
	else
		cprintf("#2: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01132d4:	83 ec 0c             	sub    $0xc,%esp
f01132d7:	68 18 af 12 f0       	push   $0xf012af18
f01132dc:	e8 8b dc fe ff       	call   f0100f6c <cprintf>
f01132e1:	83 c4 10             	add    $0x10,%esp

	// CASE3: should print invalid number of args
	cprintf("==>Testing now AUTOCOMPLETE for: wm\n");
f01132e4:	83 ec 0c             	sub    $0xc,%esp
f01132e7:	68 68 af 12 f0       	push   $0xf012af68
f01132ec:	e8 7b dc fe ff       	call   f0100f6c <cprintf>
f01132f1:	83 c4 10             	add    $0x10,%esp
	char *args3[] = {"wm"};
f01132f4:	c7 45 84 8d af 12 f0 	movl   $0xf012af8d,-0x7c(%ebp)
	cprintf("va of args3 = %x, *args3 = %x\n", args3, *args3);
f01132fb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01132fe:	83 ec 04             	sub    $0x4,%esp
f0113301:	50                   	push   %eax
f0113302:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113305:	50                   	push   %eax
f0113306:	68 90 af 12 f0       	push   $0xf012af90
f011330b:	e8 5c dc fe ff       	call   f0100f6c <cprintf>
f0113310:	83 c4 10             	add    $0x10,%esp
	ret = process_command(ARRAY_LENGTH(args3), args3);
f0113313:	83 ec 08             	sub    $0x8,%esp
f0113316:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113319:	50                   	push   %eax
f011331a:	6a 01                	push   $0x1
f011331c:	e8 90 ee fe ff       	call   f01021b1 <process_command>
f0113321:	83 c4 10             	add    $0x10,%esp
f0113324:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INV_NUM_ARGS && hasExpectedCommands(args3, 1))
f0113327:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f011332b:	75 1b                	jne    f0113348 <TestAutoCompleteCommand+0x166>
f011332d:	83 ec 08             	sub    $0x8,%esp
f0113330:	6a 01                	push   $0x1
f0113332:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113335:	50                   	push   %eax
f0113336:	e8 a6 fd ff ff       	call   f01130e1 <hasExpectedCommands>
f011333b:	83 c4 10             	add    $0x10,%esp
f011333e:	85 c0                	test   %eax,%eax
f0113340:	74 06                	je     f0113348 <TestAutoCompleteCommand+0x166>
		eval += 15;
f0113342:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0113346:	eb 10                	jmp    f0113358 <TestAutoCompleteCommand+0x176>
	else
		cprintf("#3: WRONG - process_command return wrong value or foundCommands contains wrong values.\n");
f0113348:	83 ec 0c             	sub    $0xc,%esp
f011334b:	68 b0 af 12 f0       	push   $0xf012afb0
f0113350:	e8 17 dc fe ff       	call   f0100f6c <cprintf>
f0113355:	83 c4 10             	add    $0x10,%esp

	// CASE4: should print invalid command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0113358:	83 ec 0c             	sub    $0xc,%esp
f011335b:	68 08 b0 12 f0       	push   $0xf012b008
f0113360:	e8 07 dc fe ff       	call   f0100f6c <cprintf>
f0113365:	83 c4 10             	add    $0x10,%esp
	char *args4[] = {"smm"};
f0113368:	c7 45 80 2e b0 12 f0 	movl   $0xf012b02e,-0x80(%ebp)
	ret = process_command(ARRAY_LENGTH(args4), args4);
f011336f:	83 ec 08             	sub    $0x8,%esp
f0113372:	8d 45 80             	lea    -0x80(%ebp),%eax
f0113375:	50                   	push   %eax
f0113376:	6a 01                	push   $0x1
f0113378:	e8 34 ee fe ff       	call   f01021b1 <process_command>
f011337d:	83 c4 10             	add    $0x10,%esp
f0113380:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INVALID && LIST_SIZE(&foundCommands) == 0)
f0113383:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0113387:	75 0f                	jne    f0113398 <TestAutoCompleteCommand+0x1b6>
f0113389:	a1 78 91 55 f0       	mov    0xf0559178,%eax
f011338e:	85 c0                	test   %eax,%eax
f0113390:	75 06                	jne    f0113398 <TestAutoCompleteCommand+0x1b6>
		eval += 15;
f0113392:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0113396:	eb 10                	jmp    f01133a8 <TestAutoCompleteCommand+0x1c6>
	else
		cprintf("#4: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0113398:	83 ec 0c             	sub    $0xc,%esp
f011339b:	68 34 b0 12 f0       	push   $0xf012b034
f01133a0:	e8 c7 db fe ff       	call   f0100f6c <cprintf>
f01133a5:	83 c4 10             	add    $0x10,%esp

	// CASE5: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01133a8:	83 ec 0c             	sub    $0xc,%esp
f01133ab:	68 84 b0 12 f0       	push   $0xf012b084
f01133b0:	e8 b7 db fe ff       	call   f0100f6c <cprintf>
f01133b5:	83 c4 10             	add    $0x10,%esp
	char *args5[] = {"he"};
f01133b8:	c7 85 7c ff ff ff a9 	movl   $0xf012b0a9,-0x84(%ebp)
f01133bf:	b0 12 f0 
	ret = process_command(ARRAY_LENGTH(args5), args5);
f01133c2:	83 ec 08             	sub    $0x8,%esp
f01133c5:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
f01133cb:	50                   	push   %eax
f01133cc:	6a 01                	push   $0x1
f01133ce:	e8 de ed fe ff       	call   f01021b1 <process_command>
f01133d3:	83 c4 10             	add    $0x10,%esp
f01133d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"help", "sched?", "uhbestfit", "uhnextfit", "uheap?", "khbestfit", "khnextfit", "kheap?", "schedRR", "schedTest", "schedBSD", "schedMLFQ"}, 12))
f01133d9:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f01133dd:	75 30                	jne    f011340f <TestAutoCompleteCommand+0x22d>
f01133df:	8d 45 9c             	lea    -0x64(%ebp),%eax
f01133e2:	bb 80 b3 12 f0       	mov    $0xf012b380,%ebx
f01133e7:	ba 0c 00 00 00       	mov    $0xc,%edx
f01133ec:	89 c7                	mov    %eax,%edi
f01133ee:	89 de                	mov    %ebx,%esi
f01133f0:	89 d1                	mov    %edx,%ecx
f01133f2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01133f4:	83 ec 08             	sub    $0x8,%esp
f01133f7:	6a 0c                	push   $0xc
f01133f9:	8d 45 9c             	lea    -0x64(%ebp),%eax
f01133fc:	50                   	push   %eax
f01133fd:	e8 df fc ff ff       	call   f01130e1 <hasExpectedCommands>
f0113402:	83 c4 10             	add    $0x10,%esp
f0113405:	85 c0                	test   %eax,%eax
f0113407:	74 06                	je     f011340f <TestAutoCompleteCommand+0x22d>
		eval += 10;
f0113409:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f011340d:	eb 10                	jmp    f011341f <TestAutoCompleteCommand+0x23d>
	else
		cprintf("#5: WRONG - process_command return wrong value or foundCommands is has wrong values.\n");
f011340f:	83 ec 0c             	sub    $0xc,%esp
f0113412:	68 ac b0 12 f0       	push   $0xf012b0ac
f0113417:	e8 50 db fe ff       	call   f0100f6c <cprintf>
f011341c:	83 c4 10             	add    $0x10,%esp

	// CASE6: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f011341f:	83 ec 0c             	sub    $0xc,%esp
f0113422:	68 04 b1 12 f0       	push   $0xf012b104
f0113427:	e8 40 db fe ff       	call   f0100f6c <cprintf>
f011342c:	83 c4 10             	add    $0x10,%esp
	char *args6[] = {"ru"};
f011342f:	c7 85 78 ff ff ff 29 	movl   $0xf012b129,-0x88(%ebp)
f0113436:	b1 12 f0 
	ret = process_command(ARRAY_LENGTH(args6), args6);
f0113439:	83 ec 08             	sub    $0x8,%esp
f011343c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0113442:	50                   	push   %eax
f0113443:	6a 01                	push   $0x1
f0113445:	e8 67 ed fe ff       	call   f01021b1 <process_command>
f011344a:	83 c4 10             	add    $0x10,%esp
f011344d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"runall", "lru", "rub", "run", "rum"}, 5))
f0113450:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0113454:	75 30                	jne    f0113486 <TestAutoCompleteCommand+0x2a4>
f0113456:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0113459:	bb c8 b3 12 f0       	mov    $0xf012b3c8,%ebx
f011345e:	ba 05 00 00 00       	mov    $0x5,%edx
f0113463:	89 c7                	mov    %eax,%edi
f0113465:	89 de                	mov    %ebx,%esi
f0113467:	89 d1                	mov    %edx,%ecx
f0113469:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011346b:	83 ec 08             	sub    $0x8,%esp
f011346e:	6a 05                	push   $0x5
f0113470:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0113473:	50                   	push   %eax
f0113474:	e8 68 fc ff ff       	call   f01130e1 <hasExpectedCommands>
f0113479:	83 c4 10             	add    $0x10,%esp
f011347c:	85 c0                	test   %eax,%eax
f011347e:	74 06                	je     f0113486 <TestAutoCompleteCommand+0x2a4>
		eval += 10;
f0113480:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f0113484:	eb 10                	jmp    f0113496 <TestAutoCompleteCommand+0x2b4>
	else
		cprintf("#6: WRONG - process_command return wrong value. or foundCommands is has wrong values.\n");
f0113486:	83 ec 0c             	sub    $0xc,%esp
f0113489:	68 2c b1 12 f0       	push   $0xf012b12c
f011348e:	e8 d9 da fe ff       	call   f0100f6c <cprintf>
f0113493:	83 c4 10             	add    $0x10,%esp

	// CASE7: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: load game\n");
f0113496:	83 ec 0c             	sub    $0xc,%esp
f0113499:	68 84 b1 12 f0       	push   $0xf012b184
f011349e:	e8 c9 da fe ff       	call   f0100f6c <cprintf>
f01134a3:	83 c4 10             	add    $0x10,%esp
	char *args7[] = {"load", "game"};
f01134a6:	c7 85 70 ff ff ff b0 	movl   $0xf012b1b0,-0x90(%ebp)
f01134ad:	b1 12 f0 
f01134b0:	c7 85 74 ff ff ff b5 	movl   $0xf012b1b5,-0x8c(%ebp)
f01134b7:	b1 12 f0 
	ret = process_command(ARRAY_LENGTH(args7), args7);
f01134ba:	83 ec 08             	sub    $0x8,%esp
f01134bd:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01134c3:	50                   	push   %eax
f01134c4:	6a 02                	push   $0x2
f01134c6:	e8 e6 ec fe ff       	call   f01021b1 <process_command>
f01134cb:	83 c4 10             	add    $0x10,%esp
f01134ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args7[0]) && LIST_EMPTY(&foundCommands))
f01134d1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01134d7:	83 ec 0c             	sub    $0xc,%esp
f01134da:	50                   	push   %eax
f01134db:	e8 b2 fc ff ff       	call   f0113192 <getIndexOfCommand>
f01134e0:	83 c4 10             	add    $0x10,%esp
f01134e3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01134e6:	75 0f                	jne    f01134f7 <TestAutoCompleteCommand+0x315>
f01134e8:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f01134ed:	85 c0                	test   %eax,%eax
f01134ef:	75 06                	jne    f01134f7 <TestAutoCompleteCommand+0x315>
		eval += 10;
f01134f1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f01134f5:	eb 10                	jmp    f0113507 <TestAutoCompleteCommand+0x325>
	else
		cprintf("#7: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01134f7:	83 ec 0c             	sub    $0xc,%esp
f01134fa:	68 bc b1 12 f0       	push   $0xf012b1bc
f01134ff:	e8 68 da fe ff       	call   f0100f6c <cprintf>
f0113504:	83 c4 10             	add    $0x10,%esp

	// CASE8: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: wum 0xF0000000 M\n");
f0113507:	83 ec 0c             	sub    $0xc,%esp
f011350a:	68 0c b2 12 f0       	push   $0xf012b20c
f011350f:	e8 58 da fe ff       	call   f0100f6c <cprintf>
f0113514:	83 c4 10             	add    $0x10,%esp
	char *args8[] = {"wum", "0xF0000000", "M"};
f0113517:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f011351d:	bb f0 b3 12 f0       	mov    $0xf012b3f0,%ebx
f0113522:	ba 03 00 00 00       	mov    $0x3,%edx
f0113527:	89 c7                	mov    %eax,%edi
f0113529:	89 de                	mov    %ebx,%esi
f011352b:	89 d1                	mov    %edx,%ecx
f011352d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	ret = process_command(ARRAY_LENGTH(args8), args8);
f011352f:	83 ec 08             	sub    $0x8,%esp
f0113532:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0113538:	50                   	push   %eax
f0113539:	6a 03                	push   $0x3
f011353b:	e8 71 ec fe ff       	call   f01021b1 <process_command>
f0113540:	83 c4 10             	add    $0x10,%esp
f0113543:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args8[0]) && LIST_EMPTY(&foundCommands))
f0113546:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011354c:	83 ec 0c             	sub    $0xc,%esp
f011354f:	50                   	push   %eax
f0113550:	e8 3d fc ff ff       	call   f0113192 <getIndexOfCommand>
f0113555:	83 c4 10             	add    $0x10,%esp
f0113558:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011355b:	75 0f                	jne    f011356c <TestAutoCompleteCommand+0x38a>
f011355d:	a1 6c 91 55 f0       	mov    0xf055916c,%eax
f0113562:	85 c0                	test   %eax,%eax
f0113564:	75 06                	jne    f011356c <TestAutoCompleteCommand+0x38a>
		eval += 10;
f0113566:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f011356a:	eb 10                	jmp    f011357c <TestAutoCompleteCommand+0x39a>
	else
		cprintf("#8: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f011356c:	83 ec 0c             	sub    $0xc,%esp
f011356f:	68 40 b2 12 f0       	push   $0xf012b240
f0113574:	e8 f3 d9 fe ff       	call   f0100f6c <cprintf>
f0113579:	83 c4 10             	add    $0x10,%esp

	cprintf("test autocomplete completed. Evaluation = %d%%\n", eval);
f011357c:	83 ec 08             	sub    $0x8,%esp
f011357f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113582:	68 90 b2 12 f0       	push   $0xf012b290
f0113587:	e8 e0 d9 fe ff       	call   f0100f6c <cprintf>
f011358c:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011358f:	83 ec 0c             	sub    $0xc,%esp
f0113592:	68 c0 b2 12 f0       	push   $0xf012b2c0
f0113597:	e8 d0 d9 fe ff       	call   f0100f6c <cprintf>
f011359c:	83 c4 10             	add    $0x10,%esp

	return 0;
f011359f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01135a4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01135a7:	5b                   	pop    %ebx
f01135a8:	5e                   	pop    %esi
f01135a9:	5f                   	pop    %edi
f01135aa:	5d                   	pop    %ebp
f01135ab:	c3                   	ret    

f01135ac <test_str2lower_function>:

int test_str2lower_function()
{
f01135ac:	55                   	push   %ebp
f01135ad:	89 e5                	mov    %esp,%ebp
f01135af:	81 ec f8 02 00 00    	sub    $0x2f8,%esp
	cprintf("Automatic Testing of str2lower:\n");
f01135b5:	83 ec 0c             	sub    $0xc,%esp
f01135b8:	68 fc b3 12 f0       	push   $0xf012b3fc
f01135bd:	e8 aa d9 fe ff       	call   f0100f6c <cprintf>
f01135c2:	83 c4 10             	add    $0x10,%esp
	cprintf("========================\n");
f01135c5:	83 ec 0c             	sub    $0xc,%esp
f01135c8:	68 1d b4 12 f0       	push   $0xf012b41d
f01135cd:	e8 9a d9 fe ff       	call   f0100f6c <cprintf>
f01135d2:	83 c4 10             	add    $0x10,%esp
	int i = 0;
f01135d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int eval = 0;
f01135dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// CASE1: input string in lower case
	const char *src1 = "HelloWorld";
f01135e3:	c7 45 ec 37 b4 12 f0 	movl   $0xf012b437,-0x14(%ebp)
	char dst1[100];
	char *result = str2lower(dst1, src1);
f01135ea:	83 ec 08             	sub    $0x8,%esp
f01135ed:	ff 75 ec             	pushl  -0x14(%ebp)
f01135f0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
f01135f6:	50                   	push   %eax
f01135f7:	e8 9c f3 00 00       	call   f0122998 <str2lower>
f01135fc:	83 c4 10             	add    $0x10,%esp
f01135ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int resultLength = strlen(result);
f0113602:	83 ec 0c             	sub    $0xc,%esp
f0113605:	ff 75 e8             	pushl  -0x18(%ebp)
f0113608:	e8 a2 ec 00 00       	call   f01222af <strlen>
f011360d:	83 c4 10             	add    $0x10,%esp
f0113610:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "helloworld") != 0 || resultLength != strlen(src1))
f0113613:	83 ec 08             	sub    $0x8,%esp
f0113616:	68 42 b4 12 f0       	push   $0xf012b442
f011361b:	ff 75 e8             	pushl  -0x18(%ebp)
f011361e:	e8 98 ed 00 00       	call   f01223bb <strcmp>
f0113623:	83 c4 10             	add    $0x10,%esp
f0113626:	85 c0                	test   %eax,%eax
f0113628:	75 13                	jne    f011363d <test_str2lower_function+0x91>
f011362a:	83 ec 0c             	sub    $0xc,%esp
f011362d:	ff 75 ec             	pushl  -0x14(%ebp)
f0113630:	e8 7a ec 00 00       	call   f01222af <strlen>
f0113635:	83 c4 10             	add    $0x10,%esp
f0113638:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011363b:	74 15                	je     f0113652 <test_str2lower_function+0xa6>
		cprintf("str2lower #1: WRONG - str2lower return wrong value or length. Expected \"helloworld\", Actual \"%s\"\n", result);
f011363d:	83 ec 08             	sub    $0x8,%esp
f0113640:	ff 75 e8             	pushl  -0x18(%ebp)
f0113643:	68 50 b4 12 f0       	push   $0xf012b450
f0113648:	e8 1f d9 fe ff       	call   f0100f6c <cprintf>
f011364d:	83 c4 10             	add    $0x10,%esp
f0113650:	eb 04                	jmp    f0113656 <test_str2lower_function+0xaa>
	else
		eval += 10;
f0113652:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE2: input string is empty
	const char *src2 = "";
f0113656:	c7 45 e0 b2 b4 12 f0 	movl   $0xf012b4b2,-0x20(%ebp)
	char dst2[100];
	result = str2lower(dst2, src2);
f011365d:	83 ec 08             	sub    $0x8,%esp
f0113660:	ff 75 e0             	pushl  -0x20(%ebp)
f0113663:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0113669:	50                   	push   %eax
f011366a:	e8 29 f3 00 00       	call   f0122998 <str2lower>
f011366f:	83 c4 10             	add    $0x10,%esp
f0113672:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113675:	83 ec 0c             	sub    $0xc,%esp
f0113678:	ff 75 e8             	pushl  -0x18(%ebp)
f011367b:	e8 2f ec 00 00       	call   f01222af <strlen>
f0113680:	83 c4 10             	add    $0x10,%esp
f0113683:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "") != 0 || resultLength != strlen(src2))
f0113686:	83 ec 08             	sub    $0x8,%esp
f0113689:	68 b2 b4 12 f0       	push   $0xf012b4b2
f011368e:	ff 75 e8             	pushl  -0x18(%ebp)
f0113691:	e8 25 ed 00 00       	call   f01223bb <strcmp>
f0113696:	83 c4 10             	add    $0x10,%esp
f0113699:	85 c0                	test   %eax,%eax
f011369b:	75 13                	jne    f01136b0 <test_str2lower_function+0x104>
f011369d:	83 ec 0c             	sub    $0xc,%esp
f01136a0:	ff 75 e0             	pushl  -0x20(%ebp)
f01136a3:	e8 07 ec 00 00       	call   f01222af <strlen>
f01136a8:	83 c4 10             	add    $0x10,%esp
f01136ab:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01136ae:	74 15                	je     f01136c5 <test_str2lower_function+0x119>
		cprintf("str2lower #2: WRONG - str2lower return wrong value or length. Expected \"\", Actual \"%s\"\n", result);
f01136b0:	83 ec 08             	sub    $0x8,%esp
f01136b3:	ff 75 e8             	pushl  -0x18(%ebp)
f01136b6:	68 b4 b4 12 f0       	push   $0xf012b4b4
f01136bb:	e8 ac d8 fe ff       	call   f0100f6c <cprintf>
f01136c0:	83 c4 10             	add    $0x10,%esp
f01136c3:	eb 04                	jmp    f01136c9 <test_str2lower_function+0x11d>
	else
		eval += 10;
f01136c5:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE3: input string is Only special characters
	const char *src3 = "!@#$%%^&*()";
f01136c9:	c7 45 dc 0c b5 12 f0 	movl   $0xf012b50c,-0x24(%ebp)
	char dst3[100];
	result = str2lower(dst3, src3);
f01136d0:	83 ec 08             	sub    $0x8,%esp
f01136d3:	ff 75 dc             	pushl  -0x24(%ebp)
f01136d6:	8d 85 a0 fe ff ff    	lea    -0x160(%ebp),%eax
f01136dc:	50                   	push   %eax
f01136dd:	e8 b6 f2 00 00       	call   f0122998 <str2lower>
f01136e2:	83 c4 10             	add    $0x10,%esp
f01136e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01136e8:	83 ec 0c             	sub    $0xc,%esp
f01136eb:	ff 75 e8             	pushl  -0x18(%ebp)
f01136ee:	e8 bc eb 00 00       	call   f01222af <strlen>
f01136f3:	83 c4 10             	add    $0x10,%esp
f01136f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "!@#$%%^&*()") != 0 || resultLength != strlen(src3))
f01136f9:	83 ec 08             	sub    $0x8,%esp
f01136fc:	68 0c b5 12 f0       	push   $0xf012b50c
f0113701:	ff 75 e8             	pushl  -0x18(%ebp)
f0113704:	e8 b2 ec 00 00       	call   f01223bb <strcmp>
f0113709:	83 c4 10             	add    $0x10,%esp
f011370c:	85 c0                	test   %eax,%eax
f011370e:	75 13                	jne    f0113723 <test_str2lower_function+0x177>
f0113710:	83 ec 0c             	sub    $0xc,%esp
f0113713:	ff 75 dc             	pushl  -0x24(%ebp)
f0113716:	e8 94 eb 00 00       	call   f01222af <strlen>
f011371b:	83 c4 10             	add    $0x10,%esp
f011371e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113721:	74 15                	je     f0113738 <test_str2lower_function+0x18c>
		cprintf("str2lower #3: WRONG - str2lower return wrong value or length. Expected \"!@#$%%^&*()\", Actual \"%s\"\n", result);
f0113723:	83 ec 08             	sub    $0x8,%esp
f0113726:	ff 75 e8             	pushl  -0x18(%ebp)
f0113729:	68 18 b5 12 f0       	push   $0xf012b518
f011372e:	e8 39 d8 fe ff       	call   f0100f6c <cprintf>
f0113733:	83 c4 10             	add    $0x10,%esp
f0113736:	eb 04                	jmp    f011373c <test_str2lower_function+0x190>
	else
		eval += 15;
f0113738:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE4: input string is only numbers
	const char *src4 = "1234567890";
f011373c:	c7 45 d8 7b b5 12 f0 	movl   $0xf012b57b,-0x28(%ebp)
	char dst4[100];
	result = str2lower(dst4, src4);
f0113743:	83 ec 08             	sub    $0x8,%esp
f0113746:	ff 75 d8             	pushl  -0x28(%ebp)
f0113749:	8d 85 3c fe ff ff    	lea    -0x1c4(%ebp),%eax
f011374f:	50                   	push   %eax
f0113750:	e8 43 f2 00 00       	call   f0122998 <str2lower>
f0113755:	83 c4 10             	add    $0x10,%esp
f0113758:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f011375b:	83 ec 0c             	sub    $0xc,%esp
f011375e:	ff 75 e8             	pushl  -0x18(%ebp)
f0113761:	e8 49 eb 00 00       	call   f01222af <strlen>
f0113766:	83 c4 10             	add    $0x10,%esp
f0113769:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "1234567890") != 0 || resultLength != strlen(src4))
f011376c:	83 ec 08             	sub    $0x8,%esp
f011376f:	68 7b b5 12 f0       	push   $0xf012b57b
f0113774:	ff 75 e8             	pushl  -0x18(%ebp)
f0113777:	e8 3f ec 00 00       	call   f01223bb <strcmp>
f011377c:	83 c4 10             	add    $0x10,%esp
f011377f:	85 c0                	test   %eax,%eax
f0113781:	75 13                	jne    f0113796 <test_str2lower_function+0x1ea>
f0113783:	83 ec 0c             	sub    $0xc,%esp
f0113786:	ff 75 d8             	pushl  -0x28(%ebp)
f0113789:	e8 21 eb 00 00       	call   f01222af <strlen>
f011378e:	83 c4 10             	add    $0x10,%esp
f0113791:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113794:	74 15                	je     f01137ab <test_str2lower_function+0x1ff>
		cprintf("str2lower #4: WRONG - str2lower return wrong value or length. Expected \"1234567890\", Actual \"%s\"\n", result);
f0113796:	83 ec 08             	sub    $0x8,%esp
f0113799:	ff 75 e8             	pushl  -0x18(%ebp)
f011379c:	68 88 b5 12 f0       	push   $0xf012b588
f01137a1:	e8 c6 d7 fe ff       	call   f0100f6c <cprintf>
f01137a6:	83 c4 10             	add    $0x10,%esp
f01137a9:	eb 04                	jmp    f01137af <test_str2lower_function+0x203>
	else
		eval += 15;
f01137ab:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE5: input string contains invalid characters
	const char *src5 = "Hello!@#$%%^&*()World";
f01137af:	c7 45 d4 ea b5 12 f0 	movl   $0xf012b5ea,-0x2c(%ebp)
	char dst5[100];
	result = str2lower(dst5, src5);
f01137b6:	83 ec 08             	sub    $0x8,%esp
f01137b9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137bc:	8d 85 d8 fd ff ff    	lea    -0x228(%ebp),%eax
f01137c2:	50                   	push   %eax
f01137c3:	e8 d0 f1 00 00       	call   f0122998 <str2lower>
f01137c8:	83 c4 10             	add    $0x10,%esp
f01137cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01137ce:	83 ec 0c             	sub    $0xc,%esp
f01137d1:	ff 75 e8             	pushl  -0x18(%ebp)
f01137d4:	e8 d6 ea 00 00       	call   f01222af <strlen>
f01137d9:	83 c4 10             	add    $0x10,%esp
f01137dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello!@#$%%^&*()world") != 0 || resultLength != strlen(src5))
f01137df:	83 ec 08             	sub    $0x8,%esp
f01137e2:	68 00 b6 12 f0       	push   $0xf012b600
f01137e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01137ea:	e8 cc eb 00 00       	call   f01223bb <strcmp>
f01137ef:	83 c4 10             	add    $0x10,%esp
f01137f2:	85 c0                	test   %eax,%eax
f01137f4:	75 13                	jne    f0113809 <test_str2lower_function+0x25d>
f01137f6:	83 ec 0c             	sub    $0xc,%esp
f01137f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137fc:	e8 ae ea 00 00       	call   f01222af <strlen>
f0113801:	83 c4 10             	add    $0x10,%esp
f0113804:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113807:	74 15                	je     f011381e <test_str2lower_function+0x272>
		cprintf("str2lower #5: WRONG - str2lower return wrong value or length. Expected \"hello!@#$%%^&*()world\", Actual \"%s\"\n", result);
f0113809:	83 ec 08             	sub    $0x8,%esp
f011380c:	ff 75 e8             	pushl  -0x18(%ebp)
f011380f:	68 18 b6 12 f0       	push   $0xf012b618
f0113814:	e8 53 d7 fe ff       	call   f0100f6c <cprintf>
f0113819:	83 c4 10             	add    $0x10,%esp
f011381c:	eb 04                	jmp    f0113822 <test_str2lower_function+0x276>
	else
		eval += 15;
f011381e:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE6: input string contains characters with white-space characters
	const char *src6 = "Hello World";
f0113822:	c7 45 d0 85 b6 12 f0 	movl   $0xf012b685,-0x30(%ebp)
	char dst6[100];
	result = str2lower(dst6, src6);
f0113829:	83 ec 08             	sub    $0x8,%esp
f011382c:	ff 75 d0             	pushl  -0x30(%ebp)
f011382f:	8d 85 74 fd ff ff    	lea    -0x28c(%ebp),%eax
f0113835:	50                   	push   %eax
f0113836:	e8 5d f1 00 00       	call   f0122998 <str2lower>
f011383b:	83 c4 10             	add    $0x10,%esp
f011383e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113841:	83 ec 0c             	sub    $0xc,%esp
f0113844:	ff 75 e8             	pushl  -0x18(%ebp)
f0113847:	e8 63 ea 00 00       	call   f01222af <strlen>
f011384c:	83 c4 10             	add    $0x10,%esp
f011384f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world") != 0 || resultLength != strlen(src6))
f0113852:	83 ec 08             	sub    $0x8,%esp
f0113855:	68 91 b6 12 f0       	push   $0xf012b691
f011385a:	ff 75 e8             	pushl  -0x18(%ebp)
f011385d:	e8 59 eb 00 00       	call   f01223bb <strcmp>
f0113862:	83 c4 10             	add    $0x10,%esp
f0113865:	85 c0                	test   %eax,%eax
f0113867:	75 13                	jne    f011387c <test_str2lower_function+0x2d0>
f0113869:	83 ec 0c             	sub    $0xc,%esp
f011386c:	ff 75 d0             	pushl  -0x30(%ebp)
f011386f:	e8 3b ea 00 00       	call   f01222af <strlen>
f0113874:	83 c4 10             	add    $0x10,%esp
f0113877:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011387a:	74 15                	je     f0113891 <test_str2lower_function+0x2e5>
		cprintf("str2lower #6: WRONG - str2lower return wrong value or length. Expected \"hello world\", Actual \"%s\"\n", result);
f011387c:	83 ec 08             	sub    $0x8,%esp
f011387f:	ff 75 e8             	pushl  -0x18(%ebp)
f0113882:	68 a0 b6 12 f0       	push   $0xf012b6a0
f0113887:	e8 e0 d6 fe ff       	call   f0100f6c <cprintf>
f011388c:	83 c4 10             	add    $0x10,%esp
f011388f:	eb 04                	jmp    f0113895 <test_str2lower_function+0x2e9>
	else
		eval += 15;
f0113891:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE7: input string contains valid characters separated by _
	const char *src7 = "Hello WORLD String_2_LOWeR";
f0113895:	c7 45 cc 03 b7 12 f0 	movl   $0xf012b703,-0x34(%ebp)
	char dst7[100];
	result = str2lower(dst7, src7);
f011389c:	83 ec 08             	sub    $0x8,%esp
f011389f:	ff 75 cc             	pushl  -0x34(%ebp)
f01138a2:	8d 85 10 fd ff ff    	lea    -0x2f0(%ebp),%eax
f01138a8:	50                   	push   %eax
f01138a9:	e8 ea f0 00 00       	call   f0122998 <str2lower>
f01138ae:	83 c4 10             	add    $0x10,%esp
f01138b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01138b4:	83 ec 0c             	sub    $0xc,%esp
f01138b7:	ff 75 e8             	pushl  -0x18(%ebp)
f01138ba:	e8 f0 e9 00 00       	call   f01222af <strlen>
f01138bf:	83 c4 10             	add    $0x10,%esp
f01138c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world string_2_lower") != 0 || resultLength != strlen(src7))
f01138c5:	83 ec 08             	sub    $0x8,%esp
f01138c8:	68 1e b7 12 f0       	push   $0xf012b71e
f01138cd:	ff 75 e8             	pushl  -0x18(%ebp)
f01138d0:	e8 e6 ea 00 00       	call   f01223bb <strcmp>
f01138d5:	83 c4 10             	add    $0x10,%esp
f01138d8:	85 c0                	test   %eax,%eax
f01138da:	75 13                	jne    f01138ef <test_str2lower_function+0x343>
f01138dc:	83 ec 0c             	sub    $0xc,%esp
f01138df:	ff 75 cc             	pushl  -0x34(%ebp)
f01138e2:	e8 c8 e9 00 00       	call   f01222af <strlen>
f01138e7:	83 c4 10             	add    $0x10,%esp
f01138ea:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01138ed:	74 15                	je     f0113904 <test_str2lower_function+0x358>
		cprintf("str2lower #7: WRONG - str2lower return wrong value or length. Expected \"hello world string_2_lower\", Actual \"%s\"\n", result);
f01138ef:	83 ec 08             	sub    $0x8,%esp
f01138f2:	ff 75 e8             	pushl  -0x18(%ebp)
f01138f5:	68 3c b7 12 f0       	push   $0xf012b73c
f01138fa:	e8 6d d6 fe ff       	call   f0100f6c <cprintf>
f01138ff:	83 c4 10             	add    $0x10,%esp
f0113902:	eb 04                	jmp    f0113908 <test_str2lower_function+0x35c>
	else
		eval += 20;
f0113904:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)

	cprintf("Test str2lower completed. Evaluation = %d%%\n", eval);
f0113908:	83 ec 08             	sub    $0x8,%esp
f011390b:	ff 75 f4             	pushl  -0xc(%ebp)
f011390e:	68 b0 b7 12 f0       	push   $0xf012b7b0
f0113913:	e8 54 d6 fe ff       	call   f0100f6c <cprintf>
f0113918:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011391b:	83 ec 0c             	sub    $0xc,%esp
f011391e:	68 c0 b2 12 f0       	push   $0xf012b2c0
f0113923:	e8 44 d6 fe ff       	call   f0100f6c <cprintf>
f0113928:	83 c4 10             	add    $0x10,%esp
	return 0;
f011392b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113930:	c9                   	leave  
f0113931:	c3                   	ret    

f0113932 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0113932:	55                   	push   %ebp
f0113933:	89 e5                	mov    %esp,%ebp
f0113935:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0113938:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011393f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0113946:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011394d:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113952:	ff 75 ec             	pushl  -0x14(%ebp)
f0113955:	ff 75 f0             	pushl  -0x10(%ebp)
f0113958:	ff 75 f4             	pushl  -0xc(%ebp)
f011395b:	50                   	push   %eax
f011395c:	e8 c7 51 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113961:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113964:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113969:	ff 75 ec             	pushl  -0x14(%ebp)
f011396c:	ff 75 f0             	pushl  -0x10(%ebp)
f011396f:	ff 75 f4             	pushl  -0xc(%ebp)
f0113972:	50                   	push   %eax
f0113973:	e8 a0 4d 00 00       	call   f0118718 <CP>
f0113978:	83 c4 10             	add    $0x10,%esp
f011397b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011397e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113982:	74 17                	je     f011399b <test_pt_set_page_permissions+0x69>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0113984:	83 ec 04             	sub    $0x4,%esp
f0113987:	68 e0 b7 12 f0       	push   $0xf012b7e0
f011398c:	68 23 01 00 00       	push   $0x123
f0113991:	68 02 b8 12 f0       	push   $0xf012b802
f0113996:	e8 7f c9 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f011399b:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01139a2:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01139a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01139b0:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f01139b5:	ff 75 ec             	pushl  -0x14(%ebp)
f01139b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01139bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01139be:	50                   	push   %eax
f01139bf:	e8 64 51 ff ff       	call   f0108b28 <pt_set_page_permissions>
f01139c4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01139c7:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f01139cc:	ff 75 ec             	pushl  -0x14(%ebp)
f01139cf:	ff 75 f0             	pushl  -0x10(%ebp)
f01139d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01139d5:	50                   	push   %eax
f01139d6:	e8 3d 4d 00 00       	call   f0118718 <CP>
f01139db:	83 c4 10             	add    $0x10,%esp
f01139de:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01139e1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01139e5:	74 17                	je     f01139fe <test_pt_set_page_permissions+0xcc>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01139e7:	83 ec 04             	sub    $0x4,%esp
f01139ea:	68 20 b8 12 f0       	push   $0xf012b820
f01139ef:	68 2f 01 00 00       	push   $0x12f
f01139f4:	68 02 b8 12 f0       	push   $0xf012b802
f01139f9:	e8 1c c9 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f01139fe:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0113a05:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0113a0c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a13:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113a18:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a1b:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a21:	50                   	push   %eax
f0113a22:	e8 01 51 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113a27:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a2a:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113a2f:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a32:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a35:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a38:	50                   	push   %eax
f0113a39:	e8 da 4c 00 00       	call   f0118718 <CP>
f0113a3e:	83 c4 10             	add    $0x10,%esp
f0113a41:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113a44:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113a48:	74 17                	je     f0113a61 <test_pt_set_page_permissions+0x12f>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0113a4a:	83 ec 04             	sub    $0x4,%esp
f0113a4d:	68 44 b8 12 f0       	push   $0xf012b844
f0113a52:	68 3a 01 00 00       	push   $0x13a
f0113a57:	68 02 b8 12 f0       	push   $0xf012b802
f0113a5c:	e8 b9 c8 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0113a61:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0113a68:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0113a6f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a76:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113a7b:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a7e:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a81:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a84:	50                   	push   %eax
f0113a85:	e8 9e 50 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113a8a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a8d:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113a92:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a95:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a98:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a9b:	50                   	push   %eax
f0113a9c:	e8 77 4c 00 00       	call   f0118718 <CP>
f0113aa1:	83 c4 10             	add    $0x10,%esp
f0113aa4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113aa7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113aab:	74 17                	je     f0113ac4 <test_pt_set_page_permissions+0x192>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0113aad:	83 ec 04             	sub    $0x4,%esp
f0113ab0:	68 68 b8 12 f0       	push   $0xf012b868
f0113ab5:	68 46 01 00 00       	push   $0x146
f0113aba:	68 02 b8 12 f0       	push   $0xf012b802
f0113abf:	e8 56 c8 fe ff       	call   f010031a <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0113ac4:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0113acb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0113ad2:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113ad9:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113ade:	ff 75 ec             	pushl  -0x14(%ebp)
f0113ae1:	ff 75 f0             	pushl  -0x10(%ebp)
f0113ae4:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ae7:	50                   	push   %eax
f0113ae8:	e8 3b 50 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113aed:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113af0:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113af5:	ff 75 ec             	pushl  -0x14(%ebp)
f0113af8:	ff 75 f0             	pushl  -0x10(%ebp)
f0113afb:	ff 75 f4             	pushl  -0xc(%ebp)
f0113afe:	50                   	push   %eax
f0113aff:	e8 14 4c 00 00       	call   f0118718 <CP>
f0113b04:	83 c4 10             	add    $0x10,%esp
f0113b07:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113b0a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113b0e:	74 17                	je     f0113b27 <test_pt_set_page_permissions+0x1f5>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0113b10:	83 ec 04             	sub    $0x4,%esp
f0113b13:	68 8c b8 12 f0       	push   $0xf012b88c
f0113b18:	68 52 01 00 00       	push   $0x152
f0113b1d:	68 02 b8 12 f0       	push   $0xf012b802
f0113b22:	e8 f3 c7 fe ff       	call   f010031a <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0113b27:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0113b2e:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0113b35:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b3c:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113b41:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b44:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b47:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b4a:	50                   	push   %eax
f0113b4b:	e8 d8 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113b50:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b53:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113b58:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b5b:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b5e:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b61:	50                   	push   %eax
f0113b62:	e8 b1 4b 00 00       	call   f0118718 <CP>
f0113b67:	83 c4 10             	add    $0x10,%esp
f0113b6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113b6d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113b71:	74 17                	je     f0113b8a <test_pt_set_page_permissions+0x258>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0113b73:	83 ec 04             	sub    $0x4,%esp
f0113b76:	68 b0 b8 12 f0       	push   $0xf012b8b0
f0113b7b:	68 5e 01 00 00       	push   $0x15e
f0113b80:	68 02 b8 12 f0       	push   $0xf012b802
f0113b85:	e8 90 c7 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0113b8a:	83 ec 0c             	sub    $0xc,%esp
f0113b8d:	68 dc b8 12 f0       	push   $0xf012b8dc
f0113b92:	e8 d5 d3 fe ff       	call   f0100f6c <cprintf>
f0113b97:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113b9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113b9f:	c9                   	leave  
f0113ba0:	c3                   	ret    

f0113ba1 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0113ba1:	55                   	push   %ebp
f0113ba2:	89 e5                	mov    %esp,%ebp
f0113ba4:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0113ba7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0113bae:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0113bb5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113bbc:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113bc1:	ff 75 ec             	pushl  -0x14(%ebp)
f0113bc4:	ff 75 f0             	pushl  -0x10(%ebp)
f0113bc7:	ff 75 f4             	pushl  -0xc(%ebp)
f0113bca:	50                   	push   %eax
f0113bcb:	e8 58 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113bd0:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0113bd3:	83 ec 04             	sub    $0x4,%esp
f0113bd6:	68 2c b9 12 f0       	push   $0xf012b92c
f0113bdb:	68 6b 01 00 00       	push   $0x16b
f0113be0:	68 02 b8 12 f0       	push   $0xf012b802
f0113be5:	e8 30 c7 fe ff       	call   f010031a <_panic>

f0113bea <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0113bea:	55                   	push   %ebp
f0113beb:	89 e5                	mov    %esp,%ebp
f0113bed:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0113bf0:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0113bf7:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113bfc:	83 ec 08             	sub    $0x8,%esp
f0113bff:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c02:	50                   	push   %eax
f0113c03:	e8 e4 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113c08:	83 c4 10             	add    $0x10,%esp
f0113c0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0113c0e:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0113c12:	74 17                	je     f0113c2b <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0113c14:	83 ec 04             	sub    $0x4,%esp
f0113c17:	68 c8 b9 12 f0       	push   $0xf012b9c8
f0113c1c:	68 79 01 00 00       	push   $0x179
f0113c21:	68 02 b8 12 f0       	push   $0xf012b802
f0113c26:	e8 ef c6 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0113c2b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113c32:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113c37:	83 ec 08             	sub    $0x8,%esp
f0113c3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c3d:	50                   	push   %eax
f0113c3e:	e8 a9 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113c43:	83 c4 10             	add    $0x10,%esp
f0113c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0113c49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113c4d:	74 17                	je     f0113c66 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0113c4f:	83 ec 04             	sub    $0x4,%esp
f0113c52:	68 ec b9 12 f0       	push   $0xf012b9ec
f0113c57:	68 81 01 00 00       	push   $0x181
f0113c5c:	68 02 b8 12 f0       	push   $0xf012b802
f0113c61:	e8 b4 c6 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0113c66:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113c6d:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113c72:	83 ec 08             	sub    $0x8,%esp
f0113c75:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c78:	50                   	push   %eax
f0113c79:	e8 6e 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113c7e:	83 c4 10             	add    $0x10,%esp
f0113c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0113c84:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0113c88:	74 17                	je     f0113ca1 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0113c8a:	83 ec 04             	sub    $0x4,%esp
f0113c8d:	68 10 ba 12 f0       	push   $0xf012ba10
f0113c92:	68 89 01 00 00       	push   $0x189
f0113c97:	68 02 b8 12 f0       	push   $0xf012b802
f0113c9c:	e8 79 c6 fe ff       	call   f010031a <_panic>
	}

	va = 0xF1000000;
f0113ca1:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113ca8:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113cad:	83 ec 08             	sub    $0x8,%esp
f0113cb0:	ff 75 f4             	pushl  -0xc(%ebp)
f0113cb3:	50                   	push   %eax
f0113cb4:	e8 33 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113cb9:	83 c4 10             	add    $0x10,%esp
f0113cbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0113cbf:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0113cc3:	74 17                	je     f0113cdc <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0113cc5:	83 ec 04             	sub    $0x4,%esp
f0113cc8:	68 34 ba 12 f0       	push   $0xf012ba34
f0113ccd:	68 90 01 00 00       	push   $0x190
f0113cd2:	68 02 b8 12 f0       	push   $0xf012b802
f0113cd7:	e8 3e c6 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f0113cdc:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113ce3:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113ce8:	83 ec 08             	sub    $0x8,%esp
f0113ceb:	ff 75 f4             	pushl  -0xc(%ebp)
f0113cee:	50                   	push   %eax
f0113cef:	e8 f8 4e ff ff       	call   f0108bec <pt_get_page_permissions>
f0113cf4:	83 c4 10             	add    $0x10,%esp
f0113cf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0113cfa:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0113cfe:	74 17                	je     f0113d17 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0113d00:	83 ec 04             	sub    $0x4,%esp
f0113d03:	68 58 ba 12 f0       	push   $0xf012ba58
f0113d08:	68 97 01 00 00       	push   $0x197
f0113d0d:	68 02 b8 12 f0       	push   $0xf012b802
f0113d12:	e8 03 c6 fe ff       	call   f010031a <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0113d17:	83 ec 0c             	sub    $0xc,%esp
f0113d1a:	68 7c ba 12 f0       	push   $0xf012ba7c
f0113d1f:	e8 48 d2 fe ff       	call   f0100f6c <cprintf>
f0113d24:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113d27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113d2c:	c9                   	leave  
f0113d2d:	c3                   	ret    

f0113d2e <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0113d2e:	55                   	push   %ebp
f0113d2f:	89 e5                	mov    %esp,%ebp
f0113d31:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0113d34:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113d3b:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113d40:	83 ec 08             	sub    $0x8,%esp
f0113d43:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d46:	50                   	push   %eax
f0113d47:	e8 e9 4e ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113d4c:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0113d4f:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113d54:	83 ec 08             	sub    $0x8,%esp
f0113d57:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d5a:	50                   	push   %eax
f0113d5b:	e8 14 49 00 00       	call   f0118674 <CE>
f0113d60:	83 c4 10             	add    $0x10,%esp
f0113d63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113d66:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113d6a:	74 17                	je     f0113d83 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0113d6c:	83 ec 04             	sub    $0x4,%esp
f0113d6f:	68 c4 ba 12 f0       	push   $0xf012bac4
f0113d74:	68 a7 01 00 00       	push   $0x1a7
f0113d79:	68 02 b8 12 f0       	push   $0xf012b802
f0113d7e:	e8 97 c5 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f0113d83:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113d8a:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113d8f:	83 ec 08             	sub    $0x8,%esp
f0113d92:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d95:	50                   	push   %eax
f0113d96:	e8 9a 4e ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113d9b:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113d9e:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113da3:	83 ec 08             	sub    $0x8,%esp
f0113da6:	ff 75 f4             	pushl  -0xc(%ebp)
f0113da9:	50                   	push   %eax
f0113daa:	e8 c5 48 00 00       	call   f0118674 <CE>
f0113daf:	83 c4 10             	add    $0x10,%esp
f0113db2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113db5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113db9:	74 17                	je     f0113dd2 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0113dbb:	83 ec 04             	sub    $0x4,%esp
f0113dbe:	68 f0 ba 12 f0       	push   $0xf012baf0
f0113dc3:	68 af 01 00 00       	push   $0x1af
f0113dc8:	68 02 b8 12 f0       	push   $0xf012b802
f0113dcd:	e8 48 c5 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f0113dd2:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113dd9:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113dde:	83 ec 08             	sub    $0x8,%esp
f0113de1:	ff 75 f4             	pushl  -0xc(%ebp)
f0113de4:	50                   	push   %eax
f0113de5:	e8 4b 4e ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113dea:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113ded:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113df2:	83 ec 08             	sub    $0x8,%esp
f0113df5:	ff 75 f4             	pushl  -0xc(%ebp)
f0113df8:	50                   	push   %eax
f0113df9:	e8 76 48 00 00       	call   f0118674 <CE>
f0113dfe:	83 c4 10             	add    $0x10,%esp
f0113e01:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113e04:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113e08:	74 17                	je     f0113e21 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0113e0a:	83 ec 04             	sub    $0x4,%esp
f0113e0d:	68 1c bb 12 f0       	push   $0xf012bb1c
f0113e12:	68 b7 01 00 00       	push   $0x1b7
f0113e17:	68 02 b8 12 f0       	push   $0xf012b802
f0113e1c:	e8 f9 c4 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0000000;
f0113e21:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113e28:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113e2d:	83 ec 08             	sub    $0x8,%esp
f0113e30:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e33:	50                   	push   %eax
f0113e34:	e8 fc 4d ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113e39:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113e3c:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113e41:	83 ec 08             	sub    $0x8,%esp
f0113e44:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e47:	50                   	push   %eax
f0113e48:	e8 27 48 00 00       	call   f0118674 <CE>
f0113e4d:	83 c4 10             	add    $0x10,%esp
f0113e50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113e53:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113e57:	74 17                	je     f0113e70 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0113e59:	83 ec 04             	sub    $0x4,%esp
f0113e5c:	68 48 bb 12 f0       	push   $0xf012bb48
f0113e61:	68 bf 01 00 00       	push   $0x1bf
f0113e66:	68 02 b8 12 f0       	push   $0xf012b802
f0113e6b:	e8 aa c4 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0113e70:	83 ec 0c             	sub    $0xc,%esp
f0113e73:	68 74 bb 12 f0       	push   $0xf012bb74
f0113e78:	e8 ef d0 fe ff       	call   f0100f6c <cprintf>
f0113e7d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113e80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113e85:	c9                   	leave  
f0113e86:	c3                   	ret    

f0113e87 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0113e87:	55                   	push   %ebp
f0113e88:	89 e5                	mov    %esp,%ebp
f0113e8a:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0113e8d:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113e94:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0113e99:	83 ec 08             	sub    $0x8,%esp
f0113e9c:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e9f:	50                   	push   %eax
f0113ea0:	e8 90 4d ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113ea5:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0113ea8:	83 ec 04             	sub    $0x4,%esp
f0113eab:	68 c0 bb 12 f0       	push   $0xf012bbc0
f0113eb0:	68 ca 01 00 00       	push   $0x1ca
f0113eb5:	68 02 b8 12 f0       	push   $0xf012b802
f0113eba:	e8 5b c4 fe ff       	call   f010031a <_panic>

f0113ebf <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0113ebf:	55                   	push   %ebp
f0113ec0:	89 e5                	mov    %esp,%ebp
f0113ec2:	57                   	push   %edi
f0113ec3:	56                   	push   %esi
f0113ec4:	53                   	push   %ebx
f0113ec5:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113ecb:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113ed1:	bb 04 bf 12 f0       	mov    $0xf012bf04,%ebx
f0113ed6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113edb:	89 c7                	mov    %eax,%edi
f0113edd:	89 de                	mov    %ebx,%esi
f0113edf:	89 d1                	mov    %edx,%ecx
f0113ee1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ee3:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113ee9:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113eee:	b0 00                	mov    $0x0,%al
f0113ef0:	89 d7                	mov    %edx,%edi
f0113ef2:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113ef4:	6a 00                	push   $0x0
f0113ef6:	6a 0a                	push   $0xa
f0113ef8:	6a 14                	push   $0x14
f0113efa:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113f00:	50                   	push   %eax
f0113f01:	e8 6a 5b ff ff       	call   f0109a70 <env_create>
f0113f06:	83 c4 10             	add    $0x10,%esp
f0113f09:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113f0c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113f0f:	8b 40 64             	mov    0x64(%eax),%eax
f0113f12:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0113f15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113f18:	8b 40 68             	mov    0x68(%eax),%eax
f0113f1b:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0113f1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f21:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113f24:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0113f2b:	75 70 20 
f0113f2e:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0113f35:	00 00 00 
f0113f38:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0113f3e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113f43:	b8 00 00 00 00       	mov    $0x0,%eax
f0113f48:	89 d7                	mov    %edx,%edi
f0113f4a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113f4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113f4f:	8b 40 10             	mov    0x10(%eax),%eax
f0113f52:	83 ec 08             	sub    $0x8,%esp
f0113f55:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0113f5b:	52                   	push   %edx
f0113f5c:	50                   	push   %eax
f0113f5d:	e8 f3 e7 00 00       	call   f0122755 <ltostr>
f0113f62:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113f65:	83 ec 04             	sub    $0x4,%esp
f0113f68:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0113f6e:	50                   	push   %eax
f0113f6f:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0113f75:	50                   	push   %eax
f0113f76:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0113f7c:	50                   	push   %eax
f0113f7d:	e8 ac e8 00 00       	call   f012282e <strcconcat>
f0113f82:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0113f85:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0113f8c:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113f93:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0113f9a:	83 ec 0c             	sub    $0xc,%esp
f0113f9d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113fa0:	e8 d0 48 00 00       	call   f0118875 <ClearUserSpace>
f0113fa5:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0113fa8:	83 ec 04             	sub    $0x4,%esp
f0113fab:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0113fb1:	50                   	push   %eax
f0113fb2:	68 56 bc 12 f0       	push   $0xf012bc56
f0113fb7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0113fbd:	50                   	push   %eax
f0113fbe:	e8 6b e8 00 00       	call   f012282e <strcconcat>
f0113fc3:	83 c4 10             	add    $0x10,%esp
f0113fc6:	83 ec 0c             	sub    $0xc,%esp
f0113fc9:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0113fcf:	50                   	push   %eax
f0113fd0:	e8 07 df fe ff       	call   f0101edc <execute_command>
f0113fd5:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0113fd8:	83 ec 04             	sub    $0x4,%esp
f0113fdb:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0113fe1:	50                   	push   %eax
f0113fe2:	68 61 bc 12 f0       	push   $0xf012bc61
f0113fe7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0113fed:	50                   	push   %eax
f0113fee:	e8 3b e8 00 00       	call   f012282e <strcconcat>
f0113ff3:	83 c4 10             	add    $0x10,%esp
f0113ff6:	83 ec 0c             	sub    $0xc,%esp
f0113ff9:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0113fff:	50                   	push   %eax
f0114000:	e8 d7 de fe ff       	call   f0101edc <execute_command>
f0114005:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0114008:	83 ec 04             	sub    $0x4,%esp
f011400b:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0114011:	50                   	push   %eax
f0114012:	68 6c bc 12 f0       	push   $0xf012bc6c
f0114017:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011401d:	50                   	push   %eax
f011401e:	e8 0b e8 00 00       	call   f012282e <strcconcat>
f0114023:	83 c4 10             	add    $0x10,%esp
f0114026:	83 ec 0c             	sub    $0xc,%esp
f0114029:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011402f:	50                   	push   %eax
f0114030:	e8 a7 de fe ff       	call   f0101edc <execute_command>
f0114035:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0114038:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011403f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114042:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0114045:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f011404c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011404f:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0114052:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0114059:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011405c:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011405f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114062:	83 ec 08             	sub    $0x8,%esp
f0114065:	50                   	push   %eax
f0114066:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114069:	e8 6e 47 00 00       	call   f01187dc <GP>
f011406e:	83 c4 10             	add    $0x10,%esp
f0114071:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0114074:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f011407b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0114082:	e8 82 99 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114087:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011408a:	83 ec 0c             	sub    $0xc,%esp
f011408d:	68 78 bc 12 f0       	push   $0xf012bc78
f0114092:	e8 d5 ce fe ff       	call   f0100f6c <cprintf>
f0114097:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011409a:	6a 03                	push   $0x3
f011409c:	68 00 00 90 02       	push   $0x2900000
f01140a1:	68 00 00 80 02       	push   $0x2800000
f01140a6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01140a9:	e8 22 56 ff ff       	call   f01096d0 <cut_paste_pages>
f01140ae:	83 c4 10             	add    $0x10,%esp
f01140b1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01140b4:	e8 50 99 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01140b9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01140bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01140c3:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01140c7:	75 08                	jne    f01140d1 <test_cut_paste_pages+0x212>
f01140c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01140cc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01140cf:	74 2b                	je     f01140fc <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01140d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01140d4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01140d7:	83 ec 0c             	sub    $0xc,%esp
f01140da:	50                   	push   %eax
f01140db:	ff 75 b4             	pushl  -0x4c(%ebp)
f01140de:	68 a8 bc 12 f0       	push   $0xf012bca8
f01140e3:	68 04 02 00 00       	push   $0x204
f01140e8:	68 02 b8 12 f0       	push   $0xf012b802
f01140ed:	e8 c5 c3 fe ff       	call   f01004b7 <_warn>
f01140f2:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01140f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01140fc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114100:	74 04                	je     f0114106 <test_cut_paste_pages+0x247>
f0114102:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0114106:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011410d:	83 ec 08             	sub    $0x8,%esp
f0114110:	6a 00                	push   $0x0
f0114112:	6a 01                	push   $0x1
f0114114:	6a 00                	push   $0x0
f0114116:	68 ff 0f 00 00       	push   $0xfff
f011411b:	ff 75 bc             	pushl  -0x44(%ebp)
f011411e:	6a 01                	push   $0x1
f0114120:	68 00 30 00 00       	push   $0x3000
f0114125:	68 00 00 90 02       	push   $0x2900000
f011412a:	68 00 00 80 02       	push   $0x2800000
f011412f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114132:	e8 72 47 00 00       	call   f01188a9 <CCP>
f0114137:	83 c4 30             	add    $0x30,%esp
f011413a:	83 f8 01             	cmp    $0x1,%eax
f011413d:	74 21                	je     f0114160 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011413f:	83 ec 04             	sub    $0x4,%esp
f0114142:	68 fc bc 12 f0       	push   $0xf012bcfc
f0114147:	68 0c 02 00 00       	push   $0x20c
f011414c:	68 02 b8 12 f0       	push   $0xf012b802
f0114151:	e8 61 c3 fe ff       	call   f01004b7 <_warn>
f0114156:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114159:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0114160:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114164:	74 04                	je     f011416a <test_cut_paste_pages+0x2ab>
f0114166:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f011416a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0114171:	83 ec 04             	sub    $0x4,%esp
f0114174:	6a 00                	push   $0x0
f0114176:	68 00 00 90 02       	push   $0x2900000
f011417b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011417e:	e8 b7 41 00 00       	call   f011833a <CB>
f0114183:	83 c4 10             	add    $0x10,%esp
f0114186:	85 c0                	test   %eax,%eax
f0114188:	0f 84 f6 00 00 00    	je     f0114284 <test_cut_paste_pages+0x3c5>
f011418e:	83 ec 04             	sub    $0x4,%esp
f0114191:	6a 00                	push   $0x0
f0114193:	68 00 10 90 02       	push   $0x2901000
f0114198:	ff 75 d4             	pushl  -0x2c(%ebp)
f011419b:	e8 9a 41 00 00       	call   f011833a <CB>
f01141a0:	83 c4 10             	add    $0x10,%esp
f01141a3:	85 c0                	test   %eax,%eax
f01141a5:	0f 84 d9 00 00 00    	je     f0114284 <test_cut_paste_pages+0x3c5>
f01141ab:	83 ec 04             	sub    $0x4,%esp
f01141ae:	6a 00                	push   $0x0
f01141b0:	68 00 20 90 02       	push   $0x2902000
f01141b5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01141b8:	e8 7d 41 00 00       	call   f011833a <CB>
f01141bd:	83 c4 10             	add    $0x10,%esp
f01141c0:	85 c0                	test   %eax,%eax
f01141c2:	0f 84 bc 00 00 00    	je     f0114284 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f01141c8:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01141cf:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01141d6:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01141dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01141e0:	8a 00                	mov    (%eax),%al
f01141e2:	3c 61                	cmp    $0x61,%al
f01141e4:	75 12                	jne    f01141f8 <test_cut_paste_pages+0x339>
f01141e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01141e9:	8a 00                	mov    (%eax),%al
f01141eb:	3c 62                	cmp    $0x62,%al
f01141ed:	75 09                	jne    f01141f8 <test_cut_paste_pages+0x339>
f01141ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01141f2:	8a 00                	mov    (%eax),%al
f01141f4:	3c 63                	cmp    $0x63,%al
f01141f6:	74 21                	je     f0114219 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01141f8:	83 ec 04             	sub    $0x4,%esp
f01141fb:	68 48 bd 12 f0       	push   $0xf012bd48
f0114200:	68 19 02 00 00       	push   $0x219
f0114205:	68 02 b8 12 f0       	push   $0xf012b802
f011420a:	e8 a8 c2 fe ff       	call   f01004b7 <_warn>
f011420f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114212:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0114219:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011421d:	74 04                	je     f0114223 <test_cut_paste_pages+0x364>
f011421f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114223:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f011422a:	83 ec 04             	sub    $0x4,%esp
f011422d:	6a 01                	push   $0x1
f011422f:	68 00 10 90 02       	push   $0x2901000
f0114234:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114237:	e8 fe 40 00 00       	call   f011833a <CB>
f011423c:	83 c4 10             	add    $0x10,%esp
f011423f:	85 c0                	test   %eax,%eax
f0114241:	74 41                	je     f0114284 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0114243:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114246:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0114249:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011424c:	8a 00                	mov    (%eax),%al
f011424e:	3c 79                	cmp    $0x79,%al
f0114250:	74 21                	je     f0114273 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0114252:	83 ec 04             	sub    $0x4,%esp
f0114255:	68 48 bd 12 f0       	push   $0xf012bd48
f011425a:	68 24 02 00 00       	push   $0x224
f011425f:	68 02 b8 12 f0       	push   $0xf012b802
f0114264:	e8 4e c2 fe ff       	call   f01004b7 <_warn>
f0114269:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011426c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0114273:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114277:	74 04                	je     f011427d <test_cut_paste_pages+0x3be>
f0114279:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011427d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0114284:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114287:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011428a:	6a 02                	push   $0x2
f011428c:	68 00 f0 bf 02       	push   $0x2bff000
f0114291:	68 00 10 90 02       	push   $0x2901000
f0114296:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114299:	e8 32 54 ff ff       	call   f01096d0 <cut_paste_pages>
f011429e:	83 c4 10             	add    $0x10,%esp
f01142a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01142a4:	e8 60 97 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01142a9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01142ac:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01142b0:	75 0b                	jne    f01142bd <test_cut_paste_pages+0x3fe>
f01142b2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142b5:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01142b8:	83 f8 01             	cmp    $0x1,%eax
f01142bb:	74 2b                	je     f01142e8 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01142bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142c0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01142c3:	83 ec 0c             	sub    $0xc,%esp
f01142c6:	50                   	push   %eax
f01142c7:	ff 75 b4             	pushl  -0x4c(%ebp)
f01142ca:	68 a8 bc 12 f0       	push   $0xf012bca8
f01142cf:	68 35 02 00 00       	push   $0x235
f01142d4:	68 02 b8 12 f0       	push   $0xf012b802
f01142d9:	e8 d9 c1 fe ff       	call   f01004b7 <_warn>
f01142de:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01142e1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01142e8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01142ec:	74 04                	je     f01142f2 <test_cut_paste_pages+0x433>
f01142ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01142f2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01142f9:	83 ec 08             	sub    $0x8,%esp
f01142fc:	6a 00                	push   $0x0
f01142fe:	6a 01                	push   $0x1
f0114300:	6a 00                	push   $0x0
f0114302:	68 ff 0f 00 00       	push   $0xfff
f0114307:	ff 75 bc             	pushl  -0x44(%ebp)
f011430a:	6a 01                	push   $0x1
f011430c:	68 00 20 00 00       	push   $0x2000
f0114311:	68 00 f0 bf 02       	push   $0x2bff000
f0114316:	68 00 10 90 02       	push   $0x2901000
f011431b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011431e:	e8 86 45 00 00       	call   f01188a9 <CCP>
f0114323:	83 c4 30             	add    $0x30,%esp
f0114326:	83 f8 01             	cmp    $0x1,%eax
f0114329:	74 21                	je     f011434c <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011432b:	83 ec 04             	sub    $0x4,%esp
f011432e:	68 fc bc 12 f0       	push   $0xf012bcfc
f0114333:	68 3d 02 00 00       	push   $0x23d
f0114338:	68 02 b8 12 f0       	push   $0xf012b802
f011433d:	e8 75 c1 fe ff       	call   f01004b7 <_warn>
f0114342:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114345:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011434c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114350:	74 04                	je     f0114356 <test_cut_paste_pages+0x497>
f0114352:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0114356:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011435d:	83 ec 04             	sub    $0x4,%esp
f0114360:	6a 00                	push   $0x0
f0114362:	68 ff f7 bf 02       	push   $0x2bff7ff
f0114367:	ff 75 d4             	pushl  -0x2c(%ebp)
f011436a:	e8 cb 3f 00 00       	call   f011833a <CB>
f011436f:	83 c4 10             	add    $0x10,%esp
f0114372:	85 c0                	test   %eax,%eax
f0114374:	74 6b                	je     f01143e1 <test_cut_paste_pages+0x522>
f0114376:	83 ec 04             	sub    $0x4,%esp
f0114379:	6a 00                	push   $0x0
f011437b:	68 ff 0f c0 02       	push   $0x2c00fff
f0114380:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114383:	e8 b2 3f 00 00       	call   f011833a <CB>
f0114388:	83 c4 10             	add    $0x10,%esp
f011438b:	85 c0                	test   %eax,%eax
f011438d:	74 52                	je     f01143e1 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f011438f:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0114396:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011439d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143a0:	8a 00                	mov    (%eax),%al
f01143a2:	3c 79                	cmp    $0x79,%al
f01143a4:	75 09                	jne    f01143af <test_cut_paste_pages+0x4f0>
f01143a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01143a9:	8a 00                	mov    (%eax),%al
f01143ab:	3c 63                	cmp    $0x63,%al
f01143ad:	74 21                	je     f01143d0 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01143af:	83 ec 04             	sub    $0x4,%esp
f01143b2:	68 48 bd 12 f0       	push   $0xf012bd48
f01143b7:	68 49 02 00 00       	push   $0x249
f01143bc:	68 02 b8 12 f0       	push   $0xf012b802
f01143c1:	e8 f1 c0 fe ff       	call   f01004b7 <_warn>
f01143c6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143c9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01143d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01143d4:	74 04                	je     f01143da <test_cut_paste_pages+0x51b>
f01143d6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01143da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01143e1:	83 ec 0c             	sub    $0xc,%esp
f01143e4:	68 81 bd 12 f0       	push   $0xf012bd81
f01143e9:	e8 7e cb fe ff       	call   f0100f6c <cprintf>
f01143ee:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01143f1:	83 ec 0c             	sub    $0xc,%esp
f01143f4:	68 90 bd 12 f0       	push   $0xf012bd90
f01143f9:	e8 6e cb fe ff       	call   f0100f6c <cprintf>
f01143fe:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0114401:	83 ec 04             	sub    $0x4,%esp
f0114404:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011440a:	50                   	push   %eax
f011440b:	68 b9 bd 12 f0       	push   $0xf012bdb9
f0114410:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114416:	50                   	push   %eax
f0114417:	e8 12 e4 00 00       	call   f012282e <strcconcat>
f011441c:	83 c4 10             	add    $0x10,%esp
f011441f:	83 ec 0c             	sub    $0xc,%esp
f0114422:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0114428:	50                   	push   %eax
f0114429:	e8 ae da fe ff       	call   f0101edc <execute_command>
f011442e:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0114431:	83 ec 04             	sub    $0x4,%esp
f0114434:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011443a:	50                   	push   %eax
f011443b:	68 c4 bd 12 f0       	push   $0xf012bdc4
f0114440:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114446:	50                   	push   %eax
f0114447:	e8 e2 e3 00 00       	call   f012282e <strcconcat>
f011444c:	83 c4 10             	add    $0x10,%esp
f011444f:	83 ec 0c             	sub    $0xc,%esp
f0114452:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0114458:	50                   	push   %eax
f0114459:	e8 7e da fe ff       	call   f0101edc <execute_command>
f011445e:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0114461:	83 ec 04             	sub    $0x4,%esp
f0114464:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011446a:	50                   	push   %eax
f011446b:	68 cf bd 12 f0       	push   $0xf012bdcf
f0114470:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114476:	50                   	push   %eax
f0114477:	e8 b2 e3 00 00       	call   f012282e <strcconcat>
f011447c:	83 c4 10             	add    $0x10,%esp
f011447f:	83 ec 0c             	sub    $0xc,%esp
f0114482:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0114488:	50                   	push   %eax
f0114489:	e8 4e da fe ff       	call   f0101edc <execute_command>
f011448e:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0114491:	83 ec 04             	sub    $0x4,%esp
f0114494:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011449a:	50                   	push   %eax
f011449b:	68 da bd 12 f0       	push   $0xf012bdda
f01144a0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01144a6:	50                   	push   %eax
f01144a7:	e8 82 e3 00 00       	call   f012282e <strcconcat>
f01144ac:	83 c4 10             	add    $0x10,%esp
f01144af:	83 ec 0c             	sub    $0xc,%esp
f01144b2:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01144b8:	50                   	push   %eax
f01144b9:	e8 1e da fe ff       	call   f0101edc <execute_command>
f01144be:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01144c1:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01144c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144cb:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01144ce:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01144d5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144d8:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01144db:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01144e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144e5:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01144e8:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01144ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144f2:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01144f5:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01144fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144ff:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0114502:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0114509:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011450c:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011450f:	83 ec 08             	sub    $0x8,%esp
f0114512:	68 00 00 c0 01       	push   $0x1c00000
f0114517:	ff 75 d4             	pushl  -0x2c(%ebp)
f011451a:	e8 bd 42 00 00       	call   f01187dc <GP>
f011451f:	83 c4 10             	add    $0x10,%esp
f0114522:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0114525:	83 ec 08             	sub    $0x8,%esp
f0114528:	68 00 00 40 01       	push   $0x1400000
f011452d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114530:	e8 a7 42 00 00       	call   f01187dc <GP>
f0114535:	83 c4 10             	add    $0x10,%esp
f0114538:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011453b:	e8 c9 94 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114540:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0114543:	6a 01                	push   $0x1
f0114545:	68 00 00 40 01       	push   $0x1400000
f011454a:	68 00 00 c0 01       	push   $0x1c00000
f011454f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114552:	e8 79 51 ff ff       	call   f01096d0 <cut_paste_pages>
f0114557:	83 c4 10             	add    $0x10,%esp
f011455a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011455d:	e8 a7 94 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114562:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0114565:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0114569:	75 08                	jne    f0114573 <test_cut_paste_pages+0x6b4>
f011456b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011456e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0114571:	74 2b                	je     f011459e <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0114573:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114576:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114579:	83 ec 0c             	sub    $0xc,%esp
f011457c:	50                   	push   %eax
f011457d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0114580:	68 e8 bd 12 f0       	push   $0xf012bde8
f0114585:	68 6c 02 00 00       	push   $0x26c
f011458a:	68 02 b8 12 f0       	push   $0xf012b802
f011458f:	e8 23 bf fe ff       	call   f01004b7 <_warn>
f0114594:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0114597:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011459e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01145a2:	74 04                	je     f01145a8 <test_cut_paste_pages+0x6e9>
f01145a4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01145a8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01145af:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01145b6:	83 ec 08             	sub    $0x8,%esp
f01145b9:	6a 00                	push   $0x0
f01145bb:	68 ff 0f 00 00       	push   $0xfff
f01145c0:	ff 75 a4             	pushl  -0x5c(%ebp)
f01145c3:	68 ff 0f 00 00       	push   $0xfff
f01145c8:	ff 75 a0             	pushl  -0x60(%ebp)
f01145cb:	6a 01                	push   $0x1
f01145cd:	68 00 10 00 00       	push   $0x1000
f01145d2:	68 00 00 40 01       	push   $0x1400000
f01145d7:	68 00 00 c0 01       	push   $0x1c00000
f01145dc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01145df:	e8 c5 42 00 00       	call   f01188a9 <CCP>
f01145e4:	83 c4 30             	add    $0x30,%esp
f01145e7:	83 f8 01             	cmp    $0x1,%eax
f01145ea:	74 28                	je     f0114614 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01145ec:	83 ec 04             	sub    $0x4,%esp
f01145ef:	68 fc bc 12 f0       	push   $0xf012bcfc
f01145f4:	68 75 02 00 00       	push   $0x275
f01145f9:	68 02 b8 12 f0       	push   $0xf012b802
f01145fe:	e8 b4 be fe ff       	call   f01004b7 <_warn>
f0114603:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114606:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011460d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0114614:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114618:	74 04                	je     f011461e <test_cut_paste_pages+0x75f>
f011461a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011461e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0114625:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114629:	0f 84 92 00 00 00    	je     f01146c1 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011462f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0114636:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011463d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0114644:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011464b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0114652:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0114659:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011465c:	8a 00                	mov    (%eax),%al
f011465e:	3c 61                	cmp    $0x61,%al
f0114660:	75 2d                	jne    f011468f <test_cut_paste_pages+0x7d0>
f0114662:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114665:	8a 00                	mov    (%eax),%al
f0114667:	3c 78                	cmp    $0x78,%al
f0114669:	75 24                	jne    f011468f <test_cut_paste_pages+0x7d0>
f011466b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011466e:	8a 00                	mov    (%eax),%al
f0114670:	3c 62                	cmp    $0x62,%al
f0114672:	75 1b                	jne    f011468f <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0114674:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114677:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0114679:	3c 79                	cmp    $0x79,%al
f011467b:	75 12                	jne    f011468f <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011467d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114680:	8a 00                	mov    (%eax),%al
f0114682:	3c 63                	cmp    $0x63,%al
f0114684:	75 09                	jne    f011468f <test_cut_paste_pages+0x7d0>
f0114686:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114689:	8a 00                	mov    (%eax),%al
f011468b:	3c 7a                	cmp    $0x7a,%al
f011468d:	74 21                	je     f01146b0 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011468f:	83 ec 04             	sub    $0x4,%esp
f0114692:	68 48 bd 12 f0       	push   $0xf012bd48
f0114697:	68 87 02 00 00       	push   $0x287
f011469c:	68 02 b8 12 f0       	push   $0xf012b802
f01146a1:	e8 11 be fe ff       	call   f01004b7 <_warn>
f01146a6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146a9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01146b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01146b4:	74 04                	je     f01146ba <test_cut_paste_pages+0x7fb>
f01146b6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01146c1:	e8 43 93 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01146c6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01146c9:	6a 03                	push   $0x3
f01146cb:	68 00 f0 bf 01       	push   $0x1bff000
f01146d0:	68 00 00 40 01       	push   $0x1400000
f01146d5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01146d8:	e8 f3 4f ff ff       	call   f01096d0 <cut_paste_pages>
f01146dd:	83 c4 10             	add    $0x10,%esp
f01146e0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01146e3:	e8 21 93 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01146e8:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01146eb:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01146ef:	75 08                	jne    f01146f9 <test_cut_paste_pages+0x83a>
f01146f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146f4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01146f7:	74 2b                	je     f0114724 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01146f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146fc:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01146ff:	83 ec 0c             	sub    $0xc,%esp
f0114702:	50                   	push   %eax
f0114703:	ff 75 b4             	pushl  -0x4c(%ebp)
f0114706:	68 e8 bd 12 f0       	push   $0xf012bde8
f011470b:	68 96 02 00 00       	push   $0x296
f0114710:	68 02 b8 12 f0       	push   $0xf012b802
f0114715:	e8 9d bd fe ff       	call   f01004b7 <_warn>
f011471a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011471d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0114724:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114728:	74 04                	je     f011472e <test_cut_paste_pages+0x86f>
f011472a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011472e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0114735:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011473c:	83 ec 04             	sub    $0x4,%esp
f011473f:	6a 00                	push   $0x0
f0114741:	68 00 00 40 01       	push   $0x1400000
f0114746:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114749:	e8 ec 3b 00 00       	call   f011833a <CB>
f011474e:	83 c4 10             	add    $0x10,%esp
f0114751:	83 f8 01             	cmp    $0x1,%eax
f0114754:	0f 85 80 00 00 00    	jne    f01147da <test_cut_paste_pages+0x91b>
f011475a:	83 ec 04             	sub    $0x4,%esp
f011475d:	6a 00                	push   $0x0
f011475f:	68 00 10 40 01       	push   $0x1401000
f0114764:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114767:	e8 ce 3b 00 00       	call   f011833a <CB>
f011476c:	83 c4 10             	add    $0x10,%esp
f011476f:	83 f8 01             	cmp    $0x1,%eax
f0114772:	75 66                	jne    f01147da <test_cut_paste_pages+0x91b>
f0114774:	83 ec 04             	sub    $0x4,%esp
f0114777:	6a 00                	push   $0x0
f0114779:	68 00 20 40 01       	push   $0x1402000
f011477e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114781:	e8 b4 3b 00 00       	call   f011833a <CB>
f0114786:	83 c4 10             	add    $0x10,%esp
f0114789:	83 f8 01             	cmp    $0x1,%eax
f011478c:	75 4c                	jne    f01147da <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011478e:	83 ec 04             	sub    $0x4,%esp
f0114791:	6a 00                	push   $0x0
f0114793:	68 00 f0 bf 01       	push   $0x1bff000
f0114798:	ff 75 d4             	pushl  -0x2c(%ebp)
f011479b:	e8 9a 3b 00 00       	call   f011833a <CB>
f01147a0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01147a3:	85 c0                	test   %eax,%eax
f01147a5:	75 33                	jne    f01147da <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01147a7:	83 ec 04             	sub    $0x4,%esp
f01147aa:	6a 00                	push   $0x0
f01147ac:	68 00 00 c0 01       	push   $0x1c00000
f01147b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01147b4:	e8 81 3b 00 00       	call   f011833a <CB>
f01147b9:	83 c4 10             	add    $0x10,%esp
f01147bc:	83 f8 01             	cmp    $0x1,%eax
f01147bf:	75 19                	jne    f01147da <test_cut_paste_pages+0x91b>
f01147c1:	83 ec 04             	sub    $0x4,%esp
f01147c4:	6a 00                	push   $0x0
f01147c6:	68 00 10 c0 01       	push   $0x1c01000
f01147cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01147ce:	e8 67 3b 00 00       	call   f011833a <CB>
f01147d3:	83 c4 10             	add    $0x10,%esp
f01147d6:	85 c0                	test   %eax,%eax
f01147d8:	74 28                	je     f0114802 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01147da:	83 ec 04             	sub    $0x4,%esp
f01147dd:	68 48 be 12 f0       	push   $0xf012be48
f01147e2:	68 9f 02 00 00       	push   $0x29f
f01147e7:	68 02 b8 12 f0       	push   $0xf012b802
f01147ec:	e8 c6 bc fe ff       	call   f01004b7 <_warn>
f01147f1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01147f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01147fb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0114802:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114806:	74 04                	je     f011480c <test_cut_paste_pages+0x94d>
f0114808:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011480c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0114813:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114817:	0f 84 99 00 00 00    	je     f01148b6 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011481d:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0114824:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011482b:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0114832:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0114839:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0114840:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0114847:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011484a:	8a 00                	mov    (%eax),%al
f011484c:	3c 61                	cmp    $0x61,%al
f011484e:	75 2d                	jne    f011487d <test_cut_paste_pages+0x9be>
f0114850:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114853:	8a 00                	mov    (%eax),%al
f0114855:	3c 78                	cmp    $0x78,%al
f0114857:	75 24                	jne    f011487d <test_cut_paste_pages+0x9be>
f0114859:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011485c:	8a 00                	mov    (%eax),%al
f011485e:	3c 62                	cmp    $0x62,%al
f0114860:	75 1b                	jne    f011487d <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0114862:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114865:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0114867:	3c 79                	cmp    $0x79,%al
f0114869:	75 12                	jne    f011487d <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011486b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011486e:	8a 00                	mov    (%eax),%al
f0114870:	3c 63                	cmp    $0x63,%al
f0114872:	75 09                	jne    f011487d <test_cut_paste_pages+0x9be>
f0114874:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114877:	8a 00                	mov    (%eax),%al
f0114879:	3c 7a                	cmp    $0x7a,%al
f011487b:	74 28                	je     f01148a5 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011487d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0114884:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011488b:	83 ec 04             	sub    $0x4,%esp
f011488e:	68 48 bd 12 f0       	push   $0xf012bd48
f0114893:	68 b3 02 00 00       	push   $0x2b3
f0114898:	68 02 b8 12 f0       	push   $0xf012b802
f011489d:	e8 15 bc fe ff       	call   f01004b7 <_warn>
f01148a2:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01148a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01148a9:	74 04                	je     f01148af <test_cut_paste_pages+0x9f0>
f01148ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148af:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01148b6:	83 ec 0c             	sub    $0xc,%esp
f01148b9:	68 81 be 12 f0       	push   $0xf012be81
f01148be:	e8 a9 c6 fe ff       	call   f0100f6c <cprintf>
f01148c3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01148c6:	83 ec 08             	sub    $0x8,%esp
f01148c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01148cc:	68 90 be 12 f0       	push   $0xf012be90
f01148d1:	e8 96 c6 fe ff       	call   f0100f6c <cprintf>
f01148d6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01148d9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01148dd:	75 10                	jne    f01148ef <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01148df:	83 ec 0c             	sub    $0xc,%esp
f01148e2:	68 c4 be 12 f0       	push   $0xf012bec4
f01148e7:	e8 80 c6 fe ff       	call   f0100f6c <cprintf>
f01148ec:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01148ef:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f01148f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01148f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148fa:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01148fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114902:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114905:	5b                   	pop    %ebx
f0114906:	5e                   	pop    %esi
f0114907:	5f                   	pop    %edi
f0114908:	5d                   	pop    %ebp
f0114909:	c3                   	ret    

f011490a <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011490a:	55                   	push   %ebp
f011490b:	89 e5                	mov    %esp,%ebp
f011490d:	57                   	push   %edi
f011490e:	56                   	push   %esi
f011490f:	53                   	push   %ebx
f0114910:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114916:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011491c:	bb 04 bf 12 f0       	mov    $0xf012bf04,%ebx
f0114921:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114926:	89 c7                	mov    %eax,%edi
f0114928:	89 de                	mov    %ebx,%esi
f011492a:	89 d1                	mov    %edx,%ecx
f011492c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011492e:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0114934:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114939:	b0 00                	mov    $0x0,%al
f011493b:	89 d7                	mov    %edx,%edi
f011493d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011493f:	6a 00                	push   $0x0
f0114941:	6a 0a                	push   $0xa
f0114943:	6a 14                	push   $0x14
f0114945:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011494b:	50                   	push   %eax
f011494c:	e8 1f 51 ff ff       	call   f0109a70 <env_create>
f0114951:	83 c4 10             	add    $0x10,%esp
f0114954:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114957:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011495a:	8b 40 64             	mov    0x64(%eax),%eax
f011495d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0114960:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114963:	8b 40 68             	mov    0x68(%eax),%eax
f0114966:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011496c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114972:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114975:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011497c:	75 70 20 
f011497f:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0114986:	00 00 00 
f0114989:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011498f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114994:	b8 00 00 00 00       	mov    $0x0,%eax
f0114999:	89 d7                	mov    %edx,%edi
f011499b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011499d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01149a0:	8b 40 10             	mov    0x10(%eax),%eax
f01149a3:	83 ec 08             	sub    $0x8,%esp
f01149a6:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f01149ac:	52                   	push   %edx
f01149ad:	50                   	push   %eax
f01149ae:	e8 a2 dd 00 00       	call   f0122755 <ltostr>
f01149b3:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01149b6:	83 ec 04             	sub    $0x4,%esp
f01149b9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01149bf:	50                   	push   %eax
f01149c0:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01149c6:	50                   	push   %eax
f01149c7:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01149cd:	50                   	push   %eax
f01149ce:	e8 5b de 00 00       	call   f012282e <strcconcat>
f01149d3:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01149d6:	83 ec 0c             	sub    $0xc,%esp
f01149d9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01149dc:	e8 94 3e 00 00       	call   f0118875 <ClearUserSpace>
f01149e1:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01149e4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01149eb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01149f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01149f9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0114a00:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114a07:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0114a0e:	83 ec 0c             	sub    $0xc,%esp
f0114a11:	68 38 bf 12 f0       	push   $0xf012bf38
f0114a16:	e8 51 c5 fe ff       	call   f0100f6c <cprintf>
f0114a1b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114a1e:	83 ec 04             	sub    $0x4,%esp
f0114a21:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114a27:	50                   	push   %eax
f0114a28:	68 6e bf 12 f0       	push   $0xf012bf6e
f0114a2d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114a33:	50                   	push   %eax
f0114a34:	e8 f5 dd 00 00       	call   f012282e <strcconcat>
f0114a39:	83 c4 10             	add    $0x10,%esp
f0114a3c:	83 ec 0c             	sub    $0xc,%esp
f0114a3f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114a45:	50                   	push   %eax
f0114a46:	e8 91 d4 fe ff       	call   f0101edc <execute_command>
f0114a4b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0114a4e:	83 ec 04             	sub    $0x4,%esp
f0114a51:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114a57:	50                   	push   %eax
f0114a58:	68 73 bf 12 f0       	push   $0xf012bf73
f0114a5d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114a63:	50                   	push   %eax
f0114a64:	e8 c5 dd 00 00       	call   f012282e <strcconcat>
f0114a69:	83 c4 10             	add    $0x10,%esp
f0114a6c:	83 ec 0c             	sub    $0xc,%esp
f0114a6f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114a75:	50                   	push   %eax
f0114a76:	e8 61 d4 fe ff       	call   f0101edc <execute_command>
f0114a7b:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0114a7e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114a84:	bb 79 c2 12 f0       	mov    $0xf012c279,%ebx
f0114a89:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114a8e:	89 c7                	mov    %eax,%edi
f0114a90:	89 de                	mov    %ebx,%esi
f0114a92:	89 d1                	mov    %edx,%ecx
f0114a94:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114a96:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0114a9c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114aa1:	b0 00                	mov    $0x0,%al
f0114aa3:	89 d7                	mov    %edx,%edi
f0114aa5:	f3 aa                	rep stos %al,%es:(%edi)
f0114aa7:	83 ec 0c             	sub    $0xc,%esp
f0114aaa:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114ab0:	50                   	push   %eax
f0114ab1:	e8 26 d4 fe ff       	call   f0101edc <execute_command>
f0114ab6:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0114ab9:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114abf:	bb dd c2 12 f0       	mov    $0xf012c2dd,%ebx
f0114ac4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114ac9:	89 c7                	mov    %eax,%edi
f0114acb:	89 de                	mov    %ebx,%esi
f0114acd:	89 d1                	mov    %edx,%ecx
f0114acf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114ad1:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0114ad7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114adc:	b0 00                	mov    $0x0,%al
f0114ade:	89 d7                	mov    %edx,%edi
f0114ae0:	f3 aa                	rep stos %al,%es:(%edi)
f0114ae2:	83 ec 0c             	sub    $0xc,%esp
f0114ae5:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114aeb:	50                   	push   %eax
f0114aec:	e8 eb d3 fe ff       	call   f0101edc <execute_command>
f0114af1:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0114af4:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114afa:	bb 41 c3 12 f0       	mov    $0xf012c341,%ebx
f0114aff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b04:	89 c7                	mov    %eax,%edi
f0114b06:	89 de                	mov    %ebx,%esi
f0114b08:	89 d1                	mov    %edx,%ecx
f0114b0a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b0c:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0114b12:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114b17:	b0 00                	mov    $0x0,%al
f0114b19:	89 d7                	mov    %edx,%edi
f0114b1b:	f3 aa                	rep stos %al,%es:(%edi)
f0114b1d:	83 ec 0c             	sub    $0xc,%esp
f0114b20:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114b26:	50                   	push   %eax
f0114b27:	e8 b0 d3 fe ff       	call   f0101edc <execute_command>
f0114b2c:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0114b2f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114b35:	bb a5 c3 12 f0       	mov    $0xf012c3a5,%ebx
f0114b3a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b3f:	89 c7                	mov    %eax,%edi
f0114b41:	89 de                	mov    %ebx,%esi
f0114b43:	89 d1                	mov    %edx,%ecx
f0114b45:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b47:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0114b4d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114b52:	b0 00                	mov    $0x0,%al
f0114b54:	89 d7                	mov    %edx,%edi
f0114b56:	f3 aa                	rep stos %al,%es:(%edi)
f0114b58:	83 ec 0c             	sub    $0xc,%esp
f0114b5b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114b61:	50                   	push   %eax
f0114b62:	e8 75 d3 fe ff       	call   f0101edc <execute_command>
f0114b67:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0114b6a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0114b70:	bb 09 c4 12 f0       	mov    $0xf012c409,%ebx
f0114b75:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b7a:	89 c7                	mov    %eax,%edi
f0114b7c:	89 de                	mov    %ebx,%esi
f0114b7e:	89 d1                	mov    %edx,%ecx
f0114b80:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b82:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0114b88:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114b8d:	b0 00                	mov    $0x0,%al
f0114b8f:	89 d7                	mov    %edx,%edi
f0114b91:	f3 aa                	rep stos %al,%es:(%edi)
f0114b93:	83 ec 0c             	sub    $0xc,%esp
f0114b96:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0114b9c:	50                   	push   %eax
f0114b9d:	e8 3a d3 fe ff       	call   f0101edc <execute_command>
f0114ba2:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0114ba5:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0114bab:	bb 6d c4 12 f0       	mov    $0xf012c46d,%ebx
f0114bb0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114bb5:	89 c7                	mov    %eax,%edi
f0114bb7:	89 de                	mov    %ebx,%esi
f0114bb9:	89 d1                	mov    %edx,%ecx
f0114bbb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114bbd:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0114bc3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114bc8:	b0 00                	mov    $0x0,%al
f0114bca:	89 d7                	mov    %edx,%edi
f0114bcc:	f3 aa                	rep stos %al,%es:(%edi)
f0114bce:	83 ec 0c             	sub    $0xc,%esp
f0114bd1:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0114bd7:	50                   	push   %eax
f0114bd8:	e8 ff d2 fe ff       	call   f0101edc <execute_command>
f0114bdd:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0114be0:	83 ec 04             	sub    $0x4,%esp
f0114be3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114be9:	50                   	push   %eax
f0114bea:	68 7b bf 12 f0       	push   $0xf012bf7b
f0114bef:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114bf5:	50                   	push   %eax
f0114bf6:	e8 33 dc 00 00       	call   f012282e <strcconcat>
f0114bfb:	83 c4 10             	add    $0x10,%esp
f0114bfe:	83 ec 0c             	sub    $0xc,%esp
f0114c01:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c07:	50                   	push   %eax
f0114c08:	e8 cf d2 fe ff       	call   f0101edc <execute_command>
f0114c0d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0114c10:	83 ec 04             	sub    $0x4,%esp
f0114c13:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c19:	50                   	push   %eax
f0114c1a:	68 85 bf 12 f0       	push   $0xf012bf85
f0114c1f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114c25:	50                   	push   %eax
f0114c26:	e8 03 dc 00 00       	call   f012282e <strcconcat>
f0114c2b:	83 c4 10             	add    $0x10,%esp
f0114c2e:	83 ec 0c             	sub    $0xc,%esp
f0114c31:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c37:	50                   	push   %eax
f0114c38:	e8 9f d2 fe ff       	call   f0101edc <execute_command>
f0114c3d:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0114c40:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0114c46:	bb d1 c4 12 f0       	mov    $0xf012c4d1,%ebx
f0114c4b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c50:	89 c7                	mov    %eax,%edi
f0114c52:	89 de                	mov    %ebx,%esi
f0114c54:	89 d1                	mov    %edx,%ecx
f0114c56:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c58:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0114c5e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114c63:	b0 00                	mov    $0x0,%al
f0114c65:	89 d7                	mov    %edx,%edi
f0114c67:	f3 aa                	rep stos %al,%es:(%edi)
f0114c69:	83 ec 0c             	sub    $0xc,%esp
f0114c6c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0114c72:	50                   	push   %eax
f0114c73:	e8 64 d2 fe ff       	call   f0101edc <execute_command>
f0114c78:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0114c7b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114c81:	bb 35 c5 12 f0       	mov    $0xf012c535,%ebx
f0114c86:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c8b:	89 c7                	mov    %eax,%edi
f0114c8d:	89 de                	mov    %ebx,%esi
f0114c8f:	89 d1                	mov    %edx,%ecx
f0114c91:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c93:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0114c99:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114c9e:	b0 00                	mov    $0x0,%al
f0114ca0:	89 d7                	mov    %edx,%edi
f0114ca2:	f3 aa                	rep stos %al,%es:(%edi)
f0114ca4:	83 ec 0c             	sub    $0xc,%esp
f0114ca7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114cad:	50                   	push   %eax
f0114cae:	e8 29 d2 fe ff       	call   f0101edc <execute_command>
f0114cb3:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0114cb6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114cbc:	bb 99 c5 12 f0       	mov    $0xf012c599,%ebx
f0114cc1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114cc6:	89 c7                	mov    %eax,%edi
f0114cc8:	89 de                	mov    %ebx,%esi
f0114cca:	89 d1                	mov    %edx,%ecx
f0114ccc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114cce:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0114cd4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114cd9:	b0 00                	mov    $0x0,%al
f0114cdb:	89 d7                	mov    %edx,%edi
f0114cdd:	f3 aa                	rep stos %al,%es:(%edi)
f0114cdf:	83 ec 0c             	sub    $0xc,%esp
f0114ce2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114ce8:	50                   	push   %eax
f0114ce9:	e8 ee d1 fe ff       	call   f0101edc <execute_command>
f0114cee:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0114cf1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0114cf8:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0114cff:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0114d06:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0114d0d:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0114d14:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0114d1b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114d22:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0114d29:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0114d30:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0114d37:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0114d3e:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0114d45:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114d48:	8a 00                	mov    (%eax),%al
f0114d4a:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0114d50:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114d53:	8a 00                	mov    (%eax),%al
f0114d55:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0114d5b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114d5e:	8a 00                	mov    (%eax),%al
f0114d60:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d66:	e8 9e 8c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114d6b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0114d6e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d71:	89 d0                	mov    %edx,%eax
f0114d73:	01 c0                	add    %eax,%eax
f0114d75:	01 d0                	add    %edx,%eax
f0114d77:	01 c0                	add    %eax,%eax
f0114d79:	50                   	push   %eax
f0114d7a:	68 00 00 10 00       	push   $0x100000
f0114d7f:	6a 00                	push   $0x0
f0114d81:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114d84:	e8 61 49 ff ff       	call   f01096ea <copy_paste_chunk>
f0114d89:	83 c4 10             	add    $0x10,%esp
f0114d8c:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d8f:	e8 75 8c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114d94:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0114d97:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0114d9e:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0114da2:	75 08                	jne    f0114dac <test_copy_paste_chunk+0x4a2>
f0114da4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114da7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0114daa:	74 2b                	je     f0114dd7 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114dac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114daf:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0114db2:	83 ec 0c             	sub    $0xc,%esp
f0114db5:	50                   	push   %eax
f0114db6:	ff 75 88             	pushl  -0x78(%ebp)
f0114db9:	68 94 bf 12 f0       	push   $0xf012bf94
f0114dbe:	68 06 03 00 00       	push   $0x306
f0114dc3:	68 02 b8 12 f0       	push   $0xf012b802
f0114dc8:	e8 ea b6 fe ff       	call   f01004b7 <_warn>
f0114dcd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114dd0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114dd7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114ddb:	74 04                	je     f0114de1 <test_copy_paste_chunk+0x4d7>
f0114ddd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114de1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0114de8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114deb:	8a 00                	mov    (%eax),%al
f0114ded:	3c 61                	cmp    $0x61,%al
f0114def:	75 75                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114df1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114df4:	8a 00                	mov    (%eax),%al
f0114df6:	3c 78                	cmp    $0x78,%al
f0114df8:	75 6c                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114dfa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dfd:	8a 00                	mov    (%eax),%al
f0114dff:	3c 62                	cmp    $0x62,%al
f0114e01:	75 63                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e03:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114e06:	8a 00                	mov    (%eax),%al
f0114e08:	3c 79                	cmp    $0x79,%al
f0114e0a:	75 5a                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e0c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114e0f:	8a 00                	mov    (%eax),%al
f0114e11:	3c 63                	cmp    $0x63,%al
f0114e13:	75 51                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e15:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114e18:	8a 00                	mov    (%eax),%al
f0114e1a:	3c 7a                	cmp    $0x7a,%al
f0114e1c:	75 48                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0114e1e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114e21:	8a 00                	mov    (%eax),%al
f0114e23:	3c 64                	cmp    $0x64,%al
f0114e25:	75 3f                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e27:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114e2a:	8a 10                	mov    (%eax),%dl
f0114e2c:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0114e32:	38 c2                	cmp    %al,%dl
f0114e34:	75 30                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e36:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114e39:	8a 00                	mov    (%eax),%al
f0114e3b:	3c 65                	cmp    $0x65,%al
f0114e3d:	75 27                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e3f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114e42:	8a 10                	mov    (%eax),%dl
f0114e44:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0114e4a:	38 c2                	cmp    %al,%dl
f0114e4c:	75 18                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e4e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114e51:	8a 00                	mov    (%eax),%al
f0114e53:	3c 66                	cmp    $0x66,%al
f0114e55:	75 0f                	jne    f0114e66 <test_copy_paste_chunk+0x55c>
f0114e57:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114e5a:	8a 10                	mov    (%eax),%dl
f0114e5c:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0114e62:	38 c2                	cmp    %al,%dl
f0114e64:	74 21                	je     f0114e87 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0114e66:	83 ec 04             	sub    $0x4,%esp
f0114e69:	68 f8 bf 12 f0       	push   $0xf012bff8
f0114e6e:	68 0f 03 00 00       	push   $0x30f
f0114e73:	68 02 b8 12 f0       	push   $0xf012b802
f0114e78:	e8 3a b6 fe ff       	call   f01004b7 <_warn>
f0114e7d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114e80:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114e87:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114e8b:	74 04                	je     f0114e91 <test_copy_paste_chunk+0x587>
f0114e8d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114e91:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0114e98:	83 ec 0c             	sub    $0xc,%esp
f0114e9b:	68 32 c0 12 f0       	push   $0xf012c032
f0114ea0:	e8 c7 c0 fe ff       	call   f0100f6c <cprintf>
f0114ea5:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0114ea8:	83 ec 0c             	sub    $0xc,%esp
f0114eab:	68 44 c0 12 f0       	push   $0xf012c044
f0114eb0:	e8 b7 c0 fe ff       	call   f0100f6c <cprintf>
f0114eb5:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0114eb8:	83 ec 04             	sub    $0x4,%esp
f0114ebb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114ec1:	50                   	push   %eax
f0114ec2:	68 7a c0 12 f0       	push   $0xf012c07a
f0114ec7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114ecd:	50                   	push   %eax
f0114ece:	e8 5b d9 00 00       	call   f012282e <strcconcat>
f0114ed3:	83 c4 10             	add    $0x10,%esp
f0114ed6:	83 ec 0c             	sub    $0xc,%esp
f0114ed9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114edf:	50                   	push   %eax
f0114ee0:	e8 f7 cf fe ff       	call   f0101edc <execute_command>
f0114ee5:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0114ee8:	83 ec 04             	sub    $0x4,%esp
f0114eeb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114ef1:	50                   	push   %eax
f0114ef2:	68 84 c0 12 f0       	push   $0xf012c084
f0114ef7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114efd:	50                   	push   %eax
f0114efe:	e8 2b d9 00 00       	call   f012282e <strcconcat>
f0114f03:	83 c4 10             	add    $0x10,%esp
f0114f06:	83 ec 0c             	sub    $0xc,%esp
f0114f09:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114f0f:	50                   	push   %eax
f0114f10:	e8 c7 cf fe ff       	call   f0101edc <execute_command>
f0114f15:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0114f18:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114f1e:	bb fd c5 12 f0       	mov    $0xf012c5fd,%ebx
f0114f23:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114f28:	89 c7                	mov    %eax,%edi
f0114f2a:	89 de                	mov    %ebx,%esi
f0114f2c:	89 d1                	mov    %edx,%ecx
f0114f2e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114f30:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0114f36:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114f3b:	b0 00                	mov    $0x0,%al
f0114f3d:	89 d7                	mov    %edx,%edi
f0114f3f:	f3 aa                	rep stos %al,%es:(%edi)
f0114f41:	83 ec 0c             	sub    $0xc,%esp
f0114f44:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114f4a:	50                   	push   %eax
f0114f4b:	e8 8c cf fe ff       	call   f0101edc <execute_command>
f0114f50:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0114f53:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114f59:	bb 61 c6 12 f0       	mov    $0xf012c661,%ebx
f0114f5e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114f63:	89 c7                	mov    %eax,%edi
f0114f65:	89 de                	mov    %ebx,%esi
f0114f67:	89 d1                	mov    %edx,%ecx
f0114f69:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114f6b:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0114f71:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114f76:	b0 00                	mov    $0x0,%al
f0114f78:	89 d7                	mov    %edx,%edi
f0114f7a:	f3 aa                	rep stos %al,%es:(%edi)
f0114f7c:	83 ec 0c             	sub    $0xc,%esp
f0114f7f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114f85:	50                   	push   %eax
f0114f86:	e8 51 cf fe ff       	call   f0101edc <execute_command>
f0114f8b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0114f8e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114f94:	bb c5 c6 12 f0       	mov    $0xf012c6c5,%ebx
f0114f99:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114f9e:	89 c7                	mov    %eax,%edi
f0114fa0:	89 de                	mov    %ebx,%esi
f0114fa2:	89 d1                	mov    %edx,%ecx
f0114fa4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114fa6:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0114fac:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114fb1:	b0 00                	mov    $0x0,%al
f0114fb3:	89 d7                	mov    %edx,%edi
f0114fb5:	f3 aa                	rep stos %al,%es:(%edi)
f0114fb7:	83 ec 0c             	sub    $0xc,%esp
f0114fba:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114fc0:	50                   	push   %eax
f0114fc1:	e8 16 cf fe ff       	call   f0101edc <execute_command>
f0114fc6:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0114fc9:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114fcf:	bb 29 c7 12 f0       	mov    $0xf012c729,%ebx
f0114fd4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114fd9:	89 c7                	mov    %eax,%edi
f0114fdb:	89 de                	mov    %ebx,%esi
f0114fdd:	89 d1                	mov    %edx,%ecx
f0114fdf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114fe1:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0114fe7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114fec:	b0 00                	mov    $0x0,%al
f0114fee:	89 d7                	mov    %edx,%edi
f0114ff0:	f3 aa                	rep stos %al,%es:(%edi)
f0114ff2:	83 ec 0c             	sub    $0xc,%esp
f0114ff5:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114ffb:	50                   	push   %eax
f0114ffc:	e8 db ce fe ff       	call   f0101edc <execute_command>
f0115001:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0115004:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011500a:	bb 8d c7 12 f0       	mov    $0xf012c78d,%ebx
f011500f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115014:	89 c7                	mov    %eax,%edi
f0115016:	89 de                	mov    %ebx,%esi
f0115018:	89 d1                	mov    %edx,%ecx
f011501a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011501c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0115022:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115027:	b0 00                	mov    $0x0,%al
f0115029:	89 d7                	mov    %edx,%edi
f011502b:	f3 aa                	rep stos %al,%es:(%edi)
f011502d:	83 ec 0c             	sub    $0xc,%esp
f0115030:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0115036:	50                   	push   %eax
f0115037:	e8 a0 ce fe ff       	call   f0101edc <execute_command>
f011503c:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011503f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0115045:	bb f1 c7 12 f0       	mov    $0xf012c7f1,%ebx
f011504a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011504f:	89 c7                	mov    %eax,%edi
f0115051:	89 de                	mov    %ebx,%esi
f0115053:	89 d1                	mov    %edx,%ecx
f0115055:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115057:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011505d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115062:	b0 00                	mov    $0x0,%al
f0115064:	89 d7                	mov    %edx,%edi
f0115066:	f3 aa                	rep stos %al,%es:(%edi)
f0115068:	83 ec 0c             	sub    $0xc,%esp
f011506b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0115071:	50                   	push   %eax
f0115072:	e8 65 ce fe ff       	call   f0101edc <execute_command>
f0115077:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011507a:	83 ec 04             	sub    $0x4,%esp
f011507d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115083:	50                   	push   %eax
f0115084:	68 8e c0 12 f0       	push   $0xf012c08e
f0115089:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011508f:	50                   	push   %eax
f0115090:	e8 99 d7 00 00       	call   f012282e <strcconcat>
f0115095:	83 c4 10             	add    $0x10,%esp
f0115098:	83 ec 0c             	sub    $0xc,%esp
f011509b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01150a1:	50                   	push   %eax
f01150a2:	e8 35 ce fe ff       	call   f0101edc <execute_command>
f01150a7:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01150aa:	83 ec 04             	sub    $0x4,%esp
f01150ad:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01150b3:	50                   	push   %eax
f01150b4:	68 98 c0 12 f0       	push   $0xf012c098
f01150b9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01150bf:	50                   	push   %eax
f01150c0:	e8 69 d7 00 00       	call   f012282e <strcconcat>
f01150c5:	83 c4 10             	add    $0x10,%esp
f01150c8:	83 ec 0c             	sub    $0xc,%esp
f01150cb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01150d1:	50                   	push   %eax
f01150d2:	e8 05 ce fe ff       	call   f0101edc <execute_command>
f01150d7:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01150da:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01150e0:	bb 55 c8 12 f0       	mov    $0xf012c855,%ebx
f01150e5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01150ea:	89 c7                	mov    %eax,%edi
f01150ec:	89 de                	mov    %ebx,%esi
f01150ee:	89 d1                	mov    %edx,%ecx
f01150f0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150f2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01150f8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01150fd:	b0 00                	mov    $0x0,%al
f01150ff:	89 d7                	mov    %edx,%edi
f0115101:	f3 aa                	rep stos %al,%es:(%edi)
f0115103:	83 ec 0c             	sub    $0xc,%esp
f0115106:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011510c:	50                   	push   %eax
f011510d:	e8 ca cd fe ff       	call   f0101edc <execute_command>
f0115112:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0115115:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011511b:	bb b9 c8 12 f0       	mov    $0xf012c8b9,%ebx
f0115120:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115125:	89 c7                	mov    %eax,%edi
f0115127:	89 de                	mov    %ebx,%esi
f0115129:	89 d1                	mov    %edx,%ecx
f011512b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011512d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0115133:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115138:	b0 00                	mov    $0x0,%al
f011513a:	89 d7                	mov    %edx,%edi
f011513c:	f3 aa                	rep stos %al,%es:(%edi)
f011513e:	83 ec 0c             	sub    $0xc,%esp
f0115141:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115147:	50                   	push   %eax
f0115148:	e8 8f cd fe ff       	call   f0101edc <execute_command>
f011514d:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0115150:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0115156:	bb 1d c9 12 f0       	mov    $0xf012c91d,%ebx
f011515b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115160:	89 c7                	mov    %eax,%edi
f0115162:	89 de                	mov    %ebx,%esi
f0115164:	89 d1                	mov    %edx,%ecx
f0115166:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115168:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011516e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115173:	b0 00                	mov    $0x0,%al
f0115175:	89 d7                	mov    %edx,%edi
f0115177:	f3 aa                	rep stos %al,%es:(%edi)
f0115179:	83 ec 0c             	sub    $0xc,%esp
f011517c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0115182:	50                   	push   %eax
f0115183:	e8 54 cd fe ff       	call   f0101edc <execute_command>
f0115188:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011518b:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0115192:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0115199:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01151a0:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01151a7:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01151ae:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01151b5:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01151bc:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01151c3:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01151ca:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01151d1:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01151d8:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01151df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01151e2:	8a 00                	mov    (%eax),%al
f01151e4:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01151ea:	e8 1a 88 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01151ef:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01151f2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01151f5:	89 d0                	mov    %edx,%eax
f01151f7:	01 c0                	add    %eax,%eax
f01151f9:	01 d0                	add    %edx,%eax
f01151fb:	01 c0                	add    %eax,%eax
f01151fd:	50                   	push   %eax
f01151fe:	68 00 00 40 00       	push   $0x400000
f0115203:	68 00 00 20 00       	push   $0x200000
f0115208:	ff 75 d4             	pushl  -0x2c(%ebp)
f011520b:	e8 da 44 ff ff       	call   f01096ea <copy_paste_chunk>
f0115210:	83 c4 10             	add    $0x10,%esp
f0115213:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115216:	e8 ee 87 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011521b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011521e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0115225:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0115229:	75 08                	jne    f0115233 <test_copy_paste_chunk+0x929>
f011522b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011522e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0115231:	74 2b                	je     f011525e <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115233:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115236:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115239:	83 ec 0c             	sub    $0xc,%esp
f011523c:	50                   	push   %eax
f011523d:	ff 75 80             	pushl  -0x80(%ebp)
f0115240:	68 a4 c0 12 f0       	push   $0xf012c0a4
f0115245:	68 3f 03 00 00       	push   $0x33f
f011524a:	68 02 b8 12 f0       	push   $0xf012b802
f011524f:	e8 63 b2 fe ff       	call   f01004b7 <_warn>
f0115254:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115257:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011525e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115262:	74 04                	je     f0115268 <test_copy_paste_chunk+0x95e>
f0115264:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115268:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011526f:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0115276:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0115279:	83 ec 08             	sub    $0x8,%esp
f011527c:	6a 01                	push   $0x1
f011527e:	6a 07                	push   $0x7
f0115280:	6a 07                	push   $0x7
f0115282:	6a 07                	push   $0x7
f0115284:	6a 07                	push   $0x7
f0115286:	6a 01                	push   $0x1
f0115288:	68 00 20 00 00       	push   $0x2000
f011528d:	68 00 00 40 00       	push   $0x400000
f0115292:	68 00 00 20 00       	push   $0x200000
f0115297:	ff 75 d4             	pushl  -0x2c(%ebp)
f011529a:	e8 0a 36 00 00       	call   f01188a9 <CCP>
f011529f:	83 c4 30             	add    $0x30,%esp
f01152a2:	83 f8 01             	cmp    $0x1,%eax
f01152a5:	74 2b                	je     f01152d2 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01152a7:	83 ec 04             	sub    $0x4,%esp
f01152aa:	68 f8 c0 12 f0       	push   $0xf012c0f8
f01152af:	68 48 03 00 00       	push   $0x348
f01152b4:	68 02 b8 12 f0       	push   $0xf012b802
f01152b9:	e8 f9 b1 fe ff       	call   f01004b7 <_warn>
f01152be:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01152c1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01152c8:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01152cf:	00 00 00 
		}
		if (correct) eval += 5 ;
f01152d2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01152d6:	74 04                	je     f01152dc <test_copy_paste_chunk+0x9d2>
f01152d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152dc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01152e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01152e6:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01152e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01152ec:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01152ef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01152f2:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01152f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01152f8:	8a 00                	mov    (%eax),%al
f01152fa:	3c 61                	cmp    $0x61,%al
f01152fc:	75 69                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f01152fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115301:	8a 00                	mov    (%eax),%al
f0115303:	3c 61                	cmp    $0x61,%al
f0115305:	75 60                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115307:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011530a:	8a 00                	mov    (%eax),%al
f011530c:	3c 79                	cmp    $0x79,%al
f011530e:	75 57                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115310:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115313:	8a 00                	mov    (%eax),%al
f0115315:	3c 62                	cmp    $0x62,%al
f0115317:	75 4e                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115319:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011531c:	8a 00                	mov    (%eax),%al
f011531e:	3c 63                	cmp    $0x63,%al
f0115320:	75 45                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115322:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115325:	8a 00                	mov    (%eax),%al
f0115327:	3c 7a                	cmp    $0x7a,%al
f0115329:	75 3c                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011532b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011532e:	8a 00                	mov    (%eax),%al
f0115330:	3c 77                	cmp    $0x77,%al
f0115332:	75 33                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115334:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115337:	8a 00                	mov    (%eax),%al
f0115339:	3c 64                	cmp    $0x64,%al
f011533b:	75 2a                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f011533d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115340:	8a 00                	mov    (%eax),%al
f0115342:	3c 65                	cmp    $0x65,%al
f0115344:	75 21                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115346:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115349:	8a 00                	mov    (%eax),%al
f011534b:	3c 65                	cmp    $0x65,%al
f011534d:	75 18                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f011534f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0115352:	8a 00                	mov    (%eax),%al
f0115354:	3c 66                	cmp    $0x66,%al
f0115356:	75 0f                	jne    f0115367 <test_copy_paste_chunk+0xa5d>
f0115358:	8b 45 90             	mov    -0x70(%ebp),%eax
f011535b:	8a 10                	mov    (%eax),%dl
f011535d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0115363:	38 c2                	cmp    %al,%dl
f0115365:	74 21                	je     f0115388 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0115367:	83 ec 04             	sub    $0x4,%esp
f011536a:	68 f8 bf 12 f0       	push   $0xf012bff8
f011536f:	68 56 03 00 00       	push   $0x356
f0115374:	68 02 b8 12 f0       	push   $0xf012b802
f0115379:	e8 39 b1 fe ff       	call   f01004b7 <_warn>
f011537e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115381:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0115388:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011538c:	74 04                	je     f0115392 <test_copy_paste_chunk+0xa88>
f011538e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115392:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0115399:	8b 45 98             	mov    -0x68(%ebp),%eax
f011539c:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011539f:	e8 65 86 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01153a4:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01153a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01153aa:	89 c2                	mov    %eax,%edx
f01153ac:	01 d2                	add    %edx,%edx
f01153ae:	01 d0                	add    %edx,%eax
f01153b0:	50                   	push   %eax
f01153b1:	68 00 08 20 00       	push   $0x200800
f01153b6:	68 00 08 40 00       	push   $0x400800
f01153bb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01153be:	e8 27 43 ff ff       	call   f01096ea <copy_paste_chunk>
f01153c3:	83 c4 10             	add    $0x10,%esp
f01153c6:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01153c9:	e8 3b 86 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01153ce:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01153d1:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01153d5:	75 08                	jne    f01153df <test_copy_paste_chunk+0xad5>
f01153d7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01153da:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01153dd:	74 2b                	je     f011540a <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01153df:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01153e2:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01153e5:	83 ec 0c             	sub    $0xc,%esp
f01153e8:	50                   	push   %eax
f01153e9:	ff 75 80             	pushl  -0x80(%ebp)
f01153ec:	68 a4 c0 12 f0       	push   $0xf012c0a4
f01153f1:	68 66 03 00 00       	push   $0x366
f01153f6:	68 02 b8 12 f0       	push   $0xf012b802
f01153fb:	e8 b7 b0 fe ff       	call   f01004b7 <_warn>
f0115400:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115403:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011540a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011540e:	74 04                	je     f0115414 <test_copy_paste_chunk+0xb0a>
f0115410:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115414:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011541b:	83 ec 08             	sub    $0x8,%esp
f011541e:	6a 01                	push   $0x1
f0115420:	6a 07                	push   $0x7
f0115422:	6a 07                	push   $0x7
f0115424:	6a 07                	push   $0x7
f0115426:	6a 07                	push   $0x7
f0115428:	6a 01                	push   $0x1
f011542a:	68 00 20 00 00       	push   $0x2000
f011542f:	68 00 00 20 00       	push   $0x200000
f0115434:	68 00 00 40 00       	push   $0x400000
f0115439:	ff 75 d4             	pushl  -0x2c(%ebp)
f011543c:	e8 68 34 00 00       	call   f01188a9 <CCP>
f0115441:	83 c4 30             	add    $0x30,%esp
f0115444:	83 f8 01             	cmp    $0x1,%eax
f0115447:	74 21                	je     f011546a <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115449:	83 ec 04             	sub    $0x4,%esp
f011544c:	68 44 c1 12 f0       	push   $0xf012c144
f0115451:	68 6e 03 00 00       	push   $0x36e
f0115456:	68 02 b8 12 f0       	push   $0xf012b802
f011545b:	e8 57 b0 fe ff       	call   f01004b7 <_warn>
f0115460:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115463:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011546a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011546e:	74 04                	je     f0115474 <test_copy_paste_chunk+0xb6a>
f0115470:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115474:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011547b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011547e:	8a 00                	mov    (%eax),%al
f0115480:	3c 61                	cmp    $0x61,%al
f0115482:	75 69                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f0115484:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115487:	8a 00                	mov    (%eax),%al
f0115489:	3c 61                	cmp    $0x61,%al
f011548b:	75 60                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f011548d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115490:	8a 00                	mov    (%eax),%al
f0115492:	3c 79                	cmp    $0x79,%al
f0115494:	75 57                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f0115496:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115499:	8a 00                	mov    (%eax),%al
f011549b:	3c 62                	cmp    $0x62,%al
f011549d:	75 4e                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f011549f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01154a2:	8a 00                	mov    (%eax),%al
f01154a4:	3c 7a                	cmp    $0x7a,%al
f01154a6:	75 45                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f01154a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154ab:	8a 00                	mov    (%eax),%al
f01154ad:	3c 7a                	cmp    $0x7a,%al
f01154af:	75 3c                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01154b1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01154b4:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01154b6:	3c 64                	cmp    $0x64,%al
f01154b8:	75 33                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01154ba:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01154bd:	8a 00                	mov    (%eax),%al
f01154bf:	3c 64                	cmp    $0x64,%al
f01154c1:	75 2a                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f01154c3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01154c6:	8a 00                	mov    (%eax),%al
f01154c8:	3c 65                	cmp    $0x65,%al
f01154ca:	75 21                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f01154cc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01154cf:	8a 00                	mov    (%eax),%al
f01154d1:	3c 78                	cmp    $0x78,%al
f01154d3:	75 18                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f01154d5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01154d8:	8a 00                	mov    (%eax),%al
f01154da:	3c 66                	cmp    $0x66,%al
f01154dc:	75 0f                	jne    f01154ed <test_copy_paste_chunk+0xbe3>
f01154de:	8b 45 90             	mov    -0x70(%ebp),%eax
f01154e1:	8a 10                	mov    (%eax),%dl
f01154e3:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01154e9:	38 c2                	cmp    %al,%dl
f01154eb:	74 21                	je     f011550e <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01154ed:	83 ec 04             	sub    $0x4,%esp
f01154f0:	68 f8 bf 12 f0       	push   $0xf012bff8
f01154f5:	68 77 03 00 00       	push   $0x377
f01154fa:	68 02 b8 12 f0       	push   $0xf012b802
f01154ff:	e8 b3 af fe ff       	call   f01004b7 <_warn>
f0115504:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115507:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011550e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115512:	74 04                	je     f0115518 <test_copy_paste_chunk+0xc0e>
f0115514:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115518:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011551f:	83 ec 0c             	sub    $0xc,%esp
f0115522:	68 8f c1 12 f0       	push   $0xf012c18f
f0115527:	e8 40 ba fe ff       	call   f0100f6c <cprintf>
f011552c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011552f:	83 ec 0c             	sub    $0xc,%esp
f0115532:	68 a0 c1 12 f0       	push   $0xf012c1a0
f0115537:	e8 30 ba fe ff       	call   f0100f6c <cprintf>
f011553c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011553f:	83 ec 04             	sub    $0x4,%esp
f0115542:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115548:	50                   	push   %eax
f0115549:	68 d4 c1 12 f0       	push   $0xf012c1d4
f011554e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0115554:	50                   	push   %eax
f0115555:	e8 d4 d2 00 00       	call   f012282e <strcconcat>
f011555a:	83 c4 10             	add    $0x10,%esp
f011555d:	83 ec 0c             	sub    $0xc,%esp
f0115560:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115566:	50                   	push   %eax
f0115567:	e8 70 c9 fe ff       	call   f0101edc <execute_command>
f011556c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f011556f:	83 ec 04             	sub    $0x4,%esp
f0115572:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115578:	50                   	push   %eax
f0115579:	68 de c1 12 f0       	push   $0xf012c1de
f011557e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0115584:	50                   	push   %eax
f0115585:	e8 a4 d2 00 00       	call   f012282e <strcconcat>
f011558a:	83 c4 10             	add    $0x10,%esp
f011558d:	83 ec 0c             	sub    $0xc,%esp
f0115590:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115596:	50                   	push   %eax
f0115597:	e8 40 c9 fe ff       	call   f0101edc <execute_command>
f011559c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f011559f:	83 ec 04             	sub    $0x4,%esp
f01155a2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01155a8:	50                   	push   %eax
f01155a9:	68 e8 c1 12 f0       	push   $0xf012c1e8
f01155ae:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01155b4:	50                   	push   %eax
f01155b5:	e8 74 d2 00 00       	call   f012282e <strcconcat>
f01155ba:	83 c4 10             	add    $0x10,%esp
f01155bd:	83 ec 0c             	sub    $0xc,%esp
f01155c0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01155c6:	50                   	push   %eax
f01155c7:	e8 10 c9 fe ff       	call   f0101edc <execute_command>
f01155cc:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01155cf:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01155d5:	bb 81 c9 12 f0       	mov    $0xf012c981,%ebx
f01155da:	ba 0f 00 00 00       	mov    $0xf,%edx
f01155df:	89 c7                	mov    %eax,%edi
f01155e1:	89 de                	mov    %ebx,%esi
f01155e3:	89 d1                	mov    %edx,%ecx
f01155e5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01155e7:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01155ed:	b9 55 00 00 00       	mov    $0x55,%ecx
f01155f2:	b0 00                	mov    $0x0,%al
f01155f4:	89 d7                	mov    %edx,%edi
f01155f6:	f3 aa                	rep stos %al,%es:(%edi)
f01155f8:	83 ec 0c             	sub    $0xc,%esp
f01155fb:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0115601:	50                   	push   %eax
f0115602:	e8 d5 c8 fe ff       	call   f0101edc <execute_command>
f0115607:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011560a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115610:	bb e5 c9 12 f0       	mov    $0xf012c9e5,%ebx
f0115615:	ba 0f 00 00 00       	mov    $0xf,%edx
f011561a:	89 c7                	mov    %eax,%edi
f011561c:	89 de                	mov    %ebx,%esi
f011561e:	89 d1                	mov    %edx,%ecx
f0115620:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115622:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0115628:	b9 55 00 00 00       	mov    $0x55,%ecx
f011562d:	b0 00                	mov    $0x0,%al
f011562f:	89 d7                	mov    %edx,%edi
f0115631:	f3 aa                	rep stos %al,%es:(%edi)
f0115633:	83 ec 0c             	sub    $0xc,%esp
f0115636:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011563c:	50                   	push   %eax
f011563d:	e8 9a c8 fe ff       	call   f0101edc <execute_command>
f0115642:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0115645:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011564b:	bb 49 ca 12 f0       	mov    $0xf012ca49,%ebx
f0115650:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115655:	89 c7                	mov    %eax,%edi
f0115657:	89 de                	mov    %ebx,%esi
f0115659:	89 d1                	mov    %edx,%ecx
f011565b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011565d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0115663:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115668:	b0 00                	mov    $0x0,%al
f011566a:	89 d7                	mov    %edx,%edi
f011566c:	f3 aa                	rep stos %al,%es:(%edi)
f011566e:	83 ec 0c             	sub    $0xc,%esp
f0115671:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0115677:	50                   	push   %eax
f0115678:	e8 5f c8 fe ff       	call   f0101edc <execute_command>
f011567d:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115680:	e8 84 83 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115685:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0115688:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011568b:	89 d0                	mov    %edx,%eax
f011568d:	01 c0                	add    %eax,%eax
f011568f:	01 d0                	add    %edx,%eax
f0115691:	c1 e0 02             	shl    $0x2,%eax
f0115694:	50                   	push   %eax
f0115695:	68 00 00 90 00       	push   $0x900000
f011569a:	68 00 00 80 00       	push   $0x800000
f011569f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01156a2:	e8 43 40 ff ff       	call   f01096ea <copy_paste_chunk>
f01156a7:	83 c4 10             	add    $0x10,%esp
f01156aa:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01156b0:	e8 54 83 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01156b5:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01156b8:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01156bf:	75 0b                	jne    f01156cc <test_copy_paste_chunk+0xdc2>
f01156c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01156c4:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01156c7:	83 f8 03             	cmp    $0x3,%eax
f01156ca:	74 2e                	je     f01156fa <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01156cc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01156cf:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01156d2:	83 ec 0c             	sub    $0xc,%esp
f01156d5:	50                   	push   %eax
f01156d6:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01156dc:	68 a4 c0 12 f0       	push   $0xf012c0a4
f01156e1:	68 95 03 00 00       	push   $0x395
f01156e6:	68 02 b8 12 f0       	push   $0xf012b802
f01156eb:	e8 c7 ad fe ff       	call   f01004b7 <_warn>
f01156f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01156fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01156fe:	74 04                	je     f0115704 <test_copy_paste_chunk+0xdfa>
f0115700:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115704:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011570b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0115712:	83 ec 08             	sub    $0x8,%esp
f0115715:	6a 01                	push   $0x1
f0115717:	6a 07                	push   $0x7
f0115719:	6a 07                	push   $0x7
f011571b:	6a 07                	push   $0x7
f011571d:	6a 07                	push   $0x7
f011571f:	6a 01                	push   $0x1
f0115721:	68 00 30 00 00       	push   $0x3000
f0115726:	68 00 00 90 00       	push   $0x900000
f011572b:	68 00 00 80 00       	push   $0x800000
f0115730:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115733:	e8 71 31 00 00       	call   f01188a9 <CCP>
f0115738:	83 c4 30             	add    $0x30,%esp
f011573b:	83 f8 01             	cmp    $0x1,%eax
f011573e:	74 28                	je     f0115768 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115740:	83 ec 04             	sub    $0x4,%esp
f0115743:	68 44 c1 12 f0       	push   $0xf012c144
f0115748:	68 9e 03 00 00       	push   $0x39e
f011574d:	68 02 b8 12 f0       	push   $0xf012b802
f0115752:	e8 60 ad fe ff       	call   f01004b7 <_warn>
f0115757:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011575a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0115761:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0115768:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011576c:	74 04                	je     f0115772 <test_copy_paste_chunk+0xe68>
f011576e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115772:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0115779:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011577d:	0f 84 9e 00 00 00    	je     f0115821 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0115783:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011578a:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0115791:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0115798:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011579f:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01157a6:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01157ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01157b0:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01157b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01157b6:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01157b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01157bc:	8a 00                	mov    (%eax),%al
f01157be:	3c 61                	cmp    $0x61,%al
f01157c0:	75 2d                	jne    f01157ef <test_copy_paste_chunk+0xee5>
f01157c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01157c5:	8a 00                	mov    (%eax),%al
f01157c7:	3c 61                	cmp    $0x61,%al
f01157c9:	75 24                	jne    f01157ef <test_copy_paste_chunk+0xee5>
f01157cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01157ce:	8a 00                	mov    (%eax),%al
f01157d0:	3c 79                	cmp    $0x79,%al
f01157d2:	75 1b                	jne    f01157ef <test_copy_paste_chunk+0xee5>
f01157d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01157d7:	8a 00                	mov    (%eax),%al
f01157d9:	3c 62                	cmp    $0x62,%al
f01157db:	75 12                	jne    f01157ef <test_copy_paste_chunk+0xee5>
f01157dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01157e0:	8a 00                	mov    (%eax),%al
f01157e2:	3c 63                	cmp    $0x63,%al
f01157e4:	75 09                	jne    f01157ef <test_copy_paste_chunk+0xee5>
f01157e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01157e9:	8a 00                	mov    (%eax),%al
f01157eb:	3c 7a                	cmp    $0x7a,%al
f01157ed:	74 21                	je     f0115810 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01157ef:	83 ec 04             	sub    $0x4,%esp
f01157f2:	68 f8 bf 12 f0       	push   $0xf012bff8
f01157f7:	68 b0 03 00 00       	push   $0x3b0
f01157fc:	68 02 b8 12 f0       	push   $0xf012b802
f0115801:	e8 b1 ac fe ff       	call   f01004b7 <_warn>
f0115806:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115809:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0115810:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115814:	74 04                	je     f011581a <test_copy_paste_chunk+0xf10>
f0115816:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011581a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115821:	e8 e3 81 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115826:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0115829:	6a 00                	push   $0x0
f011582b:	6a 02                	push   $0x2
f011582d:	68 00 10 90 00       	push   $0x901000
f0115832:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115835:	e8 b1 2b 00 00       	call   f01183eb <SB>
f011583a:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011583d:	6a 00                	push   $0x0
f011583f:	6a 02                	push   $0x2
f0115841:	68 00 20 90 00       	push   $0x902000
f0115846:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115849:	e8 9d 2b 00 00       	call   f01183eb <SB>
f011584e:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0115851:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115854:	c1 e0 03             	shl    $0x3,%eax
f0115857:	50                   	push   %eax
f0115858:	68 00 f0 bf 00       	push   $0xbff000
f011585d:	68 00 10 90 00       	push   $0x901000
f0115862:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115865:	e8 80 3e ff ff       	call   f01096ea <copy_paste_chunk>
f011586a:	83 c4 10             	add    $0x10,%esp
f011586d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115873:	e8 91 81 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115878:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011587b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0115882:	75 0b                	jne    f011588f <test_copy_paste_chunk+0xf85>
f0115884:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115887:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011588a:	83 f8 03             	cmp    $0x3,%eax
f011588d:	74 2e                	je     f01158bd <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011588f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115892:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115895:	83 ec 0c             	sub    $0xc,%esp
f0115898:	50                   	push   %eax
f0115899:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011589f:	68 a4 c0 12 f0       	push   $0xf012c0a4
f01158a4:	68 c0 03 00 00       	push   $0x3c0
f01158a9:	68 02 b8 12 f0       	push   $0xf012b802
f01158ae:	e8 04 ac fe ff       	call   f01004b7 <_warn>
f01158b3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01158bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01158c1:	74 04                	je     f01158c7 <test_copy_paste_chunk+0xfbd>
f01158c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01158ce:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01158d5:	83 ec 08             	sub    $0x8,%esp
f01158d8:	6a 01                	push   $0x1
f01158da:	6a 07                	push   $0x7
f01158dc:	6a 03                	push   $0x3
f01158de:	6a 07                	push   $0x7
f01158e0:	6a 03                	push   $0x3
f01158e2:	6a 01                	push   $0x1
f01158e4:	68 00 20 00 00       	push   $0x2000
f01158e9:	68 00 f0 bf 00       	push   $0xbff000
f01158ee:	68 00 10 90 00       	push   $0x901000
f01158f3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01158f6:	e8 ae 2f 00 00       	call   f01188a9 <CCP>
f01158fb:	83 c4 30             	add    $0x30,%esp
f01158fe:	83 f8 01             	cmp    $0x1,%eax
f0115901:	74 28                	je     f011592b <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115903:	83 ec 04             	sub    $0x4,%esp
f0115906:	68 44 c1 12 f0       	push   $0xf012c144
f011590b:	68 c9 03 00 00       	push   $0x3c9
f0115910:	68 02 b8 12 f0       	push   $0xf012b802
f0115915:	e8 9d ab fe ff       	call   f01004b7 <_warn>
f011591a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011591d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0115924:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011592b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011592f:	74 04                	je     f0115935 <test_copy_paste_chunk+0x102b>
f0115931:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115935:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011593c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0115940:	74 72                	je     f01159b4 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0115942:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0115949:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0115950:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0115957:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011595e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115961:	8a 00                	mov    (%eax),%al
f0115963:	3c 62                	cmp    $0x62,%al
f0115965:	75 1b                	jne    f0115982 <test_copy_paste_chunk+0x1078>
f0115967:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011596a:	8a 00                	mov    (%eax),%al
f011596c:	3c 62                	cmp    $0x62,%al
f011596e:	75 12                	jne    f0115982 <test_copy_paste_chunk+0x1078>
f0115970:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115973:	8a 00                	mov    (%eax),%al
f0115975:	3c 7a                	cmp    $0x7a,%al
f0115977:	75 09                	jne    f0115982 <test_copy_paste_chunk+0x1078>
f0115979:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011597c:	8a 00                	mov    (%eax),%al
f011597e:	3c 7a                	cmp    $0x7a,%al
f0115980:	74 21                	je     f01159a3 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0115982:	83 ec 04             	sub    $0x4,%esp
f0115985:	68 f8 bf 12 f0       	push   $0xf012bff8
f011598a:	68 d5 03 00 00       	push   $0x3d5
f011598f:	68 02 b8 12 f0       	push   $0xf012b802
f0115994:	e8 1e ab fe ff       	call   f01004b7 <_warn>
f0115999:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011599c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01159a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01159a7:	74 04                	je     f01159ad <test_copy_paste_chunk+0x10a3>
f01159a9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01159ad:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01159b4:	83 ec 0c             	sub    $0xc,%esp
f01159b7:	68 f2 c1 12 f0       	push   $0xf012c1f2
f01159bc:	e8 ab b5 fe ff       	call   f0100f6c <cprintf>
f01159c1:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01159c4:	83 ec 08             	sub    $0x8,%esp
f01159c7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01159ca:	68 04 c2 12 f0       	push   $0xf012c204
f01159cf:	e8 98 b5 fe ff       	call   f0100f6c <cprintf>
f01159d4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01159d7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01159db:	75 10                	jne    f01159ed <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01159dd:	83 ec 0c             	sub    $0xc,%esp
f01159e0:	68 38 c2 12 f0       	push   $0xf012c238
f01159e5:	e8 82 b5 fe ff       	call   f0100f6c <cprintf>
f01159ea:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01159ed:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f01159f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01159f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01159f8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01159fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115a00:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115a03:	5b                   	pop    %ebx
f0115a04:	5e                   	pop    %esi
f0115a05:	5f                   	pop    %edi
f0115a06:	5d                   	pop    %ebp
f0115a07:	c3                   	ret    

f0115a08 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0115a08:	55                   	push   %ebp
f0115a09:	89 e5                	mov    %esp,%ebp
f0115a0b:	57                   	push   %edi
f0115a0c:	56                   	push   %esi
f0115a0d:	53                   	push   %ebx
f0115a0e:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115a14:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0115a1a:	bb 04 bf 12 f0       	mov    $0xf012bf04,%ebx
f0115a1f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115a24:	89 c7                	mov    %eax,%edi
f0115a26:	89 de                	mov    %ebx,%esi
f0115a28:	89 d1                	mov    %edx,%ecx
f0115a2a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115a2c:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0115a32:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115a37:	b0 00                	mov    $0x0,%al
f0115a39:	89 d7                	mov    %edx,%edi
f0115a3b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115a3d:	6a 00                	push   $0x0
f0115a3f:	6a 0a                	push   $0xa
f0115a41:	6a 14                	push   $0x14
f0115a43:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0115a49:	50                   	push   %eax
f0115a4a:	e8 21 40 ff ff       	call   f0109a70 <env_create>
f0115a4f:	83 c4 10             	add    $0x10,%esp
f0115a52:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115a55:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a58:	8b 40 64             	mov    0x64(%eax),%eax
f0115a5b:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0115a5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a61:	8b 40 68             	mov    0x68(%eax),%eax
f0115a64:	89 45 80             	mov    %eax,-0x80(%ebp)
f0115a67:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115a6a:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0115a6d:	83 ec 0c             	sub    $0xc,%esp
f0115a70:	ff 75 cc             	pushl  -0x34(%ebp)
f0115a73:	e8 fd 2d 00 00       	call   f0118875 <ClearUserSpace>
f0115a78:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115a7b:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0115a82:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0115a89:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0115a90:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0115a94:	83 ec 0c             	sub    $0xc,%esp
f0115a97:	68 b0 ca 12 f0       	push   $0xf012cab0
f0115a9c:	e8 cb b4 fe ff       	call   f0100f6c <cprintf>
f0115aa1:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0115aa4:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0115aab:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0115ab2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115ab5:	8a 00                	mov    (%eax),%al
f0115ab7:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0115abd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ac0:	8a 00                	mov    (%eax),%al
f0115ac2:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115ac8:	e8 3c 7f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115acd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0115ad0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115ad3:	89 d0                	mov    %edx,%eax
f0115ad5:	01 c0                	add    %eax,%eax
f0115ad7:	01 d0                	add    %edx,%eax
f0115ad9:	01 c0                	add    %eax,%eax
f0115adb:	83 ec 0c             	sub    $0xc,%esp
f0115ade:	6a 02                	push   $0x2
f0115ae0:	50                   	push   %eax
f0115ae1:	68 00 40 10 f0       	push   $0xf0104000
f0115ae6:	68 00 00 10 f0       	push   $0xf0100000
f0115aeb:	ff 75 cc             	pushl  -0x34(%ebp)
f0115aee:	e8 11 3c ff ff       	call   f0109704 <share_chunk>
f0115af3:	83 c4 20             	add    $0x20,%esp
f0115af6:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115af9:	e8 0b 7f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115afe:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0115b01:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0115b05:	75 08                	jne    f0115b0f <test_share_chunk+0x107>
f0115b07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115b0a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0115b0d:	74 28                	je     f0115b37 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0115b0f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115b12:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115b15:	83 ec 0c             	sub    $0xc,%esp
f0115b18:	50                   	push   %eax
f0115b19:	ff 75 b0             	pushl  -0x50(%ebp)
f0115b1c:	68 dc ca 12 f0       	push   $0xf012cadc
f0115b21:	68 11 04 00 00       	push   $0x411
f0115b26:	68 02 b8 12 f0       	push   $0xf012b802
f0115b2b:	e8 87 a9 fe ff       	call   f01004b7 <_warn>
f0115b30:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b37:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b3b:	74 04                	je     f0115b41 <test_share_chunk+0x139>
f0115b3d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b41:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0115b45:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115b48:	c1 e0 03             	shl    $0x3,%eax
f0115b4b:	83 ec 08             	sub    $0x8,%esp
f0115b4e:	68 fd 00 00 00       	push   $0xfd
f0115b53:	6a 07                	push   $0x7
f0115b55:	6a 03                	push   $0x3
f0115b57:	6a 07                	push   $0x7
f0115b59:	6a 03                	push   $0x3
f0115b5b:	6a 01                	push   $0x1
f0115b5d:	50                   	push   %eax
f0115b5e:	68 00 40 10 f0       	push   $0xf0104000
f0115b63:	68 00 00 10 f0       	push   $0xf0100000
f0115b68:	ff 75 cc             	pushl  -0x34(%ebp)
f0115b6b:	e8 39 2d 00 00       	call   f01188a9 <CCP>
f0115b70:	83 c4 30             	add    $0x30,%esp
f0115b73:	85 c0                	test   %eax,%eax
f0115b75:	75 1e                	jne    f0115b95 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115b77:	83 ec 04             	sub    $0x4,%esp
f0115b7a:	68 38 cb 12 f0       	push   $0xf012cb38
f0115b7f:	68 19 04 00 00       	push   $0x419
f0115b84:	68 02 b8 12 f0       	push   $0xf012b802
f0115b89:	e8 29 a9 fe ff       	call   f01004b7 <_warn>
f0115b8e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115b91:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b95:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b99:	74 04                	je     f0115b9f <test_share_chunk+0x197>
f0115b9b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0115b9f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115ba2:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0115ba5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ba8:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0115bab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115bae:	8a 00                	mov    (%eax),%al
f0115bb0:	3c 41                	cmp    $0x41,%al
f0115bb2:	75 09                	jne    f0115bbd <test_share_chunk+0x1b5>
f0115bb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115bb7:	8a 00                	mov    (%eax),%al
f0115bb9:	3c 42                	cmp    $0x42,%al
f0115bbb:	74 1e                	je     f0115bdb <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115bbd:	83 ec 04             	sub    $0x4,%esp
f0115bc0:	68 80 cb 12 f0       	push   $0xf012cb80
f0115bc5:	68 23 04 00 00       	push   $0x423
f0115bca:	68 02 b8 12 f0       	push   $0xf012b802
f0115bcf:	e8 e3 a8 fe ff       	call   f01004b7 <_warn>
f0115bd4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115bd7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115bdb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bdf:	74 04                	je     f0115be5 <test_share_chunk+0x1dd>
f0115be1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115be5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0115be9:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0115bef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115bf2:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0115bf4:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0115bfa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115bfd:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0115bff:	83 ec 0c             	sub    $0xc,%esp
f0115c02:	68 b5 cb 12 f0       	push   $0xf012cbb5
f0115c07:	e8 60 b3 fe ff       	call   f0100f6c <cprintf>
f0115c0c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0115c0f:	83 ec 0c             	sub    $0xc,%esp
f0115c12:	68 c4 cb 12 f0       	push   $0xf012cbc4
f0115c17:	e8 50 b3 fe ff       	call   f0100f6c <cprintf>
f0115c1c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115c1f:	e8 e5 7d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115c24:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0115c27:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115c2a:	c1 e0 05             	shl    $0x5,%eax
f0115c2d:	83 ec 0c             	sub    $0xc,%esp
f0115c30:	68 02 0e 00 00       	push   $0xe02
f0115c35:	50                   	push   %eax
f0115c36:	68 00 00 00 40       	push   $0x40000000
f0115c3b:	68 00 00 00 f0       	push   $0xf0000000
f0115c40:	ff 75 cc             	pushl  -0x34(%ebp)
f0115c43:	e8 bc 3a ff ff       	call   f0109704 <share_chunk>
f0115c48:	83 c4 20             	add    $0x20,%esp
f0115c4b:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115c4e:	e8 b6 7d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115c53:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0115c56:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0115c5a:	75 1f                	jne    f0115c7b <test_share_chunk+0x273>
f0115c5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115c5f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115c62:	89 c1                	mov    %eax,%ecx
f0115c64:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115c67:	c1 e0 05             	shl    $0x5,%eax
f0115c6a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115c6d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115c74:	99                   	cltd   
f0115c75:	f7 fb                	idiv   %ebx
f0115c77:	39 c1                	cmp    %eax,%ecx
f0115c79:	74 28                	je     f0115ca3 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115c7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115c7e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115c81:	83 ec 0c             	sub    $0xc,%esp
f0115c84:	50                   	push   %eax
f0115c85:	ff 75 a8             	pushl  -0x58(%ebp)
f0115c88:	68 00 cc 12 f0       	push   $0xf012cc00
f0115c8d:	68 3b 04 00 00       	push   $0x43b
f0115c92:	68 02 b8 12 f0       	push   $0xf012b802
f0115c97:	e8 1b a8 fe ff       	call   f01004b7 <_warn>
f0115c9c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c9f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ca3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ca7:	74 04                	je     f0115cad <test_share_chunk+0x2a5>
f0115ca9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0115cb1:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115cb8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115cbb:	c1 e0 05             	shl    $0x5,%eax
f0115cbe:	83 ec 08             	sub    $0x8,%esp
f0115cc1:	6a 02                	push   $0x2
f0115cc3:	6a 07                	push   $0x7
f0115cc5:	6a 03                	push   $0x3
f0115cc7:	68 07 0e 00 00       	push   $0xe07
f0115ccc:	68 03 0e 00 00       	push   $0xe03
f0115cd1:	6a ff                	push   $0xffffffff
f0115cd3:	50                   	push   %eax
f0115cd4:	68 00 00 00 40       	push   $0x40000000
f0115cd9:	68 00 00 00 f0       	push   $0xf0000000
f0115cde:	ff 75 cc             	pushl  -0x34(%ebp)
f0115ce1:	e8 c3 2b 00 00       	call   f01188a9 <CCP>
f0115ce6:	83 c4 30             	add    $0x30,%esp
f0115ce9:	85 c0                	test   %eax,%eax
f0115ceb:	75 25                	jne    f0115d12 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115ced:	83 ec 04             	sub    $0x4,%esp
f0115cf0:	68 38 cb 12 f0       	push   $0xf012cb38
f0115cf5:	68 44 04 00 00       	push   $0x444
f0115cfa:	68 02 b8 12 f0       	push   $0xf012b802
f0115cff:	e8 b3 a7 fe ff       	call   f01004b7 <_warn>
f0115d04:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115d07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115d0b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115d12:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115d15:	89 d0                	mov    %edx,%eax
f0115d17:	01 c0                	add    %eax,%eax
f0115d19:	01 d0                	add    %edx,%eax
f0115d1b:	c1 e0 02             	shl    $0x2,%eax
f0115d1e:	83 ec 08             	sub    $0x8,%esp
f0115d21:	6a 02                	push   $0x2
f0115d23:	6a 07                	push   $0x7
f0115d25:	6a 03                	push   $0x3
f0115d27:	68 07 0e 00 00       	push   $0xe07
f0115d2c:	68 03 0e 00 00       	push   $0xe03
f0115d31:	6a 02                	push   $0x2
f0115d33:	50                   	push   %eax
f0115d34:	68 00 00 00 40       	push   $0x40000000
f0115d39:	68 00 00 00 f0       	push   $0xf0000000
f0115d3e:	ff 75 cc             	pushl  -0x34(%ebp)
f0115d41:	e8 63 2b 00 00       	call   f01188a9 <CCP>
f0115d46:	83 c4 30             	add    $0x30,%esp
f0115d49:	85 c0                	test   %eax,%eax
f0115d4b:	75 1e                	jne    f0115d6b <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115d4d:	83 ec 04             	sub    $0x4,%esp
f0115d50:	68 38 cb 12 f0       	push   $0xf012cb38
f0115d55:	68 4b 04 00 00       	push   $0x44b
f0115d5a:	68 02 b8 12 f0       	push   $0xf012b802
f0115d5f:	e8 53 a7 fe ff       	call   f01004b7 <_warn>
f0115d64:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115d67:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d6b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d6f:	74 04                	je     f0115d75 <test_share_chunk+0x36d>
f0115d71:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d75:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0115d79:	b8 a8 b9 57 f0       	mov    $0xf057b9a8,%eax
f0115d7e:	05 00 00 00 10       	add    $0x10000000,%eax
f0115d83:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115d86:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d89:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0115d8e:	83 ec 08             	sub    $0x8,%esp
f0115d91:	6a 02                	push   $0x2
f0115d93:	6a 07                	push   $0x7
f0115d95:	6a 03                	push   $0x3
f0115d97:	68 07 0e 00 00       	push   $0xe07
f0115d9c:	68 03 0e 00 00       	push   $0xe03
f0115da1:	6a 02                	push   $0x2
f0115da3:	50                   	push   %eax
f0115da4:	68 00 00 0a 40       	push   $0x400a0000
f0115da9:	68 00 00 0a f0       	push   $0xf00a0000
f0115dae:	ff 75 cc             	pushl  -0x34(%ebp)
f0115db1:	e8 f3 2a 00 00       	call   f01188a9 <CCP>
f0115db6:	83 c4 30             	add    $0x30,%esp
f0115db9:	85 c0                	test   %eax,%eax
f0115dbb:	75 1e                	jne    f0115ddb <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115dbd:	83 ec 04             	sub    $0x4,%esp
f0115dc0:	68 38 cb 12 f0       	push   $0xf012cb38
f0115dc5:	68 55 04 00 00       	push   $0x455
f0115dca:	68 02 b8 12 f0       	push   $0xf012b802
f0115dcf:	e8 e3 a6 fe ff       	call   f01004b7 <_warn>
f0115dd4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115dd7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ddb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ddf:	74 04                	je     f0115de5 <test_share_chunk+0x3dd>
f0115de1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115de5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0115de9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0115ded:	0f 84 a4 00 00 00    	je     f0115e97 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0115df3:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0115dfa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115dfd:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0115e00:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0115e07:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115e0a:	8a 00                	mov    (%eax),%al
f0115e0c:	3c 41                	cmp    $0x41,%al
f0115e0e:	75 09                	jne    f0115e19 <test_share_chunk+0x411>
f0115e10:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e13:	8a 00                	mov    (%eax),%al
f0115e15:	3c 41                	cmp    $0x41,%al
f0115e17:	74 1e                	je     f0115e37 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115e19:	83 ec 04             	sub    $0x4,%esp
f0115e1c:	68 80 cb 12 f0       	push   $0xf012cb80
f0115e21:	68 62 04 00 00       	push   $0x462
f0115e26:	68 02 b8 12 f0       	push   $0xf012b802
f0115e2b:	e8 87 a6 fe ff       	call   f01004b7 <_warn>
f0115e30:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115e33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0115e37:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e3b:	74 04                	je     f0115e41 <test_share_chunk+0x439>
f0115e3d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115e41:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0115e45:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0115e4c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115e4f:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0115e52:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0115e59:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115e5c:	8a 00                	mov    (%eax),%al
f0115e5e:	3c 43                	cmp    $0x43,%al
f0115e60:	75 09                	jne    f0115e6b <test_share_chunk+0x463>
f0115e62:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e65:	8a 00                	mov    (%eax),%al
f0115e67:	3c 43                	cmp    $0x43,%al
f0115e69:	74 1e                	je     f0115e89 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115e6b:	83 ec 04             	sub    $0x4,%esp
f0115e6e:	68 80 cb 12 f0       	push   $0xf012cb80
f0115e73:	68 6d 04 00 00       	push   $0x46d
f0115e78:	68 02 b8 12 f0       	push   $0xf012b802
f0115e7d:	e8 35 a6 fe ff       	call   f01004b7 <_warn>
f0115e82:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115e85:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0115e89:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e8d:	74 04                	je     f0115e93 <test_share_chunk+0x48b>
f0115e8f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115e93:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0115e97:	83 ec 0c             	sub    $0xc,%esp
f0115e9a:	68 8f c1 12 f0       	push   $0xf012c18f
f0115e9f:	e8 c8 b0 fe ff       	call   f0100f6c <cprintf>
f0115ea4:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0115ea7:	83 ec 0c             	sub    $0xc,%esp
f0115eaa:	68 50 cc 12 f0       	push   $0xf012cc50
f0115eaf:	e8 b8 b0 fe ff       	call   f0100f6c <cprintf>
f0115eb4:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115eb7:	e8 4d 7b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115ebc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0115ebf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115ec2:	89 d0                	mov    %edx,%eax
f0115ec4:	c1 e0 03             	shl    $0x3,%eax
f0115ec7:	01 d0                	add    %edx,%eax
f0115ec9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0115ed0:	01 d0                	add    %edx,%eax
f0115ed2:	c1 e0 03             	shl    $0x3,%eax
f0115ed5:	83 ec 0c             	sub    $0xc,%esp
f0115ed8:	6a 06                	push   $0x6
f0115eda:	50                   	push   %eax
f0115edb:	6a 00                	push   $0x0
f0115edd:	68 00 00 00 40       	push   $0x40000000
f0115ee2:	ff 75 cc             	pushl  -0x34(%ebp)
f0115ee5:	e8 1a 38 ff ff       	call   f0109704 <share_chunk>
f0115eea:	83 c4 20             	add    $0x20,%esp
f0115eed:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115ef0:	e8 14 7b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115ef5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0115ef8:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0115efc:	75 0b                	jne    f0115f09 <test_share_chunk+0x501>
f0115efe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115f01:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115f04:	83 f8 01             	cmp    $0x1,%eax
f0115f07:	74 28                	je     f0115f31 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115f09:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115f0c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115f0f:	83 ec 0c             	sub    $0xc,%esp
f0115f12:	50                   	push   %eax
f0115f13:	ff 75 a0             	pushl  -0x60(%ebp)
f0115f16:	68 00 cc 12 f0       	push   $0xf012cc00
f0115f1b:	68 83 04 00 00       	push   $0x483
f0115f20:	68 02 b8 12 f0       	push   $0xf012b802
f0115f25:	e8 8d a5 fe ff       	call   f01004b7 <_warn>
f0115f2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f31:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f35:	74 04                	je     f0115f3b <test_share_chunk+0x533>
f0115f37:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f3b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0115f3f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0115f46:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115f49:	05 00 80 02 00       	add    $0x28000,%eax
f0115f4e:	c1 e0 02             	shl    $0x2,%eax
f0115f51:	83 ec 08             	sub    $0x8,%esp
f0115f54:	6a 02                	push   $0x2
f0115f56:	6a 07                	push   $0x7
f0115f58:	6a 03                	push   $0x3
f0115f5a:	6a 07                	push   $0x7
f0115f5c:	6a 07                	push   $0x7
f0115f5e:	6a ff                	push   $0xffffffff
f0115f60:	50                   	push   %eax
f0115f61:	6a 00                	push   $0x0
f0115f63:	68 00 00 00 40       	push   $0x40000000
f0115f68:	ff 75 cc             	pushl  -0x34(%ebp)
f0115f6b:	e8 39 29 00 00       	call   f01188a9 <CCP>
f0115f70:	83 c4 30             	add    $0x30,%esp
f0115f73:	85 c0                	test   %eax,%eax
f0115f75:	75 25                	jne    f0115f9c <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115f77:	83 ec 04             	sub    $0x4,%esp
f0115f7a:	68 38 cb 12 f0       	push   $0xf012cb38
f0115f7f:	68 8c 04 00 00       	push   $0x48c
f0115f84:	68 02 b8 12 f0       	push   $0xf012b802
f0115f89:	e8 29 a5 fe ff       	call   f01004b7 <_warn>
f0115f8e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115f91:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115f95:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0115f9c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115f9f:	89 d0                	mov    %edx,%eax
f0115fa1:	01 c0                	add    %eax,%eax
f0115fa3:	01 d0                	add    %edx,%eax
f0115fa5:	c1 e0 02             	shl    $0x2,%eax
f0115fa8:	83 ec 08             	sub    $0x8,%esp
f0115fab:	6a 02                	push   $0x2
f0115fad:	6a 07                	push   $0x7
f0115faf:	6a 03                	push   $0x3
f0115fb1:	6a 07                	push   $0x7
f0115fb3:	6a 07                	push   $0x7
f0115fb5:	6a 03                	push   $0x3
f0115fb7:	50                   	push   %eax
f0115fb8:	6a 00                	push   $0x0
f0115fba:	68 00 00 00 40       	push   $0x40000000
f0115fbf:	ff 75 cc             	pushl  -0x34(%ebp)
f0115fc2:	e8 e2 28 00 00       	call   f01188a9 <CCP>
f0115fc7:	83 c4 30             	add    $0x30,%esp
f0115fca:	85 c0                	test   %eax,%eax
f0115fcc:	75 1e                	jne    f0115fec <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115fce:	83 ec 04             	sub    $0x4,%esp
f0115fd1:	68 38 cb 12 f0       	push   $0xf012cb38
f0115fd6:	68 93 04 00 00       	push   $0x493
f0115fdb:	68 02 b8 12 f0       	push   $0xf012b802
f0115fe0:	e8 d2 a4 fe ff       	call   f01004b7 <_warn>
f0115fe5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115fe8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115fec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ff0:	74 04                	je     f0115ff6 <test_share_chunk+0x5ee>
f0115ff2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ff6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0115ffa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115ffd:	89 d0                	mov    %edx,%eax
f0115fff:	01 c0                	add    %eax,%eax
f0116001:	01 d0                	add    %edx,%eax
f0116003:	c1 e0 02             	shl    $0x2,%eax
f0116006:	f7 d8                	neg    %eax
f0116008:	05 00 00 0a 00       	add    $0xa0000,%eax
f011600d:	83 ec 08             	sub    $0x8,%esp
f0116010:	6a 02                	push   $0x2
f0116012:	6a 07                	push   $0x7
f0116014:	6a 03                	push   $0x3
f0116016:	6a 07                	push   $0x7
f0116018:	6a 07                	push   $0x7
f011601a:	6a 02                	push   $0x2
f011601c:	50                   	push   %eax
f011601d:	68 00 30 00 00       	push   $0x3000
f0116022:	68 00 30 00 40       	push   $0x40003000
f0116027:	ff 75 cc             	pushl  -0x34(%ebp)
f011602a:	e8 7a 28 00 00       	call   f01188a9 <CCP>
f011602f:	83 c4 30             	add    $0x30,%esp
f0116032:	85 c0                	test   %eax,%eax
f0116034:	75 1e                	jne    f0116054 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116036:	83 ec 04             	sub    $0x4,%esp
f0116039:	68 38 cb 12 f0       	push   $0xf012cb38
f011603e:	68 9b 04 00 00       	push   $0x49b
f0116043:	68 02 b8 12 f0       	push   $0xf012b802
f0116048:	e8 6a a4 fe ff       	call   f01004b7 <_warn>
f011604d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116050:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116054:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116058:	74 04                	je     f011605e <test_share_chunk+0x656>
f011605a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011605e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0116062:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116065:	c1 e0 02             	shl    $0x2,%eax
f0116068:	83 ec 08             	sub    $0x8,%esp
f011606b:	6a 02                	push   $0x2
f011606d:	6a 07                	push   $0x7
f011606f:	6a 03                	push   $0x3
f0116071:	6a 07                	push   $0x7
f0116073:	6a 07                	push   $0x7
f0116075:	6a 03                	push   $0x3
f0116077:	50                   	push   %eax
f0116078:	68 00 00 0a 00       	push   $0xa0000
f011607d:	68 00 00 0a 40       	push   $0x400a0000
f0116082:	ff 75 cc             	pushl  -0x34(%ebp)
f0116085:	e8 1f 28 00 00       	call   f01188a9 <CCP>
f011608a:	83 c4 30             	add    $0x30,%esp
f011608d:	85 c0                	test   %eax,%eax
f011608f:	75 1e                	jne    f01160af <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116091:	83 ec 04             	sub    $0x4,%esp
f0116094:	68 38 cb 12 f0       	push   $0xf012cb38
f0116099:	68 a3 04 00 00       	push   $0x4a3
f011609e:	68 02 b8 12 f0       	push   $0xf012b802
f01160a3:	e8 0f a4 fe ff       	call   f01004b7 <_warn>
f01160a8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01160ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01160af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160b3:	74 04                	je     f01160b9 <test_share_chunk+0x6b1>
f01160b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01160b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01160bd:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01160c1:	0f 84 92 00 00 00    	je     f0116159 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f01160c7:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01160ce:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01160d5:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01160dc:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01160e3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01160e6:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01160e9:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01160f0:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01160f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01160fa:	8a 00                	mov    (%eax),%al
f01160fc:	3c 41                	cmp    $0x41,%al
f01160fe:	75 2d                	jne    f011612d <test_share_chunk+0x725>
f0116100:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116103:	8a 00                	mov    (%eax),%al
f0116105:	3c 41                	cmp    $0x41,%al
f0116107:	75 24                	jne    f011612d <test_share_chunk+0x725>
f0116109:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011610c:	8a 00                	mov    (%eax),%al
f011610e:	3c 41                	cmp    $0x41,%al
f0116110:	75 1b                	jne    f011612d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0116112:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116115:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0116117:	3c 44                	cmp    $0x44,%al
f0116119:	75 12                	jne    f011612d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011611b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011611e:	8a 00                	mov    (%eax),%al
f0116120:	3c 44                	cmp    $0x44,%al
f0116122:	75 09                	jne    f011612d <test_share_chunk+0x725>
f0116124:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116127:	8a 00                	mov    (%eax),%al
f0116129:	3c 44                	cmp    $0x44,%al
f011612b:	74 1e                	je     f011614b <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011612d:	83 ec 04             	sub    $0x4,%esp
f0116130:	68 80 cb 12 f0       	push   $0xf012cb80
f0116135:	68 b5 04 00 00       	push   $0x4b5
f011613a:	68 02 b8 12 f0       	push   $0xf012b802
f011613f:	e8 73 a3 fe ff       	call   f01004b7 <_warn>
f0116144:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116147:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011614b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011614f:	74 04                	je     f0116155 <test_share_chunk+0x74d>
f0116151:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0116155:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0116159:	83 ec 0c             	sub    $0xc,%esp
f011615c:	68 f2 c1 12 f0       	push   $0xf012c1f2
f0116161:	e8 06 ae fe ff       	call   f0100f6c <cprintf>
f0116166:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0116169:	83 ec 0c             	sub    $0xc,%esp
f011616c:	68 8c cc 12 f0       	push   $0xf012cc8c
f0116171:	e8 f6 ad fe ff       	call   f0100f6c <cprintf>
f0116176:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116179:	e8 8b 78 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011617e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0116181:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116184:	89 d0                	mov    %edx,%eax
f0116186:	01 c0                	add    %eax,%eax
f0116188:	01 d0                	add    %edx,%eax
f011618a:	01 c0                	add    %eax,%eax
f011618c:	01 d0                	add    %edx,%eax
f011618e:	83 ec 0c             	sub    $0xc,%esp
f0116191:	6a 04                	push   $0x4
f0116193:	50                   	push   %eax
f0116194:	68 00 fc 3f 00       	push   $0x3ffc00
f0116199:	68 00 fc 09 00       	push   $0x9fc00
f011619e:	ff 75 cc             	pushl  -0x34(%ebp)
f01161a1:	e8 5e 35 ff ff       	call   f0109704 <share_chunk>
f01161a6:	83 c4 20             	add    $0x20,%esp
f01161a9:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01161ac:	e8 58 78 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01161b1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01161b4:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01161b8:	75 0b                	jne    f01161c5 <test_share_chunk+0x7bd>
f01161ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01161bd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01161c0:	83 f8 01             	cmp    $0x1,%eax
f01161c3:	74 28                	je     f01161ed <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01161c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01161c8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01161cb:	83 ec 0c             	sub    $0xc,%esp
f01161ce:	50                   	push   %eax
f01161cf:	ff 75 8c             	pushl  -0x74(%ebp)
f01161d2:	68 00 cc 12 f0       	push   $0xf012cc00
f01161d7:	68 cb 04 00 00       	push   $0x4cb
f01161dc:	68 02 b8 12 f0       	push   $0xf012b802
f01161e1:	e8 d1 a2 fe ff       	call   f01004b7 <_warn>
f01161e6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161e9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01161ed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161f1:	74 04                	je     f01161f7 <test_share_chunk+0x7ef>
f01161f3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01161f7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01161fb:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0116202:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116205:	89 d0                	mov    %edx,%eax
f0116207:	01 c0                	add    %eax,%eax
f0116209:	01 d0                	add    %edx,%eax
f011620b:	c1 e0 02             	shl    $0x2,%eax
f011620e:	83 ec 08             	sub    $0x8,%esp
f0116211:	6a 02                	push   $0x2
f0116213:	6a 07                	push   $0x7
f0116215:	6a 07                	push   $0x7
f0116217:	6a 07                	push   $0x7
f0116219:	6a 05                	push   $0x5
f011621b:	6a ff                	push   $0xffffffff
f011621d:	50                   	push   %eax
f011621e:	68 00 f0 3f 00       	push   $0x3ff000
f0116223:	68 00 f0 09 00       	push   $0x9f000
f0116228:	ff 75 cc             	pushl  -0x34(%ebp)
f011622b:	e8 79 26 00 00       	call   f01188a9 <CCP>
f0116230:	83 c4 30             	add    $0x30,%esp
f0116233:	85 c0                	test   %eax,%eax
f0116235:	75 25                	jne    f011625c <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116237:	83 ec 04             	sub    $0x4,%esp
f011623a:	68 38 cb 12 f0       	push   $0xf012cb38
f011623f:	68 d4 04 00 00       	push   $0x4d4
f0116244:	68 02 b8 12 f0       	push   $0xf012b802
f0116249:	e8 69 a2 fe ff       	call   f01004b7 <_warn>
f011624e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116251:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0116255:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f011625c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116260:	74 04                	je     f0116266 <test_share_chunk+0x85e>
f0116262:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116266:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011626a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011626d:	c1 e0 02             	shl    $0x2,%eax
f0116270:	83 ec 08             	sub    $0x8,%esp
f0116273:	6a 02                	push   $0x2
f0116275:	6a 07                	push   $0x7
f0116277:	6a 07                	push   $0x7
f0116279:	6a 07                	push   $0x7
f011627b:	6a 05                	push   $0x5
f011627d:	6a 03                	push   $0x3
f011627f:	50                   	push   %eax
f0116280:	68 00 f0 3f 00       	push   $0x3ff000
f0116285:	68 00 f0 09 00       	push   $0x9f000
f011628a:	ff 75 cc             	pushl  -0x34(%ebp)
f011628d:	e8 17 26 00 00       	call   f01188a9 <CCP>
f0116292:	83 c4 30             	add    $0x30,%esp
f0116295:	85 c0                	test   %eax,%eax
f0116297:	75 1e                	jne    f01162b7 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116299:	83 ec 04             	sub    $0x4,%esp
f011629c:	68 38 cb 12 f0       	push   $0xf012cb38
f01162a1:	68 dd 04 00 00       	push   $0x4dd
f01162a6:	68 02 b8 12 f0       	push   $0xf012b802
f01162ab:	e8 07 a2 fe ff       	call   f01004b7 <_warn>
f01162b0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01162b3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01162b7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162bb:	74 04                	je     f01162c1 <test_share_chunk+0x8b9>
f01162bd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01162c1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01162c5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01162c8:	c1 e0 03             	shl    $0x3,%eax
f01162cb:	83 ec 08             	sub    $0x8,%esp
f01162ce:	6a 02                	push   $0x2
f01162d0:	6a 07                	push   $0x7
f01162d2:	6a 07                	push   $0x7
f01162d4:	6a 07                	push   $0x7
f01162d6:	6a 05                	push   $0x5
f01162d8:	6a 04                	push   $0x4
f01162da:	50                   	push   %eax
f01162db:	68 00 00 40 00       	push   $0x400000
f01162e0:	68 00 00 0a 00       	push   $0xa0000
f01162e5:	ff 75 cc             	pushl  -0x34(%ebp)
f01162e8:	e8 bc 25 00 00       	call   f01188a9 <CCP>
f01162ed:	83 c4 30             	add    $0x30,%esp
f01162f0:	85 c0                	test   %eax,%eax
f01162f2:	75 1e                	jne    f0116312 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01162f4:	83 ec 04             	sub    $0x4,%esp
f01162f7:	68 38 cb 12 f0       	push   $0xf012cb38
f01162fc:	68 e5 04 00 00       	push   $0x4e5
f0116301:	68 02 b8 12 f0       	push   $0xf012b802
f0116306:	e8 ac a1 fe ff       	call   f01004b7 <_warn>
f011630b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011630e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116312:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116316:	74 04                	je     f011631c <test_share_chunk+0x914>
f0116318:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011631c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0116320:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0116324:	0f 84 b2 00 00 00    	je     f01163dc <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f011632a:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0116331:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0116338:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011633f:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0116346:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f011634d:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0116354:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f011635b:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0116362:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116365:	8a 00                	mov    (%eax),%al
f0116367:	3c 44                	cmp    $0x44,%al
f0116369:	75 45                	jne    f01163b0 <test_share_chunk+0x9a8>
f011636b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011636e:	8a 00                	mov    (%eax),%al
f0116370:	3c 44                	cmp    $0x44,%al
f0116372:	75 3c                	jne    f01163b0 <test_share_chunk+0x9a8>
f0116374:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116377:	8a 00                	mov    (%eax),%al
f0116379:	3c 44                	cmp    $0x44,%al
f011637b:	75 33                	jne    f01163b0 <test_share_chunk+0x9a8>
f011637d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116380:	8a 00                	mov    (%eax),%al
f0116382:	3c 44                	cmp    $0x44,%al
f0116384:	75 2a                	jne    f01163b0 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0116386:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116389:	8a 10                	mov    (%eax),%dl
f011638b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011638e:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0116390:	38 c2                	cmp    %al,%dl
f0116392:	75 1c                	jne    f01163b0 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0116394:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116397:	8a 10                	mov    (%eax),%dl
f0116399:	8b 45 88             	mov    -0x78(%ebp),%eax
f011639c:	8a 00                	mov    (%eax),%al
f011639e:	38 c2                	cmp    %al,%dl
f01163a0:	75 0e                	jne    f01163b0 <test_share_chunk+0x9a8>
f01163a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01163a5:	8a 10                	mov    (%eax),%dl
f01163a7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01163aa:	8a 00                	mov    (%eax),%al
f01163ac:	38 c2                	cmp    %al,%dl
f01163ae:	74 1e                	je     f01163ce <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01163b0:	83 ec 04             	sub    $0x4,%esp
f01163b3:	68 80 cb 12 f0       	push   $0xf012cb80
f01163b8:	68 fa 04 00 00       	push   $0x4fa
f01163bd:	68 02 b8 12 f0       	push   $0xf012b802
f01163c2:	e8 f0 a0 fe ff       	call   f01004b7 <_warn>
f01163c7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01163ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01163ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163d2:	74 04                	je     f01163d8 <test_share_chunk+0x9d0>
f01163d4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01163d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01163dc:	83 ec 0c             	sub    $0xc,%esp
f01163df:	68 c4 cc 12 f0       	push   $0xf012ccc4
f01163e4:	e8 83 ab fe ff       	call   f0100f6c <cprintf>
f01163e9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01163ec:	83 ec 08             	sub    $0x8,%esp
f01163ef:	ff 75 e4             	pushl  -0x1c(%ebp)
f01163f2:	68 d4 cc 12 f0       	push   $0xf012ccd4
f01163f7:	e8 70 ab fe ff       	call   f0100f6c <cprintf>
f01163fc:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01163ff:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116403:	75 10                	jne    f0116415 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0116405:	83 ec 0c             	sub    $0xc,%esp
f0116408:	68 04 cd 12 f0       	push   $0xf012cd04
f011640d:	e8 5a ab fe ff       	call   f0100f6c <cprintf>
f0116412:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116415:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f011641a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011641d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116420:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116423:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116428:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011642b:	5b                   	pop    %ebx
f011642c:	5e                   	pop    %esi
f011642d:	5f                   	pop    %edi
f011642e:	5d                   	pop    %ebp
f011642f:	c3                   	ret    

f0116430 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0116430:	55                   	push   %ebp
f0116431:	89 e5                	mov    %esp,%ebp
f0116433:	57                   	push   %edi
f0116434:	56                   	push   %esi
f0116435:	53                   	push   %ebx
f0116436:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011643c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0116442:	bb 04 bf 12 f0       	mov    $0xf012bf04,%ebx
f0116447:	ba 0f 00 00 00       	mov    $0xf,%edx
f011644c:	89 c7                	mov    %eax,%edi
f011644e:	89 de                	mov    %ebx,%esi
f0116450:	89 d1                	mov    %edx,%ecx
f0116452:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116454:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011645a:	b9 23 00 00 00       	mov    $0x23,%ecx
f011645f:	b0 00                	mov    $0x0,%al
f0116461:	89 d7                	mov    %edx,%edi
f0116463:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0116465:	6a 00                	push   $0x0
f0116467:	6a 0a                	push   $0xa
f0116469:	6a 14                	push   $0x14
f011646b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0116471:	50                   	push   %eax
f0116472:	e8 f9 35 ff ff       	call   f0109a70 <env_create>
f0116477:	83 c4 10             	add    $0x10,%esp
f011647a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011647d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116480:	8b 40 64             	mov    0x64(%eax),%eax
f0116483:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0116486:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116489:	8b 40 68             	mov    0x68(%eax),%eax
f011648c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011648f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116492:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0116495:	83 ec 0c             	sub    $0xc,%esp
f0116498:	ff 75 cc             	pushl  -0x34(%ebp)
f011649b:	e8 d5 23 00 00       	call   f0118875 <ClearUserSpace>
f01164a0:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01164a3:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01164aa:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01164b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f01164b8:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01164bc:	83 ec 0c             	sub    $0xc,%esp
f01164bf:	68 40 cd 12 f0       	push   $0xf012cd40
f01164c4:	e8 a3 aa fe ff       	call   f0100f6c <cprintf>
f01164c9:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERN_STACK_TOP - 1;
f01164cc:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERN_STACK_TOP - 2;
f01164d3:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERN_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f01164da:	eb 03                	jmp    f01164df <test_allocate_chunk+0xaf>
f01164dc:	ff 4d e4             	decl   -0x1c(%ebp)
f01164df:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01164e6:	76 09                	jbe    f01164f1 <test_allocate_chunk+0xc1>
f01164e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01164eb:	8a 00                	mov    (%eax),%al
f01164ed:	84 c0                	test   %al,%al
f01164ef:	74 eb                	je     f01164dc <test_allocate_chunk+0xac>
		if (ptr1 == (char*)(KERN_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f01164f1:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01164f8:	75 06                	jne    f0116500 <test_allocate_chunk+0xd0>
f01164fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01164fd:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0116500:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116503:	8a 00                	mov    (%eax),%al
f0116505:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011650b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011650e:	8a 00                	mov    (%eax),%al
f0116510:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0116516:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116519:	8a 00                	mov    (%eax),%al
f011651b:	0f be c0             	movsbl %al,%eax
f011651e:	83 ec 08             	sub    $0x8,%esp
f0116521:	50                   	push   %eax
f0116522:	68 6a cd 12 f0       	push   $0xf012cd6a
f0116527:	e8 40 aa fe ff       	call   f0100f6c <cprintf>
f011652c:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f011652f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116532:	8a 00                	mov    (%eax),%al
f0116534:	0f be c0             	movsbl %al,%eax
f0116537:	83 ec 08             	sub    $0x8,%esp
f011653a:	50                   	push   %eax
f011653b:	68 76 cd 12 f0       	push   $0xf012cd76
f0116540:	e8 27 aa fe ff       	call   f0100f6c <cprintf>
f0116545:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE) ;
f0116548:	83 ec 08             	sub    $0x8,%esp
f011654b:	68 00 f0 bf ef       	push   $0xefbff000
f0116550:	ff 75 cc             	pushl  -0x34(%ebp)
f0116553:	e8 84 22 00 00       	call   f01187dc <GP>
f0116558:	83 c4 10             	add    $0x10,%esp
f011655b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011655e:	e8 a6 74 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116563:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0116566:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116569:	c1 e0 02             	shl    $0x2,%eax
f011656c:	6a 02                	push   $0x2
f011656e:	50                   	push   %eax
f011656f:	68 00 f0 bf ef       	push   $0xefbff000
f0116574:	ff 75 cc             	pushl  -0x34(%ebp)
f0116577:	e8 a2 31 ff ff       	call   f010971e <allocate_chunk>
f011657c:	83 c4 10             	add    $0x10,%esp
f011657f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116582:	e8 82 74 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116587:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011658a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011658e:	75 08                	jne    f0116598 <test_allocate_chunk+0x168>
f0116590:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116593:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0116596:	74 2a                	je     f01165c2 <test_allocate_chunk+0x192>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0116598:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011659b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011659e:	83 ec 08             	sub    $0x8,%esp
f01165a1:	6a 00                	push   $0x0
f01165a3:	50                   	push   %eax
f01165a4:	ff 75 b0             	pushl  -0x50(%ebp)
f01165a7:	68 84 cd 12 f0       	push   $0xf012cd84
f01165ac:	68 3a 05 00 00       	push   $0x53a
f01165b1:	68 02 b8 12 f0       	push   $0xf012b802
f01165b6:	e8 fc 9e fe ff       	call   f01004b7 <_warn>
f01165bb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165be:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01165c2:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01165c6:	74 04                	je     f01165cc <test_allocate_chunk+0x19c>
f01165c8:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01165cc:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01165d0:	e8 34 74 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01165d5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01165d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01165db:	01 c0                	add    %eax,%eax
f01165dd:	89 c1                	mov    %eax,%ecx
f01165df:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01165e2:	89 d0                	mov    %edx,%eax
f01165e4:	c1 e0 02             	shl    $0x2,%eax
f01165e7:	01 d0                	add    %edx,%eax
f01165e9:	f7 d8                	neg    %eax
f01165eb:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01165f0:	6a 02                	push   $0x2
f01165f2:	51                   	push   %ecx
f01165f3:	50                   	push   %eax
f01165f4:	ff 75 cc             	pushl  -0x34(%ebp)
f01165f7:	e8 22 31 ff ff       	call   f010971e <allocate_chunk>
f01165fc:	83 c4 10             	add    $0x10,%esp
f01165ff:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116602:	e8 02 74 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116607:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011660a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011660e:	75 08                	jne    f0116618 <test_allocate_chunk+0x1e8>
f0116610:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116613:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0116616:	74 2a                	je     f0116642 <test_allocate_chunk+0x212>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0116618:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011661b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011661e:	83 ec 08             	sub    $0x8,%esp
f0116621:	6a 00                	push   $0x0
f0116623:	50                   	push   %eax
f0116624:	ff 75 b0             	pushl  -0x50(%ebp)
f0116627:	68 84 cd 12 f0       	push   $0xf012cd84
f011662c:	68 48 05 00 00       	push   $0x548
f0116631:	68 02 b8 12 f0       	push   $0xf012b802
f0116636:	e8 7c 9e fe ff       	call   f01004b7 <_warn>
f011663b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011663e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116642:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116646:	74 04                	je     f011664c <test_allocate_chunk+0x21c>
f0116648:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011664c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERN_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0116650:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116653:	c1 e0 02             	shl    $0x2,%eax
f0116656:	83 ec 08             	sub    $0x8,%esp
f0116659:	6a 03                	push   $0x3
f011665b:	6a 00                	push   $0x0
f011665d:	6a 00                	push   $0x0
f011665f:	68 ff 0f 00 00       	push   $0xfff
f0116664:	ff 75 b8             	pushl  -0x48(%ebp)
f0116667:	6a 01                	push   $0x1
f0116669:	50                   	push   %eax
f011666a:	68 00 f0 bf ef       	push   $0xefbff000
f011666f:	6a 00                	push   $0x0
f0116671:	ff 75 cc             	pushl  -0x34(%ebp)
f0116674:	e8 30 22 00 00       	call   f01188a9 <CCP>
f0116679:	83 c4 30             	add    $0x30,%esp
f011667c:	85 c0                	test   %eax,%eax
f011667e:	75 1e                	jne    f011669e <test_allocate_chunk+0x26e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116680:	83 ec 04             	sub    $0x4,%esp
f0116683:	68 ec cd 12 f0       	push   $0xf012cdec
f0116688:	68 50 05 00 00       	push   $0x550
f011668d:	68 02 b8 12 f0       	push   $0xf012b802
f0116692:	e8 20 9e fe ff       	call   f01004b7 <_warn>
f0116697:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011669a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f011669e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01166a2:	74 04                	je     f01166a8 <test_allocate_chunk+0x278>
f01166a4:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01166a8:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01166ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01166af:	8a 10                	mov    (%eax),%dl
f01166b1:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01166b7:	38 c2                	cmp    %al,%dl
f01166b9:	75 0f                	jne    f01166ca <test_allocate_chunk+0x29a>
f01166bb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01166be:	8a 10                	mov    (%eax),%dl
f01166c0:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01166c6:	38 c2                	cmp    %al,%dl
f01166c8:	74 1e                	je     f01166e8 <test_allocate_chunk+0x2b8>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01166ca:	83 ec 04             	sub    $0x4,%esp
f01166cd:	68 38 ce 12 f0       	push   $0xf012ce38
f01166d2:	68 58 05 00 00       	push   $0x558
f01166d7:	68 02 b8 12 f0       	push   $0xf012b802
f01166dc:	e8 d6 9d fe ff       	call   f01004b7 <_warn>
f01166e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01166e4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01166e8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01166ec:	74 04                	je     f01166f2 <test_allocate_chunk+0x2c2>
f01166ee:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01166f2:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01166f6:	83 ec 0c             	sub    $0xc,%esp
f01166f9:	68 b5 cb 12 f0       	push   $0xf012cbb5
f01166fe:	e8 69 a8 fe ff       	call   f0100f6c <cprintf>
f0116703:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0116706:	83 ec 0c             	sub    $0xc,%esp
f0116709:	68 70 ce 12 f0       	push   $0xf012ce70
f011670e:	e8 59 a8 fe ff       	call   f0100f6c <cprintf>
f0116713:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116716:	e8 ee 72 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011671b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011671e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116721:	c1 e0 05             	shl    $0x5,%eax
f0116724:	68 02 0e 00 00       	push   $0xe02
f0116729:	50                   	push   %eax
f011672a:	6a 00                	push   $0x0
f011672c:	ff 75 cc             	pushl  -0x34(%ebp)
f011672f:	e8 ea 2f ff ff       	call   f010971e <allocate_chunk>
f0116734:	83 c4 10             	add    $0x10,%esp
f0116737:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011673a:	e8 ca 72 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011673f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0116742:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0116746:	75 36                	jne    f011677e <test_allocate_chunk+0x34e>
f0116748:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011674b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011674e:	89 c1                	mov    %eax,%ecx
f0116750:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116753:	c1 e0 05             	shl    $0x5,%eax
f0116756:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116759:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116760:	99                   	cltd   
f0116761:	f7 fe                	idiv   %esi
f0116763:	89 c3                	mov    %eax,%ebx
f0116765:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116768:	c1 e0 05             	shl    $0x5,%eax
f011676b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011676e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116775:	99                   	cltd   
f0116776:	f7 fe                	idiv   %esi
f0116778:	01 d8                	add    %ebx,%eax
f011677a:	39 c1                	cmp    %eax,%ecx
f011677c:	74 54                	je     f01167d2 <test_allocate_chunk+0x3a2>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f011677e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116781:	c1 e0 05             	shl    $0x5,%eax
f0116784:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116787:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011678e:	99                   	cltd   
f011678f:	f7 ff                	idiv   %edi
f0116791:	89 c1                	mov    %eax,%ecx
f0116793:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116796:	c1 e0 05             	shl    $0x5,%eax
f0116799:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011679c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01167a3:	99                   	cltd   
f01167a4:	f7 fe                	idiv   %esi
f01167a6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01167a9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01167ac:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01167af:	83 ec 08             	sub    $0x8,%esp
f01167b2:	52                   	push   %edx
f01167b3:	50                   	push   %eax
f01167b4:	ff 75 a8             	pushl  -0x58(%ebp)
f01167b7:	68 b0 ce 12 f0       	push   $0xf012ceb0
f01167bc:	68 6d 05 00 00       	push   $0x56d
f01167c1:	68 02 b8 12 f0       	push   $0xf012b802
f01167c6:	e8 ec 9c fe ff       	call   f01004b7 <_warn>
f01167cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01167ce:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01167d2:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01167d6:	74 04                	je     f01167dc <test_allocate_chunk+0x3ac>
f01167d8:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01167dc:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01167e0:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01167e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01167ea:	c1 e0 05             	shl    $0x5,%eax
f01167ed:	83 ec 08             	sub    $0x8,%esp
f01167f0:	6a 03                	push   $0x3
f01167f2:	6a 00                	push   $0x0
f01167f4:	6a 00                	push   $0x0
f01167f6:	68 07 0e 00 00       	push   $0xe07
f01167fb:	68 03 0e 00 00       	push   $0xe03
f0116800:	6a 01                	push   $0x1
f0116802:	50                   	push   %eax
f0116803:	6a 00                	push   $0x0
f0116805:	6a 00                	push   $0x0
f0116807:	ff 75 cc             	pushl  -0x34(%ebp)
f011680a:	e8 9a 20 00 00       	call   f01188a9 <CCP>
f011680f:	83 c4 30             	add    $0x30,%esp
f0116812:	85 c0                	test   %eax,%eax
f0116814:	75 25                	jne    f011683b <test_allocate_chunk+0x40b>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116816:	83 ec 04             	sub    $0x4,%esp
f0116819:	68 ec cd 12 f0       	push   $0xf012cdec
f011681e:	68 76 05 00 00       	push   $0x576
f0116823:	68 02 b8 12 f0       	push   $0xf012b802
f0116828:	e8 8a 9c fe ff       	call   f01004b7 <_warn>
f011682d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116830:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116834:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f011683b:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011683f:	74 04                	je     f0116845 <test_allocate_chunk+0x415>
f0116841:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116845:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0116849:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011684d:	74 5a                	je     f01168a9 <test_allocate_chunk+0x479>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f011684f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116852:	01 c0                	add    %eax,%eax
f0116854:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0116857:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011685a:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f011685d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116860:	01 c0                	add    %eax,%eax
f0116862:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0116865:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116868:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011686b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011686e:	8a 00                	mov    (%eax),%al
f0116870:	3c 4b                	cmp    $0x4b,%al
f0116872:	75 09                	jne    f011687d <test_allocate_chunk+0x44d>
f0116874:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116877:	8a 00                	mov    (%eax),%al
f0116879:	3c 4d                	cmp    $0x4d,%al
f011687b:	74 1e                	je     f011689b <test_allocate_chunk+0x46b>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011687d:	83 ec 04             	sub    $0x4,%esp
f0116880:	68 38 ce 12 f0       	push   $0xf012ce38
f0116885:	68 84 05 00 00       	push   $0x584
f011688a:	68 02 b8 12 f0       	push   $0xf012b802
f011688f:	e8 23 9c fe ff       	call   f01004b7 <_warn>
f0116894:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116897:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f011689b:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011689f:	74 04                	je     f01168a5 <test_allocate_chunk+0x475>
f01168a1:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01168a5:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01168a9:	83 ec 0c             	sub    $0xc,%esp
f01168ac:	68 8f c1 12 f0       	push   $0xf012c18f
f01168b1:	e8 b6 a6 fe ff       	call   f0100f6c <cprintf>
f01168b6:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01168b9:	83 ec 0c             	sub    $0xc,%esp
f01168bc:	68 10 cf 12 f0       	push   $0xf012cf10
f01168c1:	e8 a6 a6 fe ff       	call   f0100f6c <cprintf>
f01168c6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01168c9:	e8 3b 71 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01168ce:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01168d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168d4:	c1 e0 06             	shl    $0x6,%eax
f01168d7:	89 c2                	mov    %eax,%edx
f01168d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168dc:	c1 e0 05             	shl    $0x5,%eax
f01168df:	6a 00                	push   $0x0
f01168e1:	52                   	push   %edx
f01168e2:	50                   	push   %eax
f01168e3:	ff 75 cc             	pushl  -0x34(%ebp)
f01168e6:	e8 33 2e ff ff       	call   f010971e <allocate_chunk>
f01168eb:	83 c4 10             	add    $0x10,%esp
f01168ee:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01168f1:	e8 13 71 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01168f6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f01168f9:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f01168fd:	75 36                	jne    f0116935 <test_allocate_chunk+0x505>
f01168ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116902:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116905:	89 c1                	mov    %eax,%ecx
f0116907:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011690a:	c1 e0 06             	shl    $0x6,%eax
f011690d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116910:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116917:	99                   	cltd   
f0116918:	f7 ff                	idiv   %edi
f011691a:	89 c3                	mov    %eax,%ebx
f011691c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011691f:	c1 e0 06             	shl    $0x6,%eax
f0116922:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116925:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011692c:	99                   	cltd   
f011692d:	f7 fe                	idiv   %esi
f011692f:	01 d8                	add    %ebx,%eax
f0116931:	39 c1                	cmp    %eax,%ecx
f0116933:	74 54                	je     f0116989 <test_allocate_chunk+0x559>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0116935:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116938:	c1 e0 06             	shl    $0x6,%eax
f011693b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011693e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116945:	99                   	cltd   
f0116946:	f7 fb                	idiv   %ebx
f0116948:	89 c1                	mov    %eax,%ecx
f011694a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011694d:	c1 e0 06             	shl    $0x6,%eax
f0116950:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116953:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011695a:	99                   	cltd   
f011695b:	f7 ff                	idiv   %edi
f011695d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0116960:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116963:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116966:	83 ec 08             	sub    $0x8,%esp
f0116969:	52                   	push   %edx
f011696a:	50                   	push   %eax
f011696b:	ff 75 a4             	pushl  -0x5c(%ebp)
f011696e:	68 b0 ce 12 f0       	push   $0xf012ceb0
f0116973:	68 9a 05 00 00       	push   $0x59a
f0116978:	68 02 b8 12 f0       	push   $0xf012b802
f011697d:	e8 35 9b fe ff       	call   f01004b7 <_warn>
f0116982:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116985:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116989:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011698d:	74 04                	je     f0116993 <test_allocate_chunk+0x563>
f011698f:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116993:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116997:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011699e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01169a1:	c1 e0 06             	shl    $0x6,%eax
f01169a4:	89 c2                	mov    %eax,%edx
f01169a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01169a9:	c1 e0 05             	shl    $0x5,%eax
f01169ac:	83 ec 08             	sub    $0x8,%esp
f01169af:	6a 03                	push   $0x3
f01169b1:	6a 00                	push   $0x0
f01169b3:	6a 00                	push   $0x0
f01169b5:	68 07 0e 00 00       	push   $0xe07
f01169ba:	6a 01                	push   $0x1
f01169bc:	6a 01                	push   $0x1
f01169be:	52                   	push   %edx
f01169bf:	50                   	push   %eax
f01169c0:	6a 00                	push   $0x0
f01169c2:	ff 75 cc             	pushl  -0x34(%ebp)
f01169c5:	e8 df 1e 00 00       	call   f01188a9 <CCP>
f01169ca:	83 c4 30             	add    $0x30,%esp
f01169cd:	85 c0                	test   %eax,%eax
f01169cf:	75 25                	jne    f01169f6 <test_allocate_chunk+0x5c6>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01169d1:	83 ec 04             	sub    $0x4,%esp
f01169d4:	68 ec cd 12 f0       	push   $0xf012cdec
f01169d9:	68 a3 05 00 00       	push   $0x5a3
f01169de:	68 02 b8 12 f0       	push   $0xf012b802
f01169e3:	e8 cf 9a fe ff       	call   f01004b7 <_warn>
f01169e8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01169eb:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01169ef:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f01169f6:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01169fa:	74 04                	je     f0116a00 <test_allocate_chunk+0x5d0>
f01169fc:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116a00:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0116a04:	83 ec 0c             	sub    $0xc,%esp
f0116a07:	68 f2 c1 12 f0       	push   $0xf012c1f2
f0116a0c:	e8 5b a5 fe ff       	call   f0100f6c <cprintf>
f0116a11:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0116a14:	83 ec 0c             	sub    $0xc,%esp
f0116a17:	68 50 cf 12 f0       	push   $0xf012cf50
f0116a1c:	e8 4b a5 fe ff       	call   f0100f6c <cprintf>
f0116a21:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116a24:	e8 e0 6f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116a29:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0116a2c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a2f:	c1 e0 06             	shl    $0x6,%eax
f0116a32:	68 06 0e 00 00       	push   $0xe06
f0116a37:	50                   	push   %eax
f0116a38:	68 00 00 00 80       	push   $0x80000000
f0116a3d:	ff 75 cc             	pushl  -0x34(%ebp)
f0116a40:	e8 d9 2c ff ff       	call   f010971e <allocate_chunk>
f0116a45:	83 c4 10             	add    $0x10,%esp
f0116a48:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116a4b:	e8 b9 6f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116a50:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0116a53:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0116a57:	75 36                	jne    f0116a8f <test_allocate_chunk+0x65f>
f0116a59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a5c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116a5f:	89 c1                	mov    %eax,%ecx
f0116a61:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a64:	c1 e0 06             	shl    $0x6,%eax
f0116a67:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a6a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116a71:	99                   	cltd   
f0116a72:	f7 fb                	idiv   %ebx
f0116a74:	89 c3                	mov    %eax,%ebx
f0116a76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a79:	c1 e0 06             	shl    $0x6,%eax
f0116a7c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a7f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116a86:	99                   	cltd   
f0116a87:	f7 fe                	idiv   %esi
f0116a89:	01 d8                	add    %ebx,%eax
f0116a8b:	39 c1                	cmp    %eax,%ecx
f0116a8d:	74 54                	je     f0116ae3 <test_allocate_chunk+0x6b3>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0116a8f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a92:	c1 e0 06             	shl    $0x6,%eax
f0116a95:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a98:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116a9f:	99                   	cltd   
f0116aa0:	f7 ff                	idiv   %edi
f0116aa2:	89 c1                	mov    %eax,%ecx
f0116aa4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116aa7:	c1 e0 06             	shl    $0x6,%eax
f0116aaa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116aad:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116ab4:	99                   	cltd   
f0116ab5:	f7 fb                	idiv   %ebx
f0116ab7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0116aba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116abd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116ac0:	83 ec 08             	sub    $0x8,%esp
f0116ac3:	52                   	push   %edx
f0116ac4:	50                   	push   %eax
f0116ac5:	ff 75 9c             	pushl  -0x64(%ebp)
f0116ac8:	68 b0 ce 12 f0       	push   $0xf012ceb0
f0116acd:	68 b9 05 00 00       	push   $0x5b9
f0116ad2:	68 02 b8 12 f0       	push   $0xf012b802
f0116ad7:	e8 db 99 fe ff       	call   f01004b7 <_warn>
f0116adc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116adf:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116ae3:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116ae7:	74 04                	je     f0116aed <test_allocate_chunk+0x6bd>
f0116ae9:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116aed:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116af1:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116af8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116afb:	c1 e0 06             	shl    $0x6,%eax
f0116afe:	83 ec 08             	sub    $0x8,%esp
f0116b01:	6a 03                	push   $0x3
f0116b03:	6a 00                	push   $0x0
f0116b05:	6a 00                	push   $0x0
f0116b07:	68 07 0e 00 00       	push   $0xe07
f0116b0c:	68 07 0e 00 00       	push   $0xe07
f0116b11:	6a 01                	push   $0x1
f0116b13:	50                   	push   %eax
f0116b14:	68 00 00 00 80       	push   $0x80000000
f0116b19:	6a 00                	push   $0x0
f0116b1b:	ff 75 cc             	pushl  -0x34(%ebp)
f0116b1e:	e8 86 1d 00 00       	call   f01188a9 <CCP>
f0116b23:	83 c4 30             	add    $0x30,%esp
f0116b26:	85 c0                	test   %eax,%eax
f0116b28:	75 25                	jne    f0116b4f <test_allocate_chunk+0x71f>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116b2a:	83 ec 04             	sub    $0x4,%esp
f0116b2d:	68 ec cd 12 f0       	push   $0xf012cdec
f0116b32:	68 c2 05 00 00       	push   $0x5c2
f0116b37:	68 02 b8 12 f0       	push   $0xf012b802
f0116b3c:	e8 76 99 fe ff       	call   f01004b7 <_warn>
f0116b41:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116b44:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116b48:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0116b4f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116b53:	74 04                	je     f0116b59 <test_allocate_chunk+0x729>
f0116b55:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116b59:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0116b5d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0116b61:	74 6f                	je     f0116bd2 <test_allocate_chunk+0x7a2>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0116b63:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116b66:	01 c0                	add    %eax,%eax
f0116b68:	05 00 00 00 80       	add    $0x80000000,%eax
f0116b6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0116b70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116b73:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0116b76:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116b79:	89 d0                	mov    %edx,%eax
f0116b7b:	c1 e0 02             	shl    $0x2,%eax
f0116b7e:	01 d0                	add    %edx,%eax
f0116b80:	01 c0                	add    %eax,%eax
f0116b82:	01 d0                	add    %edx,%eax
f0116b84:	01 c0                	add    %eax,%eax
f0116b86:	05 00 00 00 80       	add    $0x80000000,%eax
f0116b8b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0116b8e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116b91:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0116b94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116b97:	8a 00                	mov    (%eax),%al
f0116b99:	3c 4b                	cmp    $0x4b,%al
f0116b9b:	75 09                	jne    f0116ba6 <test_allocate_chunk+0x776>
f0116b9d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116ba0:	8a 00                	mov    (%eax),%al
f0116ba2:	3c 4d                	cmp    $0x4d,%al
f0116ba4:	74 1e                	je     f0116bc4 <test_allocate_chunk+0x794>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0116ba6:	83 ec 04             	sub    $0x4,%esp
f0116ba9:	68 38 ce 12 f0       	push   $0xf012ce38
f0116bae:	68 d0 05 00 00       	push   $0x5d0
f0116bb3:	68 02 b8 12 f0       	push   $0xf012b802
f0116bb8:	e8 fa 98 fe ff       	call   f01004b7 <_warn>
f0116bbd:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116bc0:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0116bc4:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116bc8:	74 04                	je     f0116bce <test_allocate_chunk+0x79e>
f0116bca:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0116bce:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0116bd2:	83 ec 0c             	sub    $0xc,%esp
f0116bd5:	68 c4 cc 12 f0       	push   $0xf012ccc4
f0116bda:	e8 8d a3 fe ff       	call   f0100f6c <cprintf>
f0116bdf:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0116be2:	83 ec 0c             	sub    $0xc,%esp
f0116be5:	68 8c cf 12 f0       	push   $0xf012cf8c
f0116bea:	e8 7d a3 fe ff       	call   f0100f6c <cprintf>
f0116bef:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116bf2:	e8 12 6e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116bf7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0116bfa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116bfd:	89 d0                	mov    %edx,%eax
f0116bff:	01 c0                	add    %eax,%eax
f0116c01:	01 d0                	add    %edx,%eax
f0116c03:	01 c0                	add    %eax,%eax
f0116c05:	01 d0                	add    %edx,%eax
f0116c07:	68 04 0e 00 00       	push   $0xe04
f0116c0c:	50                   	push   %eax
f0116c0d:	68 00 fc 3f 40       	push   $0x403ffc00
f0116c12:	ff 75 cc             	pushl  -0x34(%ebp)
f0116c15:	e8 04 2b ff ff       	call   f010971e <allocate_chunk>
f0116c1a:	83 c4 10             	add    $0x10,%esp
f0116c1d:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116c20:	e8 e4 6d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116c25:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0116c28:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0116c2c:	75 0b                	jne    f0116c39 <test_allocate_chunk+0x809>
f0116c2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c31:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116c34:	83 f8 05             	cmp    $0x5,%eax
f0116c37:	74 2a                	je     f0116c63 <test_allocate_chunk+0x833>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0116c39:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c3c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116c3f:	83 ec 08             	sub    $0x8,%esp
f0116c42:	6a 05                	push   $0x5
f0116c44:	50                   	push   %eax
f0116c45:	ff 75 98             	pushl  -0x68(%ebp)
f0116c48:	68 b0 ce 12 f0       	push   $0xf012ceb0
f0116c4d:	68 e7 05 00 00       	push   $0x5e7
f0116c52:	68 02 b8 12 f0       	push   $0xf012b802
f0116c57:	e8 5b 98 fe ff       	call   f01004b7 <_warn>
f0116c5c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116c5f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116c63:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116c67:	74 04                	je     f0116c6d <test_allocate_chunk+0x83d>
f0116c69:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116c6d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116c71:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116c78:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116c7b:	89 d0                	mov    %edx,%eax
f0116c7d:	01 c0                	add    %eax,%eax
f0116c7f:	01 d0                	add    %edx,%eax
f0116c81:	c1 e0 02             	shl    $0x2,%eax
f0116c84:	83 ec 08             	sub    $0x8,%esp
f0116c87:	6a 03                	push   $0x3
f0116c89:	6a 00                	push   $0x0
f0116c8b:	6a 00                	push   $0x0
f0116c8d:	68 07 0e 00 00       	push   $0xe07
f0116c92:	68 05 0e 00 00       	push   $0xe05
f0116c97:	6a 01                	push   $0x1
f0116c99:	50                   	push   %eax
f0116c9a:	68 00 f0 3f 40       	push   $0x403ff000
f0116c9f:	6a 00                	push   $0x0
f0116ca1:	ff 75 cc             	pushl  -0x34(%ebp)
f0116ca4:	e8 00 1c 00 00       	call   f01188a9 <CCP>
f0116ca9:	83 c4 30             	add    $0x30,%esp
f0116cac:	85 c0                	test   %eax,%eax
f0116cae:	75 25                	jne    f0116cd5 <test_allocate_chunk+0x8a5>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116cb0:	83 ec 04             	sub    $0x4,%esp
f0116cb3:	68 ec cd 12 f0       	push   $0xf012cdec
f0116cb8:	68 f0 05 00 00       	push   $0x5f0
f0116cbd:	68 02 b8 12 f0       	push   $0xf012b802
f0116cc2:	e8 f0 97 fe ff       	call   f01004b7 <_warn>
f0116cc7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116cca:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116cce:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0116cd5:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116cd9:	74 04                	je     f0116cdf <test_allocate_chunk+0x8af>
f0116cdb:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116cdf:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0116ce3:	83 ec 0c             	sub    $0xc,%esp
f0116ce6:	68 c3 cf 12 f0       	push   $0xf012cfc3
f0116ceb:	e8 7c a2 fe ff       	call   f0100f6c <cprintf>
f0116cf0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0116cf3:	83 ec 08             	sub    $0x8,%esp
f0116cf6:	ff 75 e0             	pushl  -0x20(%ebp)
f0116cf9:	68 d4 cf 12 f0       	push   $0xf012cfd4
f0116cfe:	e8 69 a2 fe ff       	call   f0100f6c <cprintf>
f0116d03:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116d06:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0116d0a:	75 10                	jne    f0116d1c <test_allocate_chunk+0x8ec>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0116d0c:	83 ec 0c             	sub    $0xc,%esp
f0116d0f:	68 08 d0 12 f0       	push   $0xf012d008
f0116d14:	e8 53 a2 fe ff       	call   f0100f6c <cprintf>
f0116d19:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116d1c:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f0116d21:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116d24:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116d27:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116d2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116d2f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116d32:	5b                   	pop    %ebx
f0116d33:	5e                   	pop    %esi
f0116d34:	5f                   	pop    %edi
f0116d35:	5d                   	pop    %ebp
f0116d36:	c3                   	ret    

f0116d37 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0116d37:	55                   	push   %ebp
f0116d38:	89 e5                	mov    %esp,%ebp
f0116d3a:	57                   	push   %edi
f0116d3b:	56                   	push   %esi
f0116d3c:	53                   	push   %ebx
f0116d3d:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0116d43:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0116d46:	bb 04 bf 12 f0       	mov    $0xf012bf04,%ebx
f0116d4b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0116d50:	89 c7                	mov    %eax,%edi
f0116d52:	89 de                	mov    %ebx,%esi
f0116d54:	89 d1                	mov    %edx,%ecx
f0116d56:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116d58:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0116d5b:	b9 23 00 00 00       	mov    $0x23,%ecx
f0116d60:	b0 00                	mov    $0x0,%al
f0116d62:	89 d7                	mov    %edx,%edi
f0116d64:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0116d66:	6a 00                	push   $0x0
f0116d68:	6a 0a                	push   $0xa
f0116d6a:	6a 14                	push   $0x14
f0116d6c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0116d6f:	50                   	push   %eax
f0116d70:	e8 fb 2c ff ff       	call   f0109a70 <env_create>
f0116d75:	83 c4 10             	add    $0x10,%esp
f0116d78:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0116d7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d7e:	8b 40 64             	mov    0x64(%eax),%eax
f0116d81:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0116d84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d87:	8b 40 68             	mov    0x68(%eax),%eax
f0116d8a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116d8d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116d90:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0116d93:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0116d9a:	75 70 20 
f0116d9d:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0116da4:	00 00 00 
f0116da7:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0116daa:	b9 03 00 00 00       	mov    $0x3,%ecx
f0116daf:	b8 00 00 00 00       	mov    $0x0,%eax
f0116db4:	89 d7                	mov    %edx,%edi
f0116db6:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0116db8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116dbb:	8b 40 10             	mov    0x10(%eax),%eax
f0116dbe:	83 ec 08             	sub    $0x8,%esp
f0116dc1:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0116dc7:	52                   	push   %edx
f0116dc8:	50                   	push   %eax
f0116dc9:	e8 87 b9 00 00       	call   f0122755 <ltostr>
f0116dce:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0116dd1:	83 ec 04             	sub    $0x4,%esp
f0116dd4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116dda:	50                   	push   %eax
f0116ddb:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0116de1:	50                   	push   %eax
f0116de2:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0116de8:	50                   	push   %eax
f0116de9:	e8 40 ba 00 00       	call   f012282e <strcconcat>
f0116dee:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0116df1:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0116df8:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0116dff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0116e06:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0116e0d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0116e11:	83 ec 0c             	sub    $0xc,%esp
f0116e14:	ff 75 d8             	pushl  -0x28(%ebp)
f0116e17:	e8 59 1a 00 00       	call   f0118875 <ClearUserSpace>
f0116e1c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0116e1f:	83 ec 0c             	sub    $0xc,%esp
f0116e22:	68 48 d0 12 f0       	push   $0xf012d048
f0116e27:	e8 40 a1 fe ff       	call   f0100f6c <cprintf>
f0116e2c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0116e2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116e32:	c1 e0 03             	shl    $0x3,%eax
f0116e35:	83 ec 04             	sub    $0x4,%esp
f0116e38:	50                   	push   %eax
f0116e39:	6a 00                	push   $0x0
f0116e3b:	ff 75 d8             	pushl  -0x28(%ebp)
f0116e3e:	e8 0f 29 ff ff       	call   f0109752 <calculate_required_frames>
f0116e43:	83 c4 10             	add    $0x10,%esp
f0116e46:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0116e49:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0116e4d:	74 23                	je     f0116e72 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0116e4f:	83 ec 0c             	sub    $0xc,%esp
f0116e52:	6a 03                	push   $0x3
f0116e54:	ff 75 c8             	pushl  -0x38(%ebp)
f0116e57:	68 7c d0 12 f0       	push   $0xf012d07c
f0116e5c:	68 29 06 00 00       	push   $0x629
f0116e61:	68 02 b8 12 f0       	push   $0xf012b802
f0116e66:	e8 4c 96 fe ff       	call   f01004b7 <_warn>
f0116e6b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116e6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116e72:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116e76:	74 04                	je     f0116e7c <test_calculate_required_frames+0x145>
f0116e78:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116e7c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0116e80:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116e83:	c1 e0 02             	shl    $0x2,%eax
f0116e86:	83 ec 04             	sub    $0x4,%esp
f0116e89:	50                   	push   %eax
f0116e8a:	6a 00                	push   $0x0
f0116e8c:	ff 75 d8             	pushl  -0x28(%ebp)
f0116e8f:	e8 be 28 ff ff       	call   f0109752 <calculate_required_frames>
f0116e94:	83 c4 10             	add    $0x10,%esp
f0116e97:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0116e9a:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0116ea1:	74 26                	je     f0116ec9 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0116ea3:	83 ec 0c             	sub    $0xc,%esp
f0116ea6:	68 01 04 00 00       	push   $0x401
f0116eab:	ff 75 c8             	pushl  -0x38(%ebp)
f0116eae:	68 7c d0 12 f0       	push   $0xf012d07c
f0116eb3:	68 33 06 00 00       	push   $0x633
f0116eb8:	68 02 b8 12 f0       	push   $0xf012b802
f0116ebd:	e8 f5 95 fe ff       	call   f01004b7 <_warn>
f0116ec2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116ec5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116ec9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116ecd:	74 04                	je     f0116ed3 <test_calculate_required_frames+0x19c>
f0116ecf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116ed3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0116ed7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116eda:	c1 e0 0a             	shl    $0xa,%eax
f0116edd:	83 ec 04             	sub    $0x4,%esp
f0116ee0:	50                   	push   %eax
f0116ee1:	6a 00                	push   $0x0
f0116ee3:	ff 75 d8             	pushl  -0x28(%ebp)
f0116ee6:	e8 67 28 ff ff       	call   f0109752 <calculate_required_frames>
f0116eeb:	83 c4 10             	add    $0x10,%esp
f0116eee:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0116ef1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116ef4:	c1 e0 0a             	shl    $0xa,%eax
f0116ef7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116efa:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116f01:	99                   	cltd   
f0116f02:	f7 fb                	idiv   %ebx
f0116f04:	89 c1                	mov    %eax,%ecx
f0116f06:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f09:	c1 e0 0a             	shl    $0xa,%eax
f0116f0c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116f0f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116f16:	99                   	cltd   
f0116f17:	f7 fe                	idiv   %esi
f0116f19:	01 c8                	add    %ecx,%eax
f0116f1b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116f1e:	74 4c                	je     f0116f6c <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0116f20:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f23:	c1 e0 0a             	shl    $0xa,%eax
f0116f26:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116f29:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116f30:	99                   	cltd   
f0116f31:	f7 fb                	idiv   %ebx
f0116f33:	89 c1                	mov    %eax,%ecx
f0116f35:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f38:	c1 e0 0a             	shl    $0xa,%eax
f0116f3b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116f3e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116f45:	99                   	cltd   
f0116f46:	f7 fe                	idiv   %esi
f0116f48:	01 c8                	add    %ecx,%eax
f0116f4a:	83 ec 0c             	sub    $0xc,%esp
f0116f4d:	50                   	push   %eax
f0116f4e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116f51:	68 7c d0 12 f0       	push   $0xf012d07c
f0116f56:	68 3d 06 00 00       	push   $0x63d
f0116f5b:	68 02 b8 12 f0       	push   $0xf012b802
f0116f60:	e8 52 95 fe ff       	call   f01004b7 <_warn>
f0116f65:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116f68:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116f6c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116f70:	74 04                	je     f0116f76 <test_calculate_required_frames+0x23f>
f0116f72:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116f76:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0116f7a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116f7d:	89 d0                	mov    %edx,%eax
f0116f7f:	01 c0                	add    %eax,%eax
f0116f81:	01 d0                	add    %edx,%eax
f0116f83:	01 c0                	add    %eax,%eax
f0116f85:	83 ec 04             	sub    $0x4,%esp
f0116f88:	50                   	push   %eax
f0116f89:	68 00 10 00 00       	push   $0x1000
f0116f8e:	ff 75 d8             	pushl  -0x28(%ebp)
f0116f91:	e8 bc 27 ff ff       	call   f0109752 <calculate_required_frames>
f0116f96:	83 c4 10             	add    $0x10,%esp
f0116f99:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0116f9c:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0116fa0:	74 23                	je     f0116fc5 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0116fa2:	83 ec 0c             	sub    $0xc,%esp
f0116fa5:	6a 03                	push   $0x3
f0116fa7:	ff 75 c8             	pushl  -0x38(%ebp)
f0116faa:	68 7c d0 12 f0       	push   $0xf012d07c
f0116faf:	68 49 06 00 00       	push   $0x649
f0116fb4:	68 02 b8 12 f0       	push   $0xf012b802
f0116fb9:	e8 f9 94 fe ff       	call   f01004b7 <_warn>
f0116fbe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116fc1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116fc5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116fc9:	74 04                	je     f0116fcf <test_calculate_required_frames+0x298>
f0116fcb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116fcf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0116fd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116fd6:	89 c2                	mov    %eax,%edx
f0116fd8:	01 d2                	add    %edx,%edx
f0116fda:	01 d0                	add    %edx,%eax
f0116fdc:	83 ec 04             	sub    $0x4,%esp
f0116fdf:	50                   	push   %eax
f0116fe0:	68 00 18 00 00       	push   $0x1800
f0116fe5:	ff 75 d8             	pushl  -0x28(%ebp)
f0116fe8:	e8 65 27 ff ff       	call   f0109752 <calculate_required_frames>
f0116fed:	83 c4 10             	add    $0x10,%esp
f0116ff0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0116ff3:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0116ff7:	74 23                	je     f011701c <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0116ff9:	83 ec 0c             	sub    $0xc,%esp
f0116ffc:	6a 03                	push   $0x3
f0116ffe:	ff 75 c8             	pushl  -0x38(%ebp)
f0117001:	68 7c d0 12 f0       	push   $0xf012d07c
f0117006:	68 53 06 00 00       	push   $0x653
f011700b:	68 02 b8 12 f0       	push   $0xf012b802
f0117010:	e8 a2 94 fe ff       	call   f01004b7 <_warn>
f0117015:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117018:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011701c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117020:	74 04                	je     f0117026 <test_calculate_required_frames+0x2ef>
f0117022:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117026:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011702a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011702d:	89 d0                	mov    %edx,%eax
f011702f:	c1 e0 02             	shl    $0x2,%eax
f0117032:	01 d0                	add    %edx,%eax
f0117034:	01 c0                	add    %eax,%eax
f0117036:	83 ec 04             	sub    $0x4,%esp
f0117039:	50                   	push   %eax
f011703a:	68 00 00 40 00       	push   $0x400000
f011703f:	ff 75 d8             	pushl  -0x28(%ebp)
f0117042:	e8 0b 27 ff ff       	call   f0109752 <calculate_required_frames>
f0117047:	83 c4 10             	add    $0x10,%esp
f011704a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011704d:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0117054:	74 26                	je     f011707c <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0117056:	83 ec 0c             	sub    $0xc,%esp
f0117059:	68 03 0a 00 00       	push   $0xa03
f011705e:	ff 75 c8             	pushl  -0x38(%ebp)
f0117061:	68 7c d0 12 f0       	push   $0xf012d07c
f0117066:	68 5d 06 00 00       	push   $0x65d
f011706b:	68 02 b8 12 f0       	push   $0xf012b802
f0117070:	e8 42 94 fe ff       	call   f01004b7 <_warn>
f0117075:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117078:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011707c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117080:	74 04                	je     f0117086 <test_calculate_required_frames+0x34f>
f0117082:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117086:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011708a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011708d:	01 c0                	add    %eax,%eax
f011708f:	83 ec 04             	sub    $0x4,%esp
f0117092:	50                   	push   %eax
f0117093:	68 00 00 70 00       	push   $0x700000
f0117098:	ff 75 d8             	pushl  -0x28(%ebp)
f011709b:	e8 b2 26 ff ff       	call   f0109752 <calculate_required_frames>
f01170a0:	83 c4 10             	add    $0x10,%esp
f01170a3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01170a6:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01170ad:	74 26                	je     f01170d5 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01170af:	83 ec 0c             	sub    $0xc,%esp
f01170b2:	68 02 02 00 00       	push   $0x202
f01170b7:	ff 75 c8             	pushl  -0x38(%ebp)
f01170ba:	68 7c d0 12 f0       	push   $0xf012d07c
f01170bf:	68 69 06 00 00       	push   $0x669
f01170c4:	68 02 b8 12 f0       	push   $0xf012b802
f01170c9:	e8 e9 93 fe ff       	call   f01004b7 <_warn>
f01170ce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01170d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01170d5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01170d9:	74 04                	je     f01170df <test_calculate_required_frames+0x3a8>
f01170db:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01170df:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01170e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01170e6:	83 ec 04             	sub    $0x4,%esp
f01170e9:	50                   	push   %eax
f01170ea:	68 ff ff 3f 00       	push   $0x3fffff
f01170ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01170f2:	e8 5b 26 ff ff       	call   f0109752 <calculate_required_frames>
f01170f7:	83 c4 10             	add    $0x10,%esp
f01170fa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01170fd:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0117101:	74 23                	je     f0117126 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0117103:	83 ec 0c             	sub    $0xc,%esp
f0117106:	6a 04                	push   $0x4
f0117108:	ff 75 c8             	pushl  -0x38(%ebp)
f011710b:	68 7c d0 12 f0       	push   $0xf012d07c
f0117110:	68 73 06 00 00       	push   $0x673
f0117115:	68 02 b8 12 f0       	push   $0xf012b802
f011711a:	e8 98 93 fe ff       	call   f01004b7 <_warn>
f011711f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117122:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117126:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011712a:	74 04                	je     f0117130 <test_calculate_required_frames+0x3f9>
f011712c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117130:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0117134:	83 ec 0c             	sub    $0xc,%esp
f0117137:	68 b5 cb 12 f0       	push   $0xf012cbb5
f011713c:	e8 2b 9e fe ff       	call   f0100f6c <cprintf>
f0117141:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0117144:	83 ec 0c             	sub    $0xc,%esp
f0117147:	68 d4 d0 12 f0       	push   $0xf012d0d4
f011714c:	e8 1b 9e fe ff       	call   f0100f6c <cprintf>
f0117151:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0117154:	83 ec 04             	sub    $0x4,%esp
f0117157:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011715d:	50                   	push   %eax
f011715e:	68 6e bf 12 f0       	push   $0xf012bf6e
f0117163:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117169:	50                   	push   %eax
f011716a:	e8 bf b6 00 00       	call   f012282e <strcconcat>
f011716f:	83 c4 10             	add    $0x10,%esp
f0117172:	83 ec 0c             	sub    $0xc,%esp
f0117175:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011717b:	50                   	push   %eax
f011717c:	e8 5b ad fe ff       	call   f0101edc <execute_command>
f0117181:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0117184:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117187:	c1 e0 03             	shl    $0x3,%eax
f011718a:	83 ec 04             	sub    $0x4,%esp
f011718d:	50                   	push   %eax
f011718e:	6a 00                	push   $0x0
f0117190:	ff 75 d8             	pushl  -0x28(%ebp)
f0117193:	e8 ba 25 ff ff       	call   f0109752 <calculate_required_frames>
f0117198:	83 c4 10             	add    $0x10,%esp
f011719b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f011719e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01171a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01171a8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01171ab:	74 24                	je     f01171d1 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01171ad:	83 ec 0c             	sub    $0xc,%esp
f01171b0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01171b3:	ff 75 c8             	pushl  -0x38(%ebp)
f01171b6:	68 7c d0 12 f0       	push   $0xf012d07c
f01171bb:	68 87 06 00 00       	push   $0x687
f01171c0:	68 02 b8 12 f0       	push   $0xf012b802
f01171c5:	e8 ed 92 fe ff       	call   f01004b7 <_warn>
f01171ca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01171cd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01171d1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01171d5:	74 04                	je     f01171db <test_calculate_required_frames+0x4a4>
f01171d7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01171db:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01171df:	83 ec 04             	sub    $0x4,%esp
f01171e2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01171e8:	50                   	push   %eax
f01171e9:	68 7b bf 12 f0       	push   $0xf012bf7b
f01171ee:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01171f4:	50                   	push   %eax
f01171f5:	e8 34 b6 00 00       	call   f012282e <strcconcat>
f01171fa:	83 c4 10             	add    $0x10,%esp
f01171fd:	83 ec 0c             	sub    $0xc,%esp
f0117200:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117206:	50                   	push   %eax
f0117207:	e8 d0 ac fe ff       	call   f0101edc <execute_command>
f011720c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011720f:	83 ec 04             	sub    $0x4,%esp
f0117212:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117218:	50                   	push   %eax
f0117219:	68 08 d1 12 f0       	push   $0xf012d108
f011721e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117224:	50                   	push   %eax
f0117225:	e8 04 b6 00 00       	call   f012282e <strcconcat>
f011722a:	83 c4 10             	add    $0x10,%esp
f011722d:	83 ec 0c             	sub    $0xc,%esp
f0117230:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117236:	50                   	push   %eax
f0117237:	e8 a0 ac fe ff       	call   f0101edc <execute_command>
f011723c:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011723f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117242:	c1 e0 03             	shl    $0x3,%eax
f0117245:	83 ec 04             	sub    $0x4,%esp
f0117248:	50                   	push   %eax
f0117249:	6a 00                	push   $0x0
f011724b:	ff 75 d8             	pushl  -0x28(%ebp)
f011724e:	e8 ff 24 ff ff       	call   f0109752 <calculate_required_frames>
f0117253:	83 c4 10             	add    $0x10,%esp
f0117256:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0117259:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0117260:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117263:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117266:	74 24                	je     f011728c <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0117268:	83 ec 0c             	sub    $0xc,%esp
f011726b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011726e:	ff 75 c8             	pushl  -0x38(%ebp)
f0117271:	68 7c d0 12 f0       	push   $0xf012d07c
f0117276:	68 95 06 00 00       	push   $0x695
f011727b:	68 02 b8 12 f0       	push   $0xf012b802
f0117280:	e8 32 92 fe ff       	call   f01004b7 <_warn>
f0117285:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117288:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011728c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117290:	74 04                	je     f0117296 <test_calculate_required_frames+0x55f>
f0117292:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117296:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011729a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011729d:	c1 e0 0a             	shl    $0xa,%eax
f01172a0:	83 ec 04             	sub    $0x4,%esp
f01172a3:	50                   	push   %eax
f01172a4:	6a 00                	push   $0x0
f01172a6:	ff 75 d8             	pushl  -0x28(%ebp)
f01172a9:	e8 a4 24 ff ff       	call   f0109752 <calculate_required_frames>
f01172ae:	83 c4 10             	add    $0x10,%esp
f01172b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01172b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01172b7:	c1 e0 0a             	shl    $0xa,%eax
f01172ba:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01172bd:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01172c4:	99                   	cltd   
f01172c5:	f7 fb                	idiv   %ebx
f01172c7:	89 c1                	mov    %eax,%ecx
f01172c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01172cc:	c1 e0 0a             	shl    $0xa,%eax
f01172cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01172d2:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01172d9:	99                   	cltd   
f01172da:	f7 fe                	idiv   %esi
f01172dc:	01 c8                	add    %ecx,%eax
f01172de:	83 e8 05             	sub    $0x5,%eax
f01172e1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01172e4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01172e7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01172ea:	74 24                	je     f0117310 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01172ec:	83 ec 0c             	sub    $0xc,%esp
f01172ef:	ff 75 c4             	pushl  -0x3c(%ebp)
f01172f2:	ff 75 c8             	pushl  -0x38(%ebp)
f01172f5:	68 7c d0 12 f0       	push   $0xf012d07c
f01172fa:	68 a0 06 00 00       	push   $0x6a0
f01172ff:	68 02 b8 12 f0       	push   $0xf012b802
f0117304:	e8 ae 91 fe ff       	call   f01004b7 <_warn>
f0117309:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011730c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117310:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117314:	74 04                	je     f011731a <test_calculate_required_frames+0x5e3>
f0117316:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011731a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011731e:	83 ec 04             	sub    $0x4,%esp
f0117321:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117327:	50                   	push   %eax
f0117328:	68 14 d1 12 f0       	push   $0xf012d114
f011732d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117333:	50                   	push   %eax
f0117334:	e8 f5 b4 00 00       	call   f012282e <strcconcat>
f0117339:	83 c4 10             	add    $0x10,%esp
f011733c:	83 ec 0c             	sub    $0xc,%esp
f011733f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117345:	50                   	push   %eax
f0117346:	e8 91 ab fe ff       	call   f0101edc <execute_command>
f011734b:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011734e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117351:	89 c2                	mov    %eax,%edx
f0117353:	01 d2                	add    %edx,%edx
f0117355:	01 d0                	add    %edx,%eax
f0117357:	83 ec 04             	sub    $0x4,%esp
f011735a:	50                   	push   %eax
f011735b:	68 00 18 00 00       	push   $0x1800
f0117360:	ff 75 d8             	pushl  -0x28(%ebp)
f0117363:	e8 ea 23 ff ff       	call   f0109752 <calculate_required_frames>
f0117368:	83 c4 10             	add    $0x10,%esp
f011736b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f011736e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0117375:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117378:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011737b:	74 24                	je     f01173a1 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011737d:	83 ec 0c             	sub    $0xc,%esp
f0117380:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117383:	ff 75 c8             	pushl  -0x38(%ebp)
f0117386:	68 7c d0 12 f0       	push   $0xf012d07c
f011738b:	68 af 06 00 00       	push   $0x6af
f0117390:	68 02 b8 12 f0       	push   $0xf012b802
f0117395:	e8 1d 91 fe ff       	call   f01004b7 <_warn>
f011739a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011739d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01173a1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01173a5:	74 04                	je     f01173ab <test_calculate_required_frames+0x674>
f01173a7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01173ab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01173af:	83 ec 04             	sub    $0x4,%esp
f01173b2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01173b8:	50                   	push   %eax
f01173b9:	68 d4 c1 12 f0       	push   $0xf012c1d4
f01173be:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01173c4:	50                   	push   %eax
f01173c5:	e8 64 b4 00 00       	call   f012282e <strcconcat>
f01173ca:	83 c4 10             	add    $0x10,%esp
f01173cd:	83 ec 0c             	sub    $0xc,%esp
f01173d0:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01173d6:	50                   	push   %eax
f01173d7:	e8 00 ab fe ff       	call   f0101edc <execute_command>
f01173dc:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01173df:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01173e2:	89 d0                	mov    %edx,%eax
f01173e4:	c1 e0 02             	shl    $0x2,%eax
f01173e7:	01 d0                	add    %edx,%eax
f01173e9:	01 c0                	add    %eax,%eax
f01173eb:	83 ec 04             	sub    $0x4,%esp
f01173ee:	50                   	push   %eax
f01173ef:	68 00 00 40 00       	push   $0x400000
f01173f4:	ff 75 d8             	pushl  -0x28(%ebp)
f01173f7:	e8 56 23 ff ff       	call   f0109752 <calculate_required_frames>
f01173fc:	83 c4 10             	add    $0x10,%esp
f01173ff:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0117402:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0117409:	74 26                	je     f0117431 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011740b:	83 ec 0c             	sub    $0xc,%esp
f011740e:	68 03 0a 00 00       	push   $0xa03
f0117413:	ff 75 c8             	pushl  -0x38(%ebp)
f0117416:	68 7c d0 12 f0       	push   $0xf012d07c
f011741b:	68 bb 06 00 00       	push   $0x6bb
f0117420:	68 02 b8 12 f0       	push   $0xf012b802
f0117425:	e8 8d 90 fe ff       	call   f01004b7 <_warn>
f011742a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011742d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117431:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117435:	74 04                	je     f011743b <test_calculate_required_frames+0x704>
f0117437:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011743b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011743f:	83 ec 04             	sub    $0x4,%esp
f0117442:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117448:	50                   	push   %eax
f0117449:	68 de c1 12 f0       	push   $0xf012c1de
f011744e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117454:	50                   	push   %eax
f0117455:	e8 d4 b3 00 00       	call   f012282e <strcconcat>
f011745a:	83 c4 10             	add    $0x10,%esp
f011745d:	83 ec 0c             	sub    $0xc,%esp
f0117460:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117466:	50                   	push   %eax
f0117467:	e8 70 aa fe ff       	call   f0101edc <execute_command>
f011746c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011746f:	83 ec 04             	sub    $0x4,%esp
f0117472:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117478:	50                   	push   %eax
f0117479:	68 1c d1 12 f0       	push   $0xf012d11c
f011747e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117484:	50                   	push   %eax
f0117485:	e8 a4 b3 00 00       	call   f012282e <strcconcat>
f011748a:	83 c4 10             	add    $0x10,%esp
f011748d:	83 ec 0c             	sub    $0xc,%esp
f0117490:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117496:	50                   	push   %eax
f0117497:	e8 40 aa fe ff       	call   f0101edc <execute_command>
f011749c:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011749f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01174a2:	01 c0                	add    %eax,%eax
f01174a4:	83 ec 04             	sub    $0x4,%esp
f01174a7:	50                   	push   %eax
f01174a8:	68 00 00 70 00       	push   $0x700000
f01174ad:	ff 75 d8             	pushl  -0x28(%ebp)
f01174b0:	e8 9d 22 ff ff       	call   f0109752 <calculate_required_frames>
f01174b5:	83 c4 10             	add    $0x10,%esp
f01174b8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01174bb:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01174c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01174c5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01174c8:	74 24                	je     f01174ee <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01174ca:	83 ec 0c             	sub    $0xc,%esp
f01174cd:	ff 75 c4             	pushl  -0x3c(%ebp)
f01174d0:	ff 75 c8             	pushl  -0x38(%ebp)
f01174d3:	68 7c d0 12 f0       	push   $0xf012d07c
f01174d8:	68 cb 06 00 00       	push   $0x6cb
f01174dd:	68 02 b8 12 f0       	push   $0xf012b802
f01174e2:	e8 d0 8f fe ff       	call   f01004b7 <_warn>
f01174e7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01174ea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01174ee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01174f2:	74 04                	je     f01174f8 <test_calculate_required_frames+0x7c1>
f01174f4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01174f8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01174fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01174ff:	83 ec 04             	sub    $0x4,%esp
f0117502:	50                   	push   %eax
f0117503:	68 ff ff 3f 00       	push   $0x3fffff
f0117508:	ff 75 d8             	pushl  -0x28(%ebp)
f011750b:	e8 42 22 ff ff       	call   f0109752 <calculate_required_frames>
f0117510:	83 c4 10             	add    $0x10,%esp
f0117513:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0117516:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011751d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117520:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117523:	74 24                	je     f0117549 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0117525:	83 ec 0c             	sub    $0xc,%esp
f0117528:	ff 75 c4             	pushl  -0x3c(%ebp)
f011752b:	ff 75 c8             	pushl  -0x38(%ebp)
f011752e:	68 7c d0 12 f0       	push   $0xf012d07c
f0117533:	68 d6 06 00 00       	push   $0x6d6
f0117538:	68 02 b8 12 f0       	push   $0xf012b802
f011753d:	e8 75 8f fe ff       	call   f01004b7 <_warn>
f0117542:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117545:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117549:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011754d:	74 04                	je     f0117553 <test_calculate_required_frames+0x81c>
f011754f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117553:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0117557:	83 ec 0c             	sub    $0xc,%esp
f011755a:	68 8f c1 12 f0       	push   $0xf012c18f
f011755f:	e8 08 9a fe ff       	call   f0100f6c <cprintf>
f0117564:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0117567:	83 ec 08             	sub    $0x8,%esp
f011756a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011756d:	68 28 d1 12 f0       	push   $0xf012d128
f0117572:	e8 f5 99 fe ff       	call   f0100f6c <cprintf>
f0117577:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011757a:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011757e:	75 10                	jne    f0117590 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0117580:	83 ec 0c             	sub    $0xc,%esp
f0117583:	68 68 d1 12 f0       	push   $0xf012d168
f0117588:	e8 df 99 fe ff       	call   f0100f6c <cprintf>
f011758d:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0117590:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f0117595:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0117598:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011759b:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011759e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01175a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01175a6:	5b                   	pop    %ebx
f01175a7:	5e                   	pop    %esi
f01175a8:	5f                   	pop    %edi
f01175a9:	5d                   	pop    %ebp
f01175aa:	c3                   	ret    

f01175ab <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01175ab:	55                   	push   %ebp
f01175ac:	89 e5                	mov    %esp,%ebp
f01175ae:	57                   	push   %edi
f01175af:	56                   	push   %esi
f01175b0:	53                   	push   %ebx
f01175b1:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01175b7:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01175ba:	bb 04 bf 12 f0       	mov    $0xf012bf04,%ebx
f01175bf:	ba 0f 00 00 00       	mov    $0xf,%edx
f01175c4:	89 c7                	mov    %eax,%edi
f01175c6:	89 de                	mov    %ebx,%esi
f01175c8:	89 d1                	mov    %edx,%ecx
f01175ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01175cc:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01175cf:	b9 23 00 00 00       	mov    $0x23,%ecx
f01175d4:	b0 00                	mov    $0x0,%al
f01175d6:	89 d7                	mov    %edx,%edi
f01175d8:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01175da:	6a 00                	push   $0x0
f01175dc:	6a 0a                	push   $0xa
f01175de:	6a 14                	push   $0x14
f01175e0:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01175e3:	50                   	push   %eax
f01175e4:	e8 87 24 ff ff       	call   f0109a70 <env_create>
f01175e9:	83 c4 10             	add    $0x10,%esp
f01175ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01175ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01175f2:	8b 40 64             	mov    0x64(%eax),%eax
f01175f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01175f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01175fb:	8b 40 68             	mov    0x68(%eax),%eax
f01175fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117601:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117604:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0117607:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011760e:	75 70 20 
f0117611:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0117618:	00 00 00 
f011761b:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011761e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0117623:	b8 00 00 00 00       	mov    $0x0,%eax
f0117628:	89 d7                	mov    %edx,%edi
f011762a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011762c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011762f:	8b 40 10             	mov    0x10(%eax),%eax
f0117632:	83 ec 08             	sub    $0x8,%esp
f0117635:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011763b:	52                   	push   %edx
f011763c:	50                   	push   %eax
f011763d:	e8 13 b1 00 00       	call   f0122755 <ltostr>
f0117642:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0117645:	83 ec 04             	sub    $0x4,%esp
f0117648:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011764e:	50                   	push   %eax
f011764f:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0117655:	50                   	push   %eax
f0117656:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011765c:	50                   	push   %eax
f011765d:	e8 cc b1 00 00       	call   f012282e <strcconcat>
f0117662:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0117665:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011766c:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0117673:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f011767a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f011767e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117685:	00 00 00 
	uint32 num_tables = 0;
f0117688:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011768f:	00 00 00 
	ClearUserSpace(proc_directory);
f0117692:	83 ec 0c             	sub    $0xc,%esp
f0117695:	ff 75 d8             	pushl  -0x28(%ebp)
f0117698:	e8 d8 11 00 00       	call   f0118875 <ClearUserSpace>
f011769d:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01176a0:	83 ec 0c             	sub    $0xc,%esp
f01176a3:	68 48 d0 12 f0       	push   $0xf012d048
f01176a8:	e8 bf 98 fe ff       	call   f0100f6c <cprintf>
f01176ad:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01176b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176b3:	c1 e0 03             	shl    $0x3,%eax
f01176b6:	89 c2                	mov    %eax,%edx
f01176b8:	83 ec 0c             	sub    $0xc,%esp
f01176bb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01176c1:	50                   	push   %eax
f01176c2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01176c8:	50                   	push   %eax
f01176c9:	52                   	push   %edx
f01176ca:	6a 00                	push   $0x0
f01176cc:	ff 75 d8             	pushl  -0x28(%ebp)
f01176cf:	e8 64 20 ff ff       	call   f0109738 <calculate_allocated_space>
f01176d4:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01176d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01176dd:	85 c0                	test   %eax,%eax
f01176df:	74 27                	je     f0117708 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01176e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01176e7:	83 ec 0c             	sub    $0xc,%esp
f01176ea:	6a 00                	push   $0x0
f01176ec:	50                   	push   %eax
f01176ed:	68 b4 d1 12 f0       	push   $0xf012d1b4
f01176f2:	68 0b 07 00 00       	push   $0x70b
f01176f7:	68 02 b8 12 f0       	push   $0xf012b802
f01176fc:	e8 b6 8d fe ff       	call   f01004b7 <_warn>
f0117701:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117704:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117708:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011770e:	85 c0                	test   %eax,%eax
f0117710:	74 27                	je     f0117739 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117712:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117718:	83 ec 0c             	sub    $0xc,%esp
f011771b:	6a 00                	push   $0x0
f011771d:	50                   	push   %eax
f011771e:	68 14 d2 12 f0       	push   $0xf012d214
f0117723:	68 10 07 00 00       	push   $0x710
f0117728:	68 02 b8 12 f0       	push   $0xf012b802
f011772d:	e8 85 8d fe ff       	call   f01004b7 <_warn>
f0117732:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117735:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117739:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011773d:	74 04                	je     f0117743 <test_calculate_allocated_space+0x198>
f011773f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117743:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0117747:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011774e:	00 00 00 
		num_pages = 0;
f0117751:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117758:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f011775b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011775e:	c1 e0 02             	shl    $0x2,%eax
f0117761:	89 c2                	mov    %eax,%edx
f0117763:	83 ec 0c             	sub    $0xc,%esp
f0117766:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011776c:	50                   	push   %eax
f011776d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117773:	50                   	push   %eax
f0117774:	52                   	push   %edx
f0117775:	6a 00                	push   $0x0
f0117777:	ff 75 d8             	pushl  -0x28(%ebp)
f011777a:	e8 b9 1f ff ff       	call   f0109738 <calculate_allocated_space>
f011777f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117782:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117788:	85 c0                	test   %eax,%eax
f011778a:	74 27                	je     f01177b3 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011778c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117792:	83 ec 0c             	sub    $0xc,%esp
f0117795:	6a 00                	push   $0x0
f0117797:	50                   	push   %eax
f0117798:	68 b4 d1 12 f0       	push   $0xf012d1b4
f011779d:	68 1c 07 00 00       	push   $0x71c
f01177a2:	68 02 b8 12 f0       	push   $0xf012b802
f01177a7:	e8 0b 8d fe ff       	call   f01004b7 <_warn>
f01177ac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01177af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01177b3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01177b9:	85 c0                	test   %eax,%eax
f01177bb:	74 27                	je     f01177e4 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01177bd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01177c3:	83 ec 0c             	sub    $0xc,%esp
f01177c6:	6a 00                	push   $0x0
f01177c8:	50                   	push   %eax
f01177c9:	68 14 d2 12 f0       	push   $0xf012d214
f01177ce:	68 21 07 00 00       	push   $0x721
f01177d3:	68 02 b8 12 f0       	push   $0xf012b802
f01177d8:	e8 da 8c fe ff       	call   f01004b7 <_warn>
f01177dd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01177e0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01177e4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01177e8:	74 04                	je     f01177ee <test_calculate_allocated_space+0x243>
f01177ea:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01177ee:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01177f2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01177f9:	00 00 00 
		num_pages = 0;
f01177fc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117803:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0117806:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117809:	c1 e0 0a             	shl    $0xa,%eax
f011780c:	89 c2                	mov    %eax,%edx
f011780e:	83 ec 0c             	sub    $0xc,%esp
f0117811:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117817:	50                   	push   %eax
f0117818:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011781e:	50                   	push   %eax
f011781f:	52                   	push   %edx
f0117820:	6a 00                	push   $0x0
f0117822:	ff 75 d8             	pushl  -0x28(%ebp)
f0117825:	e8 0e 1f ff ff       	call   f0109738 <calculate_allocated_space>
f011782a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011782d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117833:	85 c0                	test   %eax,%eax
f0117835:	74 27                	je     f011785e <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117837:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011783d:	83 ec 0c             	sub    $0xc,%esp
f0117840:	6a 00                	push   $0x0
f0117842:	50                   	push   %eax
f0117843:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117848:	68 2d 07 00 00       	push   $0x72d
f011784d:	68 02 b8 12 f0       	push   $0xf012b802
f0117852:	e8 60 8c fe ff       	call   f01004b7 <_warn>
f0117857:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011785a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011785e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117864:	85 c0                	test   %eax,%eax
f0117866:	74 27                	je     f011788f <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117868:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011786e:	83 ec 0c             	sub    $0xc,%esp
f0117871:	6a 00                	push   $0x0
f0117873:	50                   	push   %eax
f0117874:	68 14 d2 12 f0       	push   $0xf012d214
f0117879:	68 32 07 00 00       	push   $0x732
f011787e:	68 02 b8 12 f0       	push   $0xf012b802
f0117883:	e8 2f 8c fe ff       	call   f01004b7 <_warn>
f0117888:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011788b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011788f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117893:	74 04                	je     f0117899 <test_calculate_allocated_space+0x2ee>
f0117895:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117899:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f011789d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01178a4:	00 00 00 
		num_pages = 0;
f01178a7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01178ae:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01178b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01178b4:	89 d0                	mov    %edx,%eax
f01178b6:	01 c0                	add    %eax,%eax
f01178b8:	01 d0                	add    %edx,%eax
f01178ba:	01 c0                	add    %eax,%eax
f01178bc:	05 00 10 00 00       	add    $0x1000,%eax
f01178c1:	89 c2                	mov    %eax,%edx
f01178c3:	83 ec 0c             	sub    $0xc,%esp
f01178c6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01178cc:	50                   	push   %eax
f01178cd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01178d3:	50                   	push   %eax
f01178d4:	52                   	push   %edx
f01178d5:	68 00 10 00 00       	push   $0x1000
f01178da:	ff 75 d8             	pushl  -0x28(%ebp)
f01178dd:	e8 56 1e ff ff       	call   f0109738 <calculate_allocated_space>
f01178e2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01178e5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01178eb:	85 c0                	test   %eax,%eax
f01178ed:	74 27                	je     f0117916 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01178ef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01178f5:	83 ec 0c             	sub    $0xc,%esp
f01178f8:	6a 00                	push   $0x0
f01178fa:	50                   	push   %eax
f01178fb:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117900:	68 3f 07 00 00       	push   $0x73f
f0117905:	68 02 b8 12 f0       	push   $0xf012b802
f011790a:	e8 a8 8b fe ff       	call   f01004b7 <_warn>
f011790f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117912:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117916:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011791c:	85 c0                	test   %eax,%eax
f011791e:	74 27                	je     f0117947 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117920:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117926:	83 ec 0c             	sub    $0xc,%esp
f0117929:	6a 00                	push   $0x0
f011792b:	50                   	push   %eax
f011792c:	68 14 d2 12 f0       	push   $0xf012d214
f0117931:	68 44 07 00 00       	push   $0x744
f0117936:	68 02 b8 12 f0       	push   $0xf012b802
f011793b:	e8 77 8b fe ff       	call   f01004b7 <_warn>
f0117940:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117943:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117947:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011794b:	74 04                	je     f0117951 <test_calculate_allocated_space+0x3a6>
f011794d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117951:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0117955:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011795c:	00 00 00 
		num_pages = 0;
f011795f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117966:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0117969:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011796c:	89 c2                	mov    %eax,%edx
f011796e:	01 d2                	add    %edx,%edx
f0117970:	01 d0                	add    %edx,%eax
f0117972:	05 00 18 00 00       	add    $0x1800,%eax
f0117977:	89 c2                	mov    %eax,%edx
f0117979:	83 ec 0c             	sub    $0xc,%esp
f011797c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117982:	50                   	push   %eax
f0117983:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117989:	50                   	push   %eax
f011798a:	52                   	push   %edx
f011798b:	68 00 18 00 00       	push   $0x1800
f0117990:	ff 75 d8             	pushl  -0x28(%ebp)
f0117993:	e8 a0 1d ff ff       	call   f0109738 <calculate_allocated_space>
f0117998:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011799b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01179a1:	85 c0                	test   %eax,%eax
f01179a3:	74 27                	je     f01179cc <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01179a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01179ab:	83 ec 0c             	sub    $0xc,%esp
f01179ae:	6a 00                	push   $0x0
f01179b0:	50                   	push   %eax
f01179b1:	68 b4 d1 12 f0       	push   $0xf012d1b4
f01179b6:	68 50 07 00 00       	push   $0x750
f01179bb:	68 02 b8 12 f0       	push   $0xf012b802
f01179c0:	e8 f2 8a fe ff       	call   f01004b7 <_warn>
f01179c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01179c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01179cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179d2:	85 c0                	test   %eax,%eax
f01179d4:	74 27                	je     f01179fd <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01179d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179dc:	83 ec 0c             	sub    $0xc,%esp
f01179df:	6a 00                	push   $0x0
f01179e1:	50                   	push   %eax
f01179e2:	68 14 d2 12 f0       	push   $0xf012d214
f01179e7:	68 55 07 00 00       	push   $0x755
f01179ec:	68 02 b8 12 f0       	push   $0xf012b802
f01179f1:	e8 c1 8a fe ff       	call   f01004b7 <_warn>
f01179f6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01179f9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01179fd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117a01:	74 04                	je     f0117a07 <test_calculate_allocated_space+0x45c>
f0117a03:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117a07:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0117a0b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117a12:	00 00 00 
		num_pages = 0;
f0117a15:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117a1c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0117a1f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117a22:	89 d0                	mov    %edx,%eax
f0117a24:	c1 e0 02             	shl    $0x2,%eax
f0117a27:	01 d0                	add    %edx,%eax
f0117a29:	01 c0                	add    %eax,%eax
f0117a2b:	05 00 00 40 00       	add    $0x400000,%eax
f0117a30:	89 c2                	mov    %eax,%edx
f0117a32:	83 ec 0c             	sub    $0xc,%esp
f0117a35:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117a3b:	50                   	push   %eax
f0117a3c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117a42:	50                   	push   %eax
f0117a43:	52                   	push   %edx
f0117a44:	68 00 00 40 00       	push   $0x400000
f0117a49:	ff 75 d8             	pushl  -0x28(%ebp)
f0117a4c:	e8 e7 1c ff ff       	call   f0109738 <calculate_allocated_space>
f0117a51:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117a54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117a5a:	85 c0                	test   %eax,%eax
f0117a5c:	74 27                	je     f0117a85 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117a5e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117a64:	83 ec 0c             	sub    $0xc,%esp
f0117a67:	6a 00                	push   $0x0
f0117a69:	50                   	push   %eax
f0117a6a:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117a6f:	68 61 07 00 00       	push   $0x761
f0117a74:	68 02 b8 12 f0       	push   $0xf012b802
f0117a79:	e8 39 8a fe ff       	call   f01004b7 <_warn>
f0117a7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117a81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117a85:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a8b:	85 c0                	test   %eax,%eax
f0117a8d:	74 27                	je     f0117ab6 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117a8f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a95:	83 ec 0c             	sub    $0xc,%esp
f0117a98:	6a 00                	push   $0x0
f0117a9a:	50                   	push   %eax
f0117a9b:	68 14 d2 12 f0       	push   $0xf012d214
f0117aa0:	68 66 07 00 00       	push   $0x766
f0117aa5:	68 02 b8 12 f0       	push   $0xf012b802
f0117aaa:	e8 08 8a fe ff       	call   f01004b7 <_warn>
f0117aaf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117ab2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117ab6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117aba:	74 04                	je     f0117ac0 <test_calculate_allocated_space+0x515>
f0117abc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117ac0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0117ac4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117acb:	00 00 00 
		num_pages = 0;
f0117ace:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117ad5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0117ad8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117adb:	05 00 00 38 00       	add    $0x380000,%eax
f0117ae0:	01 c0                	add    %eax,%eax
f0117ae2:	89 c2                	mov    %eax,%edx
f0117ae4:	83 ec 0c             	sub    $0xc,%esp
f0117ae7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117aed:	50                   	push   %eax
f0117aee:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117af4:	50                   	push   %eax
f0117af5:	52                   	push   %edx
f0117af6:	68 00 00 70 00       	push   $0x700000
f0117afb:	ff 75 d8             	pushl  -0x28(%ebp)
f0117afe:	e8 35 1c ff ff       	call   f0109738 <calculate_allocated_space>
f0117b03:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117b06:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117b0c:	85 c0                	test   %eax,%eax
f0117b0e:	74 27                	je     f0117b37 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117b10:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117b16:	83 ec 0c             	sub    $0xc,%esp
f0117b19:	6a 00                	push   $0x0
f0117b1b:	50                   	push   %eax
f0117b1c:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117b21:	68 73 07 00 00       	push   $0x773
f0117b26:	68 02 b8 12 f0       	push   $0xf012b802
f0117b2b:	e8 87 89 fe ff       	call   f01004b7 <_warn>
f0117b30:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117b33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117b37:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b3d:	85 c0                	test   %eax,%eax
f0117b3f:	74 27                	je     f0117b68 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117b41:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b47:	83 ec 0c             	sub    $0xc,%esp
f0117b4a:	6a 00                	push   $0x0
f0117b4c:	50                   	push   %eax
f0117b4d:	68 14 d2 12 f0       	push   $0xf012d214
f0117b52:	68 78 07 00 00       	push   $0x778
f0117b57:	68 02 b8 12 f0       	push   $0xf012b802
f0117b5c:	e8 56 89 fe ff       	call   f01004b7 <_warn>
f0117b61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117b64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117b68:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117b6c:	74 04                	je     f0117b72 <test_calculate_allocated_space+0x5c7>
f0117b6e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117b72:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0117b76:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117b7d:	00 00 00 
		num_pages = 0;
f0117b80:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117b87:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0117b8a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b8d:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0117b92:	89 c2                	mov    %eax,%edx
f0117b94:	83 ec 0c             	sub    $0xc,%esp
f0117b97:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117b9d:	50                   	push   %eax
f0117b9e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117ba4:	50                   	push   %eax
f0117ba5:	52                   	push   %edx
f0117ba6:	68 ff ff 3f 00       	push   $0x3fffff
f0117bab:	ff 75 d8             	pushl  -0x28(%ebp)
f0117bae:	e8 85 1b ff ff       	call   f0109738 <calculate_allocated_space>
f0117bb3:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117bb6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117bbc:	85 c0                	test   %eax,%eax
f0117bbe:	74 27                	je     f0117be7 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117bc0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117bc6:	83 ec 0c             	sub    $0xc,%esp
f0117bc9:	6a 00                	push   $0x0
f0117bcb:	50                   	push   %eax
f0117bcc:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117bd1:	68 84 07 00 00       	push   $0x784
f0117bd6:	68 02 b8 12 f0       	push   $0xf012b802
f0117bdb:	e8 d7 88 fe ff       	call   f01004b7 <_warn>
f0117be0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117be3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117be7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117bed:	85 c0                	test   %eax,%eax
f0117bef:	74 27                	je     f0117c18 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117bf1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117bf7:	83 ec 0c             	sub    $0xc,%esp
f0117bfa:	6a 00                	push   $0x0
f0117bfc:	50                   	push   %eax
f0117bfd:	68 14 d2 12 f0       	push   $0xf012d214
f0117c02:	68 89 07 00 00       	push   $0x789
f0117c07:	68 02 b8 12 f0       	push   $0xf012b802
f0117c0c:	e8 a6 88 fe ff       	call   f01004b7 <_warn>
f0117c11:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117c14:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117c18:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117c1c:	74 04                	je     f0117c22 <test_calculate_allocated_space+0x677>
f0117c1e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117c22:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0117c26:	83 ec 0c             	sub    $0xc,%esp
f0117c29:	68 b5 cb 12 f0       	push   $0xf012cbb5
f0117c2e:	e8 39 93 fe ff       	call   f0100f6c <cprintf>
f0117c33:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0117c36:	83 ec 0c             	sub    $0xc,%esp
f0117c39:	68 d4 d0 12 f0       	push   $0xf012d0d4
f0117c3e:	e8 29 93 fe ff       	call   f0100f6c <cprintf>
f0117c43:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0117c46:	83 ec 04             	sub    $0x4,%esp
f0117c49:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0117c4f:	50                   	push   %eax
f0117c50:	68 6e bf 12 f0       	push   $0xf012bf6e
f0117c55:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117c5b:	50                   	push   %eax
f0117c5c:	e8 cd ab 00 00       	call   f012282e <strcconcat>
f0117c61:	83 c4 10             	add    $0x10,%esp
f0117c64:	83 ec 0c             	sub    $0xc,%esp
f0117c67:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0117c6d:	50                   	push   %eax
f0117c6e:	e8 69 a2 fe ff       	call   f0101edc <execute_command>
f0117c73:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0117c76:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117c7d:	00 00 00 
		num_pages = 0;
f0117c80:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117c87:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0117c8a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c8d:	c1 e0 03             	shl    $0x3,%eax
f0117c90:	89 c2                	mov    %eax,%edx
f0117c92:	83 ec 0c             	sub    $0xc,%esp
f0117c95:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117c9b:	50                   	push   %eax
f0117c9c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117ca2:	50                   	push   %eax
f0117ca3:	52                   	push   %edx
f0117ca4:	6a 00                	push   $0x0
f0117ca6:	ff 75 d8             	pushl  -0x28(%ebp)
f0117ca9:	e8 8a 1a ff ff       	call   f0109738 <calculate_allocated_space>
f0117cae:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0117cb1:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0117cb8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117cbf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117cc5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117cc8:	74 28                	je     f0117cf2 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117cca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117cd0:	83 ec 0c             	sub    $0xc,%esp
f0117cd3:	ff 75 c8             	pushl  -0x38(%ebp)
f0117cd6:	50                   	push   %eax
f0117cd7:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117cdc:	68 a0 07 00 00       	push   $0x7a0
f0117ce1:	68 02 b8 12 f0       	push   $0xf012b802
f0117ce6:	e8 cc 87 fe ff       	call   f01004b7 <_warn>
f0117ceb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117cee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117cf2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117cf8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117cfb:	74 28                	je     f0117d25 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117cfd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117d03:	83 ec 0c             	sub    $0xc,%esp
f0117d06:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117d09:	50                   	push   %eax
f0117d0a:	68 14 d2 12 f0       	push   $0xf012d214
f0117d0f:	68 a5 07 00 00       	push   $0x7a5
f0117d14:	68 02 b8 12 f0       	push   $0xf012b802
f0117d19:	e8 99 87 fe ff       	call   f01004b7 <_warn>
f0117d1e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117d21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117d25:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117d29:	74 04                	je     f0117d2f <test_calculate_allocated_space+0x784>
f0117d2b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117d2f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0117d33:	83 ec 04             	sub    $0x4,%esp
f0117d36:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117d3c:	50                   	push   %eax
f0117d3d:	68 7b bf 12 f0       	push   $0xf012bf7b
f0117d42:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117d48:	50                   	push   %eax
f0117d49:	e8 e0 aa 00 00       	call   f012282e <strcconcat>
f0117d4e:	83 c4 10             	add    $0x10,%esp
f0117d51:	83 ec 0c             	sub    $0xc,%esp
f0117d54:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117d5a:	50                   	push   %eax
f0117d5b:	e8 7c a1 fe ff       	call   f0101edc <execute_command>
f0117d60:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0117d63:	83 ec 04             	sub    $0x4,%esp
f0117d66:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0117d6c:	50                   	push   %eax
f0117d6d:	68 08 d1 12 f0       	push   $0xf012d108
f0117d72:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117d78:	50                   	push   %eax
f0117d79:	e8 b0 aa 00 00       	call   f012282e <strcconcat>
f0117d7e:	83 c4 10             	add    $0x10,%esp
f0117d81:	83 ec 0c             	sub    $0xc,%esp
f0117d84:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0117d8a:	50                   	push   %eax
f0117d8b:	e8 4c a1 fe ff       	call   f0101edc <execute_command>
f0117d90:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0117d93:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117d9a:	00 00 00 
		num_pages = 0;
f0117d9d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117da4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0117da7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117daa:	c1 e0 03             	shl    $0x3,%eax
f0117dad:	89 c2                	mov    %eax,%edx
f0117daf:	83 ec 0c             	sub    $0xc,%esp
f0117db2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117db8:	50                   	push   %eax
f0117db9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117dbf:	50                   	push   %eax
f0117dc0:	52                   	push   %edx
f0117dc1:	6a 00                	push   $0x0
f0117dc3:	ff 75 d8             	pushl  -0x28(%ebp)
f0117dc6:	e8 6d 19 ff ff       	call   f0109738 <calculate_allocated_space>
f0117dcb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0117dce:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0117dd5:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117ddc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117de2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117de5:	74 28                	je     f0117e0f <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117de7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117ded:	83 ec 0c             	sub    $0xc,%esp
f0117df0:	ff 75 c8             	pushl  -0x38(%ebp)
f0117df3:	50                   	push   %eax
f0117df4:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117df9:	68 b6 07 00 00       	push   $0x7b6
f0117dfe:	68 02 b8 12 f0       	push   $0xf012b802
f0117e03:	e8 af 86 fe ff       	call   f01004b7 <_warn>
f0117e08:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117e0b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117e0f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117e15:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117e18:	74 28                	je     f0117e42 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117e1a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117e20:	83 ec 0c             	sub    $0xc,%esp
f0117e23:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117e26:	50                   	push   %eax
f0117e27:	68 14 d2 12 f0       	push   $0xf012d214
f0117e2c:	68 bb 07 00 00       	push   $0x7bb
f0117e31:	68 02 b8 12 f0       	push   $0xf012b802
f0117e36:	e8 7c 86 fe ff       	call   f01004b7 <_warn>
f0117e3b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117e3e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117e42:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117e46:	74 04                	je     f0117e4c <test_calculate_allocated_space+0x8a1>
f0117e48:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117e4c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0117e50:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117e57:	00 00 00 
		num_pages = 0;
f0117e5a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117e61:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0117e64:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117e67:	c1 e0 0a             	shl    $0xa,%eax
f0117e6a:	89 c2                	mov    %eax,%edx
f0117e6c:	83 ec 0c             	sub    $0xc,%esp
f0117e6f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117e75:	50                   	push   %eax
f0117e76:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117e7c:	50                   	push   %eax
f0117e7d:	52                   	push   %edx
f0117e7e:	6a 00                	push   $0x0
f0117e80:	ff 75 d8             	pushl  -0x28(%ebp)
f0117e83:	e8 b0 18 ff ff       	call   f0109738 <calculate_allocated_space>
f0117e88:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0117e8b:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0117e92:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117e99:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117e9f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117ea2:	74 28                	je     f0117ecc <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117ea4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117eaa:	83 ec 0c             	sub    $0xc,%esp
f0117ead:	ff 75 c8             	pushl  -0x38(%ebp)
f0117eb0:	50                   	push   %eax
f0117eb1:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117eb6:	68 c9 07 00 00       	push   $0x7c9
f0117ebb:	68 02 b8 12 f0       	push   $0xf012b802
f0117ec0:	e8 f2 85 fe ff       	call   f01004b7 <_warn>
f0117ec5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117ec8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117ecc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117ed2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117ed5:	74 28                	je     f0117eff <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117ed7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117edd:	83 ec 0c             	sub    $0xc,%esp
f0117ee0:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117ee3:	50                   	push   %eax
f0117ee4:	68 14 d2 12 f0       	push   $0xf012d214
f0117ee9:	68 ce 07 00 00       	push   $0x7ce
f0117eee:	68 02 b8 12 f0       	push   $0xf012b802
f0117ef3:	e8 bf 85 fe ff       	call   f01004b7 <_warn>
f0117ef8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117efb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117eff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117f03:	74 04                	je     f0117f09 <test_calculate_allocated_space+0x95e>
f0117f05:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117f09:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0117f0d:	83 ec 04             	sub    $0x4,%esp
f0117f10:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117f16:	50                   	push   %eax
f0117f17:	68 14 d1 12 f0       	push   $0xf012d114
f0117f1c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117f22:	50                   	push   %eax
f0117f23:	e8 06 a9 00 00       	call   f012282e <strcconcat>
f0117f28:	83 c4 10             	add    $0x10,%esp
f0117f2b:	83 ec 0c             	sub    $0xc,%esp
f0117f2e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117f34:	50                   	push   %eax
f0117f35:	e8 a2 9f fe ff       	call   f0101edc <execute_command>
f0117f3a:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0117f3d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117f44:	00 00 00 
		num_pages = 0;
f0117f47:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117f4e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0117f51:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f54:	89 c2                	mov    %eax,%edx
f0117f56:	01 d2                	add    %edx,%edx
f0117f58:	01 d0                	add    %edx,%eax
f0117f5a:	05 00 18 00 00       	add    $0x1800,%eax
f0117f5f:	89 c2                	mov    %eax,%edx
f0117f61:	83 ec 0c             	sub    $0xc,%esp
f0117f64:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117f6a:	50                   	push   %eax
f0117f6b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117f71:	50                   	push   %eax
f0117f72:	52                   	push   %edx
f0117f73:	68 00 18 00 00       	push   $0x1800
f0117f78:	ff 75 d8             	pushl  -0x28(%ebp)
f0117f7b:	e8 b8 17 ff ff       	call   f0109738 <calculate_allocated_space>
f0117f80:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0117f83:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0117f8a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117f91:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117f97:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117f9a:	74 28                	je     f0117fc4 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117f9c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117fa2:	83 ec 0c             	sub    $0xc,%esp
f0117fa5:	ff 75 c8             	pushl  -0x38(%ebp)
f0117fa8:	50                   	push   %eax
f0117fa9:	68 b4 d1 12 f0       	push   $0xf012d1b4
f0117fae:	68 df 07 00 00       	push   $0x7df
f0117fb3:	68 02 b8 12 f0       	push   $0xf012b802
f0117fb8:	e8 fa 84 fe ff       	call   f01004b7 <_warn>
f0117fbd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117fc0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117fc4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117fca:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117fcd:	74 28                	je     f0117ff7 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117fcf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117fd5:	83 ec 0c             	sub    $0xc,%esp
f0117fd8:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117fdb:	50                   	push   %eax
f0117fdc:	68 14 d2 12 f0       	push   $0xf012d214
f0117fe1:	68 e4 07 00 00       	push   $0x7e4
f0117fe6:	68 02 b8 12 f0       	push   $0xf012b802
f0117feb:	e8 c7 84 fe ff       	call   f01004b7 <_warn>
f0117ff0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117ff3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117ff7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117ffb:	74 04                	je     f0118001 <test_calculate_allocated_space+0xa56>
f0117ffd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0118001:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0118005:	83 ec 04             	sub    $0x4,%esp
f0118008:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011800e:	50                   	push   %eax
f011800f:	68 d4 c1 12 f0       	push   $0xf012c1d4
f0118014:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011801a:	50                   	push   %eax
f011801b:	e8 0e a8 00 00       	call   f012282e <strcconcat>
f0118020:	83 c4 10             	add    $0x10,%esp
f0118023:	83 ec 0c             	sub    $0xc,%esp
f0118026:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011802c:	50                   	push   %eax
f011802d:	e8 aa 9e fe ff       	call   f0101edc <execute_command>
f0118032:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0118035:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011803c:	00 00 00 
		num_pages = 0;
f011803f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0118046:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0118049:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011804c:	89 d0                	mov    %edx,%eax
f011804e:	c1 e0 02             	shl    $0x2,%eax
f0118051:	01 d0                	add    %edx,%eax
f0118053:	01 c0                	add    %eax,%eax
f0118055:	05 00 00 40 00       	add    $0x400000,%eax
f011805a:	89 c2                	mov    %eax,%edx
f011805c:	83 ec 0c             	sub    $0xc,%esp
f011805f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0118065:	50                   	push   %eax
f0118066:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011806c:	50                   	push   %eax
f011806d:	52                   	push   %edx
f011806e:	68 00 00 40 00       	push   $0x400000
f0118073:	ff 75 d8             	pushl  -0x28(%ebp)
f0118076:	e8 bd 16 ff ff       	call   f0109738 <calculate_allocated_space>
f011807b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011807e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0118085:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011808c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118092:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0118095:	74 28                	je     f01180bf <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0118097:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011809d:	83 ec 0c             	sub    $0xc,%esp
f01180a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01180a3:	50                   	push   %eax
f01180a4:	68 b4 d1 12 f0       	push   $0xf012d1b4
f01180a9:	68 f4 07 00 00       	push   $0x7f4
f01180ae:	68 02 b8 12 f0       	push   $0xf012b802
f01180b3:	e8 ff 83 fe ff       	call   f01004b7 <_warn>
f01180b8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01180bb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01180bf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01180c5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01180c8:	74 28                	je     f01180f2 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01180ca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01180d0:	83 ec 0c             	sub    $0xc,%esp
f01180d3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01180d6:	50                   	push   %eax
f01180d7:	68 14 d2 12 f0       	push   $0xf012d214
f01180dc:	68 f9 07 00 00       	push   $0x7f9
f01180e1:	68 02 b8 12 f0       	push   $0xf012b802
f01180e6:	e8 cc 83 fe ff       	call   f01004b7 <_warn>
f01180eb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01180ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01180f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01180f6:	74 04                	je     f01180fc <test_calculate_allocated_space+0xb51>
f01180f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01180fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0118100:	83 ec 04             	sub    $0x4,%esp
f0118103:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118109:	50                   	push   %eax
f011810a:	68 de c1 12 f0       	push   $0xf012c1de
f011810f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0118115:	50                   	push   %eax
f0118116:	e8 13 a7 00 00       	call   f012282e <strcconcat>
f011811b:	83 c4 10             	add    $0x10,%esp
f011811e:	83 ec 0c             	sub    $0xc,%esp
f0118121:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118127:	50                   	push   %eax
f0118128:	e8 af 9d fe ff       	call   f0101edc <execute_command>
f011812d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0118130:	83 ec 04             	sub    $0x4,%esp
f0118133:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0118139:	50                   	push   %eax
f011813a:	68 1c d1 12 f0       	push   $0xf012d11c
f011813f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0118145:	50                   	push   %eax
f0118146:	e8 e3 a6 00 00       	call   f012282e <strcconcat>
f011814b:	83 c4 10             	add    $0x10,%esp
f011814e:	83 ec 0c             	sub    $0xc,%esp
f0118151:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0118157:	50                   	push   %eax
f0118158:	e8 7f 9d fe ff       	call   f0101edc <execute_command>
f011815d:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0118160:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0118167:	00 00 00 
		num_pages = 0;
f011816a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0118171:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0118174:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118177:	05 00 00 38 00       	add    $0x380000,%eax
f011817c:	01 c0                	add    %eax,%eax
f011817e:	89 c2                	mov    %eax,%edx
f0118180:	83 ec 0c             	sub    $0xc,%esp
f0118183:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0118189:	50                   	push   %eax
f011818a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0118190:	50                   	push   %eax
f0118191:	52                   	push   %edx
f0118192:	68 00 00 70 00       	push   $0x700000
f0118197:	ff 75 d8             	pushl  -0x28(%ebp)
f011819a:	e8 99 15 ff ff       	call   f0109738 <calculate_allocated_space>
f011819f:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01181a2:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01181a9:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01181b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01181b6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01181b9:	74 28                	je     f01181e3 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01181bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01181c1:	83 ec 0c             	sub    $0xc,%esp
f01181c4:	ff 75 c8             	pushl  -0x38(%ebp)
f01181c7:	50                   	push   %eax
f01181c8:	68 b4 d1 12 f0       	push   $0xf012d1b4
f01181cd:	68 0b 08 00 00       	push   $0x80b
f01181d2:	68 02 b8 12 f0       	push   $0xf012b802
f01181d7:	e8 db 82 fe ff       	call   f01004b7 <_warn>
f01181dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01181df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01181e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01181e9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01181ec:	74 28                	je     f0118216 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01181ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01181f4:	83 ec 0c             	sub    $0xc,%esp
f01181f7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01181fa:	50                   	push   %eax
f01181fb:	68 14 d2 12 f0       	push   $0xf012d214
f0118200:	68 10 08 00 00       	push   $0x810
f0118205:	68 02 b8 12 f0       	push   $0xf012b802
f011820a:	e8 a8 82 fe ff       	call   f01004b7 <_warn>
f011820f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118212:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0118216:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011821a:	74 04                	je     f0118220 <test_calculate_allocated_space+0xc75>
f011821c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0118220:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0118224:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011822b:	00 00 00 
		num_pages = 0;
f011822e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0118235:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0118238:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011823b:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0118240:	89 c2                	mov    %eax,%edx
f0118242:	83 ec 0c             	sub    $0xc,%esp
f0118245:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011824b:	50                   	push   %eax
f011824c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0118252:	50                   	push   %eax
f0118253:	52                   	push   %edx
f0118254:	68 ff ff 3f 00       	push   $0x3fffff
f0118259:	ff 75 d8             	pushl  -0x28(%ebp)
f011825c:	e8 d7 14 ff ff       	call   f0109738 <calculate_allocated_space>
f0118261:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0118264:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f011826b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0118272:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118278:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011827b:	74 28                	je     f01182a5 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011827d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118283:	83 ec 0c             	sub    $0xc,%esp
f0118286:	ff 75 c8             	pushl  -0x38(%ebp)
f0118289:	50                   	push   %eax
f011828a:	68 b4 d1 12 f0       	push   $0xf012d1b4
f011828f:	68 1e 08 00 00       	push   $0x81e
f0118294:	68 02 b8 12 f0       	push   $0xf012b802
f0118299:	e8 19 82 fe ff       	call   f01004b7 <_warn>
f011829e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01182a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01182a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01182ab:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01182ae:	74 28                	je     f01182d8 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01182b0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01182b6:	83 ec 0c             	sub    $0xc,%esp
f01182b9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01182bc:	50                   	push   %eax
f01182bd:	68 14 d2 12 f0       	push   $0xf012d214
f01182c2:	68 23 08 00 00       	push   $0x823
f01182c7:	68 02 b8 12 f0       	push   $0xf012b802
f01182cc:	e8 e6 81 fe ff       	call   f01004b7 <_warn>
f01182d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01182d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01182d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01182dc:	74 04                	je     f01182e2 <test_calculate_allocated_space+0xd37>
f01182de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01182e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01182e6:	83 ec 0c             	sub    $0xc,%esp
f01182e9:	68 8f c1 12 f0       	push   $0xf012c18f
f01182ee:	e8 79 8c fe ff       	call   f0100f6c <cprintf>
f01182f3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01182f6:	83 ec 08             	sub    $0x8,%esp
f01182f9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01182fc:	68 70 d2 12 f0       	push   $0xf012d270
f0118301:	e8 66 8c fe ff       	call   f0100f6c <cprintf>
f0118306:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0118309:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011830d:	75 10                	jne    f011831f <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011830f:	83 ec 0c             	sub    $0xc,%esp
f0118312:	68 b0 d2 12 f0       	push   $0xf012d2b0
f0118317:	e8 50 8c fe ff       	call   f0100f6c <cprintf>
f011831c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011831f:	a1 e4 91 55 f0       	mov    0xf05591e4,%eax
f0118324:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118327:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011832a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011832d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0118332:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0118335:	5b                   	pop    %ebx
f0118336:	5e                   	pop    %esi
f0118337:	5f                   	pop    %edi
f0118338:	5d                   	pop    %ebp
f0118339:	c3                   	ret    

f011833a <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f011833a:	55                   	push   %ebp
f011833b:	89 e5                	mov    %esp,%ebp
f011833d:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0118340:	8b 45 10             	mov    0x10(%ebp),%eax
f0118343:	ba 01 00 00 00       	mov    $0x1,%edx
f0118348:	88 c1                	mov    %al,%cl
f011834a:	d3 e2                	shl    %cl,%edx
f011834c:	89 d0                	mov    %edx,%eax
f011834e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0118351:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118354:	c1 e8 16             	shr    $0x16,%eax
f0118357:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011835e:	8b 45 08             	mov    0x8(%ebp),%eax
f0118361:	01 d0                	add    %edx,%eax
f0118363:	8b 00                	mov    (%eax),%eax
f0118365:	83 e0 01             	and    $0x1,%eax
f0118368:	85 c0                	test   %eax,%eax
f011836a:	75 07                	jne    f0118373 <CB+0x39>
f011836c:	b8 00 00 00 00       	mov    $0x0,%eax
f0118371:	eb 76                	jmp    f01183e9 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118373:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118376:	c1 e8 16             	shr    $0x16,%eax
f0118379:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118380:	8b 45 08             	mov    0x8(%ebp),%eax
f0118383:	01 d0                	add    %edx,%eax
f0118385:	8b 00                	mov    (%eax),%eax
f0118387:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011838c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011838f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118392:	c1 e8 0c             	shr    $0xc,%eax
f0118395:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0118398:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f011839d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01183a0:	72 17                	jb     f01183b9 <CB+0x7f>
f01183a2:	ff 75 f0             	pushl  -0x10(%ebp)
f01183a5:	68 fc d2 12 f0       	push   $0xf012d2fc
f01183aa:	68 3e 08 00 00       	push   $0x83e
f01183af:	68 02 b8 12 f0       	push   $0xf012b802
f01183b4:	e8 61 7f fe ff       	call   f010031a <_panic>
f01183b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01183bc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01183c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01183c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01183c7:	c1 e8 0c             	shr    $0xc,%eax
f01183ca:	25 ff 03 00 00       	and    $0x3ff,%eax
f01183cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01183d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01183d9:	01 d0                	add    %edx,%eax
f01183db:	8b 00                	mov    (%eax),%eax
f01183dd:	23 45 f4             	and    -0xc(%ebp),%eax
f01183e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01183e3:	0f 94 c0             	sete   %al
f01183e6:	0f b6 c0             	movzbl %al,%eax
}
f01183e9:	c9                   	leave  
f01183ea:	c3                   	ret    

f01183eb <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01183eb:	55                   	push   %ebp
f01183ec:	89 e5                	mov    %esp,%ebp
f01183ee:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01183f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01183f4:	ba 01 00 00 00       	mov    $0x1,%edx
f01183f9:	88 c1                	mov    %al,%cl
f01183fb:	d3 e2                	shl    %cl,%edx
f01183fd:	89 d0                	mov    %edx,%eax
f01183ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0118402:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118405:	c1 e8 16             	shr    $0x16,%eax
f0118408:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011840f:	8b 45 08             	mov    0x8(%ebp),%eax
f0118412:	01 d0                	add    %edx,%eax
f0118414:	8b 00                	mov    (%eax),%eax
f0118416:	83 e0 01             	and    $0x1,%eax
f0118419:	85 c0                	test   %eax,%eax
f011841b:	75 0a                	jne    f0118427 <SB+0x3c>
f011841d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118422:	e9 cd 00 00 00       	jmp    f01184f4 <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118427:	8b 45 0c             	mov    0xc(%ebp),%eax
f011842a:	c1 e8 16             	shr    $0x16,%eax
f011842d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118434:	8b 45 08             	mov    0x8(%ebp),%eax
f0118437:	01 d0                	add    %edx,%eax
f0118439:	8b 00                	mov    (%eax),%eax
f011843b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118440:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118446:	c1 e8 0c             	shr    $0xc,%eax
f0118449:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011844c:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0118451:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0118454:	72 17                	jb     f011846d <SB+0x82>
f0118456:	ff 75 f0             	pushl  -0x10(%ebp)
f0118459:	68 fc d2 12 f0       	push   $0xf012d2fc
f011845e:	68 46 08 00 00       	push   $0x846
f0118463:	68 02 b8 12 f0       	push   $0xf012b802
f0118468:	e8 ad 7e fe ff       	call   f010031a <_panic>
f011846d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118470:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0118475:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0118478:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f011847c:	74 3c                	je     f01184ba <SB+0xcf>
f011847e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118481:	c1 e8 0c             	shr    $0xc,%eax
f0118484:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118489:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118490:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118493:	01 d0                	add    %edx,%eax
f0118495:	8b 55 0c             	mov    0xc(%ebp),%edx
f0118498:	c1 ea 0c             	shr    $0xc,%edx
f011849b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01184a1:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01184a8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01184ab:	01 ca                	add    %ecx,%edx
f01184ad:	8b 12                	mov    (%edx),%edx
f01184af:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01184b2:	f7 d1                	not    %ecx
f01184b4:	21 ca                	and    %ecx,%edx
f01184b6:	89 10                	mov    %edx,(%eax)
f01184b8:	eb 35                	jmp    f01184ef <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f01184ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01184bd:	c1 e8 0c             	shr    $0xc,%eax
f01184c0:	25 ff 03 00 00       	and    $0x3ff,%eax
f01184c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01184cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01184cf:	01 c2                	add    %eax,%edx
f01184d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01184d4:	c1 e8 0c             	shr    $0xc,%eax
f01184d7:	25 ff 03 00 00       	and    $0x3ff,%eax
f01184dc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01184e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01184e6:	01 c8                	add    %ecx,%eax
f01184e8:	8b 00                	mov    (%eax),%eax
f01184ea:	0b 45 f4             	or     -0xc(%ebp),%eax
f01184ed:	89 02                	mov    %eax,(%edx)
	return 0;
f01184ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01184f4:	c9                   	leave  
f01184f5:	c3                   	ret    

f01184f6 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f01184f6:	55                   	push   %ebp
f01184f7:	89 e5                	mov    %esp,%ebp
f01184f9:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01184fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01184ff:	c1 e8 16             	shr    $0x16,%eax
f0118502:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118509:	8b 45 08             	mov    0x8(%ebp),%eax
f011850c:	01 d0                	add    %edx,%eax
f011850e:	8b 00                	mov    (%eax),%eax
f0118510:	83 e0 01             	and    $0x1,%eax
f0118513:	85 c0                	test   %eax,%eax
f0118515:	75 0a                	jne    f0118521 <CPs+0x2b>
f0118517:	b8 00 00 00 00       	mov    $0x0,%eax
f011851c:	e9 b8 00 00 00       	jmp    f01185d9 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118521:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118524:	c1 e8 16             	shr    $0x16,%eax
f0118527:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011852e:	8b 45 08             	mov    0x8(%ebp),%eax
f0118531:	01 d0                	add    %edx,%eax
f0118533:	8b 00                	mov    (%eax),%eax
f0118535:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011853a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011853d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118540:	c1 e8 0c             	shr    $0xc,%eax
f0118543:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0118546:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f011854b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011854e:	72 17                	jb     f0118567 <CPs+0x71>
f0118550:	ff 75 f0             	pushl  -0x10(%ebp)
f0118553:	68 fc d2 12 f0       	push   $0xf012d2fc
f0118558:	68 4f 08 00 00       	push   $0x84f
f011855d:	68 02 b8 12 f0       	push   $0xf012b802
f0118562:	e8 b3 7d fe ff       	call   f010031a <_panic>
f0118567:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011856a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011856f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0118572:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118579:	eb 53                	jmp    f01185ce <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f011857b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011857e:	ba 01 00 00 00       	mov    $0x1,%edx
f0118583:	88 c1                	mov    %al,%cl
f0118585:	d3 e2                	shl    %cl,%edx
f0118587:	89 d0                	mov    %edx,%eax
f0118589:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f011858c:	8b 45 14             	mov    0x14(%ebp),%eax
f011858f:	23 45 e4             	and    -0x1c(%ebp),%eax
f0118592:	85 c0                	test   %eax,%eax
f0118594:	74 34                	je     f01185ca <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0118596:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118599:	c1 e8 0c             	shr    $0xc,%eax
f011859c:	25 ff 03 00 00       	and    $0x3ff,%eax
f01185a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01185a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01185ab:	01 d0                	add    %edx,%eax
f01185ad:	8b 00                	mov    (%eax),%eax
f01185af:	33 45 10             	xor    0x10(%ebp),%eax
f01185b2:	23 45 e4             	and    -0x1c(%ebp),%eax
f01185b5:	85 c0                	test   %eax,%eax
f01185b7:	0f 94 c0             	sete   %al
f01185ba:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f01185bd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01185c1:	75 08                	jne    f01185cb <CPs+0xd5>
f01185c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01185c8:	eb 0f                	jmp    f01185d9 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f01185ca:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f01185cb:	ff 45 f4             	incl   -0xc(%ebp)
f01185ce:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f01185d2:	7e a7                	jle    f011857b <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f01185d4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01185d9:	c9                   	leave  
f01185da:	c3                   	ret    

f01185db <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f01185db:	55                   	push   %ebp
f01185dc:	89 e5                	mov    %esp,%ebp
f01185de:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01185e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01185e4:	c1 e8 16             	shr    $0x16,%eax
f01185e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01185ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01185f1:	01 d0                	add    %edx,%eax
f01185f3:	8b 00                	mov    (%eax),%eax
f01185f5:	83 e0 01             	and    $0x1,%eax
f01185f8:	85 c0                	test   %eax,%eax
f01185fa:	75 07                	jne    f0118603 <CA+0x28>
f01185fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0118601:	eb 6f                	jmp    f0118672 <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118603:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118606:	c1 e8 16             	shr    $0x16,%eax
f0118609:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118610:	8b 45 08             	mov    0x8(%ebp),%eax
f0118613:	01 d0                	add    %edx,%eax
f0118615:	8b 00                	mov    (%eax),%eax
f0118617:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011861c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011861f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118622:	c1 e8 0c             	shr    $0xc,%eax
f0118625:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118628:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f011862d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0118630:	72 17                	jb     f0118649 <CA+0x6e>
f0118632:	ff 75 f4             	pushl  -0xc(%ebp)
f0118635:	68 fc d2 12 f0       	push   $0xf012d2fc
f011863a:	68 5e 08 00 00       	push   $0x85e
f011863f:	68 02 b8 12 f0       	push   $0xf012b802
f0118644:	e8 d1 7c fe ff       	call   f010031a <_panic>
f0118649:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011864c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0118651:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0118654:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118657:	c1 e8 0c             	shr    $0xc,%eax
f011865a:	25 ff 03 00 00       	and    $0x3ff,%eax
f011865f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118666:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118669:	01 d0                	add    %edx,%eax
f011866b:	8b 00                	mov    (%eax),%eax
f011866d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0118672:	c9                   	leave  
f0118673:	c3                   	ret    

f0118674 <CE>:

int CE(uint32 *_d, uint32 va)
{
f0118674:	55                   	push   %ebp
f0118675:	89 e5                	mov    %esp,%ebp
f0118677:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011867a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011867d:	c1 e8 16             	shr    $0x16,%eax
f0118680:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118687:	8b 45 08             	mov    0x8(%ebp),%eax
f011868a:	01 d0                	add    %edx,%eax
f011868c:	8b 00                	mov    (%eax),%eax
f011868e:	83 e0 01             	and    $0x1,%eax
f0118691:	85 c0                	test   %eax,%eax
f0118693:	75 07                	jne    f011869c <CE+0x28>
f0118695:	b8 00 00 00 00       	mov    $0x0,%eax
f011869a:	eb 7a                	jmp    f0118716 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011869c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011869f:	c1 e8 16             	shr    $0x16,%eax
f01186a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01186ac:	01 d0                	add    %edx,%eax
f01186ae:	8b 00                	mov    (%eax),%eax
f01186b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01186b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01186b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01186bb:	c1 e8 0c             	shr    $0xc,%eax
f01186be:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01186c1:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f01186c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01186c9:	72 17                	jb     f01186e2 <CE+0x6e>
f01186cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01186ce:	68 fc d2 12 f0       	push   $0xf012d2fc
f01186d3:	68 65 08 00 00       	push   $0x865
f01186d8:	68 02 b8 12 f0       	push   $0xf012b802
f01186dd:	e8 38 7c fe ff       	call   f010031a <_panic>
f01186e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01186e5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01186ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01186ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01186f0:	c1 e8 0c             	shr    $0xc,%eax
f01186f3:	25 ff 03 00 00       	and    $0x3ff,%eax
f01186f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118702:	01 d0                	add    %edx,%eax
f0118704:	8b 00                	mov    (%eax),%eax
f0118706:	85 c0                	test   %eax,%eax
f0118708:	74 07                	je     f0118711 <CE+0x9d>
f011870a:	b8 00 00 00 00       	mov    $0x0,%eax
f011870f:	eb 05                	jmp    f0118716 <CE+0xa2>
	return 1;
f0118711:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118716:	c9                   	leave  
f0118717:	c3                   	ret    

f0118718 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0118718:	55                   	push   %ebp
f0118719:	89 e5                	mov    %esp,%ebp
f011871b:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f011871e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118721:	c1 e8 16             	shr    $0x16,%eax
f0118724:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011872b:	8b 45 08             	mov    0x8(%ebp),%eax
f011872e:	01 d0                	add    %edx,%eax
f0118730:	8b 00                	mov    (%eax),%eax
f0118732:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0118735:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118738:	83 e0 01             	and    $0x1,%eax
f011873b:	85 c0                	test   %eax,%eax
f011873d:	0f 84 92 00 00 00    	je     f01187d5 <CP+0xbd>
	{
		uint32 *t = NULL;
f0118743:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f011874a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011874d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118752:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0118755:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118758:	c1 e8 0c             	shr    $0xc,%eax
f011875b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011875e:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0118763:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0118766:	72 17                	jb     f011877f <CP+0x67>
f0118768:	ff 75 ec             	pushl  -0x14(%ebp)
f011876b:	68 fc d2 12 f0       	push   $0xf012d2fc
f0118770:	68 71 08 00 00       	push   $0x871
f0118775:	68 02 b8 12 f0       	push   $0xf012b802
f011877a:	e8 9b 7b fe ff       	call   f010031a <_panic>
f011877f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118782:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0118787:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f011878a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011878d:	c1 e8 0c             	shr    $0xc,%eax
f0118790:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118795:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011879c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011879f:	01 d0                	add    %edx,%eax
f01187a1:	8b 00                	mov    (%eax),%eax
f01187a3:	23 45 10             	and    0x10(%ebp),%eax
f01187a6:	3b 45 10             	cmp    0x10(%ebp),%eax
f01187a9:	75 2a                	jne    f01187d5 <CP+0xbd>
f01187ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187ae:	c1 e8 0c             	shr    $0xc,%eax
f01187b1:	25 ff 03 00 00       	and    $0x3ff,%eax
f01187b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01187bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01187c0:	01 d0                	add    %edx,%eax
f01187c2:	8b 00                	mov    (%eax),%eax
f01187c4:	f7 d0                	not    %eax
f01187c6:	23 45 14             	and    0x14(%ebp),%eax
f01187c9:	3b 45 14             	cmp    0x14(%ebp),%eax
f01187cc:	75 07                	jne    f01187d5 <CP+0xbd>
			return 1;
f01187ce:	b8 01 00 00 00       	mov    $0x1,%eax
f01187d3:	eb 05                	jmp    f01187da <CP+0xc2>
	}
	return 0;
f01187d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01187da:	c9                   	leave  
f01187db:	c3                   	ret    

f01187dc <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01187dc:	55                   	push   %ebp
f01187dd:	89 e5                	mov    %esp,%ebp
f01187df:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01187e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187e5:	c1 e8 16             	shr    $0x16,%eax
f01187e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01187ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01187f2:	01 d0                	add    %edx,%eax
f01187f4:	8b 00                	mov    (%eax),%eax
f01187f6:	83 e0 01             	and    $0x1,%eax
f01187f9:	85 c0                	test   %eax,%eax
f01187fb:	75 07                	jne    f0118804 <GP+0x28>
f01187fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0118802:	eb 6f                	jmp    f0118873 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118804:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118807:	c1 e8 16             	shr    $0x16,%eax
f011880a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118811:	8b 45 08             	mov    0x8(%ebp),%eax
f0118814:	01 d0                	add    %edx,%eax
f0118816:	8b 00                	mov    (%eax),%eax
f0118818:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011881d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118820:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118823:	c1 e8 0c             	shr    $0xc,%eax
f0118826:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118829:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f011882e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0118831:	72 17                	jb     f011884a <GP+0x6e>
f0118833:	ff 75 f4             	pushl  -0xc(%ebp)
f0118836:	68 fc d2 12 f0       	push   $0xf012d2fc
f011883b:	68 7e 08 00 00       	push   $0x87e
f0118840:	68 02 b8 12 f0       	push   $0xf012b802
f0118845:	e8 d0 7a fe ff       	call   f010031a <_panic>
f011884a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011884d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0118852:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0118855:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118858:	c1 e8 0c             	shr    $0xc,%eax
f011885b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118860:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118867:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011886a:	01 d0                	add    %edx,%eax
f011886c:	8b 00                	mov    (%eax),%eax
f011886e:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0118873:	c9                   	leave  
f0118874:	c3                   	ret    

f0118875 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0118875:	55                   	push   %ebp
f0118876:	89 e5                	mov    %esp,%ebp
f0118878:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011887b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0118882:	eb 18                	jmp    f011889c <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0118884:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0118887:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011888e:	8b 45 08             	mov    0x8(%ebp),%eax
f0118891:	01 d0                	add    %edx,%eax
f0118893:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0118899:	ff 45 fc             	incl   -0x4(%ebp)
f011889c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011889f:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01188a4:	76 de                	jbe    f0118884 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01188a6:	90                   	nop
f01188a7:	c9                   	leave  
f01188a8:	c3                   	ret    

f01188a9 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01188a9:	55                   	push   %ebp
f01188aa:	89 e5                	mov    %esp,%ebp
f01188ac:	83 ec 38             	sub    $0x38,%esp
f01188af:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01188b2:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01188b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01188b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01188bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01188c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01188c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01188c8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01188cb:	e9 ea 01 00 00       	jmp    f0118aba <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01188d0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01188d4:	74 44                	je     f011891a <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01188d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01188d9:	83 ec 04             	sub    $0x4,%esp
f01188dc:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01188df:	52                   	push   %edx
f01188e0:	50                   	push   %eax
f01188e1:	ff 75 08             	pushl  0x8(%ebp)
f01188e4:	e8 e1 fd fe ff       	call   f01086ca <get_frame_info>
f01188e9:	83 c4 10             	add    $0x10,%esp
f01188ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01188ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01188f2:	85 c0                	test   %eax,%eax
f01188f4:	75 24                	jne    f011891a <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01188f6:	83 ec 04             	sub    $0x4,%esp
f01188f9:	68 2c d3 12 f0       	push   $0xf012d32c
f01188fe:	68 99 08 00 00       	push   $0x899
f0118903:	68 02 b8 12 f0       	push   $0xf012b802
f0118908:	e8 aa 7b fe ff       	call   f01004b7 <_warn>
f011890d:	83 c4 10             	add    $0x10,%esp
				return 0;
f0118910:	b8 00 00 00 00       	mov    $0x0,%eax
f0118915:	e9 b6 01 00 00       	jmp    f0118ad0 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f011891a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011891d:	83 ec 04             	sub    $0x4,%esp
f0118920:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0118923:	52                   	push   %edx
f0118924:	50                   	push   %eax
f0118925:	ff 75 08             	pushl  0x8(%ebp)
f0118928:	e8 9d fd fe ff       	call   f01086ca <get_frame_info>
f011892d:	83 c4 10             	add    $0x10,%esp
f0118930:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0118933:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118936:	85 c0                	test   %eax,%eax
f0118938:	75 24                	jne    f011895e <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011893a:	83 ec 04             	sub    $0x4,%esp
f011893d:	68 58 d3 12 f0       	push   $0xf012d358
f0118942:	68 a0 08 00 00       	push   $0x8a0
f0118947:	68 02 b8 12 f0       	push   $0xf012b802
f011894c:	e8 66 7b fe ff       	call   f01004b7 <_warn>
f0118951:	83 c4 10             	add    $0x10,%esp
			return 0;
f0118954:	b8 00 00 00 00       	mov    $0x0,%eax
f0118959:	e9 72 01 00 00       	jmp    f0118ad0 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f011895e:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0118962:	75 70                	jne    f01189d4 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0118964:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118967:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011896a:	c1 ea 0c             	shr    $0xc,%edx
f011896d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118973:	c1 e2 02             	shl    $0x2,%edx
f0118976:	01 d0                	add    %edx,%eax
f0118978:	8b 00                	mov    (%eax),%eax
f011897a:	c1 e8 0c             	shr    $0xc,%eax
f011897d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0118980:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118983:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0118986:	c1 ea 0c             	shr    $0xc,%edx
f0118989:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011898f:	c1 e2 02             	shl    $0x2,%edx
f0118992:	01 d0                	add    %edx,%eax
f0118994:	8b 00                	mov    (%eax),%eax
f0118996:	c1 e8 0c             	shr    $0xc,%eax
f0118999:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011899c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011899f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01189a2:	74 30                	je     f01189d4 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01189a4:	83 ec 04             	sub    $0x4,%esp
f01189a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01189aa:	ff 75 e8             	pushl  -0x18(%ebp)
f01189ad:	ff 75 f0             	pushl  -0x10(%ebp)
f01189b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01189b3:	68 84 d3 12 f0       	push   $0xf012d384
f01189b8:	68 aa 08 00 00       	push   $0x8aa
f01189bd:	68 02 b8 12 f0       	push   $0xf012b802
f01189c2:	e8 f0 7a fe ff       	call   f01004b7 <_warn>
f01189c7:	83 c4 20             	add    $0x20,%esp
				return 0;
f01189ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01189cf:	e9 fc 00 00 00       	jmp    f0118ad0 <CCP+0x227>
			}
		}
		if (ref != -1)
f01189d4:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01189d8:	74 52                	je     f0118a2c <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01189da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01189de:	74 0e                	je     f01189ee <CCP+0x145>
f01189e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01189e3:	8b 40 08             	mov    0x8(%eax),%eax
f01189e6:	0f b7 c0             	movzwl %ax,%eax
f01189e9:	3b 45 18             	cmp    0x18(%ebp),%eax
f01189ec:	74 3e                	je     f0118a2c <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01189ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01189f2:	74 0b                	je     f01189ff <CCP+0x156>
f01189f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01189f7:	8b 40 08             	mov    0x8(%eax),%eax
f01189fa:	0f b7 c0             	movzwl %ax,%eax
f01189fd:	eb 05                	jmp    f0118a04 <CCP+0x15b>
f01189ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a04:	83 ec 0c             	sub    $0xc,%esp
f0118a07:	50                   	push   %eax
f0118a08:	ff 75 f0             	pushl  -0x10(%ebp)
f0118a0b:	68 e0 d3 12 f0       	push   $0xf012d3e0
f0118a10:	68 b2 08 00 00       	push   $0x8b2
f0118a15:	68 02 b8 12 f0       	push   $0xf012b802
f0118a1a:	e8 98 7a fe ff       	call   f01004b7 <_warn>
f0118a1f:	83 c4 20             	add    $0x20,%esp
				return 0;
f0118a22:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a27:	e9 a4 00 00 00       	jmp    f0118ad0 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0118a2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a2f:	ff 75 20             	pushl  0x20(%ebp)
f0118a32:	ff 75 1c             	pushl  0x1c(%ebp)
f0118a35:	50                   	push   %eax
f0118a36:	ff 75 08             	pushl  0x8(%ebp)
f0118a39:	e8 b8 fa ff ff       	call   f01184f6 <CPs>
f0118a3e:	83 c4 10             	add    $0x10,%esp
f0118a41:	85 c0                	test   %eax,%eax
f0118a43:	7f 21                	jg     f0118a66 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0118a45:	83 ec 04             	sub    $0x4,%esp
f0118a48:	68 50 d4 12 f0       	push   $0xf012d450
f0118a4d:	68 b8 08 00 00       	push   $0x8b8
f0118a52:	68 02 b8 12 f0       	push   $0xf012b802
f0118a57:	e8 5b 7a fe ff       	call   f01004b7 <_warn>
f0118a5c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0118a5f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a64:	eb 6a                	jmp    f0118ad0 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0118a66:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118a6a:	74 3a                	je     f0118aa6 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0118a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118a6f:	ff 75 28             	pushl  0x28(%ebp)
f0118a72:	ff 75 24             	pushl  0x24(%ebp)
f0118a75:	50                   	push   %eax
f0118a76:	ff 75 08             	pushl  0x8(%ebp)
f0118a79:	e8 78 fa ff ff       	call   f01184f6 <CPs>
f0118a7e:	83 c4 10             	add    $0x10,%esp
f0118a81:	85 c0                	test   %eax,%eax
f0118a83:	7f 21                	jg     f0118aa6 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0118a85:	83 ec 04             	sub    $0x4,%esp
f0118a88:	68 98 d4 12 f0       	push   $0xf012d498
f0118a8d:	68 bf 08 00 00       	push   $0x8bf
f0118a92:	68 02 b8 12 f0       	push   $0xf012b802
f0118a97:	e8 1b 7a fe ff       	call   f01004b7 <_warn>
f0118a9c:	83 c4 10             	add    $0x10,%esp
				return 0;
f0118a9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118aa4:	eb 2a                	jmp    f0118ad0 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0118aa6:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118aaa:	74 07                	je     f0118ab3 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0118aac:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0118ab3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0118aba:	8b 55 10             	mov    0x10(%ebp),%edx
f0118abd:	8b 45 14             	mov    0x14(%ebp),%eax
f0118ac0:	01 d0                	add    %edx,%eax
f0118ac2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0118ac5:	0f 87 05 fe ff ff    	ja     f01188d0 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0118acb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118ad0:	c9                   	leave  
f0118ad1:	c3                   	ret    

f0118ad2 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0118ad2:	55                   	push   %ebp
f0118ad3:	89 e5                	mov    %esp,%ebp
f0118ad5:	57                   	push   %edi
f0118ad6:	56                   	push   %esi
f0118ad7:	53                   	push   %ebx
f0118ad8:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0118ade:	a0 94 dd 17 f0       	mov    0xf017dd94,%al
f0118ae3:	84 c0                	test   %al,%al
f0118ae5:	0f 84 38 0a 00 00    	je     f0119523 <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0118aeb:	c6 05 94 dd 17 f0 00 	movb   $0x0,0xf017dd94
		char command[100] = "load fos_add 20";
f0118af2:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0118af8:	bb 54 d7 12 f0       	mov    $0xf012d754,%ebx
f0118afd:	ba 04 00 00 00       	mov    $0x4,%edx
f0118b02:	89 c7                	mov    %eax,%edi
f0118b04:	89 de                	mov    %ebx,%esi
f0118b06:	89 d1                	mov    %edx,%ecx
f0118b08:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0118b0a:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0118b10:	b9 15 00 00 00       	mov    $0x15,%ecx
f0118b15:	b8 00 00 00 00       	mov    $0x0,%eax
f0118b1a:	89 d7                	mov    %edx,%edi
f0118b1c:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0118b1e:	83 ec 0c             	sub    $0xc,%esp
f0118b21:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0118b27:	50                   	push   %eax
f0118b28:	e8 af 93 fe ff       	call   f0101edc <execute_command>
f0118b2d:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0118b30:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0118b36:	bb b8 d7 12 f0       	mov    $0xf012d7b8,%ebx
f0118b3b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0118b40:	89 c7                	mov    %eax,%edi
f0118b42:	89 de                	mov    %ebx,%esi
f0118b44:	89 d1                	mov    %edx,%ecx
f0118b46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0118b48:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0118b4e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0118b53:	b0 00                	mov    $0x0,%al
f0118b55:	89 d7                	mov    %edx,%edi
f0118b57:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0118b59:	83 ec 0c             	sub    $0xc,%esp
f0118b5c:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0118b62:	50                   	push   %eax
f0118b63:	e8 74 93 fe ff       	call   f0101edc <execute_command>
f0118b68:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0118b6b:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0118b71:	bb 1c d8 12 f0       	mov    $0xf012d81c,%ebx
f0118b76:	ba 17 00 00 00       	mov    $0x17,%edx
f0118b7b:	89 c7                	mov    %eax,%edi
f0118b7d:	89 de                	mov    %ebx,%esi
f0118b7f:	89 d1                	mov    %edx,%ecx
f0118b81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0118b83:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0118b89:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0118b8e:	b0 00                	mov    $0x0,%al
f0118b90:	89 d7                	mov    %edx,%edi
f0118b92:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0118b94:	83 ec 0c             	sub    $0xc,%esp
f0118b97:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0118b9d:	50                   	push   %eax
f0118b9e:	e8 39 93 fe ff       	call   f0101edc <execute_command>
f0118ba3:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0118ba6:	83 ec 04             	sub    $0x4,%esp
f0118ba9:	6a 00                	push   $0x0
f0118bab:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0118bae:	50                   	push   %eax
f0118baf:	6a 10                	push   $0x10
f0118bb1:	e8 0a 1c ff ff       	call   f010a7c0 <envid2env>
f0118bb6:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0118bb9:	83 ec 04             	sub    $0x4,%esp
f0118bbc:	6a 00                	push   $0x0
f0118bbe:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0118bc1:	50                   	push   %eax
f0118bc2:	6a 11                	push   $0x11
f0118bc4:	e8 f7 1b ff ff       	call   f010a7c0 <envid2env>
f0118bc9:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0118bcc:	83 ec 04             	sub    $0x4,%esp
f0118bcf:	6a 00                	push   $0x0
f0118bd1:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0118bd4:	50                   	push   %eax
f0118bd5:	6a 12                	push   $0x12
f0118bd7:	e8 e4 1b ff ff       	call   f010a7c0 <envid2env>
f0118bdc:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0118bdf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118be2:	85 c0                	test   %eax,%eax
f0118be4:	74 0e                	je     f0118bf4 <test_priority_normal_and_higher+0x122>
f0118be6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118be9:	85 c0                	test   %eax,%eax
f0118beb:	74 07                	je     f0118bf4 <test_priority_normal_and_higher+0x122>
f0118bed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118bf0:	85 c0                	test   %eax,%eax
f0118bf2:	75 14                	jne    f0118c08 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f0118bf4:	83 ec 04             	sub    $0x4,%esp
f0118bf7:	68 d8 d4 12 f0       	push   $0xf012d4d8
f0118bfc:	6a 29                	push   $0x29
f0118bfe:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118c03:	e8 12 77 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118c08:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118c0b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c11:	83 f8 14             	cmp    $0x14,%eax
f0118c14:	75 1c                	jne    f0118c32 <test_priority_normal_and_higher+0x160>
f0118c16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c19:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c1f:	83 f8 0f             	cmp    $0xf,%eax
f0118c22:	75 0e                	jne    f0118c32 <test_priority_normal_and_higher+0x160>
f0118c24:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c27:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c2d:	83 f8 0a             	cmp    $0xa,%eax
f0118c30:	74 32                	je     f0118c64 <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0118c32:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c35:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f0118c3b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c3e:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0118c44:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118c47:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c4d:	83 ec 08             	sub    $0x8,%esp
f0118c50:	51                   	push   %ecx
f0118c51:	52                   	push   %edx
f0118c52:	50                   	push   %eax
f0118c53:	68 0c d5 12 f0       	push   $0xf012d50c
f0118c58:	6a 2c                	push   $0x2c
f0118c5a:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118c5f:	e8 b6 76 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f0118c64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0118c6b:	eb 47                	jmp    f0118cb4 <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0118c6d:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0118c70:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118c73:	89 d0                	mov    %edx,%eax
f0118c75:	01 c0                	add    %eax,%eax
f0118c77:	01 d0                	add    %edx,%eax
f0118c79:	c1 e0 03             	shl    $0x3,%eax
f0118c7c:	01 c8                	add    %ecx,%eax
f0118c7e:	05 88 00 00 00       	add    $0x88,%eax
f0118c83:	8b 10                	mov    (%eax),%edx
f0118c85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118c88:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0118c8f:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0118c92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118c95:	89 d0                	mov    %edx,%eax
f0118c97:	01 c0                	add    %eax,%eax
f0118c99:	01 d0                	add    %edx,%eax
f0118c9b:	c1 e0 03             	shl    $0x3,%eax
f0118c9e:	01 c8                	add    %ecx,%eax
f0118ca0:	05 90 00 00 00       	add    $0x90,%eax
f0118ca5:	8b 10                	mov    (%eax),%edx
f0118ca7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118caa:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f0118cb1:	ff 45 e4             	incl   -0x1c(%ebp)
f0118cb4:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0118cb8:	7e b3                	jle    f0118c6d <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0118cba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118cc1:	eb 47                	jmp    f0118d0a <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0118cc3:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0118cc6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118cc9:	89 d0                	mov    %edx,%eax
f0118ccb:	01 c0                	add    %eax,%eax
f0118ccd:	01 d0                	add    %edx,%eax
f0118ccf:	c1 e0 03             	shl    $0x3,%eax
f0118cd2:	01 c8                	add    %ecx,%eax
f0118cd4:	05 88 00 00 00       	add    $0x88,%eax
f0118cd9:	8b 10                	mov    (%eax),%edx
f0118cdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118cde:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0118ce5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0118ce8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118ceb:	89 d0                	mov    %edx,%eax
f0118ced:	01 c0                	add    %eax,%eax
f0118cef:	01 d0                	add    %edx,%eax
f0118cf1:	c1 e0 03             	shl    $0x3,%eax
f0118cf4:	01 c8                	add    %ecx,%eax
f0118cf6:	05 90 00 00 00       	add    $0x90,%eax
f0118cfb:	8b 10                	mov    (%eax),%edx
f0118cfd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118d00:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0118d07:	ff 45 e0             	incl   -0x20(%ebp)
f0118d0a:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0118d0e:	7e b3                	jle    f0118cc3 <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0118d10:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0118d17:	eb 47                	jmp    f0118d60 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0118d19:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118d1c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118d1f:	89 d0                	mov    %edx,%eax
f0118d21:	01 c0                	add    %eax,%eax
f0118d23:	01 d0                	add    %edx,%eax
f0118d25:	c1 e0 03             	shl    $0x3,%eax
f0118d28:	01 c8                	add    %ecx,%eax
f0118d2a:	05 88 00 00 00       	add    $0x88,%eax
f0118d2f:	8b 10                	mov    (%eax),%edx
f0118d31:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118d34:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0118d3b:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118d3e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118d41:	89 d0                	mov    %edx,%eax
f0118d43:	01 c0                	add    %eax,%eax
f0118d45:	01 d0                	add    %edx,%eax
f0118d47:	c1 e0 03             	shl    $0x3,%eax
f0118d4a:	01 c8                	add    %ecx,%eax
f0118d4c:	05 90 00 00 00       	add    $0x90,%eax
f0118d51:	8b 10                	mov    (%eax),%edx
f0118d53:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118d56:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0118d5d:	ff 45 dc             	incl   -0x24(%ebp)
f0118d60:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0118d64:	7e b3                	jle    f0118d19 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0118d66:	e8 9e 4c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118d6b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0118d6e:	e8 cd ba fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118d73:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0118d76:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118d79:	83 ec 08             	sub    $0x8,%esp
f0118d7c:	6a 03                	push   $0x3
f0118d7e:	50                   	push   %eax
f0118d7f:	e8 2b 31 ff ff       	call   f010beaf <set_program_priority>
f0118d84:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0118d87:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118d8a:	83 ec 08             	sub    $0x8,%esp
f0118d8d:	6a 03                	push   $0x3
f0118d8f:	50                   	push   %eax
f0118d90:	e8 1a 31 ff ff       	call   f010beaf <set_program_priority>
f0118d95:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0118d98:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118d9b:	83 ec 08             	sub    $0x8,%esp
f0118d9e:	6a 03                	push   $0x3
f0118da0:	50                   	push   %eax
f0118da1:	e8 09 31 ff ff       	call   f010beaf <set_program_priority>
f0118da6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118da9:	e8 92 ba fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118dae:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118db1:	74 14                	je     f0118dc7 <test_priority_normal_and_higher+0x2f5>
f0118db3:	83 ec 04             	sub    $0x4,%esp
f0118db6:	68 74 d5 12 f0       	push   $0xf012d574
f0118dbb:	6a 48                	push   $0x48
f0118dbd:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118dc2:	e8 53 75 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118dc7:	e8 3d 4c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118dcc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118dcf:	74 14                	je     f0118de5 <test_priority_normal_and_higher+0x313>
f0118dd1:	83 ec 04             	sub    $0x4,%esp
f0118dd4:	68 74 d5 12 f0       	push   $0xf012d574
f0118dd9:	6a 49                	push   $0x49
f0118ddb:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118de0:	e8 35 75 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118de5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118de8:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118dee:	83 f8 14             	cmp    $0x14,%eax
f0118df1:	75 1c                	jne    f0118e0f <test_priority_normal_and_higher+0x33d>
f0118df3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118df6:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118dfc:	83 f8 0f             	cmp    $0xf,%eax
f0118dff:	75 0e                	jne    f0118e0f <test_priority_normal_and_higher+0x33d>
f0118e01:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118e04:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118e0a:	83 f8 0a             	cmp    $0xa,%eax
f0118e0d:	74 14                	je     f0118e23 <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0118e0f:	83 ec 04             	sub    $0x4,%esp
f0118e12:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0118e17:	6a 4c                	push   $0x4c
f0118e19:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118e1e:	e8 f7 74 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0118e23:	e8 e1 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118e28:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e2b:	e8 10 ba fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118e30:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0118e33:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118e36:	83 ec 08             	sub    $0x8,%esp
f0118e39:	6a 04                	push   $0x4
f0118e3b:	50                   	push   %eax
f0118e3c:	e8 6e 30 ff ff       	call   f010beaf <set_program_priority>
f0118e41:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0118e44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118e47:	83 ec 08             	sub    $0x8,%esp
f0118e4a:	6a 04                	push   $0x4
f0118e4c:	50                   	push   %eax
f0118e4d:	e8 5d 30 ff ff       	call   f010beaf <set_program_priority>
f0118e52:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0118e55:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118e58:	83 ec 08             	sub    $0x8,%esp
f0118e5b:	6a 04                	push   $0x4
f0118e5d:	50                   	push   %eax
f0118e5e:	e8 4c 30 ff ff       	call   f010beaf <set_program_priority>
f0118e63:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118e66:	e8 d5 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118e6b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118e6e:	74 14                	je     f0118e84 <test_priority_normal_and_higher+0x3b2>
f0118e70:	83 ec 04             	sub    $0x4,%esp
f0118e73:	68 74 d5 12 f0       	push   $0xf012d574
f0118e78:	6a 56                	push   $0x56
f0118e7a:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118e7f:	e8 96 74 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0118e84:	e8 80 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118e89:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118e8c:	74 14                	je     f0118ea2 <test_priority_normal_and_higher+0x3d0>
f0118e8e:	83 ec 04             	sub    $0x4,%esp
f0118e91:	68 f4 d5 12 f0       	push   $0xf012d5f4
f0118e96:	6a 57                	push   $0x57
f0118e98:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118e9d:	e8 78 74 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0118ea2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118ea5:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118eab:	83 f8 14             	cmp    $0x14,%eax
f0118eae:	75 1c                	jne    f0118ecc <test_priority_normal_and_higher+0x3fa>
f0118eb0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118eb3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118eb9:	83 f8 0f             	cmp    $0xf,%eax
f0118ebc:	75 0e                	jne    f0118ecc <test_priority_normal_and_higher+0x3fa>
f0118ebe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118ec1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118ec7:	83 f8 14             	cmp    $0x14,%eax
f0118eca:	74 14                	je     f0118ee0 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0118ecc:	83 ec 04             	sub    $0x4,%esp
f0118ecf:	68 24 d6 12 f0       	push   $0xf012d624
f0118ed4:	6a 5a                	push   $0x5a
f0118ed6:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118edb:	e8 3a 74 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0118ee0:	e8 24 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118ee5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118ee8:	e8 53 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118eed:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0118ef0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118ef3:	83 ec 08             	sub    $0x8,%esp
f0118ef6:	6a 04                	push   $0x4
f0118ef8:	50                   	push   %eax
f0118ef9:	e8 b1 2f ff ff       	call   f010beaf <set_program_priority>
f0118efe:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118f01:	e8 3a b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f06:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118f09:	74 14                	je     f0118f1f <test_priority_normal_and_higher+0x44d>
f0118f0b:	83 ec 04             	sub    $0x4,%esp
f0118f0e:	68 74 d5 12 f0       	push   $0xf012d574
f0118f13:	6a 62                	push   $0x62
f0118f15:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118f1a:	e8 fb 73 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118f1f:	e8 e5 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f24:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118f27:	74 14                	je     f0118f3d <test_priority_normal_and_higher+0x46b>
f0118f29:	83 ec 04             	sub    $0x4,%esp
f0118f2c:	68 74 d5 12 f0       	push   $0xf012d574
f0118f31:	6a 63                	push   $0x63
f0118f33:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118f38:	e8 dd 73 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0118f3d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f40:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f46:	83 f8 14             	cmp    $0x14,%eax
f0118f49:	75 1c                	jne    f0118f67 <test_priority_normal_and_higher+0x495>
f0118f4b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f4e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f54:	83 f8 0f             	cmp    $0xf,%eax
f0118f57:	75 0e                	jne    f0118f67 <test_priority_normal_and_higher+0x495>
f0118f59:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f5c:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f62:	83 f8 14             	cmp    $0x14,%eax
f0118f65:	74 14                	je     f0118f7b <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0118f67:	83 ec 04             	sub    $0x4,%esp
f0118f6a:	68 6c d6 12 f0       	push   $0xf012d66c
f0118f6f:	6a 66                	push   $0x66
f0118f71:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118f76:	e8 9f 73 fe ff       	call   f010031a <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0118f7b:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0118f82:	eb 1c                	jmp    f0118fa0 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0118f84:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118f87:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118f8a:	89 d0                	mov    %edx,%eax
f0118f8c:	01 c0                	add    %eax,%eax
f0118f8e:	01 d0                	add    %edx,%eax
f0118f90:	c1 e0 03             	shl    $0x3,%eax
f0118f93:	01 c8                	add    %ecx,%eax
f0118f95:	05 8c 00 00 00       	add    $0x8c,%eax
f0118f9a:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0118f9d:	ff 45 d8             	incl   -0x28(%ebp)
f0118fa0:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0118fa4:	7e de                	jle    f0118f84 <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0118fa6:	e8 5e 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118fab:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118fae:	e8 8d b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118fb3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0118fb6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118fb9:	83 ec 08             	sub    $0x8,%esp
f0118fbc:	6a 04                	push   $0x4
f0118fbe:	50                   	push   %eax
f0118fbf:	e8 eb 2e ff ff       	call   f010beaf <set_program_priority>
f0118fc4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118fc7:	e8 74 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118fcc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118fcf:	74 14                	je     f0118fe5 <test_priority_normal_and_higher+0x513>
f0118fd1:	83 ec 04             	sub    $0x4,%esp
f0118fd4:	68 74 d5 12 f0       	push   $0xf012d574
f0118fd9:	6a 73                	push   $0x73
f0118fdb:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118fe0:	e8 35 73 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118fe5:	e8 1f 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118fea:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118fed:	74 14                	je     f0119003 <test_priority_normal_and_higher+0x531>
f0118fef:	83 ec 04             	sub    $0x4,%esp
f0118ff2:	68 74 d5 12 f0       	push   $0xf012d574
f0118ff7:	6a 74                	push   $0x74
f0118ff9:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0118ffe:	e8 17 73 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0119003:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119006:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011900c:	83 f8 14             	cmp    $0x14,%eax
f011900f:	75 1c                	jne    f011902d <test_priority_normal_and_higher+0x55b>
f0119011:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119014:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011901a:	83 f8 0f             	cmp    $0xf,%eax
f011901d:	75 0e                	jne    f011902d <test_priority_normal_and_higher+0x55b>
f011901f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119022:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119028:	83 f8 14             	cmp    $0x14,%eax
f011902b:	74 14                	je     f0119041 <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f011902d:	83 ec 04             	sub    $0x4,%esp
f0119030:	68 6c d6 12 f0       	push   $0xf012d66c
f0119035:	6a 77                	push   $0x77
f0119037:	68 f1 d4 12 f0       	push   $0xf012d4f1
f011903c:	e8 d9 72 fe ff       	call   f010031a <_panic>

		for(int i = 10; i < 15; i++)
f0119041:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0119048:	eb 1c                	jmp    f0119066 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011904a:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011904d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119050:	89 d0                	mov    %edx,%eax
f0119052:	01 c0                	add    %eax,%eax
f0119054:	01 d0                	add    %edx,%eax
f0119056:	c1 e0 03             	shl    $0x3,%eax
f0119059:	01 c8                	add    %ecx,%eax
f011905b:	05 8c 00 00 00       	add    $0x8c,%eax
f0119060:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0119063:	ff 45 d4             	incl   -0x2c(%ebp)
f0119066:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011906a:	7e de                	jle    f011904a <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011906c:	e8 98 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119071:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119074:	e8 c7 b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119079:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011907c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011907f:	83 ec 08             	sub    $0x8,%esp
f0119082:	6a 05                	push   $0x5
f0119084:	50                   	push   %eax
f0119085:	e8 25 2e ff ff       	call   f010beaf <set_program_priority>
f011908a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011908d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119090:	83 ec 08             	sub    $0x8,%esp
f0119093:	6a 05                	push   $0x5
f0119095:	50                   	push   %eax
f0119096:	e8 14 2e ff ff       	call   f010beaf <set_program_priority>
f011909b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011909e:	e8 9d b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01190a3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01190a6:	74 17                	je     f01190bf <test_priority_normal_and_higher+0x5ed>
f01190a8:	83 ec 04             	sub    $0x4,%esp
f01190ab:	68 74 d5 12 f0       	push   $0xf012d574
f01190b0:	68 82 00 00 00       	push   $0x82
f01190b5:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01190ba:	e8 5b 72 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01190bf:	e8 45 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01190c4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01190c7:	74 17                	je     f01190e0 <test_priority_normal_and_higher+0x60e>
f01190c9:	83 ec 04             	sub    $0x4,%esp
f01190cc:	68 74 d5 12 f0       	push   $0xf012d574
f01190d1:	68 83 00 00 00       	push   $0x83
f01190d6:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01190db:	e8 3a 72 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01190e0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01190e3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01190e9:	83 f8 14             	cmp    $0x14,%eax
f01190ec:	75 1c                	jne    f011910a <test_priority_normal_and_higher+0x638>
f01190ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01190f1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01190f7:	83 f8 1e             	cmp    $0x1e,%eax
f01190fa:	75 0e                	jne    f011910a <test_priority_normal_and_higher+0x638>
f01190fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01190ff:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119105:	83 f8 28             	cmp    $0x28,%eax
f0119108:	74 17                	je     f0119121 <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f011910a:	83 ec 04             	sub    $0x4,%esp
f011910d:	68 a8 d6 12 f0       	push   $0xf012d6a8
f0119112:	68 86 00 00 00       	push   $0x86
f0119117:	68 f1 d4 12 f0       	push   $0xf012d4f1
f011911c:	e8 f9 71 fe ff       	call   f010031a <_panic>

		for(int i = 20; i < 40; i++)
f0119121:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0119128:	eb 1c                	jmp    f0119146 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011912a:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f011912d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119130:	89 d0                	mov    %edx,%eax
f0119132:	01 c0                	add    %eax,%eax
f0119134:	01 d0                	add    %edx,%eax
f0119136:	c1 e0 03             	shl    $0x3,%eax
f0119139:	01 c8                	add    %ecx,%eax
f011913b:	05 8c 00 00 00       	add    $0x8c,%eax
f0119140:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0119143:	ff 45 d0             	incl   -0x30(%ebp)
f0119146:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f011914a:	7e de                	jle    f011912a <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011914c:	e8 b8 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119151:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119154:	e8 e7 b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119159:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011915c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011915f:	83 ec 08             	sub    $0x8,%esp
f0119162:	6a 05                	push   $0x5
f0119164:	50                   	push   %eax
f0119165:	e8 45 2d ff ff       	call   f010beaf <set_program_priority>
f011916a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011916d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119170:	83 ec 08             	sub    $0x8,%esp
f0119173:	6a 04                	push   $0x4
f0119175:	50                   	push   %eax
f0119176:	e8 34 2d ff ff       	call   f010beaf <set_program_priority>
f011917b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011917e:	e8 bd b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119183:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0119186:	74 17                	je     f011919f <test_priority_normal_and_higher+0x6cd>
f0119188:	83 ec 04             	sub    $0x4,%esp
f011918b:	68 74 d5 12 f0       	push   $0xf012d574
f0119190:	68 91 00 00 00       	push   $0x91
f0119195:	68 f1 d4 12 f0       	push   $0xf012d4f1
f011919a:	e8 7b 71 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011919f:	e8 65 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01191a4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01191a7:	74 17                	je     f01191c0 <test_priority_normal_and_higher+0x6ee>
f01191a9:	83 ec 04             	sub    $0x4,%esp
f01191ac:	68 74 d5 12 f0       	push   $0xf012d574
f01191b1:	68 92 00 00 00       	push   $0x92
f01191b6:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01191bb:	e8 5a 71 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01191c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01191c3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01191c9:	83 f8 14             	cmp    $0x14,%eax
f01191cc:	75 1c                	jne    f01191ea <test_priority_normal_and_higher+0x718>
f01191ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01191d1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01191d7:	83 f8 1e             	cmp    $0x1e,%eax
f01191da:	75 0e                	jne    f01191ea <test_priority_normal_and_higher+0x718>
f01191dc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01191df:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01191e5:	83 f8 28             	cmp    $0x28,%eax
f01191e8:	74 17                	je     f0119201 <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f01191ea:	83 ec 04             	sub    $0x4,%esp
f01191ed:	68 a8 d6 12 f0       	push   $0xf012d6a8
f01191f2:	68 95 00 00 00       	push   $0x95
f01191f7:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01191fc:	e8 19 71 fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 30; i++)
f0119201:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0119208:	eb 1c                	jmp    f0119226 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011920a:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011920d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119210:	89 d0                	mov    %edx,%eax
f0119212:	01 c0                	add    %eax,%eax
f0119214:	01 d0                	add    %edx,%eax
f0119216:	c1 e0 03             	shl    $0x3,%eax
f0119219:	01 c8                	add    %ecx,%eax
f011921b:	05 8c 00 00 00       	add    $0x8c,%eax
f0119220:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0119223:	ff 45 cc             	incl   -0x34(%ebp)
f0119226:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f011922a:	7e de                	jle    f011920a <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011922c:	e8 d8 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119231:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119234:	e8 07 b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119239:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011923c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011923f:	83 ec 08             	sub    $0x8,%esp
f0119242:	6a 05                	push   $0x5
f0119244:	50                   	push   %eax
f0119245:	e8 65 2c ff ff       	call   f010beaf <set_program_priority>
f011924a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011924d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119250:	83 ec 08             	sub    $0x8,%esp
f0119253:	6a 04                	push   $0x4
f0119255:	50                   	push   %eax
f0119256:	e8 54 2c ff ff       	call   f010beaf <set_program_priority>
f011925b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011925e:	e8 dd b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119263:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0119266:	74 17                	je     f011927f <test_priority_normal_and_higher+0x7ad>
f0119268:	83 ec 04             	sub    $0x4,%esp
f011926b:	68 74 d5 12 f0       	push   $0xf012d574
f0119270:	68 a0 00 00 00       	push   $0xa0
f0119275:	68 f1 d4 12 f0       	push   $0xf012d4f1
f011927a:	e8 9b 70 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011927f:	e8 85 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119284:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0119287:	74 17                	je     f01192a0 <test_priority_normal_and_higher+0x7ce>
f0119289:	83 ec 04             	sub    $0x4,%esp
f011928c:	68 74 d5 12 f0       	push   $0xf012d574
f0119291:	68 a1 00 00 00       	push   $0xa1
f0119296:	68 f1 d4 12 f0       	push   $0xf012d4f1
f011929b:	e8 7a 70 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01192a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01192a3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01192a9:	83 f8 14             	cmp    $0x14,%eax
f01192ac:	75 1c                	jne    f01192ca <test_priority_normal_and_higher+0x7f8>
f01192ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01192b1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01192b7:	83 f8 3c             	cmp    $0x3c,%eax
f01192ba:	75 0e                	jne    f01192ca <test_priority_normal_and_higher+0x7f8>
f01192bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01192bf:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01192c5:	83 f8 28             	cmp    $0x28,%eax
f01192c8:	74 17                	je     f01192e1 <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f01192ca:	83 ec 04             	sub    $0x4,%esp
f01192cd:	68 a8 d6 12 f0       	push   $0xf012d6a8
f01192d2:	68 a4 00 00 00       	push   $0xa4
f01192d7:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01192dc:	e8 39 70 fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 60; i++)
f01192e1:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01192e8:	eb 1c                	jmp    f0119306 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01192ea:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01192ed:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01192f0:	89 d0                	mov    %edx,%eax
f01192f2:	01 c0                	add    %eax,%eax
f01192f4:	01 d0                	add    %edx,%eax
f01192f6:	c1 e0 03             	shl    $0x3,%eax
f01192f9:	01 c8                	add    %ecx,%eax
f01192fb:	05 8c 00 00 00       	add    $0x8c,%eax
f0119300:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0119303:	ff 45 c8             	incl   -0x38(%ebp)
f0119306:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f011930a:	7e de                	jle    f01192ea <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011930c:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0119313:	eb 1c                	jmp    f0119331 <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0119315:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0119318:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011931b:	89 d0                	mov    %edx,%eax
f011931d:	01 c0                	add    %eax,%eax
f011931f:	01 d0                	add    %edx,%eax
f0119321:	c1 e0 03             	shl    $0x3,%eax
f0119324:	01 c8                	add    %ecx,%eax
f0119326:	05 8c 00 00 00       	add    $0x8c,%eax
f011932b:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011932e:	ff 45 c4             	incl   -0x3c(%ebp)
f0119331:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0119335:	7e de                	jle    f0119315 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0119337:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f011933e:	eb 7d                	jmp    f01193bd <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119340:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119343:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f011934a:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f011934d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0119350:	89 d0                	mov    %edx,%eax
f0119352:	01 c0                	add    %eax,%eax
f0119354:	01 d0                	add    %edx,%eax
f0119356:	c1 e0 03             	shl    $0x3,%eax
f0119359:	01 d8                	add    %ebx,%eax
f011935b:	05 88 00 00 00       	add    $0x88,%eax
f0119360:	8b 00                	mov    (%eax),%eax
f0119362:	39 c1                	cmp    %eax,%ecx
f0119364:	74 17                	je     f011937d <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f0119366:	83 ec 04             	sub    $0x4,%esp
f0119369:	68 e4 d6 12 f0       	push   $0xf012d6e4
f011936e:	68 b2 00 00 00       	push   $0xb2
f0119373:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119378:	e8 9d 6f fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011937d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119380:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0119387:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f011938a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011938d:	89 d0                	mov    %edx,%eax
f011938f:	01 c0                	add    %eax,%eax
f0119391:	01 d0                	add    %edx,%eax
f0119393:	c1 e0 03             	shl    $0x3,%eax
f0119396:	01 d8                	add    %ebx,%eax
f0119398:	05 90 00 00 00       	add    $0x90,%eax
f011939d:	8b 00                	mov    (%eax),%eax
f011939f:	39 c1                	cmp    %eax,%ecx
f01193a1:	74 17                	je     f01193ba <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f01193a3:	83 ec 04             	sub    $0x4,%esp
f01193a6:	68 e4 d6 12 f0       	push   $0xf012d6e4
f01193ab:	68 b5 00 00 00       	push   $0xb5
f01193b0:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01193b5:	e8 60 6f fe ff       	call   f010031a <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01193ba:	ff 45 c0             	incl   -0x40(%ebp)
f01193bd:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f01193c1:	0f 8e 79 ff ff ff    	jle    f0119340 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01193c7:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01193ce:	eb 7d                	jmp    f011944d <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01193d0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01193d3:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01193da:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01193dd:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01193e0:	89 d0                	mov    %edx,%eax
f01193e2:	01 c0                	add    %eax,%eax
f01193e4:	01 d0                	add    %edx,%eax
f01193e6:	c1 e0 03             	shl    $0x3,%eax
f01193e9:	01 d8                	add    %ebx,%eax
f01193eb:	05 88 00 00 00       	add    $0x88,%eax
f01193f0:	8b 00                	mov    (%eax),%eax
f01193f2:	39 c1                	cmp    %eax,%ecx
f01193f4:	74 17                	je     f011940d <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f01193f6:	83 ec 04             	sub    $0x4,%esp
f01193f9:	68 e4 d6 12 f0       	push   $0xf012d6e4
f01193fe:	68 bb 00 00 00       	push   $0xbb
f0119403:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119408:	e8 0d 6f fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011940d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119410:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0119417:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011941a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011941d:	89 d0                	mov    %edx,%eax
f011941f:	01 c0                	add    %eax,%eax
f0119421:	01 d0                	add    %edx,%eax
f0119423:	c1 e0 03             	shl    $0x3,%eax
f0119426:	01 d8                	add    %ebx,%eax
f0119428:	05 90 00 00 00       	add    $0x90,%eax
f011942d:	8b 00                	mov    (%eax),%eax
f011942f:	39 c1                	cmp    %eax,%ecx
f0119431:	74 17                	je     f011944a <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0119433:	83 ec 04             	sub    $0x4,%esp
f0119436:	68 e4 d6 12 f0       	push   $0xf012d6e4
f011943b:	68 be 00 00 00       	push   $0xbe
f0119440:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119445:	e8 d0 6e fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011944a:	ff 45 bc             	incl   -0x44(%ebp)
f011944d:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0119451:	0f 8e 79 ff ff ff    	jle    f01193d0 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119457:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011945e:	eb 7d                	jmp    f01194dd <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119460:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119463:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011946a:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011946d:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0119470:	89 d0                	mov    %edx,%eax
f0119472:	01 c0                	add    %eax,%eax
f0119474:	01 d0                	add    %edx,%eax
f0119476:	c1 e0 03             	shl    $0x3,%eax
f0119479:	01 d8                	add    %ebx,%eax
f011947b:	05 88 00 00 00       	add    $0x88,%eax
f0119480:	8b 00                	mov    (%eax),%eax
f0119482:	39 c1                	cmp    %eax,%ecx
f0119484:	74 17                	je     f011949d <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0119486:	83 ec 04             	sub    $0x4,%esp
f0119489:	68 e4 d6 12 f0       	push   $0xf012d6e4
f011948e:	68 c4 00 00 00       	push   $0xc4
f0119493:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119498:	e8 7d 6e fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011949d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01194a0:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01194a7:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01194aa:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01194ad:	89 d0                	mov    %edx,%eax
f01194af:	01 c0                	add    %eax,%eax
f01194b1:	01 d0                	add    %edx,%eax
f01194b3:	c1 e0 03             	shl    $0x3,%eax
f01194b6:	01 d8                	add    %ebx,%eax
f01194b8:	05 90 00 00 00       	add    $0x90,%eax
f01194bd:	8b 00                	mov    (%eax),%eax
f01194bf:	39 c1                	cmp    %eax,%ecx
f01194c1:	74 17                	je     f01194da <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f01194c3:	83 ec 04             	sub    $0x4,%esp
f01194c6:	68 e4 d6 12 f0       	push   $0xf012d6e4
f01194cb:	68 c7 00 00 00       	push   $0xc7
f01194d0:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01194d5:	e8 40 6e fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01194da:	ff 45 b8             	incl   -0x48(%ebp)
f01194dd:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01194e1:	0f 8e 79 ff ff ff    	jle    f0119460 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f01194e7:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01194ee:	75 6e 61 
f01194f1:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01194f8:	6c 00 00 
f01194fb:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0119501:	b9 17 00 00 00       	mov    $0x17,%ecx
f0119506:	b8 00 00 00 00       	mov    $0x0,%eax
f011950b:	89 d7                	mov    %edx,%edi
f011950d:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011950f:	83 ec 0c             	sub    $0xc,%esp
f0119512:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0119518:	50                   	push   %eax
f0119519:	e8 be 89 fe ff       	call   f0101edc <execute_command>
f011951e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f0119521:	eb 10                	jmp    f0119533 <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0119523:	83 ec 0c             	sub    $0xc,%esp
f0119526:	68 18 d7 12 f0       	push   $0xf012d718
f011952b:	e8 3c 7a fe ff       	call   f0100f6c <cprintf>
f0119530:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0119533:	90                   	nop
f0119534:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119537:	5b                   	pop    %ebx
f0119538:	5e                   	pop    %esi
f0119539:	5f                   	pop    %edi
f011953a:	5d                   	pop    %ebp
f011953b:	c3                   	ret    

f011953c <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011953c:	55                   	push   %ebp
f011953d:	89 e5                	mov    %esp,%ebp
f011953f:	57                   	push   %edi
f0119540:	56                   	push   %esi
f0119541:	53                   	push   %ebx
f0119542:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0119548:	a0 94 dd 17 f0       	mov    0xf017dd94,%al
f011954d:	84 c0                	test   %al,%al
f011954f:	0f 84 1b 0a 00 00    	je     f0119f70 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0119555:	c6 05 94 dd 17 f0 00 	movb   $0x0,0xf017dd94
		char command[100] = "load fos_add 20";
f011955c:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0119562:	bb 54 d7 12 f0       	mov    $0xf012d754,%ebx
f0119567:	ba 04 00 00 00       	mov    $0x4,%edx
f011956c:	89 c7                	mov    %eax,%edi
f011956e:	89 de                	mov    %ebx,%esi
f0119570:	89 d1                	mov    %edx,%ecx
f0119572:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0119574:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011957a:	b9 15 00 00 00       	mov    $0x15,%ecx
f011957f:	b8 00 00 00 00       	mov    $0x0,%eax
f0119584:	89 d7                	mov    %edx,%edi
f0119586:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0119588:	83 ec 0c             	sub    $0xc,%esp
f011958b:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0119591:	50                   	push   %eax
f0119592:	e8 45 89 fe ff       	call   f0101edc <execute_command>
f0119597:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011959a:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01195a0:	bb 5c da 12 f0       	mov    $0xf012da5c,%ebx
f01195a5:	ba 0d 00 00 00       	mov    $0xd,%edx
f01195aa:	89 c7                	mov    %eax,%edi
f01195ac:	89 de                	mov    %ebx,%esi
f01195ae:	89 d1                	mov    %edx,%ecx
f01195b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01195b2:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01195b8:	b9 57 00 00 00       	mov    $0x57,%ecx
f01195bd:	b0 00                	mov    $0x0,%al
f01195bf:	89 d7                	mov    %edx,%edi
f01195c1:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01195c3:	83 ec 0c             	sub    $0xc,%esp
f01195c6:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01195cc:	50                   	push   %eax
f01195cd:	e8 0a 89 fe ff       	call   f0101edc <execute_command>
f01195d2:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01195d5:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01195db:	bb c0 da 12 f0       	mov    $0xf012dac0,%ebx
f01195e0:	ba 17 00 00 00       	mov    $0x17,%edx
f01195e5:	89 c7                	mov    %eax,%edi
f01195e7:	89 de                	mov    %ebx,%esi
f01195e9:	89 d1                	mov    %edx,%ecx
f01195eb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01195ed:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01195f3:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01195f8:	b0 00                	mov    $0x0,%al
f01195fa:	89 d7                	mov    %edx,%edi
f01195fc:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01195fe:	83 ec 0c             	sub    $0xc,%esp
f0119601:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0119607:	50                   	push   %eax
f0119608:	e8 cf 88 fe ff       	call   f0101edc <execute_command>
f011960d:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0119610:	83 ec 04             	sub    $0x4,%esp
f0119613:	6a 00                	push   $0x0
f0119615:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0119618:	50                   	push   %eax
f0119619:	68 00 10 00 00       	push   $0x1000
f011961e:	e8 9d 11 ff ff       	call   f010a7c0 <envid2env>
f0119623:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0119626:	83 ec 04             	sub    $0x4,%esp
f0119629:	6a 00                	push   $0x0
f011962b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011962e:	50                   	push   %eax
f011962f:	68 01 10 00 00       	push   $0x1001
f0119634:	e8 87 11 ff ff       	call   f010a7c0 <envid2env>
f0119639:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011963c:	83 ec 04             	sub    $0x4,%esp
f011963f:	6a 00                	push   $0x0
f0119641:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0119644:	50                   	push   %eax
f0119645:	68 02 10 00 00       	push   $0x1002
f011964a:	e8 71 11 ff ff       	call   f010a7c0 <envid2env>
f011964f:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0119652:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119655:	85 c0                	test   %eax,%eax
f0119657:	74 0e                	je     f0119667 <test_priority_normal_and_lower+0x12b>
f0119659:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011965c:	85 c0                	test   %eax,%eax
f011965e:	74 07                	je     f0119667 <test_priority_normal_and_lower+0x12b>
f0119660:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119663:	85 c0                	test   %eax,%eax
f0119665:	75 17                	jne    f011967e <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0119667:	83 ec 04             	sub    $0x4,%esp
f011966a:	68 d8 d4 12 f0       	push   $0xf012d4d8
f011966f:	68 f2 00 00 00       	push   $0xf2
f0119674:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119679:	e8 9c 6c fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011967e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119681:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119687:	83 f8 14             	cmp    $0x14,%eax
f011968a:	75 1c                	jne    f01196a8 <test_priority_normal_and_lower+0x16c>
f011968c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011968f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119695:	83 f8 1e             	cmp    $0x1e,%eax
f0119698:	75 0e                	jne    f01196a8 <test_priority_normal_and_lower+0x16c>
f011969a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011969d:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01196a3:	83 f8 28             	cmp    $0x28,%eax
f01196a6:	74 17                	je     f01196bf <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f01196a8:	83 ec 04             	sub    $0x4,%esp
f01196ab:	68 80 d8 12 f0       	push   $0xf012d880
f01196b0:	68 f5 00 00 00       	push   $0xf5
f01196b5:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01196ba:	e8 5b 6c fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f01196bf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01196c6:	eb 47                	jmp    f011970f <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01196c8:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01196cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01196ce:	89 d0                	mov    %edx,%eax
f01196d0:	01 c0                	add    %eax,%eax
f01196d2:	01 d0                	add    %edx,%eax
f01196d4:	c1 e0 03             	shl    $0x3,%eax
f01196d7:	01 c8                	add    %ecx,%eax
f01196d9:	05 88 00 00 00       	add    $0x88,%eax
f01196de:	8b 10                	mov    (%eax),%edx
f01196e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01196e3:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01196ea:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01196ed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01196f0:	89 d0                	mov    %edx,%eax
f01196f2:	01 c0                	add    %eax,%eax
f01196f4:	01 d0                	add    %edx,%eax
f01196f6:	c1 e0 03             	shl    $0x3,%eax
f01196f9:	01 c8                	add    %ecx,%eax
f01196fb:	05 90 00 00 00       	add    $0x90,%eax
f0119700:	8b 10                	mov    (%eax),%edx
f0119702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119705:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011970c:	ff 45 e4             	incl   -0x1c(%ebp)
f011970f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0119713:	7e b3                	jle    f01196c8 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0119715:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011971c:	eb 47                	jmp    f0119765 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011971e:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0119721:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119724:	89 d0                	mov    %edx,%eax
f0119726:	01 c0                	add    %eax,%eax
f0119728:	01 d0                	add    %edx,%eax
f011972a:	c1 e0 03             	shl    $0x3,%eax
f011972d:	01 c8                	add    %ecx,%eax
f011972f:	05 88 00 00 00       	add    $0x88,%eax
f0119734:	8b 10                	mov    (%eax),%edx
f0119736:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119739:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0119740:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0119743:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119746:	89 d0                	mov    %edx,%eax
f0119748:	01 c0                	add    %eax,%eax
f011974a:	01 d0                	add    %edx,%eax
f011974c:	c1 e0 03             	shl    $0x3,%eax
f011974f:	01 c8                	add    %ecx,%eax
f0119751:	05 90 00 00 00       	add    $0x90,%eax
f0119756:	8b 10                	mov    (%eax),%edx
f0119758:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011975b:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0119762:	ff 45 e0             	incl   -0x20(%ebp)
f0119765:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0119769:	7e b3                	jle    f011971e <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011976b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0119772:	eb 47                	jmp    f01197bb <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0119774:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0119777:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011977a:	89 d0                	mov    %edx,%eax
f011977c:	01 c0                	add    %eax,%eax
f011977e:	01 d0                	add    %edx,%eax
f0119780:	c1 e0 03             	shl    $0x3,%eax
f0119783:	01 c8                	add    %ecx,%eax
f0119785:	05 88 00 00 00       	add    $0x88,%eax
f011978a:	8b 10                	mov    (%eax),%edx
f011978c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011978f:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0119796:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0119799:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011979c:	89 d0                	mov    %edx,%eax
f011979e:	01 c0                	add    %eax,%eax
f01197a0:	01 d0                	add    %edx,%eax
f01197a2:	c1 e0 03             	shl    $0x3,%eax
f01197a5:	01 c8                	add    %ecx,%eax
f01197a7:	05 90 00 00 00       	add    $0x90,%eax
f01197ac:	8b 10                	mov    (%eax),%edx
f01197ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01197b1:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01197b8:	ff 45 dc             	incl   -0x24(%ebp)
f01197bb:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01197bf:	7e b3                	jle    f0119774 <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01197c1:	e8 43 42 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01197c6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01197c9:	e8 72 b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01197ce:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01197d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01197d4:	83 ec 08             	sub    $0x8,%esp
f01197d7:	6a 03                	push   $0x3
f01197d9:	50                   	push   %eax
f01197da:	e8 d0 26 ff ff       	call   f010beaf <set_program_priority>
f01197df:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01197e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01197e5:	83 ec 08             	sub    $0x8,%esp
f01197e8:	6a 03                	push   $0x3
f01197ea:	50                   	push   %eax
f01197eb:	e8 bf 26 ff ff       	call   f010beaf <set_program_priority>
f01197f0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01197f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01197f6:	83 ec 08             	sub    $0x8,%esp
f01197f9:	6a 03                	push   $0x3
f01197fb:	50                   	push   %eax
f01197fc:	e8 ae 26 ff ff       	call   f010beaf <set_program_priority>
f0119801:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119804:	e8 37 b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119809:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011980c:	74 17                	je     f0119825 <test_priority_normal_and_lower+0x2e9>
f011980e:	83 ec 04             	sub    $0x4,%esp
f0119811:	68 74 d5 12 f0       	push   $0xf012d574
f0119816:	68 11 01 00 00       	push   $0x111
f011981b:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119820:	e8 f5 6a fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0119825:	e8 df 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011982a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011982d:	74 17                	je     f0119846 <test_priority_normal_and_lower+0x30a>
f011982f:	83 ec 04             	sub    $0x4,%esp
f0119832:	68 74 d5 12 f0       	push   $0xf012d574
f0119837:	68 12 01 00 00       	push   $0x112
f011983c:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119841:	e8 d4 6a fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0119846:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119849:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011984f:	83 f8 14             	cmp    $0x14,%eax
f0119852:	75 1c                	jne    f0119870 <test_priority_normal_and_lower+0x334>
f0119854:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119857:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011985d:	83 f8 1e             	cmp    $0x1e,%eax
f0119860:	75 0e                	jne    f0119870 <test_priority_normal_and_lower+0x334>
f0119862:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119865:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011986b:	83 f8 28             	cmp    $0x28,%eax
f011986e:	74 17                	je     f0119887 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0119870:	83 ec 04             	sub    $0x4,%esp
f0119873:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0119878:	68 15 01 00 00       	push   $0x115
f011987d:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119882:	e8 93 6a fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0119887:	e8 7d 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011988c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011988f:	e8 ac af fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119894:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0119897:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011989a:	83 ec 08             	sub    $0x8,%esp
f011989d:	6a 02                	push   $0x2
f011989f:	50                   	push   %eax
f01198a0:	e8 0a 26 ff ff       	call   f010beaf <set_program_priority>
f01198a5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01198a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01198ab:	83 ec 08             	sub    $0x8,%esp
f01198ae:	6a 02                	push   $0x2
f01198b0:	50                   	push   %eax
f01198b1:	e8 f9 25 ff ff       	call   f010beaf <set_program_priority>
f01198b6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01198b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01198bc:	83 ec 08             	sub    $0x8,%esp
f01198bf:	6a 02                	push   $0x2
f01198c1:	50                   	push   %eax
f01198c2:	e8 e8 25 ff ff       	call   f010beaf <set_program_priority>
f01198c7:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01198ca:	e8 71 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f01198cf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01198d2:	74 17                	je     f01198eb <test_priority_normal_and_lower+0x3af>
f01198d4:	83 ec 04             	sub    $0x4,%esp
f01198d7:	68 74 d5 12 f0       	push   $0xf012d574
f01198dc:	68 1f 01 00 00       	push   $0x11f
f01198e1:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01198e6:	e8 2f 6a fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01198eb:	e8 19 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01198f0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01198f3:	74 21                	je     f0119916 <test_priority_normal_and_lower+0x3da>
f01198f5:	e8 0f 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01198fa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01198fd:	29 c2                	sub    %eax,%edx
f01198ff:	89 d0                	mov    %edx,%eax
f0119901:	50                   	push   %eax
f0119902:	68 f4 d5 12 f0       	push   $0xf012d5f4
f0119907:	68 20 01 00 00       	push   $0x120
f011990c:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119911:	e8 04 6a fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0119916:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119919:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011991f:	83 f8 0a             	cmp    $0xa,%eax
f0119922:	75 1c                	jne    f0119940 <test_priority_normal_and_lower+0x404>
f0119924:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119927:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011992d:	83 f8 0f             	cmp    $0xf,%eax
f0119930:	75 0e                	jne    f0119940 <test_priority_normal_and_lower+0x404>
f0119932:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119935:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011993b:	83 f8 14             	cmp    $0x14,%eax
f011993e:	74 17                	je     f0119957 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0119940:	83 ec 04             	sub    $0x4,%esp
f0119943:	68 24 d6 12 f0       	push   $0xf012d624
f0119948:	68 23 01 00 00       	push   $0x123
f011994d:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119952:	e8 c3 69 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0119957:	e8 ad 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011995c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011995f:	e8 dc ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119964:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0119967:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011996a:	83 ec 08             	sub    $0x8,%esp
f011996d:	6a 02                	push   $0x2
f011996f:	50                   	push   %eax
f0119970:	e8 3a 25 ff ff       	call   f010beaf <set_program_priority>
f0119975:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0119978:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011997b:	83 ec 08             	sub    $0x8,%esp
f011997e:	6a 02                	push   $0x2
f0119980:	50                   	push   %eax
f0119981:	e8 29 25 ff ff       	call   f010beaf <set_program_priority>
f0119986:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0119989:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011998c:	83 ec 08             	sub    $0x8,%esp
f011998f:	6a 02                	push   $0x2
f0119991:	50                   	push   %eax
f0119992:	e8 18 25 ff ff       	call   f010beaf <set_program_priority>
f0119997:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011999a:	e8 a1 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f011999f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01199a2:	74 17                	je     f01199bb <test_priority_normal_and_lower+0x47f>
f01199a4:	83 ec 04             	sub    $0x4,%esp
f01199a7:	68 74 d5 12 f0       	push   $0xf012d574
f01199ac:	68 2d 01 00 00       	push   $0x12d
f01199b1:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01199b6:	e8 5f 69 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01199bb:	e8 49 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01199c0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01199c3:	74 21                	je     f01199e6 <test_priority_normal_and_lower+0x4aa>
f01199c5:	e8 3f 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01199ca:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01199cd:	29 c2                	sub    %eax,%edx
f01199cf:	89 d0                	mov    %edx,%eax
f01199d1:	50                   	push   %eax
f01199d2:	68 f4 d5 12 f0       	push   $0xf012d5f4
f01199d7:	68 2e 01 00 00       	push   $0x12e
f01199dc:	68 f1 d4 12 f0       	push   $0xf012d4f1
f01199e1:	e8 34 69 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01199e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01199e9:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01199ef:	83 f8 0a             	cmp    $0xa,%eax
f01199f2:	75 1c                	jne    f0119a10 <test_priority_normal_and_lower+0x4d4>
f01199f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01199f7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01199fd:	83 f8 0f             	cmp    $0xf,%eax
f0119a00:	75 0e                	jne    f0119a10 <test_priority_normal_and_lower+0x4d4>
f0119a02:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119a05:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a0b:	83 f8 0a             	cmp    $0xa,%eax
f0119a0e:	74 17                	je     f0119a27 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0119a10:	83 ec 04             	sub    $0x4,%esp
f0119a13:	68 24 d6 12 f0       	push   $0xf012d624
f0119a18:	68 31 01 00 00       	push   $0x131
f0119a1d:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119a22:	e8 f3 68 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 10; i++)
f0119a27:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0119a2e:	eb 7d                	jmp    f0119aad <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119a30:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119a33:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0119a3a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119a3d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119a40:	89 d0                	mov    %edx,%eax
f0119a42:	01 c0                	add    %eax,%eax
f0119a44:	01 d0                	add    %edx,%eax
f0119a46:	c1 e0 03             	shl    $0x3,%eax
f0119a49:	01 d8                	add    %ebx,%eax
f0119a4b:	05 88 00 00 00       	add    $0x88,%eax
f0119a50:	8b 00                	mov    (%eax),%eax
f0119a52:	39 c1                	cmp    %eax,%ecx
f0119a54:	74 17                	je     f0119a6d <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0119a56:	83 ec 04             	sub    $0x4,%esp
f0119a59:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0119a5e:	68 36 01 00 00       	push   $0x136
f0119a63:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119a68:	e8 ad 68 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0119a6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119a70:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0119a77:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119a7a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119a7d:	89 d0                	mov    %edx,%eax
f0119a7f:	01 c0                	add    %eax,%eax
f0119a81:	01 d0                	add    %edx,%eax
f0119a83:	c1 e0 03             	shl    $0x3,%eax
f0119a86:	01 d8                	add    %ebx,%eax
f0119a88:	05 90 00 00 00       	add    $0x90,%eax
f0119a8d:	8b 00                	mov    (%eax),%eax
f0119a8f:	39 c1                	cmp    %eax,%ecx
f0119a91:	74 17                	je     f0119aaa <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0119a93:	83 ec 04             	sub    $0x4,%esp
f0119a96:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0119a9b:	68 39 01 00 00       	push   $0x139
f0119aa0:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119aa5:	e8 70 68 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0119aaa:	ff 45 d8             	incl   -0x28(%ebp)
f0119aad:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0119ab1:	0f 8e 79 ff ff ff    	jle    f0119a30 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119ab7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0119abe:	eb 7d                	jmp    f0119b3d <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119ac0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119ac3:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0119aca:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119acd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119ad0:	89 d0                	mov    %edx,%eax
f0119ad2:	01 c0                	add    %eax,%eax
f0119ad4:	01 d0                	add    %edx,%eax
f0119ad6:	c1 e0 03             	shl    $0x3,%eax
f0119ad9:	01 d8                	add    %ebx,%eax
f0119adb:	05 88 00 00 00       	add    $0x88,%eax
f0119ae0:	8b 00                	mov    (%eax),%eax
f0119ae2:	39 c1                	cmp    %eax,%ecx
f0119ae4:	74 17                	je     f0119afd <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0119ae6:	83 ec 04             	sub    $0x4,%esp
f0119ae9:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0119aee:	68 3f 01 00 00       	push   $0x13f
f0119af3:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119af8:	e8 1d 68 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119afd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119b00:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0119b07:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119b0a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119b0d:	89 d0                	mov    %edx,%eax
f0119b0f:	01 c0                	add    %eax,%eax
f0119b11:	01 d0                	add    %edx,%eax
f0119b13:	c1 e0 03             	shl    $0x3,%eax
f0119b16:	01 d8                	add    %ebx,%eax
f0119b18:	05 90 00 00 00       	add    $0x90,%eax
f0119b1d:	8b 00                	mov    (%eax),%eax
f0119b1f:	39 c1                	cmp    %eax,%ecx
f0119b21:	74 17                	je     f0119b3a <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0119b23:	83 ec 04             	sub    $0x4,%esp
f0119b26:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0119b2b:	68 42 01 00 00       	push   $0x142
f0119b30:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119b35:	e8 e0 67 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119b3a:	ff 45 d4             	incl   -0x2c(%ebp)
f0119b3d:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0119b41:	0f 8e 79 ff ff ff    	jle    f0119ac0 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119b47:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0119b4e:	eb 7d                	jmp    f0119bcd <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119b50:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119b53:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0119b5a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119b5d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119b60:	89 d0                	mov    %edx,%eax
f0119b62:	01 c0                	add    %eax,%eax
f0119b64:	01 d0                	add    %edx,%eax
f0119b66:	c1 e0 03             	shl    $0x3,%eax
f0119b69:	01 d8                	add    %ebx,%eax
f0119b6b:	05 88 00 00 00       	add    $0x88,%eax
f0119b70:	8b 00                	mov    (%eax),%eax
f0119b72:	39 c1                	cmp    %eax,%ecx
f0119b74:	74 17                	je     f0119b8d <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0119b76:	83 ec 04             	sub    $0x4,%esp
f0119b79:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0119b7e:	68 48 01 00 00       	push   $0x148
f0119b83:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119b88:	e8 8d 67 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0119b8d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119b90:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0119b97:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119b9a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119b9d:	89 d0                	mov    %edx,%eax
f0119b9f:	01 c0                	add    %eax,%eax
f0119ba1:	01 d0                	add    %edx,%eax
f0119ba3:	c1 e0 03             	shl    $0x3,%eax
f0119ba6:	01 d8                	add    %ebx,%eax
f0119ba8:	05 90 00 00 00       	add    $0x90,%eax
f0119bad:	8b 00                	mov    (%eax),%eax
f0119baf:	39 c1                	cmp    %eax,%ecx
f0119bb1:	74 17                	je     f0119bca <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f0119bb3:	83 ec 04             	sub    $0x4,%esp
f0119bb6:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0119bbb:	68 4b 01 00 00       	push   $0x14b
f0119bc0:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119bc5:	e8 50 67 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119bca:	ff 45 d0             	incl   -0x30(%ebp)
f0119bcd:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0119bd1:	0f 8e 79 ff ff ff    	jle    f0119b50 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0119bd7:	e8 2d 3e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119bdc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119bdf:	e8 5c ac fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119be4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0119be7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119bea:	83 ec 08             	sub    $0x8,%esp
f0119bed:	6a 01                	push   $0x1
f0119bef:	50                   	push   %eax
f0119bf0:	e8 ba 22 ff ff       	call   f010beaf <set_program_priority>
f0119bf5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0119bf8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119bfb:	83 ec 08             	sub    $0x8,%esp
f0119bfe:	6a 01                	push   $0x1
f0119c00:	50                   	push   %eax
f0119c01:	e8 a9 22 ff ff       	call   f010beaf <set_program_priority>
f0119c06:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0119c09:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119c0c:	83 ec 08             	sub    $0x8,%esp
f0119c0f:	6a 01                	push   $0x1
f0119c11:	50                   	push   %eax
f0119c12:	e8 98 22 ff ff       	call   f010beaf <set_program_priority>
f0119c17:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119c1a:	e8 21 ac fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119c1f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119c22:	74 17                	je     f0119c3b <test_priority_normal_and_lower+0x6ff>
f0119c24:	83 ec 04             	sub    $0x4,%esp
f0119c27:	68 74 d5 12 f0       	push   $0xf012d574
f0119c2c:	68 54 01 00 00       	push   $0x154
f0119c31:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119c36:	e8 df 66 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0119c3b:	e8 c9 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119c40:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0119c43:	83 f8 0d             	cmp    $0xd,%eax
f0119c46:	74 17                	je     f0119c5f <test_priority_normal_and_lower+0x723>
f0119c48:	83 ec 04             	sub    $0x4,%esp
f0119c4b:	68 cc d8 12 f0       	push   $0xf012d8cc
f0119c50:	68 55 01 00 00       	push   $0x155
f0119c55:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119c5a:	e8 bb 66 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0119c5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119c62:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119c68:	83 f8 05             	cmp    $0x5,%eax
f0119c6b:	75 1c                	jne    f0119c89 <test_priority_normal_and_lower+0x74d>
f0119c6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119c70:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119c76:	83 f8 07             	cmp    $0x7,%eax
f0119c79:	75 0e                	jne    f0119c89 <test_priority_normal_and_lower+0x74d>
f0119c7b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119c7e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119c84:	83 f8 05             	cmp    $0x5,%eax
f0119c87:	74 17                	je     f0119ca0 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0119c89:	83 ec 04             	sub    $0x4,%esp
f0119c8c:	68 14 d9 12 f0       	push   $0xf012d914
f0119c91:	68 58 01 00 00       	push   $0x158
f0119c96:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119c9b:	e8 7a 66 fe ff       	call   f010031a <_panic>


		freeFrames = sys_calculate_free_frames();
f0119ca0:	e8 64 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119ca5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ca8:	e8 93 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119cad:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0119cb0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cb3:	83 ec 08             	sub    $0x8,%esp
f0119cb6:	6a 01                	push   $0x1
f0119cb8:	50                   	push   %eax
f0119cb9:	e8 f1 21 ff ff       	call   f010beaf <set_program_priority>
f0119cbe:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119cc1:	e8 7a ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119cc6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119cc9:	74 17                	je     f0119ce2 <test_priority_normal_and_lower+0x7a6>
f0119ccb:	83 ec 04             	sub    $0x4,%esp
f0119cce:	68 74 d5 12 f0       	push   $0xf012d574
f0119cd3:	68 5e 01 00 00       	push   $0x15e
f0119cd8:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119cdd:	e8 38 66 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0119ce2:	e8 22 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119ce7:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0119cea:	83 f8 03             	cmp    $0x3,%eax
f0119ced:	74 17                	je     f0119d06 <test_priority_normal_and_lower+0x7ca>
f0119cef:	83 ec 04             	sub    $0x4,%esp
f0119cf2:	68 74 d5 12 f0       	push   $0xf012d574
f0119cf7:	68 5f 01 00 00       	push   $0x15f
f0119cfc:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119d01:	e8 14 66 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0119d06:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119d09:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119d0f:	83 f8 02             	cmp    $0x2,%eax
f0119d12:	75 1c                	jne    f0119d30 <test_priority_normal_and_lower+0x7f4>
f0119d14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119d17:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119d1d:	83 f8 07             	cmp    $0x7,%eax
f0119d20:	75 0e                	jne    f0119d30 <test_priority_normal_and_lower+0x7f4>
f0119d22:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d25:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119d2b:	83 f8 05             	cmp    $0x5,%eax
f0119d2e:	74 17                	je     f0119d47 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0119d30:	83 ec 04             	sub    $0x4,%esp
f0119d33:	68 a8 d6 12 f0       	push   $0xf012d6a8
f0119d38:	68 62 01 00 00       	push   $0x162
f0119d3d:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119d42:	e8 d3 65 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 2; i++)
f0119d47:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0119d4e:	e9 83 00 00 00       	jmp    f0119dd6 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119d53:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119d56:	83 c0 08             	add    $0x8,%eax
f0119d59:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0119d60:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119d63:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119d66:	89 d0                	mov    %edx,%eax
f0119d68:	01 c0                	add    %eax,%eax
f0119d6a:	01 d0                	add    %edx,%eax
f0119d6c:	c1 e0 03             	shl    $0x3,%eax
f0119d6f:	01 d8                	add    %ebx,%eax
f0119d71:	05 88 00 00 00       	add    $0x88,%eax
f0119d76:	8b 00                	mov    (%eax),%eax
f0119d78:	39 c1                	cmp    %eax,%ecx
f0119d7a:	74 17                	je     f0119d93 <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119d7c:	83 ec 04             	sub    $0x4,%esp
f0119d7f:	68 44 d9 12 f0       	push   $0xf012d944
f0119d84:	68 67 01 00 00       	push   $0x167
f0119d89:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119d8e:	e8 87 65 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0119d93:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119d96:	83 c0 08             	add    $0x8,%eax
f0119d99:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0119da0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119da3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119da6:	89 d0                	mov    %edx,%eax
f0119da8:	01 c0                	add    %eax,%eax
f0119daa:	01 d0                	add    %edx,%eax
f0119dac:	c1 e0 03             	shl    $0x3,%eax
f0119daf:	01 d8                	add    %ebx,%eax
f0119db1:	05 90 00 00 00       	add    $0x90,%eax
f0119db6:	8b 00                	mov    (%eax),%eax
f0119db8:	39 c1                	cmp    %eax,%ecx
f0119dba:	74 17                	je     f0119dd3 <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119dbc:	83 ec 04             	sub    $0x4,%esp
f0119dbf:	68 44 d9 12 f0       	push   $0xf012d944
f0119dc4:	68 6a 01 00 00       	push   $0x16a
f0119dc9:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119dce:	e8 47 65 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0119dd3:	ff 45 cc             	incl   -0x34(%ebp)
f0119dd6:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0119dda:	0f 8e 73 ff ff ff    	jle    f0119d53 <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0119de0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0119de7:	e9 83 00 00 00       	jmp    f0119e6f <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119dec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119def:	83 c0 03             	add    $0x3,%eax
f0119df2:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0119df9:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119dfc:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119dff:	89 d0                	mov    %edx,%eax
f0119e01:	01 c0                	add    %eax,%eax
f0119e03:	01 d0                	add    %edx,%eax
f0119e05:	c1 e0 03             	shl    $0x3,%eax
f0119e08:	01 d8                	add    %ebx,%eax
f0119e0a:	05 88 00 00 00       	add    $0x88,%eax
f0119e0f:	8b 00                	mov    (%eax),%eax
f0119e11:	39 c1                	cmp    %eax,%ecx
f0119e13:	74 17                	je     f0119e2c <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0119e15:	ff 75 c8             	pushl  -0x38(%ebp)
f0119e18:	68 b0 d9 12 f0       	push   $0xf012d9b0
f0119e1d:	68 70 01 00 00       	push   $0x170
f0119e22:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119e27:	e8 ee 64 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119e2c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119e2f:	83 c0 03             	add    $0x3,%eax
f0119e32:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0119e39:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119e3c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119e3f:	89 d0                	mov    %edx,%eax
f0119e41:	01 c0                	add    %eax,%eax
f0119e43:	01 d0                	add    %edx,%eax
f0119e45:	c1 e0 03             	shl    $0x3,%eax
f0119e48:	01 d8                	add    %ebx,%eax
f0119e4a:	05 90 00 00 00       	add    $0x90,%eax
f0119e4f:	8b 00                	mov    (%eax),%eax
f0119e51:	39 c1                	cmp    %eax,%ecx
f0119e53:	74 17                	je     f0119e6c <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119e55:	83 ec 04             	sub    $0x4,%esp
f0119e58:	68 44 d9 12 f0       	push   $0xf012d944
f0119e5d:	68 73 01 00 00       	push   $0x173
f0119e62:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119e67:	e8 ae 64 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0119e6c:	ff 45 c8             	incl   -0x38(%ebp)
f0119e6f:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0119e73:	0f 8e 73 ff ff ff    	jle    f0119dec <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0119e79:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0119e80:	e9 83 00 00 00       	jmp    f0119f08 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119e85:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119e88:	83 c0 05             	add    $0x5,%eax
f0119e8b:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0119e92:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119e95:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0119e98:	89 d0                	mov    %edx,%eax
f0119e9a:	01 c0                	add    %eax,%eax
f0119e9c:	01 d0                	add    %edx,%eax
f0119e9e:	c1 e0 03             	shl    $0x3,%eax
f0119ea1:	01 d8                	add    %ebx,%eax
f0119ea3:	05 88 00 00 00       	add    $0x88,%eax
f0119ea8:	8b 00                	mov    (%eax),%eax
f0119eaa:	39 c1                	cmp    %eax,%ecx
f0119eac:	74 17                	je     f0119ec5 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119eae:	83 ec 04             	sub    $0x4,%esp
f0119eb1:	68 44 d9 12 f0       	push   $0xf012d944
f0119eb6:	68 79 01 00 00       	push   $0x179
f0119ebb:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119ec0:	e8 55 64 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0119ec5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119ec8:	83 c0 05             	add    $0x5,%eax
f0119ecb:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0119ed2:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119ed5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0119ed8:	89 d0                	mov    %edx,%eax
f0119eda:	01 c0                	add    %eax,%eax
f0119edc:	01 d0                	add    %edx,%eax
f0119ede:	c1 e0 03             	shl    $0x3,%eax
f0119ee1:	01 d8                	add    %ebx,%eax
f0119ee3:	05 90 00 00 00       	add    $0x90,%eax
f0119ee8:	8b 00                	mov    (%eax),%eax
f0119eea:	39 c1                	cmp    %eax,%ecx
f0119eec:	74 17                	je     f0119f05 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119eee:	83 ec 04             	sub    $0x4,%esp
f0119ef1:	68 44 d9 12 f0       	push   $0xf012d944
f0119ef6:	68 7c 01 00 00       	push   $0x17c
f0119efb:	68 f1 d4 12 f0       	push   $0xf012d4f1
f0119f00:	e8 15 64 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0119f05:	ff 45 c4             	incl   -0x3c(%ebp)
f0119f08:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0119f0c:	0f 8e 73 ff ff ff    	jle    f0119e85 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0119f12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119f15:	83 ec 08             	sub    $0x8,%esp
f0119f18:	6a 05                	push   $0x5
f0119f1a:	50                   	push   %eax
f0119f1b:	e8 8f 1f ff ff       	call   f010beaf <set_program_priority>
f0119f20:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0119f23:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119f26:	83 ec 08             	sub    $0x8,%esp
f0119f29:	6a 05                	push   $0x5
f0119f2b:	50                   	push   %eax
f0119f2c:	e8 7e 1f ff ff       	call   f010beaf <set_program_priority>
f0119f31:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0119f34:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0119f3b:	75 6e 61 
f0119f3e:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0119f45:	6c 00 00 
f0119f48:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0119f4e:	b9 17 00 00 00       	mov    $0x17,%ecx
f0119f53:	b8 00 00 00 00       	mov    $0x0,%eax
f0119f58:	89 d7                	mov    %edx,%edi
f0119f5a:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0119f5c:	83 ec 0c             	sub    $0xc,%esp
f0119f5f:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0119f65:	50                   	push   %eax
f0119f66:	e8 71 7f fe ff       	call   f0101edc <execute_command>
f0119f6b:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0119f6e:	eb 10                	jmp    f0119f80 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0119f70:	83 ec 0c             	sub    $0xc,%esp
f0119f73:	68 20 da 12 f0       	push   $0xf012da20
f0119f78:	e8 ef 6f fe ff       	call   f0100f6c <cprintf>
f0119f7d:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0119f80:	90                   	nop
f0119f81:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119f84:	5b                   	pop    %ebx
f0119f85:	5e                   	pop    %esi
f0119f86:	5f                   	pop    %edi
f0119f87:	5d                   	pop    %ebp
f0119f88:	c3                   	ret    

f0119f89 <test_kmalloc>:
	int c;
};

uint32 da_limit = KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE ;
int test_kmalloc()
{
f0119f89:	55                   	push   %ebp
f0119f8a:	89 e5                	mov    %esp,%ebp
f0119f8c:	57                   	push   %edi
f0119f8d:	53                   	push   %ebx
f0119f8e:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0119f94:	83 ec 0c             	sub    $0xc,%esp
f0119f97:	68 40 db 12 f0       	push   $0xf012db40
f0119f9c:	e8 cb 6f fe ff       	call   f0100f6c <cprintf>
f0119fa1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119fa4:	83 ec 0c             	sub    $0xc,%esp
f0119fa7:	68 70 db 12 f0       	push   $0xf012db70
f0119fac:	e8 bb 6f fe ff       	call   f0100f6c <cprintf>
f0119fb1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119fb4:	83 ec 0c             	sub    $0xc,%esp
f0119fb7:	68 40 db 12 f0       	push   $0xf012db40
f0119fbc:	e8 ab 6f fe ff       	call   f0100f6c <cprintf>
f0119fc1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0119fc4:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0119fc8:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0119fcc:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0119fd2:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0119fd8:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0119fdf:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2, *byteArr3 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfByte3, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = (int)sys_calculate_free_frames() ;
f0119fe6:	e8 1e 3a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119feb:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int eval = 0;
f0119fee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f0119ff5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int freeFrames, freeDiskFrames;
	uint32 sizeOfKHeap;
	void* ptr_allocations[20] = {0};
f0119ffc:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f011a002:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a007:	b8 00 00 00 00       	mov    $0x0,%eax
f011a00c:	89 d7                	mov    %edx,%edi
f011a00e:	f3 ab                	rep stos %eax,%es:(%edi)
	correct = 1 ;
f011a010:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//Insufficient space
		freeFrames = (int)sys_calculate_free_frames() ;
f011a017:	e8 ed 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a01c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a01f:	e8 1c a8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a024:	89 45 d0             	mov    %eax,-0x30(%ebp)
		sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f011a027:	c7 45 cc 01 e0 ff 07 	movl   $0x7ffe001,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f011a02e:	83 ec 0c             	sub    $0xc,%esp
f011a031:	ff 75 cc             	pushl  -0x34(%ebp)
f011a034:	e8 7d ea fe ff       	call   f0108ab6 <kmalloc>
f011a039:	83 c4 10             	add    $0x10,%esp
f011a03c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011a042:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a048:	85 c0                	test   %eax,%eax
f011a04a:	74 17                	je     f011a063 <test_kmalloc+0xda>
f011a04c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a053:	83 ec 0c             	sub    $0xc,%esp
f011a056:	68 cc db 12 f0       	push   $0xf012dbcc
f011a05b:	e8 0c 6f fe ff       	call   f0100f6c <cprintf>
f011a060:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a063:	e8 d8 a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a068:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a06b:	74 17                	je     f011a084 <test_kmalloc+0xfb>
f011a06d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a074:	83 ec 0c             	sub    $0xc,%esp
f011a077:	68 00 dc 12 f0       	push   $0xf012dc00
f011a07c:	e8 eb 6e fe ff       	call   f0100f6c <cprintf>
f011a081:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a084:	e8 80 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a089:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011a08c:	74 17                	je     f011a0a5 <test_kmalloc+0x11c>
f011a08e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a095:	83 ec 0c             	sub    $0xc,%esp
f011a098:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a09d:	e8 ca 6e fe ff       	call   f0100f6c <cprintf>
f011a0a2:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011a0a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a0a9:	74 04                	je     f011a0af <test_kmalloc+0x126>
f011a0ab:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011a0af:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a0b6:	e8 4e 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a0bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a0be:	e8 7d a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a0c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a0c6:	83 ec 0c             	sub    $0xc,%esp
f011a0c9:	68 00 fc 1f 00       	push   $0x1ffc00
f011a0ce:	e8 e3 e9 fe ff       	call   f0108ab6 <kmalloc>
f011a0d3:	83 c4 10             	add    $0x10,%esp
f011a0d6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a0dc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a0e2:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011a0e7:	74 17                	je     f011a100 <test_kmalloc+0x177>
f011a0e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a0f0:	83 ec 0c             	sub    $0xc,%esp
f011a0f3:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011a0f8:	e8 6f 6e fe ff       	call   f0100f6c <cprintf>
f011a0fd:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a100:	e8 3b a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a105:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a108:	74 17                	je     f011a121 <test_kmalloc+0x198>
f011a10a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a111:	83 ec 0c             	sub    $0xc,%esp
f011a114:	68 00 dc 12 f0       	push   $0xf012dc00
f011a119:	e8 4e 6e fe ff       	call   f0100f6c <cprintf>
f011a11e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a121:	e8 e3 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a126:	89 c2                	mov    %eax,%edx
f011a128:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a12b:	29 d0                	sub    %edx,%eax
f011a12d:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a132:	7f 17                	jg     f011a14b <test_kmalloc+0x1c2>
f011a134:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a13b:	83 ec 0c             	sub    $0xc,%esp
f011a13e:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a143:	e8 24 6e fe ff       	call   f0100f6c <cprintf>
f011a148:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a14b:	e8 b9 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a150:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a153:	e8 e8 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a158:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a15b:	83 ec 0c             	sub    $0xc,%esp
f011a15e:	68 00 fc 1f 00       	push   $0x1ffc00
f011a163:	e8 4e e9 fe ff       	call   f0108ab6 <kmalloc>
f011a168:	83 c4 10             	add    $0x10,%esp
f011a16b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a171:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a177:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011a17c:	74 17                	je     f011a195 <test_kmalloc+0x20c>
f011a17e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a185:	83 ec 0c             	sub    $0xc,%esp
f011a188:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011a18d:	e8 da 6d fe ff       	call   f0100f6c <cprintf>
f011a192:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a195:	e8 a6 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a19a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a19d:	74 17                	je     f011a1b6 <test_kmalloc+0x22d>
f011a19f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1a6:	83 ec 0c             	sub    $0xc,%esp
f011a1a9:	68 00 dc 12 f0       	push   $0xf012dc00
f011a1ae:	e8 b9 6d fe ff       	call   f0100f6c <cprintf>
f011a1b3:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a1b6:	e8 4e 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a1bb:	89 c2                	mov    %eax,%edx
f011a1bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a1c0:	29 d0                	sub    %edx,%eax
f011a1c2:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a1c7:	7f 17                	jg     f011a1e0 <test_kmalloc+0x257>
f011a1c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1d0:	83 ec 0c             	sub    $0xc,%esp
f011a1d3:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a1d8:	e8 8f 6d fe ff       	call   f0100f6c <cprintf>
f011a1dd:	83 c4 10             	add    $0x10,%esp

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011a1e0:	e8 24 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a1e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a1e8:	e8 53 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a1ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo-1);
f011a1f0:	83 ec 0c             	sub    $0xc,%esp
f011a1f3:	68 ff 07 00 00       	push   $0x7ff
f011a1f8:	e8 b9 e8 fe ff       	call   f0108ab6 <kmalloc>
f011a1fd:	83 c4 10             	add    $0x10,%esp
f011a200:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011a206:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a20c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a211:	76 28                	jbe    f011a23b <test_kmalloc+0x2b2>
f011a213:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f011a219:	83 ec 0c             	sub    $0xc,%esp
f011a21c:	6a 00                	push   $0x0
f011a21e:	e8 89 e8 fe ff       	call   f0108aac <sbrk>
f011a223:	83 c4 10             	add    $0x10,%esp
f011a226:	39 c3                	cmp    %eax,%ebx
f011a228:	73 11                	jae    f011a23b <test_kmalloc+0x2b2>
f011a22a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a230:	89 c2                	mov    %eax,%edx
f011a232:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011a237:	39 c2                	cmp    %eax,%edx
f011a239:	72 17                	jb     f011a252 <test_kmalloc+0x2c9>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a23b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a242:	83 ec 0c             	sub    $0xc,%esp
f011a245:	68 00 dd 12 f0       	push   $0xf012dd00
f011a24a:	e8 1d 6d fe ff       	call   f0100f6c <cprintf>
f011a24f:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a252:	e8 e9 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a257:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a25a:	74 17                	je     f011a273 <test_kmalloc+0x2ea>
f011a25c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a263:	83 ec 0c             	sub    $0xc,%esp
f011a266:	68 00 dc 12 f0       	push   $0xf012dc00
f011a26b:	e8 fc 6c fe ff       	call   f0100f6c <cprintf>
f011a270:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011a273:	e8 91 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a278:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a27b:	e8 c0 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a280:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo-1);
f011a283:	83 ec 0c             	sub    $0xc,%esp
f011a286:	68 ff 07 00 00       	push   $0x7ff
f011a28b:	e8 26 e8 fe ff       	call   f0108ab6 <kmalloc>
f011a290:	83 c4 10             	add    $0x10,%esp
f011a293:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011a299:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a29f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a2a4:	76 28                	jbe    f011a2ce <test_kmalloc+0x345>
f011a2a6:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f011a2ac:	83 ec 0c             	sub    $0xc,%esp
f011a2af:	6a 00                	push   $0x0
f011a2b1:	e8 f6 e7 fe ff       	call   f0108aac <sbrk>
f011a2b6:	83 c4 10             	add    $0x10,%esp
f011a2b9:	39 c3                	cmp    %eax,%ebx
f011a2bb:	73 11                	jae    f011a2ce <test_kmalloc+0x345>
f011a2bd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a2c3:	89 c2                	mov    %eax,%edx
f011a2c5:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011a2ca:	39 c2                	cmp    %eax,%edx
f011a2cc:	72 17                	jb     f011a2e5 <test_kmalloc+0x35c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a2ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2d5:	83 ec 0c             	sub    $0xc,%esp
f011a2d8:	68 00 dd 12 f0       	push   $0xf012dd00
f011a2dd:	e8 8a 6c fe ff       	call   f0100f6c <cprintf>
f011a2e2:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a2e5:	e8 56 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2ea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a2ed:	74 17                	je     f011a306 <test_kmalloc+0x37d>
f011a2ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2f6:	83 ec 0c             	sub    $0xc,%esp
f011a2f9:	68 00 dc 12 f0       	push   $0xf012dc00
f011a2fe:	e8 69 6c fe ff       	call   f0100f6c <cprintf>
f011a303:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a306:	e8 fe 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a30b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a30e:	e8 2d a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a313:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011a316:	83 ec 0c             	sub    $0xc,%esp
f011a319:	68 00 1c 00 00       	push   $0x1c00
f011a31e:	e8 93 e7 fe ff       	call   f0108ab6 <kmalloc>
f011a323:	83 c4 10             	add    $0x10,%esp
f011a326:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a32c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a332:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011a337:	74 17                	je     f011a350 <test_kmalloc+0x3c7>
f011a339:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a340:	83 ec 0c             	sub    $0xc,%esp
f011a343:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011a348:	e8 1f 6c fe ff       	call   f0100f6c <cprintf>
f011a34d:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a350:	e8 eb a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a355:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a358:	74 17                	je     f011a371 <test_kmalloc+0x3e8>
f011a35a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a361:	83 ec 0c             	sub    $0xc,%esp
f011a364:	68 00 dc 12 f0       	push   $0xf012dc00
f011a369:	e8 fe 6b fe ff       	call   f0100f6c <cprintf>
f011a36e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a371:	e8 93 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a376:	89 c2                	mov    %eax,%edx
f011a378:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a37b:	29 d0                	sub    %edx,%eax
f011a37d:	83 f8 01             	cmp    $0x1,%eax
f011a380:	7f 17                	jg     f011a399 <test_kmalloc+0x410>
f011a382:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a389:	83 ec 0c             	sub    $0xc,%esp
f011a38c:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a391:	e8 d6 6b fe ff       	call   f0100f6c <cprintf>
f011a396:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a399:	e8 6b 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a39e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a3a1:	e8 9a a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011a3a9:	83 ec 0c             	sub    $0xc,%esp
f011a3ac:	68 00 fc 2f 00       	push   $0x2ffc00
f011a3b1:	e8 00 e7 fe ff       	call   f0108ab6 <kmalloc>
f011a3b6:	83 c4 10             	add    $0x10,%esp
f011a3b9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a3bf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a3c5:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011a3ca:	74 17                	je     f011a3e3 <test_kmalloc+0x45a>
f011a3cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3d3:	83 ec 0c             	sub    $0xc,%esp
f011a3d6:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011a3db:	e8 8c 6b fe ff       	call   f0100f6c <cprintf>
f011a3e0:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a3e3:	e8 58 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3e8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a3eb:	74 17                	je     f011a404 <test_kmalloc+0x47b>
f011a3ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3f4:	83 ec 0c             	sub    $0xc,%esp
f011a3f7:	68 00 dc 12 f0       	push   $0xf012dc00
f011a3fc:	e8 6b 6b fe ff       	call   f0100f6c <cprintf>
f011a401:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a404:	e8 00 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a409:	89 c2                	mov    %eax,%edx
f011a40b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a40e:	29 d0                	sub    %edx,%eax
f011a410:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011a415:	7f 17                	jg     f011a42e <test_kmalloc+0x4a5>
f011a417:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a41e:	83 ec 0c             	sub    $0xc,%esp
f011a421:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a426:	e8 41 6b fe ff       	call   f0100f6c <cprintf>
f011a42b:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a42e:	e8 d6 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a433:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a436:	e8 05 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a43b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011a43e:	83 ec 0c             	sub    $0xc,%esp
f011a441:	68 00 fc 5f 00       	push   $0x5ffc00
f011a446:	e8 6b e6 fe ff       	call   f0108ab6 <kmalloc>
f011a44b:	83 c4 10             	add    $0x10,%esp
f011a44e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a454:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a45a:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011a45f:	74 17                	je     f011a478 <test_kmalloc+0x4ef>
f011a461:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a468:	83 ec 0c             	sub    $0xc,%esp
f011a46b:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011a470:	e8 f7 6a fe ff       	call   f0100f6c <cprintf>
f011a475:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a478:	e8 c3 a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a47d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a480:	74 17                	je     f011a499 <test_kmalloc+0x510>
f011a482:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a489:	83 ec 0c             	sub    $0xc,%esp
f011a48c:	68 00 dc 12 f0       	push   $0xf012dc00
f011a491:	e8 d6 6a fe ff       	call   f0100f6c <cprintf>
f011a496:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a499:	e8 6b 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a49e:	89 c2                	mov    %eax,%edx
f011a4a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a4a3:	29 d0                	sub    %edx,%eax
f011a4a5:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011a4aa:	7f 17                	jg     f011a4c3 <test_kmalloc+0x53a>
f011a4ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4b3:	83 ec 0c             	sub    $0xc,%esp
f011a4b6:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a4bb:	e8 ac 6a fe ff       	call   f0100f6c <cprintf>
f011a4c0:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a4c3:	e8 41 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a4c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a4cb:	e8 70 a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a4d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011a4d3:	83 ec 0c             	sub    $0xc,%esp
f011a4d6:	68 00 38 00 00       	push   $0x3800
f011a4db:	e8 d6 e5 fe ff       	call   f0108ab6 <kmalloc>
f011a4e0:	83 c4 10             	add    $0x10,%esp
f011a4e3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a4e9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a4ef:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011a4f4:	74 17                	je     f011a50d <test_kmalloc+0x584>
f011a4f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4fd:	83 ec 0c             	sub    $0xc,%esp
f011a500:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011a505:	e8 62 6a fe ff       	call   f0100f6c <cprintf>
f011a50a:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a50d:	e8 2e a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a512:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a515:	74 17                	je     f011a52e <test_kmalloc+0x5a5>
f011a517:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a51e:	83 ec 0c             	sub    $0xc,%esp
f011a521:	68 00 dc 12 f0       	push   $0xf012dc00
f011a526:	e8 41 6a fe ff       	call   f0100f6c <cprintf>
f011a52b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a52e:	e8 d6 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a533:	89 c2                	mov    %eax,%edx
f011a535:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a538:	29 d0                	sub    %edx,%eax
f011a53a:	83 f8 03             	cmp    $0x3,%eax
f011a53d:	7f 17                	jg     f011a556 <test_kmalloc+0x5cd>
f011a53f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a546:	83 ec 0c             	sub    $0xc,%esp
f011a549:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a54e:	e8 19 6a fe ff       	call   f0100f6c <cprintf>
f011a553:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011a556:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a55a:	74 04                	je     f011a560 <test_kmalloc+0x5d7>
f011a55c:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f011a560:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Checking read/write on the allocated spaces
	{

		freeFrames = (int)sys_calculate_free_frames() ;
f011a567:	e8 9d 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a56c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a56f:	e8 cc a2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a574:	89 45 d0             	mov    %eax,-0x30(%ebp)

		//Write values
		//In 1st 2 MB
		lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011a577:	c7 45 c8 ff fb 1f 00 	movl   $0x1ffbff,-0x38(%ebp)
		byteArr = (char *) ptr_allocations[0];
f011a57e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a584:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		byteArr[0] = minByte ;
f011a587:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a58a:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a58d:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte ;
f011a58f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011a592:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a595:	01 c2                	add    %eax,%edx
f011a597:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a59a:	88 02                	mov    %al,(%edx)

		//In 2nd 2 MB
		shortArr = (short *) ptr_allocations[1];
f011a59c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a5a2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f011a5a5:	c7 45 bc ff fd 0f 00 	movl   $0xffdff,-0x44(%ebp)
		shortArr[0] = minShort;
f011a5ac:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011a5af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a5b2:	66 89 02             	mov    %ax,(%edx)
		shortArr[lastIndexOfShort] = maxShort;
f011a5b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a5b8:	01 c0                	add    %eax,%eax
f011a5ba:	89 c2                	mov    %eax,%edx
f011a5bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5bf:	01 c2                	add    %eax,%edx
f011a5c1:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a5c5:	66 89 02             	mov    %ax,(%edx)

		//In Dynamic Allocator Area
		{
			//In 2 KB - 1
			intArr = (int *) ptr_allocations[2];
f011a5c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a5ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
			lastIndexOfInt = (2*kilo-1)/sizeof(int) - 1;
f011a5d1:	c7 45 b4 fe 01 00 00 	movl   $0x1fe,-0x4c(%ebp)
			intArr[0] = minInt;
f011a5d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a5db:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a5de:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f011a5e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a5e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a5ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a5ed:	01 c2                	add    %eax,%edx
f011a5ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a5f2:	89 02                	mov    %eax,(%edx)

			//In 2 KB - 1
			byteArr2 = (char *) ptr_allocations[3];
f011a5f4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a5fa:	89 45 b0             	mov    %eax,-0x50(%ebp)
			lastIndexOfByte2 = (2*kilo-1)/sizeof(char) - 1;
f011a5fd:	c7 45 ac fe 07 00 00 	movl   $0x7fe,-0x54(%ebp)
			byteArr2[0] = minByte;
f011a604:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a607:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a60a:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2] = maxByte;
f011a60c:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011a60f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a612:	01 c2                	add    %eax,%edx
f011a614:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a617:	88 02                	mov    %al,(%edx)
		}

		//In 7 KB
		structArr = (struct MyStruct *) ptr_allocations[4];
f011a619:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a61f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011a622:	c7 45 a4 7f 03 00 00 	movl   $0x37f,-0x5c(%ebp)
		structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f011a629:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a62c:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a62f:	88 10                	mov    %dl,(%eax)
f011a631:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011a634:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a637:	66 89 42 02          	mov    %ax,0x2(%edx)
f011a63b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a63e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a641:	89 50 04             	mov    %edx,0x4(%eax)
		structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011a644:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a647:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a64e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a651:	01 c2                	add    %eax,%edx
f011a653:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a656:	88 02                	mov    %al,(%edx)
f011a658:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a65b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a662:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a665:	01 c2                	add    %eax,%edx
f011a667:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a66b:	66 89 42 02          	mov    %ax,0x2(%edx)
f011a66f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a672:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a679:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a67c:	01 c2                	add    %eax,%edx
f011a67e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a681:	89 42 04             	mov    %eax,0x4(%edx)

		//In 6 MB
		lastIndexOfByte3 = (6*Mega-kilo)/sizeof(char) - 1;
f011a684:	c7 45 a0 ff fb 5f 00 	movl   $0x5ffbff,-0x60(%ebp)
		byteArr3 = (char *) ptr_allocations[6];
f011a68b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a691:	89 45 9c             	mov    %eax,-0x64(%ebp)
		byteArr3[0] = minByte ;
f011a694:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a697:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a69a:	88 10                	mov    %dl,(%eax)
		byteArr3[lastIndexOfByte3 / 2] = maxByte / 2;
f011a69c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a69f:	89 c2                	mov    %eax,%edx
f011a6a1:	c1 ea 1f             	shr    $0x1f,%edx
f011a6a4:	01 d0                	add    %edx,%eax
f011a6a6:	d1 f8                	sar    %eax
f011a6a8:	89 c2                	mov    %eax,%edx
f011a6aa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6ad:	01 c2                	add    %eax,%edx
f011a6af:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a6b2:	88 c1                	mov    %al,%cl
f011a6b4:	c0 e9 07             	shr    $0x7,%cl
f011a6b7:	01 c8                	add    %ecx,%eax
f011a6b9:	d0 f8                	sar    %al
f011a6bb:	88 02                	mov    %al,(%edx)
		byteArr3[lastIndexOfByte3] = maxByte ;
f011a6bd:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a6c0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6c3:	01 c2                	add    %eax,%edx
f011a6c5:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a6c8:	88 02                	mov    %al,(%edx)

		//In 14 KB
		shortArr2 = (short *) ptr_allocations[7];
f011a6ca:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a6d0:	89 45 98             	mov    %eax,-0x68(%ebp)
		lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011a6d3:	c7 45 94 ff 1b 00 00 	movl   $0x1bff,-0x6c(%ebp)
		shortArr2[0] = minShort;
f011a6da:	8b 55 98             	mov    -0x68(%ebp),%edx
f011a6dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a6e0:	66 89 02             	mov    %ax,(%edx)
		shortArr2[lastIndexOfShort2] = maxShort;
f011a6e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a6e6:	01 c0                	add    %eax,%eax
f011a6e8:	89 c2                	mov    %eax,%edx
f011a6ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6ed:	01 c2                	add    %eax,%edx
f011a6ef:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a6f3:	66 89 02             	mov    %ax,(%edx)

		//Read values: check that the values are successfully written
		if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a6f6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a6f9:	8a 00                	mov    (%eax),%al
f011a6fb:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a6fe:	75 0f                	jne    f011a70f <test_kmalloc+0x786>
f011a700:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011a703:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a706:	01 d0                	add    %edx,%eax
f011a708:	8a 00                	mov    (%eax),%al
f011a70a:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a70d:	74 17                	je     f011a726 <test_kmalloc+0x79d>
f011a70f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a716:	83 ec 0c             	sub    $0xc,%esp
f011a719:	68 88 dd 12 f0       	push   $0xf012dd88
f011a71e:	e8 49 68 fe ff       	call   f0100f6c <cprintf>
f011a723:	83 c4 10             	add    $0x10,%esp
		if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a726:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a729:	66 8b 00             	mov    (%eax),%ax
f011a72c:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a730:	75 15                	jne    f011a747 <test_kmalloc+0x7be>
f011a732:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a735:	01 c0                	add    %eax,%eax
f011a737:	89 c2                	mov    %eax,%edx
f011a739:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a73c:	01 d0                	add    %edx,%eax
f011a73e:	66 8b 00             	mov    (%eax),%ax
f011a741:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a745:	74 17                	je     f011a75e <test_kmalloc+0x7d5>
f011a747:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a74e:	83 ec 0c             	sub    $0xc,%esp
f011a751:	68 88 dd 12 f0       	push   $0xf012dd88
f011a756:	e8 11 68 fe ff       	call   f0100f6c <cprintf>
f011a75b:	83 c4 10             	add    $0x10,%esp
		if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a75e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a761:	8b 00                	mov    (%eax),%eax
f011a763:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011a766:	75 16                	jne    f011a77e <test_kmalloc+0x7f5>
f011a768:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a76b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a772:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a775:	01 d0                	add    %edx,%eax
f011a777:	8b 00                	mov    (%eax),%eax
f011a779:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a77c:	74 17                	je     f011a795 <test_kmalloc+0x80c>
f011a77e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a785:	83 ec 0c             	sub    $0xc,%esp
f011a788:	68 88 dd 12 f0       	push   $0xf012dd88
f011a78d:	e8 da 67 fe ff       	call   f0100f6c <cprintf>
f011a792:	83 c4 10             	add    $0x10,%esp
		if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a795:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a798:	8a 00                	mov    (%eax),%al
f011a79a:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a79d:	75 0f                	jne    f011a7ae <test_kmalloc+0x825>
f011a79f:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011a7a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a7a5:	01 d0                	add    %edx,%eax
f011a7a7:	8a 00                	mov    (%eax),%al
f011a7a9:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a7ac:	74 17                	je     f011a7c5 <test_kmalloc+0x83c>
f011a7ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a7b5:	83 ec 0c             	sub    $0xc,%esp
f011a7b8:	68 88 dd 12 f0       	push   $0xf012dd88
f011a7bd:	e8 aa 67 fe ff       	call   f0100f6c <cprintf>
f011a7c2:	83 c4 10             	add    $0x10,%esp

		if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a7c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7c8:	8a 00                	mov    (%eax),%al
f011a7ca:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a7cd:	75 16                	jne    f011a7e5 <test_kmalloc+0x85c>
f011a7cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a7d2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a7d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7dc:	01 d0                	add    %edx,%eax
f011a7de:	8a 00                	mov    (%eax),%al
f011a7e0:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a7e3:	74 17                	je     f011a7fc <test_kmalloc+0x873>
f011a7e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a7ec:	83 ec 0c             	sub    $0xc,%esp
f011a7ef:	68 88 dd 12 f0       	push   $0xf012dd88
f011a7f4:	e8 73 67 fe ff       	call   f0100f6c <cprintf>
f011a7f9:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a7fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7ff:	66 8b 40 02          	mov    0x2(%eax),%ax
f011a803:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a807:	75 19                	jne    f011a822 <test_kmalloc+0x899>
f011a809:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a80c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a813:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a816:	01 d0                	add    %edx,%eax
f011a818:	66 8b 40 02          	mov    0x2(%eax),%ax
f011a81c:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a820:	74 17                	je     f011a839 <test_kmalloc+0x8b0>
f011a822:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a829:	83 ec 0c             	sub    $0xc,%esp
f011a82c:	68 88 dd 12 f0       	push   $0xf012dd88
f011a831:	e8 36 67 fe ff       	call   f0100f6c <cprintf>
f011a836:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a839:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a83c:	8b 40 04             	mov    0x4(%eax),%eax
f011a83f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011a842:	75 17                	jne    f011a85b <test_kmalloc+0x8d2>
f011a844:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a847:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a84e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a851:	01 d0                	add    %edx,%eax
f011a853:	8b 40 04             	mov    0x4(%eax),%eax
f011a856:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a859:	74 17                	je     f011a872 <test_kmalloc+0x8e9>
f011a85b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a862:	83 ec 0c             	sub    $0xc,%esp
f011a865:	68 88 dd 12 f0       	push   $0xf012dd88
f011a86a:	e8 fd 66 fe ff       	call   f0100f6c <cprintf>
f011a86f:	83 c4 10             	add    $0x10,%esp

		if (byteArr3[0] != minByte || byteArr3[lastIndexOfByte3/2] != maxByte/2 || byteArr3[lastIndexOfByte3] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a872:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a875:	8a 00                	mov    (%eax),%al
f011a877:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a87a:	75 34                	jne    f011a8b0 <test_kmalloc+0x927>
f011a87c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a87f:	89 c2                	mov    %eax,%edx
f011a881:	c1 ea 1f             	shr    $0x1f,%edx
f011a884:	01 d0                	add    %edx,%eax
f011a886:	d1 f8                	sar    %eax
f011a888:	89 c2                	mov    %eax,%edx
f011a88a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a88d:	01 d0                	add    %edx,%eax
f011a88f:	8a 10                	mov    (%eax),%dl
f011a891:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a894:	88 c1                	mov    %al,%cl
f011a896:	c0 e9 07             	shr    $0x7,%cl
f011a899:	01 c8                	add    %ecx,%eax
f011a89b:	d0 f8                	sar    %al
f011a89d:	38 c2                	cmp    %al,%dl
f011a89f:	75 0f                	jne    f011a8b0 <test_kmalloc+0x927>
f011a8a1:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a8a4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a8a7:	01 d0                	add    %edx,%eax
f011a8a9:	8a 00                	mov    (%eax),%al
f011a8ab:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a8ae:	74 17                	je     f011a8c7 <test_kmalloc+0x93e>
f011a8b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a8b7:	83 ec 0c             	sub    $0xc,%esp
f011a8ba:	68 88 dd 12 f0       	push   $0xf012dd88
f011a8bf:	e8 a8 66 fe ff       	call   f0100f6c <cprintf>
f011a8c4:	83 c4 10             	add    $0x10,%esp
		if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a8c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a8ca:	66 8b 00             	mov    (%eax),%ax
f011a8cd:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a8d1:	75 15                	jne    f011a8e8 <test_kmalloc+0x95f>
f011a8d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a8d6:	01 c0                	add    %eax,%eax
f011a8d8:	89 c2                	mov    %eax,%edx
f011a8da:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a8dd:	01 d0                	add    %edx,%eax
f011a8df:	66 8b 00             	mov    (%eax),%ax
f011a8e2:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a8e6:	74 17                	je     f011a8ff <test_kmalloc+0x976>
f011a8e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a8ef:	83 ec 0c             	sub    $0xc,%esp
f011a8f2:	68 88 dd 12 f0       	push   $0xf012dd88
f011a8f7:	e8 70 66 fe ff       	call   f0100f6c <cprintf>
f011a8fc:	83 c4 10             	add    $0x10,%esp

		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a8ff:	e8 05 31 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a904:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011a907:	74 17                	je     f011a920 <test_kmalloc+0x997>
f011a909:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a910:	83 ec 0c             	sub    $0xc,%esp
f011a913:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a918:	e8 4f 66 fe ff       	call   f0100f6c <cprintf>
f011a91d:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a920:	e8 1b 9f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a925:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a928:	74 17                	je     f011a941 <test_kmalloc+0x9b8>
f011a92a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a931:	83 ec 0c             	sub    $0xc,%esp
f011a934:	68 00 dc 12 f0       	push   $0xf012dc00
f011a939:	e8 2e 66 fe ff       	call   f0100f6c <cprintf>
f011a93e:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=30 ;
f011a941:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a945:	74 04                	je     f011a94b <test_kmalloc+0x9c2>
f011a947:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	correct = 1 ;
f011a94b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Insufficient space again
	{
		freeFrames = (int)sys_calculate_free_frames() ;
f011a952:	e8 b2 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a957:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a95a:	e8 e1 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a95f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+/*4*kilo+4*kilo+*/8*kilo+3*Mega+6*Mega+16*kilo) ;
f011a962:	c7 45 90 00 a0 2f 07 	movl   $0x72fa000,-0x70(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011a969:	83 ec 0c             	sub    $0xc,%esp
f011a96c:	ff 75 90             	pushl  -0x70(%ebp)
f011a96f:	e8 42 e1 fe ff       	call   f0108ab6 <kmalloc>
f011a974:	83 c4 10             	add    $0x10,%esp
f011a977:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if (ptr_allocations[8] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011a97d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a983:	85 c0                	test   %eax,%eax
f011a985:	74 17                	je     f011a99e <test_kmalloc+0xa15>
f011a987:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a98e:	83 ec 0c             	sub    $0xc,%esp
f011a991:	68 cc db 12 f0       	push   $0xf012dbcc
f011a996:	e8 d1 65 fe ff       	call   f0100f6c <cprintf>
f011a99b:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a99e:	e8 9d 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a9a3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a9a6:	74 17                	je     f011a9bf <test_kmalloc+0xa36>
f011a9a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a9af:	83 ec 0c             	sub    $0xc,%esp
f011a9b2:	68 00 dc 12 f0       	push   $0xf012dc00
f011a9b7:	e8 b0 65 fe ff       	call   f0100f6c <cprintf>
f011a9bc:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a9bf:	e8 45 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a9c4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011a9c7:	74 17                	je     f011a9e0 <test_kmalloc+0xa57>
f011a9c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a9d0:	83 ec 0c             	sub    $0xc,%esp
f011a9d3:	68 6c dc 12 f0       	push   $0xf012dc6c
f011a9d8:	e8 8f 65 fe ff       	call   f0100f6c <cprintf>
f011a9dd:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011a9e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a9e4:	74 04                	je     f011a9ea <test_kmalloc+0xa61>
f011a9e6:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011a9ea:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f011a9f1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a9f7:	05 00 40 00 00       	add    $0x4000,%eax
f011a9fc:	89 45 8c             	mov    %eax,-0x74(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011a9ff:	c7 45 ec 00 10 00 f8 	movl   $0xf8001000,-0x14(%ebp)
f011aa06:	eb 6a                	jmp    f011aa72 <test_kmalloc+0xae9>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011aa08:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011aa0d:	83 ec 04             	sub    $0x4,%esp
f011aa10:	8d 95 34 ff ff ff    	lea    -0xcc(%ebp),%edx
f011aa16:	52                   	push   %edx
f011aa17:	ff 75 ec             	pushl  -0x14(%ebp)
f011aa1a:	50                   	push   %eax
f011aa1b:	e8 ed d9 fe ff       	call   f010840d <get_page_table>
f011aa20:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011aa23:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011aa29:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011aa2c:	c1 ea 0c             	shr    $0xc,%edx
f011aa2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011aa35:	c1 e2 02             	shl    $0x2,%edx
f011aa38:	01 d0                	add    %edx,%eax
f011aa3a:	8b 00                	mov    (%eax),%eax
f011aa3c:	25 ff 0f 00 00       	and    $0xfff,%eax
f011aa41:	89 45 88             	mov    %eax,-0x78(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011aa44:	8b 45 88             	mov    -0x78(%ebp),%eax
f011aa47:	83 e0 04             	and    $0x4,%eax
f011aa4a:	85 c0                	test   %eax,%eax
f011aa4c:	74 1d                	je     f011aa6b <test_kmalloc+0xae2>
			{
				if (correct)
f011aa4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aa52:	74 17                	je     f011aa6b <test_kmalloc+0xae2>
				{
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
f011aa54:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aa5b:	83 ec 0c             	sub    $0xc,%esp
f011aa5e:	68 c0 dd 12 f0       	push   $0xf012ddc0
f011aa63:	e8 04 65 fe ff       	call   f0100f6c <cprintf>
f011aa68:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011aa6b:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f011aa72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011aa75:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011aa78:	72 8e                	jb     f011aa08 <test_kmalloc+0xa7f>
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011aa7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aa7e:	74 04                	je     f011aa84 <test_kmalloc+0xafb>
f011aa80:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("\ntest kmalloc completed. Evaluation = %d%\n", eval);
f011aa84:	83 ec 08             	sub    $0x8,%esp
f011aa87:	ff 75 f4             	pushl  -0xc(%ebp)
f011aa8a:	68 0c de 12 f0       	push   $0xf012de0c
f011aa8f:	e8 d8 64 fe ff       	call   f0100f6c <cprintf>
f011aa94:	83 c4 10             	add    $0x10,%esp

	return 1;
f011aa97:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011aa9c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011aa9f:	5b                   	pop    %ebx
f011aaa0:	5f                   	pop    %edi
f011aaa1:	5d                   	pop    %ebp
f011aaa2:	c3                   	ret    

f011aaa3 <test_kmalloc_firstfit1>:


int test_kmalloc_firstfit1()
{
f011aaa3:	55                   	push   %ebp
f011aaa4:	89 e5                	mov    %esp,%ebp
f011aaa6:	57                   	push   %edi
f011aaa7:	83 ec 64             	sub    $0x64,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011aaaa:	83 ec 0c             	sub    $0xc,%esp
f011aaad:	68 40 db 12 f0       	push   $0xf012db40
f011aab2:	e8 b5 64 fe ff       	call   f0100f6c <cprintf>
f011aab7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011aaba:	83 ec 0c             	sub    $0xc,%esp
f011aabd:	68 70 db 12 f0       	push   $0xf012db70
f011aac2:	e8 a5 64 fe ff       	call   f0100f6c <cprintf>
f011aac7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011aaca:	83 ec 0c             	sub    $0xc,%esp
f011aacd:	68 40 db 12 f0       	push   $0xf012db40
f011aad2:	e8 95 64 fe ff       	call   f0100f6c <cprintf>
f011aad7:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011aada:	8d 55 98             	lea    -0x68(%ebp),%edx
f011aadd:	b9 14 00 00 00       	mov    $0x14,%ecx
f011aae2:	b8 00 00 00 00       	mov    $0x0,%eax
f011aae7:	89 d7                	mov    %edx,%edi
f011aae9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011aaeb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011aaf2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f011aaf9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ab00:	e8 04 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab05:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ab08:	e8 33 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ab10:	83 ec 0c             	sub    $0xc,%esp
f011ab13:	68 00 fc 0f 00       	push   $0xffc00
f011ab18:	e8 99 df fe ff       	call   f0108ab6 <kmalloc>
f011ab1d:	83 c4 10             	add    $0x10,%esp
f011ab20:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ab23:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ab26:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011ab2b:	74 17                	je     f011ab44 <test_kmalloc_firstfit1+0xa1>
f011ab2d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ab34:	83 ec 0c             	sub    $0xc,%esp
f011ab37:	68 38 de 12 f0       	push   $0xf012de38
f011ab3c:	e8 2b 64 fe ff       	call   f0100f6c <cprintf>
f011ab41:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ab44:	e8 f7 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab49:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ab4c:	74 17                	je     f011ab65 <test_kmalloc_firstfit1+0xc2>
f011ab4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ab55:	83 ec 0c             	sub    $0xc,%esp
f011ab58:	68 00 dc 12 f0       	push   $0xf012dc00
f011ab5d:	e8 0a 64 fe ff       	call   f0100f6c <cprintf>
f011ab62:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ab65:	e8 9f 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab6a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ab6d:	29 c2                	sub    %eax,%edx
f011ab6f:	89 d0                	mov    %edx,%eax
f011ab71:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ab76:	77 17                	ja     f011ab8f <test_kmalloc_firstfit1+0xec>
f011ab78:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ab7f:	83 ec 0c             	sub    $0xc,%esp
f011ab82:	68 69 de 12 f0       	push   $0xf012de69
f011ab87:	e8 e0 63 fe ff       	call   f0100f6c <cprintf>
f011ab8c:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ab8f:	e8 75 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab94:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ab97:	e8 a4 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011ab9f:	83 ec 0c             	sub    $0xc,%esp
f011aba2:	68 00 fc 0f 00       	push   $0xffc00
f011aba7:	e8 0a df fe ff       	call   f0108ab6 <kmalloc>
f011abac:	83 c4 10             	add    $0x10,%esp
f011abaf:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011abb2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011abb5:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f011abba:	74 17                	je     f011abd3 <test_kmalloc_firstfit1+0x130>
f011abbc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011abc3:	83 ec 0c             	sub    $0xc,%esp
f011abc6:	68 38 de 12 f0       	push   $0xf012de38
f011abcb:	e8 9c 63 fe ff       	call   f0100f6c <cprintf>
f011abd0:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011abd3:	e8 68 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011abd8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011abdb:	74 17                	je     f011abf4 <test_kmalloc_firstfit1+0x151>
f011abdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011abe4:	83 ec 0c             	sub    $0xc,%esp
f011abe7:	68 00 dc 12 f0       	push   $0xf012dc00
f011abec:	e8 7b 63 fe ff       	call   f0100f6c <cprintf>
f011abf1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011abf4:	e8 10 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011abf9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011abfc:	29 c2                	sub    %eax,%edx
f011abfe:	89 d0                	mov    %edx,%eax
f011ac00:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ac05:	77 17                	ja     f011ac1e <test_kmalloc_firstfit1+0x17b>
f011ac07:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac0e:	83 ec 0c             	sub    $0xc,%esp
f011ac11:	68 69 de 12 f0       	push   $0xf012de69
f011ac16:	e8 51 63 fe ff       	call   f0100f6c <cprintf>
f011ac1b:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ac1e:	e8 e6 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac23:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ac26:	e8 15 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011ac2e:	83 ec 0c             	sub    $0xc,%esp
f011ac31:	68 00 fc 0f 00       	push   $0xffc00
f011ac36:	e8 7b de fe ff       	call   f0108ab6 <kmalloc>
f011ac3b:	83 c4 10             	add    $0x10,%esp
f011ac3e:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ac41:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac44:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011ac49:	74 17                	je     f011ac62 <test_kmalloc_firstfit1+0x1bf>
f011ac4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac52:	83 ec 0c             	sub    $0xc,%esp
f011ac55:	68 38 de 12 f0       	push   $0xf012de38
f011ac5a:	e8 0d 63 fe ff       	call   f0100f6c <cprintf>
f011ac5f:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ac62:	e8 d9 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac67:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ac6a:	74 17                	je     f011ac83 <test_kmalloc_firstfit1+0x1e0>
f011ac6c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac73:	83 ec 0c             	sub    $0xc,%esp
f011ac76:	68 00 dc 12 f0       	push   $0xf012dc00
f011ac7b:	e8 ec 62 fe ff       	call   f0100f6c <cprintf>
f011ac80:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ac83:	e8 81 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac88:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ac8b:	29 c2                	sub    %eax,%edx
f011ac8d:	89 d0                	mov    %edx,%eax
f011ac8f:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ac94:	77 17                	ja     f011acad <test_kmalloc_firstfit1+0x20a>
f011ac96:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac9d:	83 ec 0c             	sub    $0xc,%esp
f011aca0:	68 69 de 12 f0       	push   $0xf012de69
f011aca5:	e8 c2 62 fe ff       	call   f0100f6c <cprintf>
f011acaa:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011acad:	e8 57 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011acb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011acb5:	e8 86 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011acba:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011acbd:	83 ec 0c             	sub    $0xc,%esp
f011acc0:	68 00 fc 0f 00       	push   $0xffc00
f011acc5:	e8 ec dd fe ff       	call   f0108ab6 <kmalloc>
f011acca:	83 c4 10             	add    $0x10,%esp
f011accd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011acd0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011acd3:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011acd8:	74 17                	je     f011acf1 <test_kmalloc_firstfit1+0x24e>
f011acda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ace1:	83 ec 0c             	sub    $0xc,%esp
f011ace4:	68 38 de 12 f0       	push   $0xf012de38
f011ace9:	e8 7e 62 fe ff       	call   f0100f6c <cprintf>
f011acee:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011acf1:	e8 4a 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011acf6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011acf9:	74 17                	je     f011ad12 <test_kmalloc_firstfit1+0x26f>
f011acfb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad02:	83 ec 0c             	sub    $0xc,%esp
f011ad05:	68 00 dc 12 f0       	push   $0xf012dc00
f011ad0a:	e8 5d 62 fe ff       	call   f0100f6c <cprintf>
f011ad0f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ad12:	e8 f2 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad17:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ad1a:	29 c2                	sub    %eax,%edx
f011ad1c:	89 d0                	mov    %edx,%eax
f011ad1e:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ad23:	77 17                	ja     f011ad3c <test_kmalloc_firstfit1+0x299>
f011ad25:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad2c:	83 ec 0c             	sub    $0xc,%esp
f011ad2f:	68 69 de 12 f0       	push   $0xf012de69
f011ad34:	e8 33 62 fe ff       	call   f0100f6c <cprintf>
f011ad39:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ad3c:	e8 c8 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad41:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ad44:	e8 f7 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad49:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ad4c:	83 ec 0c             	sub    $0xc,%esp
f011ad4f:	68 00 fc 1f 00       	push   $0x1ffc00
f011ad54:	e8 5d dd fe ff       	call   f0108ab6 <kmalloc>
f011ad59:	83 c4 10             	add    $0x10,%esp
f011ad5c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ad5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ad62:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011ad67:	74 17                	je     f011ad80 <test_kmalloc_firstfit1+0x2dd>
f011ad69:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad70:	83 ec 0c             	sub    $0xc,%esp
f011ad73:	68 38 de 12 f0       	push   $0xf012de38
f011ad78:	e8 ef 61 fe ff       	call   f0100f6c <cprintf>
f011ad7d:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ad80:	e8 bb 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad85:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ad88:	74 17                	je     f011ada1 <test_kmalloc_firstfit1+0x2fe>
f011ad8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad91:	83 ec 0c             	sub    $0xc,%esp
f011ad94:	68 00 dc 12 f0       	push   $0xf012dc00
f011ad99:	e8 ce 61 fe ff       	call   f0100f6c <cprintf>
f011ad9e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ada1:	e8 63 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ada6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ada9:	29 c2                	sub    %eax,%edx
f011adab:	89 d0                	mov    %edx,%eax
f011adad:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011adb2:	77 17                	ja     f011adcb <test_kmalloc_firstfit1+0x328>
f011adb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011adbb:	83 ec 0c             	sub    $0xc,%esp
f011adbe:	68 69 de 12 f0       	push   $0xf012de69
f011adc3:	e8 a4 61 fe ff       	call   f0100f6c <cprintf>
f011adc8:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011adcb:	e8 39 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011add0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011add3:	e8 68 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011add8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011addb:	83 ec 0c             	sub    $0xc,%esp
f011adde:	68 00 fc 1f 00       	push   $0x1ffc00
f011ade3:	e8 ce dc fe ff       	call   f0108ab6 <kmalloc>
f011ade8:	83 c4 10             	add    $0x10,%esp
f011adeb:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011adee:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011adf1:	3d 00 10 60 f8       	cmp    $0xf8601000,%eax
f011adf6:	74 17                	je     f011ae0f <test_kmalloc_firstfit1+0x36c>
f011adf8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011adff:	83 ec 0c             	sub    $0xc,%esp
f011ae02:	68 38 de 12 f0       	push   $0xf012de38
f011ae07:	e8 60 61 fe ff       	call   f0100f6c <cprintf>
f011ae0c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ae0f:	e8 2c 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae14:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ae17:	74 17                	je     f011ae30 <test_kmalloc_firstfit1+0x38d>
f011ae19:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae20:	83 ec 0c             	sub    $0xc,%esp
f011ae23:	68 00 dc 12 f0       	push   $0xf012dc00
f011ae28:	e8 3f 61 fe ff       	call   f0100f6c <cprintf>
f011ae2d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ae30:	e8 d4 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ae38:	29 c2                	sub    %eax,%edx
f011ae3a:	89 d0                	mov    %edx,%eax
f011ae3c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ae41:	77 17                	ja     f011ae5a <test_kmalloc_firstfit1+0x3b7>
f011ae43:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae4a:	83 ec 0c             	sub    $0xc,%esp
f011ae4d:	68 69 de 12 f0       	push   $0xf012de69
f011ae52:	e8 15 61 fe ff       	call   f0100f6c <cprintf>
f011ae57:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ae5a:	e8 aa 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ae62:	e8 d9 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae67:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011ae6a:	83 ec 0c             	sub    $0xc,%esp
f011ae6d:	68 00 fc 2f 00       	push   $0x2ffc00
f011ae72:	e8 3f dc fe ff       	call   f0108ab6 <kmalloc>
f011ae77:	83 c4 10             	add    $0x10,%esp
f011ae7a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ae7d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ae80:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011ae85:	74 17                	je     f011ae9e <test_kmalloc_firstfit1+0x3fb>
f011ae87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae8e:	83 ec 0c             	sub    $0xc,%esp
f011ae91:	68 38 de 12 f0       	push   $0xf012de38
f011ae96:	e8 d1 60 fe ff       	call   f0100f6c <cprintf>
f011ae9b:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ae9e:	e8 9d 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aea3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011aea6:	74 17                	je     f011aebf <test_kmalloc_firstfit1+0x41c>
f011aea8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aeaf:	83 ec 0c             	sub    $0xc,%esp
f011aeb2:	68 00 dc 12 f0       	push   $0xf012dc00
f011aeb7:	e8 b0 60 fe ff       	call   f0100f6c <cprintf>
f011aebc:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011aebf:	e8 45 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aec4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011aec7:	29 c2                	sub    %eax,%edx
f011aec9:	89 d0                	mov    %edx,%eax
f011aecb:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011aed0:	77 17                	ja     f011aee9 <test_kmalloc_firstfit1+0x446>
f011aed2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aed9:	83 ec 0c             	sub    $0xc,%esp
f011aedc:	68 69 de 12 f0       	push   $0xf012de69
f011aee1:	e8 86 60 fe ff       	call   f0100f6c <cprintf>
f011aee6:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011aee9:	e8 1b 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aeee:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011aef1:	e8 4a 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aef6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011aef9:	83 ec 0c             	sub    $0xc,%esp
f011aefc:	68 00 fc 2f 00       	push   $0x2ffc00
f011af01:	e8 b0 db fe ff       	call   f0108ab6 <kmalloc>
f011af06:	83 c4 10             	add    $0x10,%esp
f011af09:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011af0c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011af0f:	3d 00 10 b0 f8       	cmp    $0xf8b01000,%eax
f011af14:	74 17                	je     f011af2d <test_kmalloc_firstfit1+0x48a>
f011af16:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af1d:	83 ec 0c             	sub    $0xc,%esp
f011af20:	68 38 de 12 f0       	push   $0xf012de38
f011af25:	e8 42 60 fe ff       	call   f0100f6c <cprintf>
f011af2a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011af2d:	e8 0e 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011af32:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011af35:	74 17                	je     f011af4e <test_kmalloc_firstfit1+0x4ab>
f011af37:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af3e:	83 ec 0c             	sub    $0xc,%esp
f011af41:	68 00 dc 12 f0       	push   $0xf012dc00
f011af46:	e8 21 60 fe ff       	call   f0100f6c <cprintf>
f011af4b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011af4e:	e8 b6 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af53:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011af56:	29 c2                	sub    %eax,%edx
f011af58:	89 d0                	mov    %edx,%eax
f011af5a:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011af5f:	77 17                	ja     f011af78 <test_kmalloc_firstfit1+0x4d5>
f011af61:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af68:	83 ec 0c             	sub    $0xc,%esp
f011af6b:	68 69 de 12 f0       	push   $0xf012de69
f011af70:	e8 f7 5f fe ff       	call   f0100f6c <cprintf>
f011af75:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011af78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011af7c:	74 04                	je     f011af82 <test_kmalloc_firstfit1+0x4df>
f011af7e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011af82:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011af89:	e8 7b 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011af91:	e8 aa 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011af96:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011af99:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011af9c:	83 ec 0c             	sub    $0xc,%esp
f011af9f:	50                   	push   %eax
f011afa0:	e8 2b db fe ff       	call   f0108ad0 <kfree>
f011afa5:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011afa8:	e8 93 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011afad:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011afb0:	74 17                	je     f011afc9 <test_kmalloc_firstfit1+0x526>
f011afb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011afb9:	83 ec 0c             	sub    $0xc,%esp
f011afbc:	68 00 dc 12 f0       	push   $0xf012dc00
f011afc1:	e8 a6 5f fe ff       	call   f0100f6c <cprintf>
f011afc6:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011afc9:	e8 3b 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011afce:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011afd1:	3d ff 00 00 00       	cmp    $0xff,%eax
f011afd6:	77 17                	ja     f011afef <test_kmalloc_firstfit1+0x54c>
f011afd8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011afdf:	83 ec 0c             	sub    $0xc,%esp
f011afe2:	68 7d de 12 f0       	push   $0xf012de7d
f011afe7:	e8 80 5f fe ff       	call   f0100f6c <cprintf>
f011afec:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011afef:	e8 15 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aff4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011aff7:	e8 44 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011affc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[4]);
f011afff:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b002:	83 ec 0c             	sub    $0xc,%esp
f011b005:	50                   	push   %eax
f011b006:	e8 c5 da fe ff       	call   f0108ad0 <kfree>
f011b00b:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b00e:	e8 2d 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b013:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b016:	74 17                	je     f011b02f <test_kmalloc_firstfit1+0x58c>
f011b018:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b01f:	83 ec 0c             	sub    $0xc,%esp
f011b022:	68 00 dc 12 f0       	push   $0xf012dc00
f011b027:	e8 40 5f fe ff       	call   f0100f6c <cprintf>
f011b02c:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011b02f:	e8 d5 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b034:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b037:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b03c:	77 17                	ja     f011b055 <test_kmalloc_firstfit1+0x5b2>
f011b03e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b045:	83 ec 0c             	sub    $0xc,%esp
f011b048:	68 7d de 12 f0       	push   $0xf012de7d
f011b04d:	e8 1a 5f fe ff       	call   f0100f6c <cprintf>
f011b052:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b055:	e8 af 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b05a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b05d:	e8 de 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b062:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011b065:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b068:	83 ec 0c             	sub    $0xc,%esp
f011b06b:	50                   	push   %eax
f011b06c:	e8 5f da fe ff       	call   f0108ad0 <kfree>
f011b071:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b074:	e8 c7 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b079:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b07c:	74 17                	je     f011b095 <test_kmalloc_firstfit1+0x5f2>
f011b07e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b085:	83 ec 0c             	sub    $0xc,%esp
f011b088:	68 00 dc 12 f0       	push   $0xf012dc00
f011b08d:	e8 da 5e fe ff       	call   f0100f6c <cprintf>
f011b092:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011b095:	e8 6f 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b09a:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b09d:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b0a2:	77 17                	ja     f011b0bb <test_kmalloc_firstfit1+0x618>
f011b0a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b0ab:	83 ec 0c             	sub    $0xc,%esp
f011b0ae:	68 7d de 12 f0       	push   $0xf012de7d
f011b0b3:	e8 b4 5e fe ff       	call   f0100f6c <cprintf>
f011b0b8:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b0bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b0bf:	74 04                	je     f011b0c5 <test_kmalloc_firstfit1+0x622>
f011b0c1:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b0c5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b0cc:	e8 38 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b0d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b0d4:	e8 67 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b0d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011b0dc:	83 ec 0c             	sub    $0xc,%esp
f011b0df:	68 00 fc 07 00       	push   $0x7fc00
f011b0e4:	e8 cd d9 fe ff       	call   f0108ab6 <kmalloc>
f011b0e9:	83 c4 10             	add    $0x10,%esp
f011b0ec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b0ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b0f2:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f011b0f7:	74 17                	je     f011b110 <test_kmalloc_firstfit1+0x66d>
f011b0f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b100:	83 ec 0c             	sub    $0xc,%esp
f011b103:	68 38 de 12 f0       	push   $0xf012de38
f011b108:	e8 5f 5e fe ff       	call   f0100f6c <cprintf>
f011b10d:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b110:	e8 2b 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b115:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b118:	74 17                	je     f011b131 <test_kmalloc_firstfit1+0x68e>
f011b11a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b121:	83 ec 0c             	sub    $0xc,%esp
f011b124:	68 00 dc 12 f0       	push   $0xf012dc00
f011b129:	e8 3e 5e fe ff       	call   f0100f6c <cprintf>
f011b12e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 128) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b131:	e8 d3 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b136:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b139:	29 c2                	sub    %eax,%edx
f011b13b:	89 d0                	mov    %edx,%eax
f011b13d:	83 f8 7f             	cmp    $0x7f,%eax
f011b140:	77 17                	ja     f011b159 <test_kmalloc_firstfit1+0x6b6>
f011b142:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b149:	83 ec 0c             	sub    $0xc,%esp
f011b14c:	68 69 de 12 f0       	push   $0xf012de69
f011b151:	e8 16 5e fe ff       	call   f0100f6c <cprintf>
f011b156:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b159:	e8 ab 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b15e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b161:	e8 da 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b166:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b169:	83 ec 0c             	sub    $0xc,%esp
f011b16c:	68 00 fc 0f 00       	push   $0xffc00
f011b171:	e8 40 d9 fe ff       	call   f0108ab6 <kmalloc>
f011b176:	83 c4 10             	add    $0x10,%esp
f011b179:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b17c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b17f:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011b184:	74 17                	je     f011b19d <test_kmalloc_firstfit1+0x6fa>
f011b186:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b18d:	83 ec 0c             	sub    $0xc,%esp
f011b190:	68 38 de 12 f0       	push   $0xf012de38
f011b195:	e8 d2 5d fe ff       	call   f0100f6c <cprintf>
f011b19a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b19d:	e8 9e 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1a2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b1a5:	74 17                	je     f011b1be <test_kmalloc_firstfit1+0x71b>
f011b1a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b1ae:	83 ec 0c             	sub    $0xc,%esp
f011b1b1:	68 00 dc 12 f0       	push   $0xf012dc00
f011b1b6:	e8 b1 5d fe ff       	call   f0100f6c <cprintf>
f011b1bb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b1be:	e8 46 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b1c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b1c6:	29 c2                	sub    %eax,%edx
f011b1c8:	89 d0                	mov    %edx,%eax
f011b1ca:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b1cf:	77 17                	ja     f011b1e8 <test_kmalloc_firstfit1+0x745>
f011b1d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b1d8:	83 ec 0c             	sub    $0xc,%esp
f011b1db:	68 69 de 12 f0       	push   $0xf012de69
f011b1e0:	e8 87 5d fe ff       	call   f0100f6c <cprintf>
f011b1e5:	83 c4 10             	add    $0x10,%esp


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b1e8:	e8 1c 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b1ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b1f0:	e8 4b 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b1f8:	83 ec 0c             	sub    $0xc,%esp
f011b1fb:	68 00 fc 03 00       	push   $0x3fc00
f011b200:	e8 b1 d8 fe ff       	call   f0108ab6 <kmalloc>
f011b205:	83 c4 10             	add    $0x10,%esp
f011b208:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b20b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b20e:	3d 00 10 18 f8       	cmp    $0xf8181000,%eax
f011b213:	74 17                	je     f011b22c <test_kmalloc_firstfit1+0x789>
f011b215:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b21c:	83 ec 0c             	sub    $0xc,%esp
f011b21f:	68 38 de 12 f0       	push   $0xf012de38
f011b224:	e8 43 5d fe ff       	call   f0100f6c <cprintf>
f011b229:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b22c:	e8 0f 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b231:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b234:	74 17                	je     f011b24d <test_kmalloc_firstfit1+0x7aa>
f011b236:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b23d:	83 ec 0c             	sub    $0xc,%esp
f011b240:	68 00 dc 12 f0       	push   $0xf012dc00
f011b245:	e8 22 5d fe ff       	call   f0100f6c <cprintf>
f011b24a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 64) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b24d:	e8 b7 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b252:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b255:	29 c2                	sub    %eax,%edx
f011b257:	89 d0                	mov    %edx,%eax
f011b259:	83 f8 3f             	cmp    $0x3f,%eax
f011b25c:	77 17                	ja     f011b275 <test_kmalloc_firstfit1+0x7d2>
f011b25e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b265:	83 ec 0c             	sub    $0xc,%esp
f011b268:	68 69 de 12 f0       	push   $0xf012de69
f011b26d:	e8 fa 5c fe ff       	call   f0100f6c <cprintf>
f011b272:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b275:	e8 8f 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b27a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b27d:	e8 be 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b282:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011b285:	83 ec 0c             	sub    $0xc,%esp
f011b288:	68 00 00 20 00       	push   $0x200000
f011b28d:	e8 24 d8 fe ff       	call   f0108ab6 <kmalloc>
f011b292:	83 c4 10             	add    $0x10,%esp
f011b295:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b298:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b29b:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011b2a0:	74 17                	je     f011b2b9 <test_kmalloc_firstfit1+0x816>
f011b2a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2a9:	83 ec 0c             	sub    $0xc,%esp
f011b2ac:	68 38 de 12 f0       	push   $0xf012de38
f011b2b1:	e8 b6 5c fe ff       	call   f0100f6c <cprintf>
f011b2b6:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b2b9:	e8 4b 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b2be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b2c1:	29 c2                	sub    %eax,%edx
f011b2c3:	89 d0                	mov    %edx,%eax
f011b2c5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b2ca:	77 17                	ja     f011b2e3 <test_kmalloc_firstfit1+0x840>
f011b2cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2d3:	83 ec 0c             	sub    $0xc,%esp
f011b2d6:	68 69 de 12 f0       	push   $0xf012de69
f011b2db:	e8 8c 5c fe ff       	call   f0100f6c <cprintf>
f011b2e0:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b2e3:	e8 58 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b2e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b2eb:	74 17                	je     f011b304 <test_kmalloc_firstfit1+0x861>
f011b2ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2f4:	83 ec 0c             	sub    $0xc,%esp
f011b2f7:	68 00 dc 12 f0       	push   $0xf012dc00
f011b2fc:	e8 6b 5c fe ff       	call   f0100f6c <cprintf>
f011b301:	83 c4 10             	add    $0x10,%esp


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = (int)sys_calculate_free_frames() ;
f011b304:	e8 00 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b309:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b30c:	e8 2f 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b311:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011b314:	83 ec 0c             	sub    $0xc,%esp
f011b317:	68 00 fc 3f 00       	push   $0x3ffc00
f011b31c:	e8 95 d7 fe ff       	call   f0108ab6 <kmalloc>
f011b321:	83 c4 10             	add    $0x10,%esp
f011b324:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b327:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b32a:	3d 00 10 e0 f8       	cmp    $0xf8e01000,%eax
f011b32f:	74 17                	je     f011b348 <test_kmalloc_firstfit1+0x8a5>
f011b331:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b338:	83 ec 0c             	sub    $0xc,%esp
f011b33b:	68 38 de 12 f0       	push   $0xf012de38
f011b340:	e8 27 5c fe ff       	call   f0100f6c <cprintf>
f011b345:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b348:	e8 f3 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b34d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b350:	74 17                	je     f011b369 <test_kmalloc_firstfit1+0x8c6>
f011b352:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b359:	83 ec 0c             	sub    $0xc,%esp
f011b35c:	68 00 dc 12 f0       	push   $0xf012dc00
f011b361:	e8 06 5c fe ff       	call   f0100f6c <cprintf>
f011b366:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1024) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b369:	e8 9b 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b36e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b371:	29 c2                	sub    %eax,%edx
f011b373:	89 d0                	mov    %edx,%eax
f011b375:	3d ff 03 00 00       	cmp    $0x3ff,%eax
f011b37a:	77 17                	ja     f011b393 <test_kmalloc_firstfit1+0x8f0>
f011b37c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b383:	83 ec 0c             	sub    $0xc,%esp
f011b386:	68 69 de 12 f0       	push   $0xf012de69
f011b38b:	e8 dc 5b fe ff       	call   f0100f6c <cprintf>
f011b390:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011b393:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b397:	74 04                	je     f011b39d <test_kmalloc_firstfit1+0x8fa>
f011b399:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f011b39d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b3a4:	e8 60 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b3ac:	e8 8f 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b3b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011b3b4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b3b7:	83 ec 0c             	sub    $0xc,%esp
f011b3ba:	50                   	push   %eax
f011b3bb:	e8 10 d7 fe ff       	call   f0108ad0 <kfree>
f011b3c0:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b3c3:	e8 78 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b3c8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b3cb:	74 17                	je     f011b3e4 <test_kmalloc_firstfit1+0x941>
f011b3cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b3d4:	83 ec 0c             	sub    $0xc,%esp
f011b3d7:	68 00 dc 12 f0       	push   $0xf012dc00
f011b3dc:	e8 8b 5b fe ff       	call   f0100f6c <cprintf>
f011b3e1:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b3e4:	e8 20 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3e9:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b3ec:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b3f1:	77 17                	ja     f011b40a <test_kmalloc_firstfit1+0x967>
f011b3f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b3fa:	83 ec 0c             	sub    $0xc,%esp
f011b3fd:	68 7d de 12 f0       	push   $0xf012de7d
f011b402:	e8 65 5b fe ff       	call   f0100f6c <cprintf>
f011b407:	83 c4 10             	add    $0x10,%esp

		//Next 1 MB Hole appended also
		freeFrames = (int)sys_calculate_free_frames() ;
f011b40a:	e8 fa 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b40f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b412:	e8 29 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b417:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011b41a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b41d:	83 ec 0c             	sub    $0xc,%esp
f011b420:	50                   	push   %eax
f011b421:	e8 aa d6 fe ff       	call   f0108ad0 <kfree>
f011b426:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b429:	e8 12 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b42e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b431:	74 17                	je     f011b44a <test_kmalloc_firstfit1+0x9a7>
f011b433:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b43a:	83 ec 0c             	sub    $0xc,%esp
f011b43d:	68 00 dc 12 f0       	push   $0xf012dc00
f011b442:	e8 25 5b fe ff       	call   f0100f6c <cprintf>
f011b447:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b44a:	e8 ba 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b44f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b452:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b457:	77 17                	ja     f011b470 <test_kmalloc_firstfit1+0x9cd>
f011b459:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b460:	83 ec 0c             	sub    $0xc,%esp
f011b463:	68 7d de 12 f0       	push   $0xf012de7d
f011b468:	e8 ff 5a fe ff       	call   f0100f6c <cprintf>
f011b46d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b470:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b474:	74 04                	je     f011b47a <test_kmalloc_firstfit1+0x9d7>
f011b476:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b47a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b481:	e8 83 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b486:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b489:	e8 b2 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b48e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011b491:	83 ec 0c             	sub    $0xc,%esp
f011b494:	68 00 00 10 00       	push   $0x100000
f011b499:	e8 18 d6 fe ff       	call   f0108ab6 <kmalloc>
f011b49e:	83 c4 10             	add    $0x10,%esp
f011b4a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b4a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b4a7:	3d 00 10 1c f8       	cmp    $0xf81c1000,%eax
f011b4ac:	74 17                	je     f011b4c5 <test_kmalloc_firstfit1+0xa22>
f011b4ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b4b5:	83 ec 0c             	sub    $0xc,%esp
f011b4b8:	68 38 de 12 f0       	push   $0xf012de38
f011b4bd:	e8 aa 5a fe ff       	call   f0100f6c <cprintf>
f011b4c2:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b4c5:	e8 76 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b4ca:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b4cd:	74 17                	je     f011b4e6 <test_kmalloc_firstfit1+0xa43>
f011b4cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b4d6:	83 ec 0c             	sub    $0xc,%esp
f011b4d9:	68 00 dc 12 f0       	push   $0xf012dc00
f011b4de:	e8 89 5a fe ff       	call   f0100f6c <cprintf>
f011b4e3:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b4e6:	e8 1e 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b4eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b4ee:	29 c2                	sub    %eax,%edx
f011b4f0:	89 d0                	mov    %edx,%eax
f011b4f2:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b4f7:	77 17                	ja     f011b510 <test_kmalloc_firstfit1+0xa6d>
f011b4f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b500:	83 ec 0c             	sub    $0xc,%esp
f011b503:	68 69 de 12 f0       	push   $0xf012de69
f011b508:	e8 5f 5a fe ff       	call   f0100f6c <cprintf>
f011b50d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011b510:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b514:	74 04                	je     f011b51a <test_kmalloc_firstfit1+0xa77>
f011b516:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (1) completed. Eval = %d%\n", eval);
f011b51a:	83 ec 08             	sub    $0x8,%esp
f011b51d:	ff 75 f4             	pushl  -0xc(%ebp)
f011b520:	68 8c de 12 f0       	push   $0xf012de8c
f011b525:	e8 42 5a fe ff       	call   f0100f6c <cprintf>
f011b52a:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b52d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011b532:	8b 7d fc             	mov    -0x4(%ebp),%edi
f011b535:	c9                   	leave  
f011b536:	c3                   	ret    

f011b537 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011b537:	55                   	push   %ebp
f011b538:	89 e5                	mov    %esp,%ebp
f011b53a:	57                   	push   %edi
f011b53b:	53                   	push   %ebx
f011b53c:	83 ec 60             	sub    $0x60,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011b53f:	83 ec 0c             	sub    $0xc,%esp
f011b542:	68 40 db 12 f0       	push   $0xf012db40
f011b547:	e8 20 5a fe ff       	call   f0100f6c <cprintf>
f011b54c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b54f:	83 ec 0c             	sub    $0xc,%esp
f011b552:	68 70 db 12 f0       	push   $0xf012db70
f011b557:	e8 10 5a fe ff       	call   f0100f6c <cprintf>
f011b55c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b55f:	83 ec 0c             	sub    $0xc,%esp
f011b562:	68 40 db 12 f0       	push   $0xf012db40
f011b567:	e8 00 5a fe ff       	call   f0100f6c <cprintf>
f011b56c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b56f:	8d 55 98             	lea    -0x68(%ebp),%edx
f011b572:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b577:	b8 00 00 00 00       	mov    $0x0,%eax
f011b57c:	89 d7                	mov    %edx,%edi
f011b57e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011b580:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011b587:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f011b58e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b595:	83 ec 0c             	sub    $0xc,%esp
f011b598:	68 01 e0 ff 07       	push   $0x7ffe001
f011b59d:	e8 14 d5 fe ff       	call   f0108ab6 <kmalloc>
f011b5a2:	83 c4 10             	add    $0x10,%esp
f011b5a5:	89 45 98             	mov    %eax,-0x68(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("kmalloc: Attempt to allocate more than heap size, should return NULL\n"); }
f011b5a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b5ab:	85 c0                	test   %eax,%eax
f011b5ad:	74 17                	je     f011b5c6 <test_kmalloc_firstfit2+0x8f>
f011b5af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b5b6:	83 ec 0c             	sub    $0xc,%esp
f011b5b9:	68 c4 de 12 f0       	push   $0xf012dec4
f011b5be:	e8 a9 59 fe ff       	call   f0100f6c <cprintf>
f011b5c3:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b5c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b5ca:	74 04                	je     f011b5d0 <test_kmalloc_firstfit2+0x99>
f011b5cc:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b5d0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b5d7:	e8 2d 24 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b5dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b5df:	e8 5c 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b5e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b5e7:	83 ec 0c             	sub    $0xc,%esp
f011b5ea:	68 00 fc 1f 00       	push   $0x1ffc00
f011b5ef:	e8 c2 d4 fe ff       	call   f0108ab6 <kmalloc>
f011b5f4:	83 c4 10             	add    $0x10,%esp
f011b5f7:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b5fa:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b5fd:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011b602:	74 17                	je     f011b61b <test_kmalloc_firstfit2+0xe4>
f011b604:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b60b:	83 ec 0c             	sub    $0xc,%esp
f011b60e:	68 38 de 12 f0       	push   $0xf012de38
f011b613:	e8 54 59 fe ff       	call   f0100f6c <cprintf>
f011b618:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b61b:	e8 20 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b620:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b623:	74 17                	je     f011b63c <test_kmalloc_firstfit2+0x105>
f011b625:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b62c:	83 ec 0c             	sub    $0xc,%esp
f011b62f:	68 00 dc 12 f0       	push   $0xf012dc00
f011b634:	e8 33 59 fe ff       	call   f0100f6c <cprintf>
f011b639:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b63c:	e8 c8 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b641:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b644:	29 c2                	sub    %eax,%edx
f011b646:	89 d0                	mov    %edx,%eax
f011b648:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b64d:	77 17                	ja     f011b666 <test_kmalloc_firstfit2+0x12f>
f011b64f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b656:	83 ec 0c             	sub    $0xc,%esp
f011b659:	68 69 de 12 f0       	push   $0xf012de69
f011b65e:	e8 09 59 fe ff       	call   f0100f6c <cprintf>
f011b663:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b666:	e8 9e 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b66b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b66e:	e8 cd 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b673:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b676:	83 ec 0c             	sub    $0xc,%esp
f011b679:	68 00 fc 1f 00       	push   $0x1ffc00
f011b67e:	e8 33 d4 fe ff       	call   f0108ab6 <kmalloc>
f011b683:	83 c4 10             	add    $0x10,%esp
f011b686:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b689:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b68c:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011b691:	74 17                	je     f011b6aa <test_kmalloc_firstfit2+0x173>
f011b693:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b69a:	83 ec 0c             	sub    $0xc,%esp
f011b69d:	68 38 de 12 f0       	push   $0xf012de38
f011b6a2:	e8 c5 58 fe ff       	call   f0100f6c <cprintf>
f011b6a7:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b6aa:	e8 91 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b6af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b6b2:	74 17                	je     f011b6cb <test_kmalloc_firstfit2+0x194>
f011b6b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b6bb:	83 ec 0c             	sub    $0xc,%esp
f011b6be:	68 00 dc 12 f0       	push   $0xf012dc00
f011b6c3:	e8 a4 58 fe ff       	call   f0100f6c <cprintf>
f011b6c8:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b6cb:	e8 39 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b6d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b6d3:	29 c2                	sub    %eax,%edx
f011b6d5:	89 d0                	mov    %edx,%eax
f011b6d7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b6dc:	77 17                	ja     f011b6f5 <test_kmalloc_firstfit2+0x1be>
f011b6de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b6e5:	83 ec 0c             	sub    $0xc,%esp
f011b6e8:	68 69 de 12 f0       	push   $0xf012de69
f011b6ed:	e8 7a 58 fe ff       	call   f0100f6c <cprintf>
f011b6f2:	83 c4 10             	add    $0x10,%esp

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b6f5:	e8 0f 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b6fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b6fd:	e8 3e 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b702:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*kilo);
f011b705:	83 ec 0c             	sub    $0xc,%esp
f011b708:	68 00 04 00 00       	push   $0x400
f011b70d:	e8 a4 d3 fe ff       	call   f0108ab6 <kmalloc>
f011b712:	83 c4 10             	add    $0x10,%esp
f011b715:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011b718:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b71b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b720:	76 22                	jbe    f011b744 <test_kmalloc_firstfit2+0x20d>
f011b722:	8b 5d a0             	mov    -0x60(%ebp),%ebx
f011b725:	83 ec 0c             	sub    $0xc,%esp
f011b728:	6a 00                	push   $0x0
f011b72a:	e8 7d d3 fe ff       	call   f0108aac <sbrk>
f011b72f:	83 c4 10             	add    $0x10,%esp
f011b732:	39 c3                	cmp    %eax,%ebx
f011b734:	73 0e                	jae    f011b744 <test_kmalloc_firstfit2+0x20d>
f011b736:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b739:	89 c2                	mov    %eax,%edx
f011b73b:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011b740:	39 c2                	cmp    %eax,%edx
f011b742:	72 17                	jb     f011b75b <test_kmalloc_firstfit2+0x224>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b744:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b74b:	83 ec 0c             	sub    $0xc,%esp
f011b74e:	68 00 dd 12 f0       	push   $0xf012dd00
f011b753:	e8 14 58 fe ff       	call   f0100f6c <cprintf>
f011b758:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b75b:	e8 e0 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b760:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b763:	74 17                	je     f011b77c <test_kmalloc_firstfit2+0x245>
f011b765:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b76c:	83 ec 0c             	sub    $0xc,%esp
f011b76f:	68 00 dc 12 f0       	push   $0xf012dc00
f011b774:	e8 f3 57 fe ff       	call   f0100f6c <cprintf>
f011b779:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b77c:	e8 88 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b781:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b784:	e8 b7 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b789:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b78c:	83 ec 0c             	sub    $0xc,%esp
f011b78f:	68 00 08 00 00       	push   $0x800
f011b794:	e8 1d d3 fe ff       	call   f0108ab6 <kmalloc>
f011b799:	83 c4 10             	add    $0x10,%esp
f011b79c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011b79f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b7a2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b7a7:	76 22                	jbe    f011b7cb <test_kmalloc_firstfit2+0x294>
f011b7a9:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011b7ac:	83 ec 0c             	sub    $0xc,%esp
f011b7af:	6a 00                	push   $0x0
f011b7b1:	e8 f6 d2 fe ff       	call   f0108aac <sbrk>
f011b7b6:	83 c4 10             	add    $0x10,%esp
f011b7b9:	39 c3                	cmp    %eax,%ebx
f011b7bb:	73 0e                	jae    f011b7cb <test_kmalloc_firstfit2+0x294>
f011b7bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b7c0:	89 c2                	mov    %eax,%edx
f011b7c2:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011b7c7:	39 c2                	cmp    %eax,%edx
f011b7c9:	72 17                	jb     f011b7e2 <test_kmalloc_firstfit2+0x2ab>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b7cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b7d2:	83 ec 0c             	sub    $0xc,%esp
f011b7d5:	68 00 dd 12 f0       	push   $0xf012dd00
f011b7da:	e8 8d 57 fe ff       	call   f0100f6c <cprintf>
f011b7df:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b7e2:	e8 59 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b7e7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b7ea:	74 17                	je     f011b803 <test_kmalloc_firstfit2+0x2cc>
f011b7ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b7f3:	83 ec 0c             	sub    $0xc,%esp
f011b7f6:	68 00 dc 12 f0       	push   $0xf012dc00
f011b7fb:	e8 6c 57 fe ff       	call   f0100f6c <cprintf>
f011b800:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b803:	e8 01 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b808:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b80b:	e8 30 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b810:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(1*kilo);
f011b813:	83 ec 0c             	sub    $0xc,%esp
f011b816:	68 00 04 00 00       	push   $0x400
f011b81b:	e8 96 d2 fe ff       	call   f0108ab6 <kmalloc>
f011b820:	83 c4 10             	add    $0x10,%esp
f011b823:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011b826:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b829:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b82e:	76 22                	jbe    f011b852 <test_kmalloc_firstfit2+0x31b>
f011b830:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011b833:	83 ec 0c             	sub    $0xc,%esp
f011b836:	6a 00                	push   $0x0
f011b838:	e8 6f d2 fe ff       	call   f0108aac <sbrk>
f011b83d:	83 c4 10             	add    $0x10,%esp
f011b840:	39 c3                	cmp    %eax,%ebx
f011b842:	73 0e                	jae    f011b852 <test_kmalloc_firstfit2+0x31b>
f011b844:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b847:	89 c2                	mov    %eax,%edx
f011b849:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011b84e:	39 c2                	cmp    %eax,%edx
f011b850:	72 17                	jb     f011b869 <test_kmalloc_firstfit2+0x332>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b852:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b859:	83 ec 0c             	sub    $0xc,%esp
f011b85c:	68 00 dd 12 f0       	push   $0xf012dd00
f011b861:	e8 06 57 fe ff       	call   f0100f6c <cprintf>
f011b866:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b869:	e8 d2 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b86e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b871:	74 17                	je     f011b88a <test_kmalloc_firstfit2+0x353>
f011b873:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b87a:	83 ec 0c             	sub    $0xc,%esp
f011b87d:	68 00 dc 12 f0       	push   $0xf012dc00
f011b882:	e8 e5 56 fe ff       	call   f0100f6c <cprintf>
f011b887:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB Hole in Dynamic Allocator Area
		freeFrames = (int)sys_calculate_free_frames() ;
f011b88a:	e8 7a 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b88f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b892:	e8 a9 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b897:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011b89a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b89d:	83 ec 0c             	sub    $0xc,%esp
f011b8a0:	50                   	push   %eax
f011b8a1:	e8 2a d2 fe ff       	call   f0108ad0 <kfree>
f011b8a6:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b8a9:	e8 92 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8ae:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b8b1:	74 17                	je     f011b8ca <test_kmalloc_firstfit2+0x393>
f011b8b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b8ba:	83 ec 0c             	sub    $0xc,%esp
f011b8bd:	68 00 dc 12 f0       	push   $0xf012dc00
f011b8c2:	e8 a5 56 fe ff       	call   f0100f6c <cprintf>
f011b8c7:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011b8ca:	e8 3a 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b8cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011b8d2:	74 17                	je     f011b8eb <test_kmalloc_firstfit2+0x3b4>
f011b8d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b8db:	83 ec 0c             	sub    $0xc,%esp
f011b8de:	68 0c df 12 f0       	push   $0xf012df0c
f011b8e3:	e8 84 56 fe ff       	call   f0100f6c <cprintf>
f011b8e8:	83 c4 10             	add    $0x10,%esp

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b8eb:	e8 19 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b8f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b8f3:	e8 48 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011b8fb:	83 ec 0c             	sub    $0xc,%esp
f011b8fe:	68 00 1c 00 00       	push   $0x1c00
f011b903:	e8 ae d1 fe ff       	call   f0108ab6 <kmalloc>
f011b908:	83 c4 10             	add    $0x10,%esp
f011b90b:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b90e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b911:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011b916:	74 17                	je     f011b92f <test_kmalloc_firstfit2+0x3f8>
f011b918:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b91f:	83 ec 0c             	sub    $0xc,%esp
f011b922:	68 38 de 12 f0       	push   $0xf012de38
f011b927:	e8 40 56 fe ff       	call   f0100f6c <cprintf>
f011b92c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b92f:	e8 0c 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b934:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b937:	74 17                	je     f011b950 <test_kmalloc_firstfit2+0x419>
f011b939:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b940:	83 ec 0c             	sub    $0xc,%esp
f011b943:	68 00 dc 12 f0       	push   $0xf012dc00
f011b948:	e8 1f 56 fe ff       	call   f0100f6c <cprintf>
f011b94d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b950:	e8 b4 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b955:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b958:	29 c2                	sub    %eax,%edx
f011b95a:	89 d0                	mov    %edx,%eax
f011b95c:	83 f8 01             	cmp    $0x1,%eax
f011b95f:	77 17                	ja     f011b978 <test_kmalloc_firstfit2+0x441>
f011b961:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b968:	83 ec 0c             	sub    $0xc,%esp
f011b96b:	68 69 de 12 f0       	push   $0xf012de69
f011b970:	e8 f7 55 fe ff       	call   f0100f6c <cprintf>
f011b975:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b978:	e8 8c 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b97d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b980:	e8 bb 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b985:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[0]);
f011b988:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b98b:	83 ec 0c             	sub    $0xc,%esp
f011b98e:	50                   	push   %eax
f011b98f:	e8 3c d1 fe ff       	call   f0108ad0 <kfree>
f011b994:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b997:	e8 a4 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b99c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b99f:	74 17                	je     f011b9b8 <test_kmalloc_firstfit2+0x481>
f011b9a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b9a8:	83 ec 0c             	sub    $0xc,%esp
f011b9ab:	68 00 dc 12 f0       	push   $0xf012dc00
f011b9b0:	e8 b7 55 fe ff       	call   f0100f6c <cprintf>
f011b9b5:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011b9b8:	e8 4c 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b9bd:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b9c0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b9c5:	77 17                	ja     f011b9de <test_kmalloc_firstfit2+0x4a7>
f011b9c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b9ce:	83 ec 0c             	sub    $0xc,%esp
f011b9d1:	68 7d de 12 f0       	push   $0xf012de7d
f011b9d6:	e8 91 55 fe ff       	call   f0100f6c <cprintf>
f011b9db:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b9de:	e8 26 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b9e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b9e6:	e8 55 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b9eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011b9ee:	83 ec 0c             	sub    $0xc,%esp
f011b9f1:	68 00 fc 2f 00       	push   $0x2ffc00
f011b9f6:	e8 bb d0 fe ff       	call   f0108ab6 <kmalloc>
f011b9fb:	83 c4 10             	add    $0x10,%esp
f011b9fe:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ba01:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ba04:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011ba09:	74 17                	je     f011ba22 <test_kmalloc_firstfit2+0x4eb>
f011ba0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba12:	83 ec 0c             	sub    $0xc,%esp
f011ba15:	68 38 de 12 f0       	push   $0xf012de38
f011ba1a:	e8 4d 55 fe ff       	call   f0100f6c <cprintf>
f011ba1f:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ba22:	e8 19 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ba27:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ba2a:	74 17                	je     f011ba43 <test_kmalloc_firstfit2+0x50c>
f011ba2c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba33:	83 ec 0c             	sub    $0xc,%esp
f011ba36:	68 00 dc 12 f0       	push   $0xf012dc00
f011ba3b:	e8 2c 55 fe ff       	call   f0100f6c <cprintf>
f011ba40:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  3*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ba43:	e8 c1 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba48:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ba4b:	29 c2                	sub    %eax,%edx
f011ba4d:	89 d0                	mov    %edx,%eax
f011ba4f:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011ba54:	77 17                	ja     f011ba6d <test_kmalloc_firstfit2+0x536>
f011ba56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba5d:	83 ec 0c             	sub    $0xc,%esp
f011ba60:	68 69 de 12 f0       	push   $0xf012de69
f011ba65:	e8 02 55 fe ff       	call   f0100f6c <cprintf>
f011ba6a:	83 c4 10             	add    $0x10,%esp

		//2 MB + 6 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ba6d:	e8 97 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba72:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ba75:	e8 c6 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ba7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(2*Mega + 6*kilo);
f011ba7d:	83 ec 0c             	sub    $0xc,%esp
f011ba80:	68 00 18 20 00       	push   $0x201800
f011ba85:	e8 2c d0 fe ff       	call   f0108ab6 <kmalloc>
f011ba8a:	83 c4 10             	add    $0x10,%esp
f011ba8d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ba90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ba93:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011ba98:	74 17                	je     f011bab1 <test_kmalloc_firstfit2+0x57a>
f011ba9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011baa1:	83 ec 0c             	sub    $0xc,%esp
f011baa4:	68 38 de 12 f0       	push   $0xf012de38
f011baa9:	e8 be 54 fe ff       	call   f0100f6c <cprintf>
f011baae:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bab1:	e8 8a 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bab6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bab9:	74 17                	je     f011bad2 <test_kmalloc_firstfit2+0x59b>
f011babb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bac2:	83 ec 0c             	sub    $0xc,%esp
f011bac5:	68 00 dc 12 f0       	push   $0xf012dc00
f011baca:	e8 9d 54 fe ff       	call   f0100f6c <cprintf>
f011bacf:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  514) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bad2:	e8 32 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bad7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bada:	29 c2                	sub    %eax,%edx
f011badc:	89 d0                	mov    %edx,%eax
f011bade:	3d 01 02 00 00       	cmp    $0x201,%eax
f011bae3:	77 17                	ja     f011bafc <test_kmalloc_firstfit2+0x5c5>
f011bae5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011baec:	83 ec 0c             	sub    $0xc,%esp
f011baef:	68 69 de 12 f0       	push   $0xf012de69
f011baf4:	e8 73 54 fe ff       	call   f0100f6c <cprintf>
f011baf9:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011bafc:	e8 08 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb01:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bb04:	e8 37 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb09:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011bb0c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bb0f:	83 ec 0c             	sub    $0xc,%esp
f011bb12:	50                   	push   %eax
f011bb13:	e8 b8 cf fe ff       	call   f0108ad0 <kfree>
f011bb18:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bb1b:	e8 20 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb20:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bb23:	74 17                	je     f011bb3c <test_kmalloc_firstfit2+0x605>
f011bb25:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb2c:	83 ec 0c             	sub    $0xc,%esp
f011bb2f:	68 00 dc 12 f0       	push   $0xf012dc00
f011bb34:	e8 33 54 fe ff       	call   f0100f6c <cprintf>
f011bb39:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011bb3c:	e8 c8 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb41:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bb44:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011bb49:	77 17                	ja     f011bb62 <test_kmalloc_firstfit2+0x62b>
f011bb4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb52:	83 ec 0c             	sub    $0xc,%esp
f011bb55:	68 7d de 12 f0       	push   $0xf012de7d
f011bb5a:	e8 0d 54 fe ff       	call   f0100f6c <cprintf>
f011bb5f:	83 c4 10             	add    $0x10,%esp

		//2 KB Hole in Dynamic Allocator Area [Resulting Hole = 1 KB + 2 KB = 3 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bb62:	e8 a2 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb67:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bb6a:	e8 d1 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011bb72:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bb75:	83 ec 0c             	sub    $0xc,%esp
f011bb78:	50                   	push   %eax
f011bb79:	e8 52 cf fe ff       	call   f0108ad0 <kfree>
f011bb7e:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bb81:	e8 ba 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb86:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bb89:	74 17                	je     f011bba2 <test_kmalloc_firstfit2+0x66b>
f011bb8b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb92:	83 ec 0c             	sub    $0xc,%esp
f011bb95:	68 00 dc 12 f0       	push   $0xf012dc00
f011bb9a:	e8 cd 53 fe ff       	call   f0100f6c <cprintf>
f011bb9f:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011bba2:	e8 62 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bba7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bbaa:	74 17                	je     f011bbc3 <test_kmalloc_firstfit2+0x68c>
f011bbac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bbb3:	83 ec 0c             	sub    $0xc,%esp
f011bbb6:	68 0c df 12 f0       	push   $0xf012df0c
f011bbbb:	e8 ac 53 fe ff       	call   f0100f6c <cprintf>
f011bbc0:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB = 4 MB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bbc3:	e8 41 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bbc8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bbcb:	e8 70 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bbd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011bbd3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bbd6:	83 ec 0c             	sub    $0xc,%esp
f011bbd9:	50                   	push   %eax
f011bbda:	e8 f1 ce fe ff       	call   f0108ad0 <kfree>
f011bbdf:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011bbe2:	e8 22 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bbe7:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bbea:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011bbef:	77 17                	ja     f011bc08 <test_kmalloc_firstfit2+0x6d1>
f011bbf1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bbf8:	83 ec 0c             	sub    $0xc,%esp
f011bbfb:	68 7d de 12 f0       	push   $0xf012de7d
f011bc00:	e8 67 53 fe ff       	call   f0100f6c <cprintf>
f011bc05:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bc08:	e8 33 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc0d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bc10:	74 17                	je     f011bc29 <test_kmalloc_firstfit2+0x6f2>
f011bc12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc19:	83 ec 0c             	sub    $0xc,%esp
f011bc1c:	68 00 dc 12 f0       	push   $0xf012dc00
f011bc21:	e8 46 53 fe ff       	call   f0100f6c <cprintf>
f011bc26:	83 c4 10             	add    $0x10,%esp

		//5 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bc29:	e8 db 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bc31:	e8 0a 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc36:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(5*Mega-kilo);
f011bc39:	83 ec 0c             	sub    $0xc,%esp
f011bc3c:	68 00 fc 4f 00       	push   $0x4ffc00
f011bc41:	e8 70 ce fe ff       	call   f0108ab6 <kmalloc>
f011bc46:	83 c4 10             	add    $0x10,%esp
f011bc49:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 9*Mega + 16*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bc4c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc4f:	3d 00 50 90 f8       	cmp    $0xf8905000,%eax
f011bc54:	74 17                	je     f011bc6d <test_kmalloc_firstfit2+0x736>
f011bc56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc5d:	83 ec 0c             	sub    $0xc,%esp
f011bc60:	68 38 de 12 f0       	push   $0xf012de38
f011bc65:	e8 02 53 fe ff       	call   f0100f6c <cprintf>
f011bc6a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bc6d:	e8 ce 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc72:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bc75:	74 17                	je     f011bc8e <test_kmalloc_firstfit2+0x757>
f011bc77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc7e:	83 ec 0c             	sub    $0xc,%esp
f011bc81:	68 00 dc 12 f0       	push   $0xf012dc00
f011bc86:	e8 e1 52 fe ff       	call   f0100f6c <cprintf>
f011bc8b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <   5*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bc8e:	e8 76 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc93:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bc96:	29 c2                	sub    %eax,%edx
f011bc98:	89 d0                	mov    %edx,%eax
f011bc9a:	3d ff 04 00 00       	cmp    $0x4ff,%eax
f011bc9f:	77 17                	ja     f011bcb8 <test_kmalloc_firstfit2+0x781>
f011bca1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bca8:	83 ec 0c             	sub    $0xc,%esp
f011bcab:	68 69 de 12 f0       	push   $0xf012de69
f011bcb0:	e8 b7 52 fe ff       	call   f0100f6c <cprintf>
f011bcb5:	83 c4 10             	add    $0x10,%esp

		//8 KB Hole [Resulting Hole = 2 MB + 2 MB + 8 KB + 3 MB = 7 MB + 8 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bcb8:	e8 4c 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bcbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bcc0:	e8 7b 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bcc5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[5]);
f011bcc8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bccb:	83 ec 0c             	sub    $0xc,%esp
f011bcce:	50                   	push   %eax
f011bccf:	e8 fc cd fe ff       	call   f0108ad0 <kfree>
f011bcd4:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bcd7:	e8 64 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bcdc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bcdf:	74 17                	je     f011bcf8 <test_kmalloc_firstfit2+0x7c1>
f011bce1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bce8:	83 ec 0c             	sub    $0xc,%esp
f011bceb:	68 00 dc 12 f0       	push   $0xf012dc00
f011bcf0:	e8 77 52 fe ff       	call   f0100f6c <cprintf>
f011bcf5:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong free: \n"); }
f011bcf8:	e8 0c 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bcfd:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bd00:	83 f8 01             	cmp    $0x1,%eax
f011bd03:	77 17                	ja     f011bd1c <test_kmalloc_firstfit2+0x7e5>
f011bd05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd0c:	83 ec 0c             	sub    $0xc,%esp
f011bd0f:	68 7d de 12 f0       	push   $0xf012de7d
f011bd14:	e8 53 52 fe ff       	call   f0100f6c <cprintf>
f011bd19:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011bd1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011bd20:	74 04                	je     f011bd26 <test_kmalloc_firstfit2+0x7ef>
f011bd22:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011bd26:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#1] Should be allocated in the resulting hole inside Page Allocator Area
		//7 MB + 1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bd2d:	e8 d7 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd32:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bd35:	e8 06 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(7*Mega+kilo);
f011bd3d:	83 ec 0c             	sub    $0xc,%esp
f011bd40:	68 00 04 70 00       	push   $0x700400
f011bd45:	e8 6c cd fe ff       	call   f0108ab6 <kmalloc>
f011bd4a:	83 c4 10             	add    $0x10,%esp
f011bd4d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bd50:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bd53:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011bd58:	74 17                	je     f011bd71 <test_kmalloc_firstfit2+0x83a>
f011bd5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd61:	83 ec 0c             	sub    $0xc,%esp
f011bd64:	68 38 de 12 f0       	push   $0xf012de38
f011bd69:	e8 fe 51 fe ff       	call   f0100f6c <cprintf>
f011bd6e:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bd71:	e8 ca 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd76:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bd79:	74 17                	je     f011bd92 <test_kmalloc_firstfit2+0x85b>
f011bd7b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd82:	83 ec 0c             	sub    $0xc,%esp
f011bd85:	68 00 dc 12 f0       	push   $0xf012dc00
f011bd8a:	e8 dd 51 fe ff       	call   f0100f6c <cprintf>
f011bd8f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  (7*Mega+4*kilo)/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bd92:	e8 72 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd97:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bd9a:	29 c2                	sub    %eax,%edx
f011bd9c:	89 d0                	mov    %edx,%eax
f011bd9e:	3d 00 07 00 00       	cmp    $0x700,%eax
f011bda3:	77 17                	ja     f011bdbc <test_kmalloc_firstfit2+0x885>
f011bda5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdac:	83 ec 0c             	sub    $0xc,%esp
f011bdaf:	68 69 de 12 f0       	push   $0xf012de69
f011bdb4:	e8 b3 51 fe ff       	call   f0100f6c <cprintf>
f011bdb9:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#2] Should be allocated in the remaining area of resulting hole inside Page Allocator Area
		//3 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bdbc:	e8 48 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bdc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bdc4:	e8 77 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bdc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(3*kilo);
f011bdcc:	83 ec 0c             	sub    $0xc,%esp
f011bdcf:	68 00 0c 00 00       	push   $0xc00
f011bdd4:	e8 dd cc fe ff       	call   f0108ab6 <kmalloc>
f011bdd9:	83 c4 10             	add    $0x10,%esp
f011bddc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32)ptr_allocations[10] != (ACTUAL_START + 7*Mega + 4*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bddf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bde2:	3d 00 20 70 f8       	cmp    $0xf8702000,%eax
f011bde7:	74 17                	je     f011be00 <test_kmalloc_firstfit2+0x8c9>
f011bde9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdf0:	83 ec 0c             	sub    $0xc,%esp
f011bdf3:	68 38 de 12 f0       	push   $0xf012de38
f011bdf8:	e8 6f 51 fe ff       	call   f0100f6c <cprintf>
f011bdfd:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011be00:	e8 3b 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be05:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011be08:	74 17                	je     f011be21 <test_kmalloc_firstfit2+0x8ea>
f011be0a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be11:	83 ec 0c             	sub    $0xc,%esp
f011be14:	68 00 dc 12 f0       	push   $0xf012dc00
f011be19:	e8 4e 51 fe ff       	call   f0100f6c <cprintf>
f011be1e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1) { correct = 0; cprintf("Wrong allocation: \n"); }
f011be21:	e8 e3 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be26:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011be29:	75 17                	jne    f011be42 <test_kmalloc_firstfit2+0x90b>
f011be2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be32:	83 ec 0c             	sub    $0xc,%esp
f011be35:	68 69 de 12 f0       	push   $0xf012de69
f011be3a:	e8 2d 51 fe ff       	call   f0100f6c <cprintf>
f011be3f:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=35 ;
f011be42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011be46:	74 04                	je     f011be4c <test_kmalloc_firstfit2+0x915>
f011be48:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011be4c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#3] Should be allocated in the resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011be53:	e8 b1 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be58:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011be5b:	e8 e0 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be60:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011be63:	83 ec 0c             	sub    $0xc,%esp
f011be66:	68 00 04 00 00       	push   $0x400
f011be6b:	e8 46 cc fe ff       	call   f0108ab6 <kmalloc>
f011be70:	83 c4 10             	add    $0x10,%esp
f011be73:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011be76:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011be79:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011be7c:	39 c2                	cmp    %eax,%edx
f011be7e:	72 10                	jb     f011be90 <test_kmalloc_firstfit2+0x959>
f011be80:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011be83:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011be86:	81 c2 00 04 00 00    	add    $0x400,%edx
f011be8c:	39 d0                	cmp    %edx,%eax
f011be8e:	76 17                	jbe    f011bea7 <test_kmalloc_firstfit2+0x970>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011be90:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be97:	83 ec 0c             	sub    $0xc,%esp
f011be9a:	68 38 de 12 f0       	push   $0xf012de38
f011be9f:	e8 c8 50 fe ff       	call   f0100f6c <cprintf>
f011bea4:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bea7:	e8 94 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011beac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011beaf:	74 17                	je     f011bec8 <test_kmalloc_firstfit2+0x991>
f011beb1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011beb8:	83 ec 0c             	sub    $0xc,%esp
f011bebb:	68 00 dc 12 f0       	push   $0xf012dc00
f011bec0:	e8 a7 50 fe ff       	call   f0100f6c <cprintf>
f011bec5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bec8:	e8 3c 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011becd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bed0:	74 17                	je     f011bee9 <test_kmalloc_firstfit2+0x9b2>
f011bed2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bed9:	83 ec 0c             	sub    $0xc,%esp
f011bedc:	68 69 de 12 f0       	push   $0xf012de69
f011bee1:	e8 86 50 fe ff       	call   f0100f6c <cprintf>
f011bee6:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#4] Should be allocated in the remaining of resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bee9:	e8 1b 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011beee:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bef1:	e8 4a 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bef6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(1*kilo);
f011bef9:	83 ec 0c             	sub    $0xc,%esp
f011befc:	68 00 04 00 00       	push   $0x400
f011bf01:	e8 b0 cb fe ff       	call   f0108ab6 <kmalloc>
f011bf06:	83 c4 10             	add    $0x10,%esp
f011bf09:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011bf0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bf0f:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011bf12:	81 c2 00 04 00 00    	add    $0x400,%edx
f011bf18:	39 d0                	cmp    %edx,%eax
f011bf1a:	72 10                	jb     f011bf2c <test_kmalloc_firstfit2+0x9f5>
f011bf1c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bf1f:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011bf22:	81 c2 00 08 00 00    	add    $0x800,%edx
f011bf28:	39 d0                	cmp    %edx,%eax
f011bf2a:	76 17                	jbe    f011bf43 <test_kmalloc_firstfit2+0xa0c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bf2c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf33:	83 ec 0c             	sub    $0xc,%esp
f011bf36:	68 38 de 12 f0       	push   $0xf012de38
f011bf3b:	e8 2c 50 fe ff       	call   f0100f6c <cprintf>
f011bf40:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bf43:	e8 f8 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf48:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bf4b:	74 17                	je     f011bf64 <test_kmalloc_firstfit2+0xa2d>
f011bf4d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf54:	83 ec 0c             	sub    $0xc,%esp
f011bf57:	68 00 dc 12 f0       	push   $0xf012dc00
f011bf5c:	e8 0b 50 fe ff       	call   f0100f6c <cprintf>
f011bf61:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bf64:	e8 a0 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bf69:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bf6c:	74 17                	je     f011bf85 <test_kmalloc_firstfit2+0xa4e>
f011bf6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf75:	83 ec 0c             	sub    $0xc,%esp
f011bf78:	68 69 de 12 f0       	push   $0xf012de69
f011bf7d:	e8 ea 4f fe ff       	call   f0100f6c <cprintf>
f011bf82:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=35 ;
f011bf85:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011bf89:	74 04                	je     f011bf8f <test_kmalloc_firstfit2+0xa58>
f011bf8b:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011bf8f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[13] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011bf96:	83 ec 0c             	sub    $0xc,%esp
f011bf99:	68 00 e0 1f 07       	push   $0x71fe000
f011bf9e:	e8 13 cb fe ff       	call   f0108ab6 <kmalloc>
f011bfa3:	83 c4 10             	add    $0x10,%esp
f011bfa6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (ptr_allocations[13] != NULL) { correct = 0; cprintf("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL\n"); }
f011bfa9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bfac:	85 c0                	test   %eax,%eax
f011bfae:	74 17                	je     f011bfc7 <test_kmalloc_firstfit2+0xa90>
f011bfb0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bfb7:	83 ec 0c             	sub    $0xc,%esp
f011bfba:	68 68 df 12 f0       	push   $0xf012df68
f011bfbf:	e8 a8 4f fe ff       	call   f0100f6c <cprintf>
f011bfc4:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=10 ;
f011bfc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011bfcb:	74 04                	je     f011bfd1 <test_kmalloc_firstfit2+0xa9a>
f011bfcd:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (2) completed. Eval = %d%\n", eval);
f011bfd1:	83 ec 08             	sub    $0x8,%esp
f011bfd4:	ff 75 f4             	pushl  -0xc(%ebp)
f011bfd7:	68 cc df 12 f0       	push   $0xf012dfcc
f011bfdc:	e8 8b 4f fe ff       	call   f0100f6c <cprintf>
f011bfe1:	83 c4 10             	add    $0x10,%esp

	return 1;
f011bfe4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011bfe9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bfec:	5b                   	pop    %ebx
f011bfed:	5f                   	pop    %edi
f011bfee:	5d                   	pop    %ebp
f011bfef:	c3                   	ret    

f011bff0 <test_kfree_bestfirstfit>:


int test_kfree_bestfirstfit()
{
f011bff0:	55                   	push   %ebp
f011bff1:	89 e5                	mov    %esp,%ebp
f011bff3:	57                   	push   %edi
f011bff4:	53                   	push   %ebx
f011bff5:	81 ec 40 01 00 00    	sub    $0x140,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011bffb:	83 ec 0c             	sub    $0xc,%esp
f011bffe:	68 40 db 12 f0       	push   $0xf012db40
f011c003:	e8 64 4f fe ff       	call   f0100f6c <cprintf>
f011c008:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c00b:	83 ec 0c             	sub    $0xc,%esp
f011c00e:	68 70 db 12 f0       	push   $0xf012db70
f011c013:	e8 54 4f fe ff       	call   f0100f6c <cprintf>
f011c018:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c01b:	83 ec 0c             	sub    $0xc,%esp
f011c01e:	68 40 db 12 f0       	push   $0xf012db40
f011c023:	e8 44 4f fe ff       	call   f0100f6c <cprintf>
f011c028:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011c02b:	c6 45 df 80          	movb   $0x80,-0x21(%ebp)
	char maxByte = 0x7F;
f011c02f:	c6 45 de 7f          	movb   $0x7f,-0x22(%ebp)
	short minShort = 1<<15 ;
f011c033:	66 c7 45 dc 00 80    	movw   $0x8000,-0x24(%ebp)
	short maxShort = 0x7FFF;
f011c039:	66 c7 45 da ff 7f    	movw   $0x7fff,-0x26(%ebp)
	int minInt = 1<<31 ;
f011c03f:	c7 45 d4 00 00 00 80 	movl   $0x80000000,-0x2c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011c046:	c7 45 d0 ff ff ff 7f 	movl   $0x7fffffff,-0x30(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011c04d:	e8 b7 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c052:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011c055:	8d 95 68 ff ff ff    	lea    -0x98(%ebp),%edx
f011c05b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c060:	b8 00 00 00 00       	mov    $0x0,%eax
f011c065:	89 d7                	mov    %edx,%edi
f011c067:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011c069:	8d 95 18 ff ff ff    	lea    -0xe8(%ebp),%edx
f011c06f:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c074:	b8 00 00 00 00       	mov    $0x0,%eax
f011c079:	89 d7                	mov    %edx,%edi
f011c07b:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011c07d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011c084:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	correct = 1;
f011c08b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011c092:	8d 95 c8 fe ff ff    	lea    -0x138(%ebp),%edx
f011c098:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c09d:	b8 00 00 00 00       	mov    $0x0,%eax
f011c0a2:	89 d7                	mov    %edx,%edi
f011c0a4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//[BLOCK ALLOCATOR]
		{
			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011c0a6:	e8 5e 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c0ab:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c0ae:	e8 8d 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c0b3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[2] = kmalloc(2*kilo);
f011c0b6:	83 ec 0c             	sub    $0xc,%esp
f011c0b9:	68 00 08 00 00       	push   $0x800
f011c0be:	e8 f3 c9 fe ff       	call   f0108ab6 <kmalloc>
f011c0c3:	83 c4 10             	add    $0x10,%esp
f011c0c6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011c0cc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c0d2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011c0d7:	76 28                	jbe    f011c101 <test_kfree_bestfirstfit+0x111>
f011c0d9:	8b 9d d0 fe ff ff    	mov    -0x130(%ebp),%ebx
f011c0df:	83 ec 0c             	sub    $0xc,%esp
f011c0e2:	6a 00                	push   $0x0
f011c0e4:	e8 c3 c9 fe ff       	call   f0108aac <sbrk>
f011c0e9:	83 c4 10             	add    $0x10,%esp
f011c0ec:	39 c3                	cmp    %eax,%ebx
f011c0ee:	73 11                	jae    f011c101 <test_kfree_bestfirstfit+0x111>
f011c0f0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c0f6:	89 c2                	mov    %eax,%edx
f011c0f8:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011c0fd:	39 c2                	cmp    %eax,%edx
f011c0ff:	72 17                	jb     f011c118 <test_kfree_bestfirstfit+0x128>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011c101:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c108:	83 ec 0c             	sub    $0xc,%esp
f011c10b:	68 00 dd 12 f0       	push   $0xf012dd00
f011c110:	e8 57 4e fe ff       	call   f0100f6c <cprintf>
f011c115:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c118:	e8 23 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c11d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c120:	74 17                	je     f011c139 <test_kfree_bestfirstfit+0x149>
f011c122:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c129:	83 ec 0c             	sub    $0xc,%esp
f011c12c:	68 00 dc 12 f0       	push   $0xf012dc00
f011c131:	e8 36 4e fe ff       	call   f0100f6c <cprintf>
f011c136:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011c139:	c7 85 70 ff ff ff ff 	movl   $0x7ff,-0x90(%ebp)
f011c140:	07 00 00 
			ptr = (char*)ptr_allocations[2];
f011c143:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c149:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[2]; ++i)
f011c14c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c153:	eb 0e                	jmp    f011c163 <test_kfree_bestfirstfit+0x173>
			{
				ptr[i] = 2 ;
f011c155:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c158:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c15b:	01 d0                	add    %edx,%eax
f011c15d:	c6 00 02             	movb   $0x2,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[2];
			for (i = 0; i < lastIndices[2]; ++i)
f011c160:	ff 45 f4             	incl   -0xc(%ebp)
f011c163:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c169:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c16c:	7f e7                	jg     f011c155 <test_kfree_bestfirstfit+0x165>
			{
				ptr[i] = 2 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011c16e:	e8 96 18 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c173:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c176:	e8 c5 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c17b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011c17e:	83 ec 0c             	sub    $0xc,%esp
f011c181:	68 00 08 00 00       	push   $0x800
f011c186:	e8 2b c9 fe ff       	call   f0108ab6 <kmalloc>
f011c18b:	83 c4 10             	add    $0x10,%esp
f011c18e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011c194:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c19a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011c19f:	76 28                	jbe    f011c1c9 <test_kfree_bestfirstfit+0x1d9>
f011c1a1:	8b 9d d4 fe ff ff    	mov    -0x12c(%ebp),%ebx
f011c1a7:	83 ec 0c             	sub    $0xc,%esp
f011c1aa:	6a 00                	push   $0x0
f011c1ac:	e8 fb c8 fe ff       	call   f0108aac <sbrk>
f011c1b1:	83 c4 10             	add    $0x10,%esp
f011c1b4:	39 c3                	cmp    %eax,%ebx
f011c1b6:	73 11                	jae    f011c1c9 <test_kfree_bestfirstfit+0x1d9>
f011c1b8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c1be:	89 c2                	mov    %eax,%edx
f011c1c0:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011c1c5:	39 c2                	cmp    %eax,%edx
f011c1c7:	72 17                	jb     f011c1e0 <test_kfree_bestfirstfit+0x1f0>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011c1c9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c1d0:	83 ec 0c             	sub    $0xc,%esp
f011c1d3:	68 00 dd 12 f0       	push   $0xf012dd00
f011c1d8:	e8 8f 4d fe ff       	call   f0100f6c <cprintf>
f011c1dd:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c1e0:	e8 5b 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c1e5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c1e8:	74 17                	je     f011c201 <test_kfree_bestfirstfit+0x211>
f011c1ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c1f1:	83 ec 0c             	sub    $0xc,%esp
f011c1f4:	68 00 dc 12 f0       	push   $0xf012dc00
f011c1f9:	e8 6e 4d fe ff       	call   f0100f6c <cprintf>
f011c1fe:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011c201:	c7 85 74 ff ff ff ff 	movl   $0x7ff,-0x8c(%ebp)
f011c208:	07 00 00 
			ptr = (char*)ptr_allocations[3];
f011c20b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c211:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[3]; ++i)
f011c214:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c21b:	eb 0e                	jmp    f011c22b <test_kfree_bestfirstfit+0x23b>
			{
				ptr[i] = 3 ;
f011c21d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c220:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c223:	01 d0                	add    %edx,%eax
f011c225:	c6 00 03             	movb   $0x3,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[3];
			for (i = 0; i < lastIndices[3]; ++i)
f011c228:	ff 45 f4             	incl   -0xc(%ebp)
f011c22b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c231:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c234:	7f e7                	jg     f011c21d <test_kfree_bestfirstfit+0x22d>
		}

		//[PAGE ALLOCATOR]
		{
			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011c236:	e8 ce 17 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c23b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c23e:	e8 fd 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c243:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011c246:	83 ec 0c             	sub    $0xc,%esp
f011c249:	68 00 fc 1f 00       	push   $0x1ffc00
f011c24e:	e8 63 c8 fe ff       	call   f0108ab6 <kmalloc>
f011c253:	83 c4 10             	add    $0x10,%esp
f011c256:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
			if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c25c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c262:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011c267:	74 17                	je     f011c280 <test_kfree_bestfirstfit+0x290>
f011c269:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c270:	83 ec 0c             	sub    $0xc,%esp
f011c273:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011c278:	e8 ef 4c fe ff       	call   f0100f6c <cprintf>
f011c27d:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c280:	e8 bb 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c285:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c288:	74 17                	je     f011c2a1 <test_kfree_bestfirstfit+0x2b1>
f011c28a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c291:	83 ec 0c             	sub    $0xc,%esp
f011c294:	68 00 dc 12 f0       	push   $0xf012dc00
f011c299:	e8 ce 4c fe ff       	call   f0100f6c <cprintf>
f011c29e:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c2a1:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c2a4:	e8 60 17 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c2a9:	29 c3                	sub    %eax,%ebx
f011c2ab:	89 d8                	mov    %ebx,%eax
f011c2ad:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c2b2:	77 17                	ja     f011c2cb <test_kfree_bestfirstfit+0x2db>
f011c2b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c2bb:	83 ec 0c             	sub    $0xc,%esp
f011c2be:	68 6c dc 12 f0       	push   $0xf012dc6c
f011c2c3:	e8 a4 4c fe ff       	call   f0100f6c <cprintf>
f011c2c8:	83 c4 10             	add    $0x10,%esp
			lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011c2cb:	c7 85 68 ff ff ff ff 	movl   $0x1ffbff,-0x98(%ebp)
f011c2d2:	fb 1f 00 

			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011c2d5:	e8 2f 17 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c2da:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c2dd:	e8 5e 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c2e2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011c2e5:	83 ec 0c             	sub    $0xc,%esp
f011c2e8:	68 00 fc 1f 00       	push   $0x1ffc00
f011c2ed:	e8 c4 c7 fe ff       	call   f0108ab6 <kmalloc>
f011c2f2:	83 c4 10             	add    $0x10,%esp
f011c2f5:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
			if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c2fb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c301:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011c306:	74 17                	je     f011c31f <test_kfree_bestfirstfit+0x32f>
f011c308:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c30f:	83 ec 0c             	sub    $0xc,%esp
f011c312:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011c317:	e8 50 4c fe ff       	call   f0100f6c <cprintf>
f011c31c:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c31f:	e8 1c 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c324:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c327:	74 17                	je     f011c340 <test_kfree_bestfirstfit+0x350>
f011c329:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c330:	83 ec 0c             	sub    $0xc,%esp
f011c333:	68 00 dc 12 f0       	push   $0xf012dc00
f011c338:	e8 2f 4c fe ff       	call   f0100f6c <cprintf>
f011c33d:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c340:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c343:	e8 c1 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c348:	29 c3                	sub    %eax,%ebx
f011c34a:	89 d8                	mov    %ebx,%eax
f011c34c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c351:	77 17                	ja     f011c36a <test_kfree_bestfirstfit+0x37a>
f011c353:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c35a:	83 ec 0c             	sub    $0xc,%esp
f011c35d:	68 6c dc 12 f0       	push   $0xf012dc6c
f011c362:	e8 05 4c fe ff       	call   f0100f6c <cprintf>
f011c367:	83 c4 10             	add    $0x10,%esp
			lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011c36a:	c7 85 6c ff ff ff ff 	movl   $0x1ffbff,-0x94(%ebp)
f011c371:	fb 1f 00 


			//7 KB
			freeFrames = sys_calculate_free_frames() ;
f011c374:	e8 90 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c379:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c37c:	e8 bf 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c381:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[4] = kmalloc(7*kilo);
f011c384:	83 ec 0c             	sub    $0xc,%esp
f011c387:	68 00 1c 00 00       	push   $0x1c00
f011c38c:	e8 25 c7 fe ff       	call   f0108ab6 <kmalloc>
f011c391:	83 c4 10             	add    $0x10,%esp
f011c394:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c39a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c3a0:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011c3a5:	74 17                	je     f011c3be <test_kfree_bestfirstfit+0x3ce>
f011c3a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3ae:	83 ec 0c             	sub    $0xc,%esp
f011c3b1:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011c3b6:	e8 b1 4b fe ff       	call   f0100f6c <cprintf>
f011c3bb:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c3be:	e8 7d 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c3c3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c3c6:	74 17                	je     f011c3df <test_kfree_bestfirstfit+0x3ef>
f011c3c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3cf:	83 ec 0c             	sub    $0xc,%esp
f011c3d2:	68 00 dc 12 f0       	push   $0xf012dc00
f011c3d7:	e8 90 4b fe ff       	call   f0100f6c <cprintf>
f011c3dc:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c3df:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c3e2:	e8 22 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c3e7:	29 c3                	sub    %eax,%ebx
f011c3e9:	89 d8                	mov    %ebx,%eax
f011c3eb:	83 f8 01             	cmp    $0x1,%eax
f011c3ee:	77 17                	ja     f011c407 <test_kfree_bestfirstfit+0x417>
f011c3f0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3f7:	83 ec 0c             	sub    $0xc,%esp
f011c3fa:	68 6c dc 12 f0       	push   $0xf012dc6c
f011c3ff:	e8 68 4b fe ff       	call   f0100f6c <cprintf>
f011c404:	83 c4 10             	add    $0x10,%esp
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011c407:	c7 85 78 ff ff ff ff 	movl   $0x1bff,-0x88(%ebp)
f011c40e:	1b 00 00 
			ptr = (char*)ptr_allocations[4];
f011c411:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c417:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[4]; ++i)
f011c41a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c421:	eb 0e                	jmp    f011c431 <test_kfree_bestfirstfit+0x441>
			{
				ptr[i] = 4 ;
f011c423:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c426:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c429:	01 d0                	add    %edx,%eax
f011c42b:	c6 00 04             	movb   $0x4,(%eax)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[4];
			for (i = 0; i < lastIndices[4]; ++i)
f011c42e:	ff 45 f4             	incl   -0xc(%ebp)
f011c431:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c437:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c43a:	7f e7                	jg     f011c423 <test_kfree_bestfirstfit+0x433>
			{
				ptr[i] = 4 ;
			}

			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f011c43c:	e8 c8 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c441:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c444:	e8 f7 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c449:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c44c:	83 ec 0c             	sub    $0xc,%esp
f011c44f:	68 00 fc 2f 00       	push   $0x2ffc00
f011c454:	e8 5d c6 fe ff       	call   f0108ab6 <kmalloc>
f011c459:	83 c4 10             	add    $0x10,%esp
f011c45c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c462:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c468:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011c46d:	74 17                	je     f011c486 <test_kfree_bestfirstfit+0x496>
f011c46f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c476:	83 ec 0c             	sub    $0xc,%esp
f011c479:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011c47e:	e8 e9 4a fe ff       	call   f0100f6c <cprintf>
f011c483:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c486:	e8 b5 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c48b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c48e:	74 17                	je     f011c4a7 <test_kfree_bestfirstfit+0x4b7>
f011c490:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c497:	83 ec 0c             	sub    $0xc,%esp
f011c49a:	68 00 dc 12 f0       	push   $0xf012dc00
f011c49f:	e8 c8 4a fe ff       	call   f0100f6c <cprintf>
f011c4a4:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c4a7:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c4aa:	e8 5a 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c4af:	29 c3                	sub    %eax,%ebx
f011c4b1:	89 d8                	mov    %ebx,%eax
f011c4b3:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011c4b8:	77 17                	ja     f011c4d1 <test_kfree_bestfirstfit+0x4e1>
f011c4ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c4c1:	83 ec 0c             	sub    $0xc,%esp
f011c4c4:	68 6c dc 12 f0       	push   $0xf012dc6c
f011c4c9:	e8 9e 4a fe ff       	call   f0100f6c <cprintf>
f011c4ce:	83 c4 10             	add    $0x10,%esp
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011c4d1:	c7 85 7c ff ff ff ff 	movl   $0x2ffbff,-0x84(%ebp)
f011c4d8:	fb 2f 00 
			ptr = (char*)ptr_allocations[5];
f011c4db:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c4e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[5]; ++i)
f011c4e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c4eb:	eb 0e                	jmp    f011c4fb <test_kfree_bestfirstfit+0x50b>
			{
				ptr[i] = 5 ;
f011c4ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c4f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c4f3:	01 d0                	add    %edx,%eax
f011c4f5:	c6 00 05             	movb   $0x5,(%eax)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[5];
			for (i = 0; i < lastIndices[5]; ++i)
f011c4f8:	ff 45 f4             	incl   -0xc(%ebp)
f011c4fb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c501:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c504:	7f e7                	jg     f011c4ed <test_kfree_bestfirstfit+0x4fd>
			{
				ptr[i] = 5 ;
			}

			//6 MB
			freeFrames = sys_calculate_free_frames() ;
f011c506:	e8 fe 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c50b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c50e:	e8 2d 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c513:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011c516:	83 ec 0c             	sub    $0xc,%esp
f011c519:	68 00 fc 5f 00       	push   $0x5ffc00
f011c51e:	e8 93 c5 fe ff       	call   f0108ab6 <kmalloc>
f011c523:	83 c4 10             	add    $0x10,%esp
f011c526:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c52c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c532:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011c537:	74 17                	je     f011c550 <test_kfree_bestfirstfit+0x560>
f011c539:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c540:	83 ec 0c             	sub    $0xc,%esp
f011c543:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011c548:	e8 1f 4a fe ff       	call   f0100f6c <cprintf>
f011c54d:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c550:	e8 eb 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c555:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c558:	74 17                	je     f011c571 <test_kfree_bestfirstfit+0x581>
f011c55a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c561:	83 ec 0c             	sub    $0xc,%esp
f011c564:	68 00 dc 12 f0       	push   $0xf012dc00
f011c569:	e8 fe 49 fe ff       	call   f0100f6c <cprintf>
f011c56e:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c571:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c574:	e8 90 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c579:	29 c3                	sub    %eax,%ebx
f011c57b:	89 d8                	mov    %ebx,%eax
f011c57d:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c582:	77 17                	ja     f011c59b <test_kfree_bestfirstfit+0x5ab>
f011c584:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c58b:	83 ec 0c             	sub    $0xc,%esp
f011c58e:	68 6c dc 12 f0       	push   $0xf012dc6c
f011c593:	e8 d4 49 fe ff       	call   f0100f6c <cprintf>
f011c598:	83 c4 10             	add    $0x10,%esp
			lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011c59b:	c7 45 80 ff fb 5f 00 	movl   $0x5ffbff,-0x80(%ebp)

			//14 KB
			freeFrames = sys_calculate_free_frames() ;
f011c5a2:	e8 62 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c5a7:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c5aa:	e8 91 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c5af:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[7] = kmalloc(14*kilo);
f011c5b2:	83 ec 0c             	sub    $0xc,%esp
f011c5b5:	68 00 38 00 00       	push   $0x3800
f011c5ba:	e8 f7 c4 fe ff       	call   f0108ab6 <kmalloc>
f011c5bf:	83 c4 10             	add    $0x10,%esp
f011c5c2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c5c8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c5ce:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011c5d3:	74 17                	je     f011c5ec <test_kfree_bestfirstfit+0x5fc>
f011c5d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5dc:	83 ec 0c             	sub    $0xc,%esp
f011c5df:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011c5e4:	e8 83 49 fe ff       	call   f0100f6c <cprintf>
f011c5e9:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c5ec:	e8 4f 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c5f1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c5f4:	74 17                	je     f011c60d <test_kfree_bestfirstfit+0x61d>
f011c5f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5fd:	83 ec 0c             	sub    $0xc,%esp
f011c600:	68 00 dc 12 f0       	push   $0xf012dc00
f011c605:	e8 62 49 fe ff       	call   f0100f6c <cprintf>
f011c60a:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c60d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c610:	e8 f4 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c615:	29 c3                	sub    %eax,%ebx
f011c617:	89 d8                	mov    %ebx,%eax
f011c619:	83 f8 03             	cmp    $0x3,%eax
f011c61c:	77 17                	ja     f011c635 <test_kfree_bestfirstfit+0x645>
f011c61e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c625:	83 ec 0c             	sub    $0xc,%esp
f011c628:	68 6c dc 12 f0       	push   $0xf012dc6c
f011c62d:	e8 3a 49 fe ff       	call   f0100f6c <cprintf>
f011c632:	83 c4 10             	add    $0x10,%esp
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011c635:	c7 45 84 ff 37 00 00 	movl   $0x37ff,-0x7c(%ebp)
			ptr = (char*)ptr_allocations[7];
f011c63c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c642:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[7]; ++i)
f011c645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c64c:	eb 0e                	jmp    f011c65c <test_kfree_bestfirstfit+0x66c>
			{
				ptr[i] = 7 ;
f011c64e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c651:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c654:	01 d0                	add    %edx,%eax
f011c656:	c6 00 07             	movb   $0x7,(%eax)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[7];
			for (i = 0; i < lastIndices[7]; ++i)
f011c659:	ff 45 f4             	incl   -0xc(%ebp)
f011c65c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c65f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c662:	7f ea                	jg     f011c64e <test_kfree_bestfirstfit+0x65e>
	}

	//kfree some of the allocated spaces [10%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011c664:	e8 a0 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c669:	89 45 bc             	mov    %eax,-0x44(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011c66c:	e8 cf 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c671:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[0]);
f011c674:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c67a:	83 ec 0c             	sub    $0xc,%esp
f011c67d:	50                   	push   %eax
f011c67e:	e8 4d c4 fe ff       	call   f0108ad0 <kfree>
f011c683:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c686:	e8 b5 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c68b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c68e:	74 17                	je     f011c6a7 <test_kfree_bestfirstfit+0x6b7>
f011c690:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c697:	83 ec 0c             	sub    $0xc,%esp
f011c69a:	68 00 dc 12 f0       	push   $0xf012dc00
f011c69f:	e8 c8 48 fe ff       	call   f0100f6c <cprintf>
f011c6a4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c6a7:	e8 5d 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c6ac:	89 c2                	mov    %eax,%edx
f011c6ae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c6b1:	29 c2                	sub    %eax,%edx
f011c6b3:	89 d0                	mov    %edx,%eax
f011c6b5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c6ba:	77 17                	ja     f011c6d3 <test_kfree_bestfirstfit+0x6e3>
f011c6bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c6c3:	83 ec 0c             	sub    $0xc,%esp
f011c6c6:	68 04 e0 12 f0       	push   $0xf012e004
f011c6cb:	e8 9c 48 fe ff       	call   f0100f6c <cprintf>
f011c6d0:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c6d3:	e8 31 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c6d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c6db:	e8 60 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c6e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[2]);
f011c6e3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c6e9:	83 ec 0c             	sub    $0xc,%esp
f011c6ec:	50                   	push   %eax
f011c6ed:	e8 de c3 fe ff       	call   f0108ad0 <kfree>
f011c6f2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c6f5:	e8 46 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c6fa:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c6fd:	74 17                	je     f011c716 <test_kfree_bestfirstfit+0x726>
f011c6ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c706:	83 ec 0c             	sub    $0xc,%esp
f011c709:	68 00 dc 12 f0       	push   $0xf012dc00
f011c70e:	e8 59 48 fe ff       	call   f0100f6c <cprintf>
f011c713:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0 ) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011c716:	e8 ee 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c71b:	89 c2                	mov    %eax,%edx
f011c71d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c720:	39 c2                	cmp    %eax,%edx
f011c722:	74 17                	je     f011c73b <test_kfree_bestfirstfit+0x74b>
f011c724:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c72b:	83 ec 0c             	sub    $0xc,%esp
f011c72e:	68 0c df 12 f0       	push   $0xf012df0c
f011c733:	e8 34 48 fe ff       	call   f0100f6c <cprintf>
f011c738:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c73b:	e8 c9 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c740:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c743:	e8 f8 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c748:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[1]);
f011c74b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c751:	83 ec 0c             	sub    $0xc,%esp
f011c754:	50                   	push   %eax
f011c755:	e8 76 c3 fe ff       	call   f0108ad0 <kfree>
f011c75a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c75d:	e8 de 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c762:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c765:	74 17                	je     f011c77e <test_kfree_bestfirstfit+0x78e>
f011c767:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c76e:	83 ec 0c             	sub    $0xc,%esp
f011c771:	68 00 dc 12 f0       	push   $0xf012dc00
f011c776:	e8 f1 47 fe ff       	call   f0100f6c <cprintf>
f011c77b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c77e:	e8 86 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c783:	89 c2                	mov    %eax,%edx
f011c785:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c788:	29 c2                	sub    %eax,%edx
f011c78a:	89 d0                	mov    %edx,%eax
f011c78c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c791:	77 17                	ja     f011c7aa <test_kfree_bestfirstfit+0x7ba>
f011c793:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c79a:	83 ec 0c             	sub    $0xc,%esp
f011c79d:	68 04 e0 12 f0       	push   $0xf012e004
f011c7a2:	e8 c5 47 fe ff       	call   f0100f6c <cprintf>
f011c7a7:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7aa:	e8 5a 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c7af:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7b2:	e8 89 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c7b7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[6]);
f011c7ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c7c0:	83 ec 0c             	sub    $0xc,%esp
f011c7c3:	50                   	push   %eax
f011c7c4:	e8 07 c3 fe ff       	call   f0108ad0 <kfree>
f011c7c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c7cc:	e8 6f 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c7d1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c7d4:	74 17                	je     f011c7ed <test_kfree_bestfirstfit+0x7fd>
f011c7d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c7dd:	83 ec 0c             	sub    $0xc,%esp
f011c7e0:	68 00 dc 12 f0       	push   $0xf012dc00
f011c7e5:	e8 82 47 fe ff       	call   f0100f6c <cprintf>
f011c7ea:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c7ed:	e8 17 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c7f2:	89 c2                	mov    %eax,%edx
f011c7f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c7f7:	29 c2                	sub    %eax,%edx
f011c7f9:	89 d0                	mov    %edx,%eax
f011c7fb:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c800:	77 17                	ja     f011c819 <test_kfree_bestfirstfit+0x829>
f011c802:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c809:	83 ec 0c             	sub    $0xc,%esp
f011c80c:	68 04 e0 12 f0       	push   $0xf012e004
f011c811:	e8 56 47 fe ff       	call   f0100f6c <cprintf>
f011c816:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011c819:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c81d:	74 04                	je     f011c823 <test_kfree_bestfirstfit+0x833>
f011c81f:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011c823:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011c82a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c830:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011c833:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c83a:	eb 1e                	jmp    f011c85a <test_kfree_bestfirstfit+0x86a>
		{
			sums[3] += ptr[i] ;
f011c83c:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011c842:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c845:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c848:	01 c8                	add    %ecx,%eax
f011c84a:	8a 00                	mov    (%eax),%al
f011c84c:	0f be c0             	movsbl %al,%eax
f011c84f:	01 d0                	add    %edx,%eax
f011c851:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	correct = 1 ;
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011c857:	ff 45 f4             	incl   -0xc(%ebp)
f011c85a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c860:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c863:	7f d7                	jg     f011c83c <test_kfree_bestfirstfit+0x84c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c865:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011c86b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c871:	89 c1                	mov    %eax,%ecx
f011c873:	01 c9                	add    %ecx,%ecx
f011c875:	01 c8                	add    %ecx,%eax
f011c877:	39 c2                	cmp    %eax,%edx
f011c879:	74 17                	je     f011c892 <test_kfree_bestfirstfit+0x8a2>
f011c87b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c882:	83 ec 0c             	sub    $0xc,%esp
f011c885:	68 3c e0 12 f0       	push   $0xf012e03c
f011c88a:	e8 dd 46 fe ff       	call   f0100f6c <cprintf>
f011c88f:	83 c4 10             	add    $0x10,%esp

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011c892:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c898:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011c89b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c8a2:	eb 1e                	jmp    f011c8c2 <test_kfree_bestfirstfit+0x8d2>
		{
			sums[4] += ptr[i] ;
f011c8a4:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011c8aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c8ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c8b0:	01 c8                	add    %ecx,%eax
f011c8b2:	8a 00                	mov    (%eax),%al
f011c8b4:	0f be c0             	movsbl %al,%eax
f011c8b7:	01 d0                	add    %edx,%eax
f011c8b9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011c8bf:	ff 45 f4             	incl   -0xc(%ebp)
f011c8c2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c8c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c8cb:	7f d7                	jg     f011c8a4 <test_kfree_bestfirstfit+0x8b4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c8cd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c8d3:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f011c8d9:	c1 e2 02             	shl    $0x2,%edx
f011c8dc:	39 d0                	cmp    %edx,%eax
f011c8de:	74 17                	je     f011c8f7 <test_kfree_bestfirstfit+0x907>
f011c8e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c8e7:	83 ec 0c             	sub    $0xc,%esp
f011c8ea:	68 3c e0 12 f0       	push   $0xf012e03c
f011c8ef:	e8 78 46 fe ff       	call   f0100f6c <cprintf>
f011c8f4:	83 c4 10             	add    $0x10,%esp

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011c8f7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c8fd:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011c900:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c907:	eb 1e                	jmp    f011c927 <test_kfree_bestfirstfit+0x937>
		{
			sums[5] += ptr[i] ;
f011c909:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011c90f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c912:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c915:	01 c8                	add    %ecx,%eax
f011c917:	8a 00                	mov    (%eax),%al
f011c919:	0f be c0             	movsbl %al,%eax
f011c91c:	01 d0                	add    %edx,%eax
f011c91e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011c924:	ff 45 f4             	incl   -0xc(%ebp)
f011c927:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c92d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c930:	7f d7                	jg     f011c909 <test_kfree_bestfirstfit+0x919>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c932:	8b 8d 2c ff ff ff    	mov    -0xd4(%ebp),%ecx
f011c938:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
f011c93e:	89 d0                	mov    %edx,%eax
f011c940:	c1 e0 02             	shl    $0x2,%eax
f011c943:	01 d0                	add    %edx,%eax
f011c945:	39 c1                	cmp    %eax,%ecx
f011c947:	74 17                	je     f011c960 <test_kfree_bestfirstfit+0x970>
f011c949:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c950:	83 ec 0c             	sub    $0xc,%esp
f011c953:	68 3c e0 12 f0       	push   $0xf012e03c
f011c958:	e8 0f 46 fe ff       	call   f0100f6c <cprintf>
f011c95d:	83 c4 10             	add    $0x10,%esp

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011c960:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c966:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011c969:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c970:	eb 1e                	jmp    f011c990 <test_kfree_bestfirstfit+0x9a0>
		{
			sums[7] += ptr[i] ;
f011c972:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011c978:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c97b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c97e:	01 c8                	add    %ecx,%eax
f011c980:	8a 00                	mov    (%eax),%al
f011c982:	0f be c0             	movsbl %al,%eax
f011c985:	01 d0                	add    %edx,%eax
f011c987:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011c98d:	ff 45 f4             	incl   -0xc(%ebp)
f011c990:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c993:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c996:	7f da                	jg     f011c972 <test_kfree_bestfirstfit+0x982>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c998:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
f011c99e:	8b 55 84             	mov    -0x7c(%ebp),%edx
f011c9a1:	89 d0                	mov    %edx,%eax
f011c9a3:	01 c0                	add    %eax,%eax
f011c9a5:	01 d0                	add    %edx,%eax
f011c9a7:	01 c0                	add    %eax,%eax
f011c9a9:	01 d0                	add    %edx,%eax
f011c9ab:	39 c1                	cmp    %eax,%ecx
f011c9ad:	74 17                	je     f011c9c6 <test_kfree_bestfirstfit+0x9d6>
f011c9af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c9b6:	83 ec 0c             	sub    $0xc,%esp
f011c9b9:	68 3c e0 12 f0       	push   $0xf012e03c
f011c9be:	e8 a9 45 fe ff       	call   f0100f6c <cprintf>
f011c9c3:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011c9c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c9ca:	74 04                	je     f011c9d0 <test_kfree_bestfirstfit+0x9e0>
f011c9cc:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011c9d0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9d7:	e8 2d 10 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c9dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9df:	e8 5c 7e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c9e4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f011c9e7:	83 ec 0c             	sub    $0xc,%esp
f011c9ea:	68 00 00 30 00       	push   $0x300000
f011c9ef:	e8 c2 c0 fe ff       	call   f0108ab6 <kmalloc>
f011c9f4:	83 c4 10             	add    $0x10,%esp
f011c9f7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c9fd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ca03:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011ca08:	74 17                	je     f011ca21 <test_kfree_bestfirstfit+0xa31>
f011ca0a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca11:	83 ec 0c             	sub    $0xc,%esp
f011ca14:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011ca19:	e8 4e 45 fe ff       	call   f0100f6c <cprintf>
f011ca1e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ca21:	e8 1a 7e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ca26:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ca29:	74 17                	je     f011ca42 <test_kfree_bestfirstfit+0xa52>
f011ca2b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca32:	83 ec 0c             	sub    $0xc,%esp
f011ca35:	68 00 dc 12 f0       	push   $0xf012dc00
f011ca3a:	e8 2d 45 fe ff       	call   f0100f6c <cprintf>
f011ca3f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ca42:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011ca45:	e8 bf 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ca4a:	29 c3                	sub    %eax,%ebx
f011ca4c:	89 d8                	mov    %ebx,%eax
f011ca4e:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011ca53:	77 17                	ja     f011ca6c <test_kfree_bestfirstfit+0xa7c>
f011ca55:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca5c:	83 ec 0c             	sub    $0xc,%esp
f011ca5f:	68 6c dc 12 f0       	push   $0xf012dc6c
f011ca64:	e8 03 45 fe ff       	call   f0100f6c <cprintf>
f011ca69:	83 c4 10             	add    $0x10,%esp
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f011ca6c:	c7 45 88 ff ff 2f 00 	movl   $0x2fffff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[8];
f011ca73:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ca79:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011ca7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ca83:	eb 0e                	jmp    f011ca93 <test_kfree_bestfirstfit+0xaa3>
		{
			ptr[i] = 8 ;
f011ca85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca88:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ca8b:	01 d0                	add    %edx,%eax
f011ca8d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011ca90:	ff 45 f4             	incl   -0xc(%ebp)
f011ca93:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ca96:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ca99:	7f ea                	jg     f011ca85 <test_kfree_bestfirstfit+0xa95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca9b:	e8 69 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011caa0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caa3:	e8 98 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011caa8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f011caab:	83 ec 0c             	sub    $0xc,%esp
f011caae:	68 00 00 10 00       	push   $0x100000
f011cab3:	e8 fe bf fe ff       	call   f0108ab6 <kmalloc>
f011cab8:	83 c4 10             	add    $0x10,%esp
f011cabb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cac1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cac7:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011cacc:	74 17                	je     f011cae5 <test_kfree_bestfirstfit+0xaf5>
f011cace:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cad5:	83 ec 0c             	sub    $0xc,%esp
f011cad8:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011cadd:	e8 8a 44 fe ff       	call   f0100f6c <cprintf>
f011cae2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cae5:	e8 56 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011caea:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011caed:	74 17                	je     f011cb06 <test_kfree_bestfirstfit+0xb16>
f011caef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011caf6:	83 ec 0c             	sub    $0xc,%esp
f011caf9:	68 00 dc 12 f0       	push   $0xf012dc00
f011cafe:	e8 69 44 fe ff       	call   f0100f6c <cprintf>
f011cb03:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cb06:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011cb09:	e8 fb 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb0e:	29 c3                	sub    %eax,%ebx
f011cb10:	89 d8                	mov    %ebx,%eax
f011cb12:	3d ff 00 00 00       	cmp    $0xff,%eax
f011cb17:	77 17                	ja     f011cb30 <test_kfree_bestfirstfit+0xb40>
f011cb19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb20:	83 ec 0c             	sub    $0xc,%esp
f011cb23:	68 6c dc 12 f0       	push   $0xf012dc6c
f011cb28:	e8 3f 44 fe ff       	call   f0100f6c <cprintf>
f011cb2d:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f011cb30:	c7 45 90 ff ff 0f 00 	movl   $0xfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011cb37:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cb3d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011cb40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cb47:	eb 0e                	jmp    f011cb57 <test_kfree_bestfirstfit+0xb67>
		{
			ptr[i] = 10 ;
f011cb49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb4c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb4f:	01 d0                	add    %edx,%eax
f011cb51:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011cb54:	ff 45 f4             	incl   -0xc(%ebp)
f011cb57:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cb5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cb5d:	7f ea                	jg     f011cb49 <test_kfree_bestfirstfit+0xb59>
		{
			ptr[i] = 10 ;
		}

		//1 KB [Should be allocated in 1st hole in the Dynamic Allocator]
		freeFrames = sys_calculate_free_frames() ;
f011cb5f:	e8 a5 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb64:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb67:	e8 d4 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cb6c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[9] = kmalloc(1*kilo);
f011cb6f:	83 ec 0c             	sub    $0xc,%esp
f011cb72:	68 00 04 00 00       	push   $0x400
f011cb77:	e8 3a bf fe ff       	call   f0108ab6 <kmalloc>
f011cb7c:	83 c4 10             	add    $0x10,%esp
f011cb7f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((ptr_allocations[9] < ptr_allocations[2]) || (ptr_allocations[9] > (ptr_allocations[2] + 1*kilo)))
f011cb85:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f011cb8b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cb91:	39 c2                	cmp    %eax,%edx
f011cb93:	72 16                	jb     f011cbab <test_kfree_bestfirstfit+0xbbb>
f011cb95:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cb9b:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011cba1:	81 c2 00 04 00 00    	add    $0x400,%edx
f011cba7:	39 d0                	cmp    %edx,%eax
f011cba9:	76 17                	jbe    f011cbc2 <test_kfree_bestfirstfit+0xbd2>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cbab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cbb2:	83 ec 0c             	sub    $0xc,%esp
f011cbb5:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011cbba:	e8 ad 43 fe ff       	call   f0100f6c <cprintf>
f011cbbf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cbc2:	e8 79 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cbc7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cbca:	74 17                	je     f011cbe3 <test_kfree_bestfirstfit+0xbf3>
f011cbcc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cbd3:	83 ec 0c             	sub    $0xc,%esp
f011cbd6:	68 00 dc 12 f0       	push   $0xf012dc00
f011cbdb:	e8 8c 43 fe ff       	call   f0100f6c <cprintf>
f011cbe0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011cbe3:	e8 21 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cbe8:	89 c2                	mov    %eax,%edx
f011cbea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cbed:	39 c2                	cmp    %eax,%edx
f011cbef:	74 17                	je     f011cc08 <test_kfree_bestfirstfit+0xc18>
f011cbf1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cbf8:	83 ec 0c             	sub    $0xc,%esp
f011cbfb:	68 70 e0 12 f0       	push   $0xf012e070
f011cc00:	e8 67 43 fe ff       	call   f0100f6c <cprintf>
f011cc05:	83 c4 10             	add    $0x10,%esp
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
f011cc08:	c7 45 8c ff 03 00 00 	movl   $0x3ff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[9];
f011cc0f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cc15:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011cc18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cc1f:	eb 0e                	jmp    f011cc2f <test_kfree_bestfirstfit+0xc3f>
		{
			ptr[i] = 9 ;
f011cc21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cc27:	01 d0                	add    %edx,%eax
f011cc29:	c6 00 09             	movb   $0x9,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011cc2c:	ff 45 f4             	incl   -0xc(%ebp)
f011cc2f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cc32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cc35:	7f ea                	jg     f011cc21 <test_kfree_bestfirstfit+0xc31>
		{
			ptr[i] = 9 ;
		}

	}
	if (correct)	eval+=15 ;
f011cc37:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cc3b:	74 04                	je     f011cc41 <test_kfree_bestfirstfit+0xc51>
f011cc3d:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011cc41:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree remaining allocated spaces [15%]
	{
		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with NEXT 6 MB hole - total = 9MB]
		freeFrames = sys_calculate_free_frames() ;
f011cc48:	e8 bc 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cc4d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc50:	e8 eb 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc55:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[5]);
f011cc58:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cc5e:	83 ec 0c             	sub    $0xc,%esp
f011cc61:	50                   	push   %eax
f011cc62:	e8 69 be fe ff       	call   f0108ad0 <kfree>
f011cc67:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cc6a:	e8 d1 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc6f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cc72:	74 17                	je     f011cc8b <test_kfree_bestfirstfit+0xc9b>
f011cc74:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cc7b:	83 ec 0c             	sub    $0xc,%esp
f011cc7e:	68 00 dc 12 f0       	push   $0xf012dc00
f011cc83:	e8 e4 42 fe ff       	call   f0100f6c <cprintf>
f011cc88:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cc8b:	e8 79 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cc90:	89 c2                	mov    %eax,%edx
f011cc92:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cc95:	29 c2                	sub    %eax,%edx
f011cc97:	89 d0                	mov    %edx,%eax
f011cc99:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cc9e:	77 17                	ja     f011ccb7 <test_kfree_bestfirstfit+0xcc7>
f011cca0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cca7:	83 ec 0c             	sub    $0xc,%esp
f011ccaa:	68 04 e0 12 f0       	push   $0xf012e004
f011ccaf:	e8 b8 42 fe ff       	call   f0100f6c <cprintf>
f011ccb4:	83 c4 10             	add    $0x10,%esp

		//kfree 7 KB [PAGE ALLOCATOR: Should be Merged with NEXT 9 MB hole - total = 9MB + 8KB]
		freeFrames = sys_calculate_free_frames() ;
f011ccb7:	e8 4d 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ccbc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccbf:	e8 7c 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ccc4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[4]);
f011ccc7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cccd:	83 ec 0c             	sub    $0xc,%esp
f011ccd0:	50                   	push   %eax
f011ccd1:	e8 fa bd fe ff       	call   f0108ad0 <kfree>
f011ccd6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ccd9:	e8 62 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ccde:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cce1:	74 17                	je     f011ccfa <test_kfree_bestfirstfit+0xd0a>
f011cce3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ccea:	83 ec 0c             	sub    $0xc,%esp
f011cced:	68 00 dc 12 f0       	push   $0xf012dc00
f011ccf2:	e8 75 42 fe ff       	call   f0100f6c <cprintf>
f011ccf7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ccfa:	e8 0a 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ccff:	89 c2                	mov    %eax,%edx
f011cd01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cd04:	29 c2                	sub    %eax,%edx
f011cd06:	89 d0                	mov    %edx,%eax
f011cd08:	83 f8 01             	cmp    $0x1,%eax
f011cd0b:	77 17                	ja     f011cd24 <test_kfree_bestfirstfit+0xd34>
f011cd0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd14:	83 ec 0c             	sub    $0xc,%esp
f011cd17:	68 04 e0 12 f0       	push   $0xf012e004
f011cd1c:	e8 4b 42 fe ff       	call   f0100f6c <cprintf>
f011cd21:	83 c4 10             	add    $0x10,%esp

		//kfree 1 KB [DYNAMIC ALLOCATOR]
		freeFrames = sys_calculate_free_frames() ;
f011cd24:	e8 e0 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd29:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd2c:	e8 0f 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd31:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[9]);
f011cd34:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cd3a:	83 ec 0c             	sub    $0xc,%esp
f011cd3d:	50                   	push   %eax
f011cd3e:	e8 8d bd fe ff       	call   f0108ad0 <kfree>
f011cd43:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cd46:	e8 f5 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd4b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cd4e:	74 17                	je     f011cd67 <test_kfree_bestfirstfit+0xd77>
f011cd50:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd57:	83 ec 0c             	sub    $0xc,%esp
f011cd5a:	68 00 dc 12 f0       	push   $0xf012dc00
f011cd5f:	e8 08 42 fe ff       	call   f0100f6c <cprintf>
f011cd64:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cd67:	e8 9d 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd6c:	89 c2                	mov    %eax,%edx
f011cd6e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cd71:	39 c2                	cmp    %eax,%edx
f011cd73:	74 17                	je     f011cd8c <test_kfree_bestfirstfit+0xd9c>
f011cd75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd7c:	83 ec 0c             	sub    $0xc,%esp
f011cd7f:	68 04 e0 12 f0       	push   $0xf012e004
f011cd84:	e8 e3 41 fe ff       	call   f0100f6c <cprintf>
f011cd89:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB [DYNAMIC ALLOCATOR: Should be Merged with PREV remaining area of 2KB & NEXT free space]
		freeFrames = sys_calculate_free_frames() ;
f011cd8c:	e8 78 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd91:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd94:	e8 a7 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd99:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[3]);
f011cd9c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cda2:	83 ec 0c             	sub    $0xc,%esp
f011cda5:	50                   	push   %eax
f011cda6:	e8 25 bd fe ff       	call   f0108ad0 <kfree>
f011cdab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cdae:	e8 8d 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cdb3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cdb6:	74 17                	je     f011cdcf <test_kfree_bestfirstfit+0xddf>
f011cdb8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cdbf:	83 ec 0c             	sub    $0xc,%esp
f011cdc2:	68 00 dc 12 f0       	push   $0xf012dc00
f011cdc7:	e8 a0 41 fe ff       	call   f0100f6c <cprintf>
f011cdcc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011cdcf:	e8 35 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cdd4:	89 c2                	mov    %eax,%edx
f011cdd6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cdd9:	39 c2                	cmp    %eax,%edx
f011cddb:	74 17                	je     f011cdf4 <test_kfree_bestfirstfit+0xe04>
f011cddd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cde4:	83 ec 0c             	sub    $0xc,%esp
f011cde7:	68 0c df 12 f0       	push   $0xf012df0c
f011cdec:	e8 7b 41 fe ff       	call   f0100f6c <cprintf>
f011cdf1:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 8KB hole - total = 9MB + 24KB]
		freeFrames = sys_calculate_free_frames() ;
f011cdf4:	e8 10 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cdf9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdfc:	e8 3f 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce01:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[7]);
f011ce04:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ce0a:	83 ec 0c             	sub    $0xc,%esp
f011ce0d:	50                   	push   %eax
f011ce0e:	e8 bd bc fe ff       	call   f0108ad0 <kfree>
f011ce13:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ce16:	e8 25 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce1b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ce1e:	74 17                	je     f011ce37 <test_kfree_bestfirstfit+0xe47>
f011ce20:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce27:	83 ec 0c             	sub    $0xc,%esp
f011ce2a:	68 00 dc 12 f0       	push   $0xf012dc00
f011ce2f:	e8 38 41 fe ff       	call   f0100f6c <cprintf>
f011ce34:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 4) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ce37:	e8 cd 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce3c:	89 c2                	mov    %eax,%edx
f011ce3e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ce41:	29 c2                	sub    %eax,%edx
f011ce43:	89 d0                	mov    %edx,%eax
f011ce45:	83 f8 03             	cmp    $0x3,%eax
f011ce48:	77 17                	ja     f011ce61 <test_kfree_bestfirstfit+0xe71>
f011ce4a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce51:	83 ec 0c             	sub    $0xc,%esp
f011ce54:	68 04 e0 12 f0       	push   $0xf012e004
f011ce59:	e8 0e 41 fe ff       	call   f0100f6c <cprintf>
f011ce5e:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB [PAGE ALLOCATOR: Should be Merged with NEXT remaining hole ]
		freeFrames = sys_calculate_free_frames() ;
f011ce61:	e8 a3 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce66:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce69:	e8 d2 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce6e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[10]);
f011ce71:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ce77:	83 ec 0c             	sub    $0xc,%esp
f011ce7a:	50                   	push   %eax
f011ce7b:	e8 50 bc fe ff       	call   f0108ad0 <kfree>
f011ce80:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ce83:	e8 b8 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce88:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ce8b:	74 17                	je     f011cea4 <test_kfree_bestfirstfit+0xeb4>
f011ce8d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce94:	83 ec 0c             	sub    $0xc,%esp
f011ce97:	68 00 dc 12 f0       	push   $0xf012dc00
f011ce9c:	e8 cb 40 fe ff       	call   f0100f6c <cprintf>
f011cea1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 1*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cea4:	e8 60 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cea9:	89 c2                	mov    %eax,%edx
f011ceab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ceae:	29 c2                	sub    %eax,%edx
f011ceb0:	89 d0                	mov    %edx,%eax
f011ceb2:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ceb7:	77 17                	ja     f011ced0 <test_kfree_bestfirstfit+0xee0>
f011ceb9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cec0:	83 ec 0c             	sub    $0xc,%esp
f011cec3:	68 04 e0 12 f0       	push   $0xf012e004
f011cec8:	e8 9f 40 fe ff       	call   f0100f6c <cprintf>
f011cecd:	83 c4 10             	add    $0x10,%esp

		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 24KB hole & NEXT remaining hole - total = ALL PAGE ALLOCATOR Space]
		freeFrames = sys_calculate_free_frames() ;
f011ced0:	e8 34 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ced5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ced8:	e8 63 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cedd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[8]);
f011cee0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cee6:	83 ec 0c             	sub    $0xc,%esp
f011cee9:	50                   	push   %eax
f011ceea:	e8 e1 bb fe ff       	call   f0108ad0 <kfree>
f011ceef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cef2:	e8 49 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cef7:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cefa:	74 17                	je     f011cf13 <test_kfree_bestfirstfit+0xf23>
f011cefc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf03:	83 ec 0c             	sub    $0xc,%esp
f011cf06:	68 00 dc 12 f0       	push   $0xf012dc00
f011cf0b:	e8 5c 40 fe ff       	call   f0100f6c <cprintf>
f011cf10:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cf13:	e8 f1 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf18:	89 c2                	mov    %eax,%edx
f011cf1a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf1d:	29 c2                	sub    %eax,%edx
f011cf1f:	89 d0                	mov    %edx,%eax
f011cf21:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cf26:	77 17                	ja     f011cf3f <test_kfree_bestfirstfit+0xf4f>
f011cf28:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf2f:	83 ec 0c             	sub    $0xc,%esp
f011cf32:	68 04 e0 12 f0       	push   $0xf012e004
f011cf37:	e8 30 40 fe ff       	call   f0100f6c <cprintf>
f011cf3c:	83 c4 10             	add    $0x10,%esp

		//				if(start_freeFrames != (sys_calculate_free_frames())) {{ correct = 0; cprintf("Wrong kfree: not all pages removed correctly at end\n"); }}
	}
	if (correct)	eval+=15 ;
f011cf3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cf43:	74 04                	je     f011cf49 <test_kfree_bestfirstfit+0xf59>
f011cf45:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011cf49:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011cf50:	83 ec 0c             	sub    $0xc,%esp
f011cf53:	6a 03                	push   $0x3
f011cf55:	e8 c6 0e ff ff       	call   f010de20 <sys_bypassPageFault>
f011cf5a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i <= 10; ++i)
f011cf5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cf64:	e9 af 00 00 00       	jmp    f011d018 <test_kfree_bestfirstfit+0x1028>
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
f011cf69:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f011cf6d:	0f 84 a1 00 00 00    	je     f011d014 <test_kfree_bestfirstfit+0x1024>
f011cf73:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f011cf77:	0f 84 97 00 00 00    	je     f011d014 <test_kfree_bestfirstfit+0x1024>
f011cf7d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011cf81:	0f 84 8d 00 00 00    	je     f011d014 <test_kfree_bestfirstfit+0x1024>
			{
				continue;
			}
			ptr = (char *) ptr_allocations[i];
f011cf87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cf8a:	8b 84 85 c8 fe ff ff 	mov    -0x138(%ebp,%eax,4),%eax
f011cf91:	89 45 c0             	mov    %eax,-0x40(%ebp)
			ptr[0] = 10;
f011cf94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf97:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0]))
f011cf9a:	e8 6f 0e ff ff       	call   f010de0e <sys_rcr2>
f011cf9f:	89 c2                	mov    %eax,%edx
f011cfa1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfa4:	39 c2                	cmp    %eax,%edx
f011cfa6:	74 1d                	je     f011cfc5 <test_kfree_bestfirstfit+0xfd5>
				if (correct)
f011cfa8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cfac:	74 17                	je     f011cfc5 <test_kfree_bestfirstfit+0xfd5>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011cfae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cfb5:	83 ec 0c             	sub    $0xc,%esp
f011cfb8:	68 e8 e0 12 f0       	push   $0xf012e0e8
f011cfbd:	e8 aa 3f fe ff       	call   f0100f6c <cprintf>
f011cfc2:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f011cfc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cfc8:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011cfcf:	89 c2                	mov    %eax,%edx
f011cfd1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfd4:	01 d0                	add    %edx,%eax
f011cfd6:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]]))
f011cfd9:	e8 30 0e ff ff       	call   f010de0e <sys_rcr2>
f011cfde:	89 c2                	mov    %eax,%edx
f011cfe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cfe3:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011cfea:	89 c1                	mov    %eax,%ecx
f011cfec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfef:	01 c8                	add    %ecx,%eax
f011cff1:	39 c2                	cmp    %eax,%edx
f011cff3:	74 20                	je     f011d015 <test_kfree_bestfirstfit+0x1025>
				if (correct)
f011cff5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cff9:	74 1a                	je     f011d015 <test_kfree_bestfirstfit+0x1025>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011cffb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d002:	83 ec 0c             	sub    $0xc,%esp
f011d005:	68 e8 e0 12 f0       	push   $0xf012e0e8
f011d00a:	e8 5d 3f fe ff       	call   f0100f6c <cprintf>
f011d00f:	83 c4 10             	add    $0x10,%esp
f011d012:	eb 01                	jmp    f011d015 <test_kfree_bestfirstfit+0x1025>
		for (i = 0; i <= 10; ++i)
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
			{
				continue;
f011d014:	90                   	nop
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i <= 10; ++i)
f011d015:	ff 45 f4             	incl   -0xc(%ebp)
f011d018:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
f011d01c:	0f 8e 47 ff ff ff    	jle    f011cf69 <test_kfree_bestfirstfit+0xf79>
				if (correct)
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011d022:	83 ec 0c             	sub    $0xc,%esp
f011d025:	6a 00                	push   $0x0
f011d027:	e8 f4 0d ff ff       	call   f010de20 <sys_bypassPageFault>
f011d02c:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=15 ;
f011d02f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d033:	74 04                	je     f011d039 <test_kfree_bestfirstfit+0x1049>
f011d035:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011d039:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	//Allocate after kfree ALL [30%]
	{
		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f011d040:	e8 c4 09 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d045:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d048:	e8 f3 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d04d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011d050:	83 ec 0c             	sub    $0xc,%esp
f011d053:	68 00 04 00 00       	push   $0x400
f011d058:	e8 59 ba fe ff       	call   f0108ab6 <kmalloc>
f011d05d:	83 c4 10             	add    $0x10,%esp
f011d060:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011d066:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f011d06c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d072:	39 c2                	cmp    %eax,%edx
f011d074:	72 16                	jb     f011d08c <test_kfree_bestfirstfit+0x109c>
f011d076:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d07c:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d082:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d088:	39 d0                	cmp    %edx,%eax
f011d08a:	76 17                	jbe    f011d0a3 <test_kfree_bestfirstfit+0x10b3>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d08c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d093:	83 ec 0c             	sub    $0xc,%esp
f011d096:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011d09b:	e8 cc 3e fe ff       	call   f0100f6c <cprintf>
f011d0a0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d0a3:	e8 98 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d0a8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d0ab:	74 17                	je     f011d0c4 <test_kfree_bestfirstfit+0x10d4>
f011d0ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d0b4:	83 ec 0c             	sub    $0xc,%esp
f011d0b7:	68 00 dc 12 f0       	push   $0xf012dc00
f011d0bc:	e8 ab 3e fe ff       	call   f0100f6c <cprintf>
f011d0c1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d0c4:	e8 40 09 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d0c9:	89 c2                	mov    %eax,%edx
f011d0cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d0ce:	39 c2                	cmp    %eax,%edx
f011d0d0:	74 17                	je     f011d0e9 <test_kfree_bestfirstfit+0x10f9>
f011d0d2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d0d9:	83 ec 0c             	sub    $0xc,%esp
f011d0dc:	68 70 e0 12 f0       	push   $0xf012e070
f011d0e1:	e8 86 3e fe ff       	call   f0100f6c <cprintf>
f011d0e6:	83 c4 10             	add    $0x10,%esp
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
f011d0e9:	c7 45 94 ff 03 00 00 	movl   $0x3ff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[11];
f011d0f0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d0f6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011d0f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d100:	eb 0e                	jmp    f011d110 <test_kfree_bestfirstfit+0x1120>
		{
			ptr[i] = 11 ;
f011d102:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d105:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d108:	01 d0                	add    %edx,%eax
f011d10a:	c6 00 0b             	movb   $0xb,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011d10d:	ff 45 f4             	incl   -0xc(%ebp)
f011d110:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d113:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d116:	7f ea                	jg     f011d102 <test_kfree_bestfirstfit+0x1112>
			ptr[i] = 11 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d118:	e8 ec 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d11d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d120:	e8 1b 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d125:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[12] = kmalloc(2*kilo);
f011d128:	83 ec 0c             	sub    $0xc,%esp
f011d12b:	68 00 08 00 00       	push   $0x800
f011d130:	e8 81 b9 fe ff       	call   f0108ab6 <kmalloc>
f011d135:	83 c4 10             	add    $0x10,%esp
f011d138:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		//expected = ptr_allocations[2] + 1*kilo + sizeOfMetaData();
		//if (ptr_allocations[12] != expected)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011d13e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d144:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d14a:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d150:	39 d0                	cmp    %edx,%eax
f011d152:	72 16                	jb     f011d16a <test_kfree_bestfirstfit+0x117a>
f011d154:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d15a:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d160:	81 c2 00 08 00 00    	add    $0x800,%edx
f011d166:	39 d0                	cmp    %edx,%eax
f011d168:	76 35                	jbe    f011d19f <test_kfree_bestfirstfit+0x11af>
		{
			correct = 0;
f011d16a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			cprintf("Wrong start address for the allocated space... check return address of kmalloc. Expected [%x, %x], Actual %x\n", (ptr_allocations[2] + 1*kilo), (ptr_allocations[2] + 2*kilo), ptr_allocations[12]);
f011d171:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d177:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d17d:	8d 8a 00 08 00 00    	lea    0x800(%edx),%ecx
f011d183:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d189:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d18f:	50                   	push   %eax
f011d190:	51                   	push   %ecx
f011d191:	52                   	push   %edx
f011d192:	68 30 e1 12 f0       	push   $0xf012e130
f011d197:	e8 d0 3d fe ff       	call   f0100f6c <cprintf>
f011d19c:	83 c4 10             	add    $0x10,%esp
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d19f:	e8 9c 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d1a4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d1a7:	74 17                	je     f011d1c0 <test_kfree_bestfirstfit+0x11d0>
f011d1a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d1b0:	83 ec 0c             	sub    $0xc,%esp
f011d1b3:	68 00 dc 12 f0       	push   $0xf012dc00
f011d1b8:	e8 af 3d fe ff       	call   f0100f6c <cprintf>
f011d1bd:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d1c0:	e8 44 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d1c5:	89 c2                	mov    %eax,%edx
f011d1c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d1ca:	39 c2                	cmp    %eax,%edx
f011d1cc:	74 17                	je     f011d1e5 <test_kfree_bestfirstfit+0x11f5>
f011d1ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d1d5:	83 ec 0c             	sub    $0xc,%esp
f011d1d8:	68 70 e0 12 f0       	push   $0xf012e070
f011d1dd:	e8 8a 3d fe ff       	call   f0100f6c <cprintf>
f011d1e2:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f011d1e5:	c7 45 98 ff 07 00 00 	movl   $0x7ff,-0x68(%ebp)
		ptr = (char*)ptr_allocations[12];
f011d1ec:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d1f2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011d1f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d1fc:	eb 0e                	jmp    f011d20c <test_kfree_bestfirstfit+0x121c>
		{
			ptr[i] = 12 ;
f011d1fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d201:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d204:	01 d0                	add    %edx,%eax
f011d206:	c6 00 0c             	movb   $0xc,(%eax)
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011d209:	ff 45 f4             	incl   -0xc(%ebp)
f011d20c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d20f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d212:	7f ea                	jg     f011d1fe <test_kfree_bestfirstfit+0x120e>
			ptr[i] = 12 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1.5 KB
		freeFrames = sys_calculate_free_frames() ;
f011d214:	e8 f0 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d219:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d21c:	e8 1f 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d221:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[13] = kmalloc(3*kilo/2);
f011d224:	83 ec 0c             	sub    $0xc,%esp
f011d227:	68 00 06 00 00       	push   $0x600
f011d22c:	e8 85 b8 fe ff       	call   f0108ab6 <kmalloc>
f011d231:	83 c4 10             	add    $0x10,%esp
f011d234:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		//if (ptr_allocations[13] != ptr_allocations[12] + 2*kilo + sizeOfMetaData())
		if ((ptr_allocations[13] < ptr_allocations[2] + 3*kilo) || (ptr_allocations[13] > (ptr_allocations[2] + 4*kilo)))
f011d23a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d240:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d246:	81 c2 00 0c 00 00    	add    $0xc00,%edx
f011d24c:	39 d0                	cmp    %edx,%eax
f011d24e:	72 16                	jb     f011d266 <test_kfree_bestfirstfit+0x1276>
f011d250:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d256:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d25c:	81 c2 00 10 00 00    	add    $0x1000,%edx
f011d262:	39 d0                	cmp    %edx,%eax
f011d264:	76 17                	jbe    f011d27d <test_kfree_bestfirstfit+0x128d>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d266:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d26d:	83 ec 0c             	sub    $0xc,%esp
f011d270:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011d275:	e8 f2 3c fe ff       	call   f0100f6c <cprintf>
f011d27a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d27d:	e8 be 75 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d282:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d285:	74 17                	je     f011d29e <test_kfree_bestfirstfit+0x12ae>
f011d287:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d28e:	83 ec 0c             	sub    $0xc,%esp
f011d291:	68 00 dc 12 f0       	push   $0xf012dc00
f011d296:	e8 d1 3c fe ff       	call   f0100f6c <cprintf>
f011d29b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d29e:	e8 66 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d2a3:	89 c2                	mov    %eax,%edx
f011d2a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d2a8:	39 c2                	cmp    %eax,%edx
f011d2aa:	74 17                	je     f011d2c3 <test_kfree_bestfirstfit+0x12d3>
f011d2ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d2b3:	83 ec 0c             	sub    $0xc,%esp
f011d2b6:	68 70 e0 12 f0       	push   $0xf012e070
f011d2bb:	e8 ac 3c fe ff       	call   f0100f6c <cprintf>
f011d2c0:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
f011d2c3:	c7 45 9c ff 05 00 00 	movl   $0x5ff,-0x64(%ebp)
		ptr = (char*)ptr_allocations[13];
f011d2ca:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d2d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011d2d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d2da:	eb 0e                	jmp    f011d2ea <test_kfree_bestfirstfit+0x12fa>
		{
			ptr[i] = 13 ;
f011d2dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d2e2:	01 d0                	add    %edx,%eax
f011d2e4:	c6 00 0d             	movb   $0xd,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011d2e7:	ff 45 f4             	incl   -0xc(%ebp)
f011d2ea:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d2ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d2f0:	7f ea                	jg     f011d2dc <test_kfree_bestfirstfit+0x12ec>
			ptr[i] = 13 ;
		}

		//[PAGE ALLOCATOR] Allocate in merged freed space
		//30 MB
		freeFrames = sys_calculate_free_frames() ;
f011d2f2:	e8 12 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d2f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2fa:	e8 41 75 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d2ff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(30*Mega);
f011d302:	83 ec 0c             	sub    $0xc,%esp
f011d305:	68 00 00 e0 01       	push   $0x1e00000
f011d30a:	e8 a7 b7 fe ff       	call   f0108ab6 <kmalloc>
f011d30f:	83 c4 10             	add    $0x10,%esp
f011d312:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d318:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d31e:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011d323:	74 17                	je     f011d33c <test_kfree_bestfirstfit+0x134c>
f011d325:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d32c:	83 ec 0c             	sub    $0xc,%esp
f011d32f:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011d334:	e8 33 3c fe ff       	call   f0100f6c <cprintf>
f011d339:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d33c:	e8 ff 74 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d341:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d344:	74 17                	je     f011d35d <test_kfree_bestfirstfit+0x136d>
f011d346:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d34d:	83 ec 0c             	sub    $0xc,%esp
f011d350:	68 00 dc 12 f0       	push   $0xf012dc00
f011d355:	e8 12 3c fe ff       	call   f0100f6c <cprintf>
f011d35a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d35d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011d360:	e8 a4 06 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d365:	29 c3                	sub    %eax,%ebx
f011d367:	89 d8                	mov    %ebx,%eax
f011d369:	3d ff 1d 00 00       	cmp    $0x1dff,%eax
f011d36e:	77 17                	ja     f011d387 <test_kfree_bestfirstfit+0x1397>
f011d370:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d377:	83 ec 0c             	sub    $0xc,%esp
f011d37a:	68 6c dc 12 f0       	push   $0xf012dc6c
f011d37f:	e8 e8 3b fe ff       	call   f0100f6c <cprintf>
f011d384:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
f011d387:	c7 45 90 ff ff df 01 	movl   $0x1dfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011d38e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d394:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011d397:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d39e:	eb 0e                	jmp    f011d3ae <test_kfree_bestfirstfit+0x13be>
		{
			ptr[i] = 10 ;
f011d3a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d3a6:	01 d0                	add    %edx,%eax
f011d3a8:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011d3ab:	ff 45 f4             	incl   -0xc(%ebp)
f011d3ae:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d3b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d3b4:	7f ea                	jg     f011d3a0 <test_kfree_bestfirstfit+0x13b0>
			ptr[i] = 10 ;
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
f011d3b6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d3bc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011d3bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d3c6:	eb 1e                	jmp    f011d3e6 <test_kfree_bestfirstfit+0x13f6>
		{
			sums[10] += ptr[i] ;
f011d3c8:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011d3ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d3d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d3d4:	01 c8                	add    %ecx,%eax
f011d3d6:	8a 00                	mov    (%eax),%al
f011d3d8:	0f be c0             	movsbl %al,%eax
f011d3db:	01 d0                	add    %edx,%eax
f011d3dd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011d3e3:	ff 45 f4             	incl   -0xc(%ebp)
f011d3e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d3e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d3ec:	7f da                	jg     f011d3c8 <test_kfree_bestfirstfit+0x13d8>
		{
			sums[10] += ptr[i] ;
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d3ee:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f011d3f4:	8b 55 90             	mov    -0x70(%ebp),%edx
f011d3f7:	89 d0                	mov    %edx,%eax
f011d3f9:	c1 e0 02             	shl    $0x2,%eax
f011d3fc:	01 d0                	add    %edx,%eax
f011d3fe:	01 c0                	add    %eax,%eax
f011d400:	39 c1                	cmp    %eax,%ecx
f011d402:	74 17                	je     f011d41b <test_kfree_bestfirstfit+0x142b>
f011d404:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d40b:	83 ec 0c             	sub    $0xc,%esp
f011d40e:	68 a0 e1 12 f0       	push   $0xf012e1a0
f011d413:	e8 54 3b fe ff       	call   f0100f6c <cprintf>
f011d418:	83 c4 10             	add    $0x10,%esp

		//1 KB
		ptr = (char*)ptr_allocations[11];
f011d41b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d421:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011d424:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d42b:	eb 1e                	jmp    f011d44b <test_kfree_bestfirstfit+0x145b>
		{
			sums[11] += ptr[i] ;
f011d42d:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011d433:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d436:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d439:	01 c8                	add    %ecx,%eax
f011d43b:	8a 00                	mov    (%eax),%al
f011d43d:	0f be c0             	movsbl %al,%eax
f011d440:	01 d0                	add    %edx,%eax
f011d442:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1 KB
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011d448:	ff 45 f4             	incl   -0xc(%ebp)
f011d44b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d44e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d451:	7f da                	jg     f011d42d <test_kfree_bestfirstfit+0x143d>
		{
			sums[11] += ptr[i] ;
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d453:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f011d459:	8b 55 94             	mov    -0x6c(%ebp),%edx
f011d45c:	89 d0                	mov    %edx,%eax
f011d45e:	c1 e0 02             	shl    $0x2,%eax
f011d461:	01 d0                	add    %edx,%eax
f011d463:	01 c0                	add    %eax,%eax
f011d465:	01 d0                	add    %edx,%eax
f011d467:	39 c1                	cmp    %eax,%ecx
f011d469:	74 17                	je     f011d482 <test_kfree_bestfirstfit+0x1492>
f011d46b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d472:	83 ec 0c             	sub    $0xc,%esp
f011d475:	68 a0 e1 12 f0       	push   $0xf012e1a0
f011d47a:	e8 ed 3a fe ff       	call   f0100f6c <cprintf>
f011d47f:	83 c4 10             	add    $0x10,%esp

		//2 KB
		ptr = (char*)ptr_allocations[12];
f011d482:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d488:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011d48b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d492:	eb 1e                	jmp    f011d4b2 <test_kfree_bestfirstfit+0x14c2>
		{
			sums[12] += ptr[i] ;
f011d494:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011d49a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d49d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4a0:	01 c8                	add    %ecx,%eax
f011d4a2:	8a 00                	mov    (%eax),%al
f011d4a4:	0f be c0             	movsbl %al,%eax
f011d4a7:	01 d0                	add    %edx,%eax
f011d4a9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//2 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011d4af:	ff 45 f4             	incl   -0xc(%ebp)
f011d4b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d4b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d4b8:	7f da                	jg     f011d494 <test_kfree_bestfirstfit+0x14a4>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d4ba:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
f011d4c0:	8b 55 98             	mov    -0x68(%ebp),%edx
f011d4c3:	89 d0                	mov    %edx,%eax
f011d4c5:	01 c0                	add    %eax,%eax
f011d4c7:	01 d0                	add    %edx,%eax
f011d4c9:	c1 e0 02             	shl    $0x2,%eax
f011d4cc:	39 c1                	cmp    %eax,%ecx
f011d4ce:	74 17                	je     f011d4e7 <test_kfree_bestfirstfit+0x14f7>
f011d4d0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d4d7:	83 ec 0c             	sub    $0xc,%esp
f011d4da:	68 a0 e1 12 f0       	push   $0xf012e1a0
f011d4df:	e8 88 3a fe ff       	call   f0100f6c <cprintf>
f011d4e4:	83 c4 10             	add    $0x10,%esp

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
f011d4e7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d4ed:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011d4f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d4f7:	eb 1e                	jmp    f011d517 <test_kfree_bestfirstfit+0x1527>
		{
			sums[13] += ptr[i] ;
f011d4f9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f011d4ff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d502:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d505:	01 c8                	add    %ecx,%eax
f011d507:	8a 00                	mov    (%eax),%al
f011d509:	0f be c0             	movsbl %al,%eax
f011d50c:	01 d0                	add    %edx,%eax
f011d50e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011d514:	ff 45 f4             	incl   -0xc(%ebp)
f011d517:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d51a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d51d:	7f da                	jg     f011d4f9 <test_kfree_bestfirstfit+0x1509>
		{
			sums[13] += ptr[i] ;
		}
		if (sums[13] != 13*lastIndices[13])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d51f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f011d525:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011d528:	89 d0                	mov    %edx,%eax
f011d52a:	01 c0                	add    %eax,%eax
f011d52c:	01 d0                	add    %edx,%eax
f011d52e:	c1 e0 02             	shl    $0x2,%eax
f011d531:	01 d0                	add    %edx,%eax
f011d533:	39 c1                	cmp    %eax,%ecx
f011d535:	74 17                	je     f011d54e <test_kfree_bestfirstfit+0x155e>
f011d537:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d53e:	83 ec 0c             	sub    $0xc,%esp
f011d541:	68 a0 e1 12 f0       	push   $0xf012e1a0
f011d546:	e8 21 3a fe ff       	call   f0100f6c <cprintf>
f011d54b:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011d54e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d552:	74 04                	je     f011d558 <test_kfree_bestfirstfit+0x1568>
f011d554:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011d558:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011d55f:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011d566:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011d56d:	eb 4e                	jmp    f011d5bd <test_kfree_bestfirstfit+0x15cd>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011d56f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011d572:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011d577:	83 ec 04             	sub    $0x4,%esp
f011d57a:	8d 8d c4 fe ff ff    	lea    -0x13c(%ebp),%ecx
f011d580:	51                   	push   %ecx
f011d581:	52                   	push   %edx
f011d582:	50                   	push   %eax
f011d583:	e8 85 ae fe ff       	call   f010840d <get_page_table>
f011d588:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011d58b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d591:	85 c0                	test   %eax,%eax
f011d593:	75 1d                	jne    f011d5b2 <test_kfree_bestfirstfit+0x15c2>
			{
				if (correct)
f011d595:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d599:	74 17                	je     f011d5b2 <test_kfree_bestfirstfit+0x15c2>
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
f011d59b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d5a2:	83 ec 0c             	sub    $0xc,%esp
f011d5a5:	68 cc e1 12 f0       	push   $0xf012e1cc
f011d5aa:	e8 bd 39 fe ff       	call   f0100f6c <cprintf>
f011d5af:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011d5b2:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011d5b9:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011d5bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011d5c1:	78 ac                	js     f011d56f <test_kfree_bestfirstfit+0x157f>
f011d5c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011d5c7:	7f 09                	jg     f011d5d2 <test_kfree_bestfirstfit+0x15e2>
f011d5c9:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011d5d0:	76 9d                	jbe    f011d56f <test_kfree_bestfirstfit+0x157f>
				if (correct)
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
			}
		}
	}
	if (correct)	eval+=5 ;
f011d5d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d5d6:	74 04                	je     f011d5dc <test_kfree_bestfirstfit+0x15ec>
f011d5d8:	83 45 f0 05          	addl   $0x5,-0x10(%ebp)

	cprintf("\ntest kfree completed. Eval = %d%\n", eval);
f011d5dc:	83 ec 08             	sub    $0x8,%esp
f011d5df:	ff 75 f0             	pushl  -0x10(%ebp)
f011d5e2:	68 34 e2 12 f0       	push   $0xf012e234
f011d5e7:	e8 80 39 fe ff       	call   f0100f6c <cprintf>
f011d5ec:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d5ef:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011d5f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d5f7:	5b                   	pop    %ebx
f011d5f8:	5f                   	pop    %edi
f011d5f9:	5d                   	pop    %ebp
f011d5fa:	c3                   	ret    

f011d5fb <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f011d5fb:	55                   	push   %ebp
f011d5fc:	89 e5                	mov    %esp,%ebp
f011d5fe:	57                   	push   %edi
f011d5ff:	53                   	push   %ebx
f011d600:	81 ec b0 35 00 00    	sub    $0x35b0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011d606:	83 ec 0c             	sub    $0xc,%esp
f011d609:	68 40 db 12 f0       	push   $0xf012db40
f011d60e:	e8 59 39 fe ff       	call   f0100f6c <cprintf>
f011d613:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d616:	83 ec 0c             	sub    $0xc,%esp
f011d619:	68 70 db 12 f0       	push   $0xf012db70
f011d61e:	e8 49 39 fe ff       	call   f0100f6c <cprintf>
f011d623:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d626:	83 ec 0c             	sub    $0xc,%esp
f011d629:	68 40 db 12 f0       	push   $0xf012db40
f011d62e:	e8 39 39 fe ff       	call   f0100f6c <cprintf>
f011d633:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011d636:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f011d63a:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011d63e:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f011d644:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f011d64a:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011d651:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011d658:	e8 ac 03 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d65d:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011d660:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011d666:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d66b:	b8 00 00 00 00       	mov    $0x0,%eax
f011d670:	89 d7                	mov    %edx,%edi
f011d672:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011d674:	8d 95 c4 fe ff ff    	lea    -0x13c(%ebp),%edx
f011d67a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d67f:	b8 00 00 00 00       	mov    $0x0,%eax
f011d684:	89 d7                	mov    %edx,%edi
f011d686:	f3 ab                	rep stos %eax,%es:(%edi)
	int eval = 0;
f011d688:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011d68f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011d696:	8d 95 74 fe ff ff    	lea    -0x18c(%ebp),%edx
f011d69c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d6a1:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6a6:	89 d7                	mov    %edx,%edi
f011d6a8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d6aa:	e8 5a 03 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d6af:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6b2:	e8 89 71 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d6b7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d6ba:	83 ec 0c             	sub    $0xc,%esp
f011d6bd:	68 00 fc 1f 00       	push   $0x1ffc00
f011d6c2:	e8 ef b3 fe ff       	call   f0108ab6 <kmalloc>
f011d6c7:	83 c4 10             	add    $0x10,%esp
f011d6ca:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d6d0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d6d6:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011d6db:	74 17                	je     f011d6f4 <test_kheap_phys_addr+0xf9>
f011d6dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d6e4:	83 ec 0c             	sub    $0xc,%esp
f011d6e7:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011d6ec:	e8 7b 38 fe ff       	call   f0100f6c <cprintf>
f011d6f1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d6f4:	e8 47 71 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d6f9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d6fc:	74 17                	je     f011d715 <test_kheap_phys_addr+0x11a>
f011d6fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d705:	83 ec 0c             	sub    $0xc,%esp
f011d708:	68 00 dc 12 f0       	push   $0xf012dc00
f011d70d:	e8 5a 38 fe ff       	call   f0100f6c <cprintf>
f011d712:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d715:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d718:	e8 ec 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d71d:	29 c3                	sub    %eax,%ebx
f011d71f:	89 d8                	mov    %ebx,%eax
f011d721:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d726:	77 17                	ja     f011d73f <test_kheap_phys_addr+0x144>
f011d728:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d72f:	83 ec 0c             	sub    $0xc,%esp
f011d732:	68 6c dc 12 f0       	push   $0xf012dc6c
f011d737:	e8 30 38 fe ff       	call   f0100f6c <cprintf>
f011d73c:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d73f:	e8 c5 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d744:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d747:	e8 f4 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d74c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d74f:	83 ec 0c             	sub    $0xc,%esp
f011d752:	68 00 fc 1f 00       	push   $0x1ffc00
f011d757:	e8 5a b3 fe ff       	call   f0108ab6 <kmalloc>
f011d75c:	83 c4 10             	add    $0x10,%esp
f011d75f:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d765:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d76b:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011d770:	74 17                	je     f011d789 <test_kheap_phys_addr+0x18e>
f011d772:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d779:	83 ec 0c             	sub    $0xc,%esp
f011d77c:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011d781:	e8 e6 37 fe ff       	call   f0100f6c <cprintf>
f011d786:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d789:	e8 b2 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d78e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d791:	74 17                	je     f011d7aa <test_kheap_phys_addr+0x1af>
f011d793:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d79a:	83 ec 0c             	sub    $0xc,%esp
f011d79d:	68 00 dc 12 f0       	push   $0xf012dc00
f011d7a2:	e8 c5 37 fe ff       	call   f0100f6c <cprintf>
f011d7a7:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d7aa:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d7ad:	e8 57 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d7b2:	29 c3                	sub    %eax,%ebx
f011d7b4:	89 d8                	mov    %ebx,%eax
f011d7b6:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d7bb:	77 17                	ja     f011d7d4 <test_kheap_phys_addr+0x1d9>
f011d7bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d7c4:	83 ec 0c             	sub    $0xc,%esp
f011d7c7:	68 6c dc 12 f0       	push   $0xf012dc6c
f011d7cc:	e8 9b 37 fe ff       	call   f0100f6c <cprintf>
f011d7d1:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011d7d4:	e8 30 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d7d9:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d7dc:	e8 5f 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d7e1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011d7e4:	83 ec 0c             	sub    $0xc,%esp
f011d7e7:	68 00 04 00 00       	push   $0x400
f011d7ec:	e8 c5 b2 fe ff       	call   f0108ab6 <kmalloc>
f011d7f1:	83 c4 10             	add    $0x10,%esp
f011d7f4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011d7fa:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d800:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d805:	76 28                	jbe    f011d82f <test_kheap_phys_addr+0x234>
f011d807:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011d80d:	83 ec 0c             	sub    $0xc,%esp
f011d810:	6a 00                	push   $0x0
f011d812:	e8 95 b2 fe ff       	call   f0108aac <sbrk>
f011d817:	83 c4 10             	add    $0x10,%esp
f011d81a:	39 c3                	cmp    %eax,%ebx
f011d81c:	73 11                	jae    f011d82f <test_kheap_phys_addr+0x234>
f011d81e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d824:	89 c2                	mov    %eax,%edx
f011d826:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011d82b:	39 c2                	cmp    %eax,%edx
f011d82d:	72 17                	jb     f011d846 <test_kheap_phys_addr+0x24b>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d82f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d836:	83 ec 0c             	sub    $0xc,%esp
f011d839:	68 00 dd 12 f0       	push   $0xf012dd00
f011d83e:	e8 29 37 fe ff       	call   f0100f6c <cprintf>
f011d843:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d846:	e8 f5 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d84b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d84e:	74 17                	je     f011d867 <test_kheap_phys_addr+0x26c>
f011d850:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d857:	83 ec 0c             	sub    $0xc,%esp
f011d85a:	68 00 dc 12 f0       	push   $0xf012dc00
f011d85f:	e8 08 37 fe ff       	call   f0100f6c <cprintf>
f011d864:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011d867:	e8 9d 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d86c:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d86f:	e8 cc 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d874:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011d877:	83 ec 0c             	sub    $0xc,%esp
f011d87a:	68 00 08 00 00       	push   $0x800
f011d87f:	e8 32 b2 fe ff       	call   f0108ab6 <kmalloc>
f011d884:	83 c4 10             	add    $0x10,%esp
f011d887:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011d88d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d893:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d898:	76 28                	jbe    f011d8c2 <test_kheap_phys_addr+0x2c7>
f011d89a:	8b 9d 80 fe ff ff    	mov    -0x180(%ebp),%ebx
f011d8a0:	83 ec 0c             	sub    $0xc,%esp
f011d8a3:	6a 00                	push   $0x0
f011d8a5:	e8 02 b2 fe ff       	call   f0108aac <sbrk>
f011d8aa:	83 c4 10             	add    $0x10,%esp
f011d8ad:	39 c3                	cmp    %eax,%ebx
f011d8af:	73 11                	jae    f011d8c2 <test_kheap_phys_addr+0x2c7>
f011d8b1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d8b7:	89 c2                	mov    %eax,%edx
f011d8b9:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011d8be:	39 c2                	cmp    %eax,%edx
f011d8c0:	72 17                	jb     f011d8d9 <test_kheap_phys_addr+0x2de>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d8c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d8c9:	83 ec 0c             	sub    $0xc,%esp
f011d8cc:	68 00 dd 12 f0       	push   $0xf012dd00
f011d8d1:	e8 96 36 fe ff       	call   f0100f6c <cprintf>
f011d8d6:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d8d9:	e8 62 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d8de:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d8e1:	74 17                	je     f011d8fa <test_kheap_phys_addr+0x2ff>
f011d8e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d8ea:	83 ec 0c             	sub    $0xc,%esp
f011d8ed:	68 00 dc 12 f0       	push   $0xf012dc00
f011d8f2:	e8 75 36 fe ff       	call   f0100f6c <cprintf>
f011d8f7:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011d8fa:	e8 0a 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d8ff:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d902:	e8 39 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d907:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011d90a:	83 ec 0c             	sub    $0xc,%esp
f011d90d:	68 00 06 00 00       	push   $0x600
f011d912:	e8 9f b1 fe ff       	call   f0108ab6 <kmalloc>
f011d917:	83 c4 10             	add    $0x10,%esp
f011d91a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011d920:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d926:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d92b:	76 28                	jbe    f011d955 <test_kheap_phys_addr+0x35a>
f011d92d:	8b 9d 84 fe ff ff    	mov    -0x17c(%ebp),%ebx
f011d933:	83 ec 0c             	sub    $0xc,%esp
f011d936:	6a 00                	push   $0x0
f011d938:	e8 6f b1 fe ff       	call   f0108aac <sbrk>
f011d93d:	83 c4 10             	add    $0x10,%esp
f011d940:	39 c3                	cmp    %eax,%ebx
f011d942:	73 11                	jae    f011d955 <test_kheap_phys_addr+0x35a>
f011d944:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d94a:	89 c2                	mov    %eax,%edx
f011d94c:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011d951:	39 c2                	cmp    %eax,%edx
f011d953:	72 17                	jb     f011d96c <test_kheap_phys_addr+0x371>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d955:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d95c:	83 ec 0c             	sub    $0xc,%esp
f011d95f:	68 00 dd 12 f0       	push   $0xf012dd00
f011d964:	e8 03 36 fe ff       	call   f0100f6c <cprintf>
f011d969:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d96c:	e8 cf 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d971:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d974:	74 17                	je     f011d98d <test_kheap_phys_addr+0x392>
f011d976:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d97d:	83 ec 0c             	sub    $0xc,%esp
f011d980:	68 00 dc 12 f0       	push   $0xf012dc00
f011d985:	e8 e2 35 fe ff       	call   f0100f6c <cprintf>
f011d98a:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d98d:	e8 77 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d992:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d995:	e8 a6 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d99a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011d99d:	83 ec 0c             	sub    $0xc,%esp
f011d9a0:	68 00 1c 00 00       	push   $0x1c00
f011d9a5:	e8 0c b1 fe ff       	call   f0108ab6 <kmalloc>
f011d9aa:	83 c4 10             	add    $0x10,%esp
f011d9ad:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d9b3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011d9b9:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011d9be:	74 17                	je     f011d9d7 <test_kheap_phys_addr+0x3dc>
f011d9c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d9c7:	83 ec 0c             	sub    $0xc,%esp
f011d9ca:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011d9cf:	e8 98 35 fe ff       	call   f0100f6c <cprintf>
f011d9d4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d9d7:	e8 64 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d9dc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d9df:	74 17                	je     f011d9f8 <test_kheap_phys_addr+0x3fd>
f011d9e1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d9e8:	83 ec 0c             	sub    $0xc,%esp
f011d9eb:	68 00 dc 12 f0       	push   $0xf012dc00
f011d9f0:	e8 77 35 fe ff       	call   f0100f6c <cprintf>
f011d9f5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d9f8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d9fb:	e8 09 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011da00:	29 c3                	sub    %eax,%ebx
f011da02:	89 d8                	mov    %ebx,%eax
f011da04:	83 f8 01             	cmp    $0x1,%eax
f011da07:	77 17                	ja     f011da20 <test_kheap_phys_addr+0x425>
f011da09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da10:	83 ec 0c             	sub    $0xc,%esp
f011da13:	68 6c dc 12 f0       	push   $0xf012dc6c
f011da18:	e8 4f 35 fe ff       	call   f0100f6c <cprintf>
f011da1d:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011da20:	e8 e4 ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011da25:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da28:	e8 13 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da2d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011da30:	83 ec 0c             	sub    $0xc,%esp
f011da33:	68 00 fc 2f 00       	push   $0x2ffc00
f011da38:	e8 79 b0 fe ff       	call   f0108ab6 <kmalloc>
f011da3d:	83 c4 10             	add    $0x10,%esp
f011da40:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011da46:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011da4c:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011da51:	74 17                	je     f011da6a <test_kheap_phys_addr+0x46f>
f011da53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da5a:	83 ec 0c             	sub    $0xc,%esp
f011da5d:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011da62:	e8 05 35 fe ff       	call   f0100f6c <cprintf>
f011da67:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011da6a:	e8 d1 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da6f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011da72:	74 17                	je     f011da8b <test_kheap_phys_addr+0x490>
f011da74:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da7b:	83 ec 0c             	sub    $0xc,%esp
f011da7e:	68 00 dc 12 f0       	push   $0xf012dc00
f011da83:	e8 e4 34 fe ff       	call   f0100f6c <cprintf>
f011da88:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011da8b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011da8e:	e8 76 ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011da93:	29 c3                	sub    %eax,%ebx
f011da95:	89 d8                	mov    %ebx,%eax
f011da97:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011da9c:	77 17                	ja     f011dab5 <test_kheap_phys_addr+0x4ba>
f011da9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011daa5:	83 ec 0c             	sub    $0xc,%esp
f011daa8:	68 6c dc 12 f0       	push   $0xf012dc6c
f011daad:	e8 ba 34 fe ff       	call   f0100f6c <cprintf>
f011dab2:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011dab5:	e8 4f ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011daba:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dabd:	e8 7e 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dac2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011dac5:	83 ec 0c             	sub    $0xc,%esp
f011dac8:	68 00 fc 5f 00       	push   $0x5ffc00
f011dacd:	e8 e4 af fe ff       	call   f0108ab6 <kmalloc>
f011dad2:	83 c4 10             	add    $0x10,%esp
f011dad5:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011dadb:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011dae1:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011dae6:	74 17                	je     f011daff <test_kheap_phys_addr+0x504>
f011dae8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011daef:	83 ec 0c             	sub    $0xc,%esp
f011daf2:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011daf7:	e8 70 34 fe ff       	call   f0100f6c <cprintf>
f011dafc:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011daff:	e8 3c 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db04:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011db07:	74 17                	je     f011db20 <test_kheap_phys_addr+0x525>
f011db09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db10:	83 ec 0c             	sub    $0xc,%esp
f011db13:	68 00 dc 12 f0       	push   $0xf012dc00
f011db18:	e8 4f 34 fe ff       	call   f0100f6c <cprintf>
f011db1d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011db20:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011db23:	e8 e1 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db28:	29 c3                	sub    %eax,%ebx
f011db2a:	89 d8                	mov    %ebx,%eax
f011db2c:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011db31:	77 17                	ja     f011db4a <test_kheap_phys_addr+0x54f>
f011db33:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db3a:	83 ec 0c             	sub    $0xc,%esp
f011db3d:	68 6c dc 12 f0       	push   $0xf012dc6c
f011db42:	e8 25 34 fe ff       	call   f0100f6c <cprintf>
f011db47:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011db4a:	e8 ba fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db4f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db52:	e8 e9 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db57:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011db5a:	83 ec 0c             	sub    $0xc,%esp
f011db5d:	68 00 38 00 00       	push   $0x3800
f011db62:	e8 4f af fe ff       	call   f0108ab6 <kmalloc>
f011db67:	83 c4 10             	add    $0x10,%esp
f011db6a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011db70:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011db76:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011db7b:	74 17                	je     f011db94 <test_kheap_phys_addr+0x599>
f011db7d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db84:	83 ec 0c             	sub    $0xc,%esp
f011db87:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011db8c:	e8 db 33 fe ff       	call   f0100f6c <cprintf>
f011db91:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011db94:	e8 a7 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db99:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011db9c:	74 17                	je     f011dbb5 <test_kheap_phys_addr+0x5ba>
f011db9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dba5:	83 ec 0c             	sub    $0xc,%esp
f011dba8:	68 00 dc 12 f0       	push   $0xf012dc00
f011dbad:	e8 ba 33 fe ff       	call   f0100f6c <cprintf>
f011dbb2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011dbb5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011dbb8:	e8 4c fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dbbd:	29 c3                	sub    %eax,%ebx
f011dbbf:	89 d8                	mov    %ebx,%eax
f011dbc1:	83 f8 03             	cmp    $0x3,%eax
f011dbc4:	77 17                	ja     f011dbdd <test_kheap_phys_addr+0x5e2>
f011dbc6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dbcd:	83 ec 0c             	sub    $0xc,%esp
f011dbd0:	68 6c dc 12 f0       	push   $0xf012dc6c
f011dbd5:	e8 92 33 fe ff       	call   f0100f6c <cprintf>
f011dbda:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc only [30%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011dbdd:	c7 45 a0 00 70 d0 f8 	movl   $0xf8d07000,-0x60(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011dbe4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 offset = 1;
f011dbeb:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011dbf2:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011dbf7:	05 00 10 00 00       	add    $0x1000,%eax
f011dbfc:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011dbff:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc02:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc05:	eb 2e                	jmp    f011dc35 <test_kheap_phys_addr+0x63a>
		{
			allPAs[i++] = kheap_physical_address(va);
f011dc07:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011dc0a:	8d 43 01             	lea    0x1(%ebx),%eax
f011dc0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011dc10:	83 ec 0c             	sub    $0xc,%esp
f011dc13:	ff 75 e8             	pushl  -0x18(%ebp)
f011dc16:	e8 e9 ae fe ff       	call   f0108b04 <kheap_physical_address>
f011dc1b:	83 c4 10             	add    $0x10,%esp
f011dc1e:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 offset = 1;
		uint32 startVA = da_limit + PAGE_SIZE;
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011dc25:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011dc28:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc2b:	01 d0                	add    %edx,%eax
f011dc2d:	05 00 10 00 00       	add    $0x1000,%eax
f011dc32:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc35:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc38:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dc3b:	72 ca                	jb     f011dc07 <test_kheap_phys_addr+0x60c>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011dc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dc40:	89 45 94             	mov    %eax,-0x6c(%ebp)
		i = 0;
f011dc43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011dc4a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc4d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc50:	e9 ce 00 00 00       	jmp    f011dd23 <test_kheap_phys_addr+0x728>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011dc55:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011dc5a:	83 ec 04             	sub    $0x4,%esp
f011dc5d:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f011dc63:	52                   	push   %edx
f011dc64:	ff 75 e8             	pushl  -0x18(%ebp)
f011dc67:	50                   	push   %eax
f011dc68:	e8 a0 a7 fe ff       	call   f010840d <get_page_table>
f011dc6d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011dc70:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011dc76:	85 c0                	test   %eax,%eax
f011dc78:	75 1e                	jne    f011dc98 <test_kheap_phys_addr+0x69d>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011dc7a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dc81:	83 ec 04             	sub    $0x4,%esp
f011dc84:	68 58 e2 12 f0       	push   $0xf012e258
f011dc89:	68 30 05 00 00       	push   $0x530
f011dc8e:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011dc93:	e8 82 26 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011dc98:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc9b:	c1 e8 0c             	shr    $0xc,%eax
f011dc9e:	25 ff 03 00 00       	and    $0x3ff,%eax
f011dca3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011dca6:	eb 62                	jmp    f011dd0a <test_kheap_phys_addr+0x70f>
			{
				if (((ptr_table[j] & 0xFFFFF000)+(va & 0x00000FFF))!= allPAs[i])
f011dca8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011dcae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dcb1:	c1 e2 02             	shl    $0x2,%edx
f011dcb4:	01 d0                	add    %edx,%eax
f011dcb6:	8b 00                	mov    (%eax),%eax
f011dcb8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011dcbd:	89 c2                	mov    %eax,%edx
f011dcbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dcc2:	25 ff 0f 00 00       	and    $0xfff,%eax
f011dcc7:	01 c2                	add    %eax,%edx
f011dcc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dccc:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011dcd3:	39 c2                	cmp    %eax,%edx
f011dcd5:	74 1d                	je     f011dcf4 <test_kheap_phys_addr+0x6f9>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011dcd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011dcdb:	74 17                	je     f011dcf4 <test_kheap_phys_addr+0x6f9>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011dcdd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dce4:	83 ec 0c             	sub    $0xc,%esp
f011dce7:	68 ca e2 12 f0       	push   $0xf012e2ca
f011dcec:	e8 7b 32 fe ff       	call   f0100f6c <cprintf>
f011dcf1:	83 c4 10             	add    $0x10,%esp
				}
				va+=PAGE_SIZE+offset;
f011dcf4:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011dcf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dcfa:	01 d0                	add    %edx,%eax
f011dcfc:	05 00 10 00 00       	add    $0x1000,%eax
f011dd01:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011dd04:	ff 45 e4             	incl   -0x1c(%ebp)
f011dd07:	ff 45 f4             	incl   -0xc(%ebp)
f011dd0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd0d:	3b 45 94             	cmp    -0x6c(%ebp),%eax
f011dd10:	7d 11                	jge    f011dd23 <test_kheap_phys_addr+0x728>
f011dd12:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f011dd19:	7f 08                	jg     f011dd23 <test_kheap_phys_addr+0x728>
f011dd1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd1e:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dd21:	72 85                	jb     f011dca8 <test_kheap_phys_addr+0x6ad>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011dd23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd26:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dd29:	0f 82 26 ff ff ff    	jb     f011dc55 <test_kheap_phys_addr+0x65a>
				}
				va+=PAGE_SIZE+offset;
			}
		}
	}
	if (correct)	eval+=30 ;
f011dd2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011dd33:	74 04                	je     f011dd39 <test_kheap_phys_addr+0x73e>
f011dd35:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011dd39:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011dd40:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
f011dd47:	e9 b0 00 00 00       	jmp    f011ddfc <test_kheap_phys_addr+0x801>
		{
			va = (uint32)ptr_allocations[i];
f011dd4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dd4f:	8b 84 85 74 fe ff ff 	mov    -0x18c(%ebp,%eax,4),%eax
f011dd56:	89 45 90             	mov    %eax,-0x70(%ebp)
			pa = kheap_physical_address(va);
f011dd59:	83 ec 0c             	sub    $0xc,%esp
f011dd5c:	ff 75 90             	pushl  -0x70(%ebp)
f011dd5f:	e8 a0 ad fe ff       	call   f0108b04 <kheap_physical_address>
f011dd64:	83 c4 10             	add    $0x10,%esp
f011dd67:	89 45 8c             	mov    %eax,-0x74(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011dd6a:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011dd6f:	83 ec 04             	sub    $0x4,%esp
f011dd72:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011dd78:	52                   	push   %edx
f011dd79:	ff 75 90             	pushl  -0x70(%ebp)
f011dd7c:	50                   	push   %eax
f011dd7d:	e8 8b a6 fe ff       	call   f010840d <get_page_table>
f011dd82:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011dd85:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011dd8b:	85 c0                	test   %eax,%eax
f011dd8d:	75 1e                	jne    f011ddad <test_kheap_phys_addr+0x7b2>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011dd8f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dd96:	83 ec 04             	sub    $0x4,%esp
f011dd99:	68 58 e2 12 f0       	push   $0xf012e258
f011dd9e:	68 4c 05 00 00       	push   $0x54c
f011dda3:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011dda8:	e8 6d 25 fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011ddad:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ddb3:	8b 55 90             	mov    -0x70(%ebp),%edx
f011ddb6:	c1 ea 0c             	shr    $0xc,%edx
f011ddb9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011ddbf:	c1 e2 02             	shl    $0x2,%edx
f011ddc2:	01 d0                	add    %edx,%eax
f011ddc4:	8b 00                	mov    (%eax),%eax
f011ddc6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011ddcb:	89 c2                	mov    %eax,%edx
f011ddcd:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ddd0:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ddd5:	01 d0                	add    %edx,%eax
f011ddd7:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011ddda:	74 1d                	je     f011ddf9 <test_kheap_phys_addr+0x7fe>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011dddc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011dde0:	74 17                	je     f011ddf9 <test_kheap_phys_addr+0x7fe>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011dde2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dde9:	83 ec 0c             	sub    $0xc,%esp
f011ddec:	68 ca e2 12 f0       	push   $0xf012e2ca
f011ddf1:	e8 76 31 fe ff       	call   f0100f6c <cprintf>
f011ddf6:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011ddf9:	ff 45 e0             	incl   -0x20(%ebp)
f011ddfc:	83 7d e0 04          	cmpl   $0x4,-0x20(%ebp)
f011de00:	0f 8e 46 ff ff ff    	jle    f011dd4c <test_kheap_phys_addr+0x751>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=10 ;
f011de06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011de0a:	74 04                	je     f011de10 <test_kheap_phys_addr+0x815>
f011de0c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011de10:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011de17:	e8 ed fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011de1c:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011de1f:	e8 1c 6a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011de24:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011de27:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011de2d:	83 ec 0c             	sub    $0xc,%esp
f011de30:	50                   	push   %eax
f011de31:	e8 9a ac fe ff       	call   f0108ad0 <kfree>
f011de36:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011de39:	e8 02 6a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011de3e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011de41:	74 17                	je     f011de5a <test_kheap_phys_addr+0x85f>
f011de43:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011de4a:	83 ec 0c             	sub    $0xc,%esp
f011de4d:	68 00 dc 12 f0       	push   $0xf012dc00
f011de52:	e8 15 31 fe ff       	call   f0100f6c <cprintf>
f011de57:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011de5a:	e8 aa fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011de5f:	89 c2                	mov    %eax,%edx
f011de61:	8b 45 88             	mov    -0x78(%ebp),%eax
f011de64:	29 c2                	sub    %eax,%edx
f011de66:	89 d0                	mov    %edx,%eax
f011de68:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011de6d:	77 17                	ja     f011de86 <test_kheap_phys_addr+0x88b>
f011de6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011de76:	83 ec 0c             	sub    $0xc,%esp
f011de79:	68 04 e0 12 f0       	push   $0xf012e004
f011de7e:	e8 e9 30 fe ff       	call   f0100f6c <cprintf>
f011de83:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011de86:	e8 7e fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011de8b:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de8e:	e8 ad 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011de93:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011de96:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011de9c:	83 ec 0c             	sub    $0xc,%esp
f011de9f:	50                   	push   %eax
f011dea0:	e8 2b ac fe ff       	call   f0108ad0 <kfree>
f011dea5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dea8:	e8 93 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dead:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011deb0:	74 17                	je     f011dec9 <test_kheap_phys_addr+0x8ce>
f011deb2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011deb9:	83 ec 0c             	sub    $0xc,%esp
f011debc:	68 00 dc 12 f0       	push   $0xf012dc00
f011dec1:	e8 a6 30 fe ff       	call   f0100f6c <cprintf>
f011dec6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011dec9:	e8 3b fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dece:	89 c2                	mov    %eax,%edx
f011ded0:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ded3:	29 c2                	sub    %eax,%edx
f011ded5:	89 d0                	mov    %edx,%eax
f011ded7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011dedc:	77 17                	ja     f011def5 <test_kheap_phys_addr+0x8fa>
f011dede:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dee5:	83 ec 0c             	sub    $0xc,%esp
f011dee8:	68 04 e0 12 f0       	push   $0xf012e004
f011deed:	e8 7a 30 fe ff       	call   f0100f6c <cprintf>
f011def2:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011def5:	e8 0f fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011defa:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011defd:	e8 3e 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df02:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011df05:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011df0b:	83 ec 0c             	sub    $0xc,%esp
f011df0e:	50                   	push   %eax
f011df0f:	e8 bc ab fe ff       	call   f0108ad0 <kfree>
f011df14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011df17:	e8 24 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df1c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011df1f:	74 17                	je     f011df38 <test_kheap_phys_addr+0x93d>
f011df21:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df28:	83 ec 0c             	sub    $0xc,%esp
f011df2b:	68 00 dc 12 f0       	push   $0xf012dc00
f011df30:	e8 37 30 fe ff       	call   f0100f6c <cprintf>
f011df35:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011df38:	e8 cc fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011df3d:	89 c2                	mov    %eax,%edx
f011df3f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011df42:	29 c2                	sub    %eax,%edx
f011df44:	89 d0                	mov    %edx,%eax
f011df46:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011df4b:	77 17                	ja     f011df64 <test_kheap_phys_addr+0x969>
f011df4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df54:	83 ec 0c             	sub    $0xc,%esp
f011df57:	68 04 e0 12 f0       	push   $0xf012e004
f011df5c:	e8 0b 30 fe ff       	call   f0100f6c <cprintf>
f011df61:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011df64:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011df6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011df72:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011df77:	05 00 10 00 00       	add    $0x1000,%eax
f011df7c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011df82:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011df88:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011df8b:	eb 25                	jmp    f011dfb2 <test_kheap_phys_addr+0x9b7>
		{
			allPAs[i++] = kheap_physical_address(va);
f011df8d:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011df90:	8d 43 01             	lea    0x1(%ebx),%eax
f011df93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011df96:	83 ec 0c             	sub    $0xc,%esp
f011df99:	ff 75 dc             	pushl  -0x24(%ebp)
f011df9c:	e8 63 ab fe ff       	call   f0108b04 <kheap_physical_address>
f011dfa1:	83 c4 10             	add    $0x10,%esp
f011dfa4:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 startVA = da_limit + PAGE_SIZE;

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011dfab:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f011dfb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dfb5:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011dfb8:	72 d3                	jb     f011df8d <test_kheap_phys_addr+0x992>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011dfba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dfbd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		i = 0;
f011dfc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011dfca:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011dfd0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011dfd3:	e9 f1 00 00 00       	jmp    f011e0c9 <test_kheap_phys_addr+0xace>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011dfd8:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011dfdd:	83 ec 04             	sub    $0x4,%esp
f011dfe0:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011dfe6:	52                   	push   %edx
f011dfe7:	ff 75 dc             	pushl  -0x24(%ebp)
f011dfea:	50                   	push   %eax
f011dfeb:	e8 1d a4 fe ff       	call   f010840d <get_page_table>
f011dff0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011dff3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011dff9:	85 c0                	test   %eax,%eax
f011dffb:	75 24                	jne    f011e021 <test_kheap_phys_addr+0xa26>
				if (correct)
f011dffd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e001:	74 1e                	je     f011e021 <test_kheap_phys_addr+0xa26>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e003:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e00a:	83 ec 04             	sub    $0x4,%esp
f011e00d:	68 58 e2 12 f0       	push   $0xf012e258
f011e012:	68 86 05 00 00       	push   $0x586
f011e017:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011e01c:	e8 f9 22 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011e021:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e024:	c1 e8 0c             	shr    $0xc,%eax
f011e027:	25 ff 03 00 00       	and    $0x3ff,%eax
f011e02c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e02f:	eb 78                	jmp    f011e0a9 <test_kheap_phys_addr+0xaae>
			{
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : va & 0x00000FFF)) != allPAs[i])
f011e031:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e037:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e03a:	c1 e2 02             	shl    $0x2,%edx
f011e03d:	01 d0                	add    %edx,%eax
f011e03f:	8b 00                	mov    (%eax),%eax
f011e041:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e046:	89 c1                	mov    %eax,%ecx
f011e048:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e04e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e051:	c1 e2 02             	shl    $0x2,%edx
f011e054:	01 d0                	add    %edx,%eax
f011e056:	8b 00                	mov    (%eax),%eax
f011e058:	83 e0 01             	and    $0x1,%eax
f011e05b:	85 c0                	test   %eax,%eax
f011e05d:	74 0a                	je     f011e069 <test_kheap_phys_addr+0xa6e>
f011e05f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e062:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e067:	eb 05                	jmp    f011e06e <test_kheap_phys_addr+0xa73>
f011e069:	b8 00 00 00 00       	mov    $0x0,%eax
f011e06e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011e071:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e074:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011e07b:	39 c2                	cmp    %eax,%edx
f011e07d:	74 1d                	je     f011e09c <test_kheap_phys_addr+0xaa1>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011e07f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e083:	74 17                	je     f011e09c <test_kheap_phys_addr+0xaa1>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e085:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e08c:	83 ec 0c             	sub    $0xc,%esp
f011e08f:	68 ca e2 12 f0       	push   $0xf012e2ca
f011e094:	e8 d3 2e fe ff       	call   f0100f6c <cprintf>
f011e099:	83 c4 10             	add    $0x10,%esp
				}
				va += PAGE_SIZE;
f011e09c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011e0a3:	ff 45 d8             	incl   -0x28(%ebp)
f011e0a6:	ff 45 f4             	incl   -0xc(%ebp)
f011e0a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e0ac:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f011e0b2:	7d 15                	jge    f011e0c9 <test_kheap_phys_addr+0xace>
f011e0b4:	81 7d d8 ff 03 00 00 	cmpl   $0x3ff,-0x28(%ebp)
f011e0bb:	7f 0c                	jg     f011e0c9 <test_kheap_phys_addr+0xace>
f011e0bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e0c0:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e0c3:	0f 82 68 ff ff ff    	jb     f011e031 <test_kheap_phys_addr+0xa36>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011e0c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e0cc:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e0cf:	0f 82 03 ff ff ff    	jb     f011dfd8 <test_kheap_phys_addr+0x9dd>
				}
				va += PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011e0d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e0d9:	74 04                	je     f011e0df <test_kheap_phys_addr+0xae4>
f011e0db:	83 45 f0 14          	addl   $0x14,-0x10(%ebp)

	correct = 1 ;
f011e0df:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011e0e6:	c7 45 d4 00 00 00 f6 	movl   $0xf6000000,-0x2c(%ebp)
f011e0ed:	e9 af 00 00 00       	jmp    f011e1a1 <test_kheap_phys_addr+0xba6>
		{
			pa = kheap_physical_address(va);
f011e0f2:	83 ec 0c             	sub    $0xc,%esp
f011e0f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e0f8:	e8 07 aa fe ff       	call   f0108b04 <kheap_physical_address>
f011e0fd:	83 c4 10             	add    $0x10,%esp
f011e100:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e106:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011e10b:	83 ec 04             	sub    $0x4,%esp
f011e10e:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011e114:	52                   	push   %edx
f011e115:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e118:	50                   	push   %eax
f011e119:	e8 ef a2 fe ff       	call   f010840d <get_page_table>
f011e11e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e121:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e127:	85 c0                	test   %eax,%eax
f011e129:	75 24                	jne    f011e14f <test_kheap_phys_addr+0xb54>
				if (correct)
f011e12b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e12f:	74 1e                	je     f011e14f <test_kheap_phys_addr+0xb54>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e131:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e138:	83 ec 04             	sub    $0x4,%esp
f011e13b:	68 58 e2 12 f0       	push   $0xf012e258
f011e140:	68 a1 05 00 00       	push   $0x5a1
f011e145:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011e14a:	e8 cb 21 fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011e14f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e155:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e158:	c1 ea 0c             	shr    $0xc,%edx
f011e15b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011e161:	c1 e2 02             	shl    $0x2,%edx
f011e164:	01 d0                	add    %edx,%eax
f011e166:	8b 00                	mov    (%eax),%eax
f011e168:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e16d:	89 c2                	mov    %eax,%edx
f011e16f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e172:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e177:	01 d0                	add    %edx,%eax
f011e179:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f011e17f:	74 1d                	je     f011e19e <test_kheap_phys_addr+0xba3>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011e181:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e185:	74 17                	je     f011e19e <test_kheap_phys_addr+0xba3>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e187:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e18e:	83 ec 0c             	sub    $0xc,%esp
f011e191:	68 ca e2 12 f0       	push   $0xf012e2ca
f011e196:	e8 d1 2d fe ff       	call   f0100f6c <cprintf>
f011e19b:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011e19e:	ff 45 d4             	incl   -0x2c(%ebp)
f011e1a1:	83 ec 0c             	sub    $0xc,%esp
f011e1a4:	6a 00                	push   $0x0
f011e1a6:	e8 01 a9 fe ff       	call   f0108aac <sbrk>
f011e1ab:	83 c4 10             	add    $0x10,%esp
f011e1ae:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011e1b1:	0f 87 3b ff ff ff    	ja     f011e0f2 <test_kheap_phys_addr+0xaf7>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=30 ;
f011e1b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e1bb:	74 04                	je     f011e1c1 <test_kheap_phys_addr+0xbc6>
f011e1bd:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011e1c1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f011e1c8:	c7 85 70 ff ff ff 00 	movl   $0xf9001000,-0x90(%ebp)
f011e1cf:	10 00 f9 
		i = 0;
f011e1d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011e1d9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e1df:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e1e2:	eb 0a                	jmp    f011e1ee <test_kheap_phys_addr+0xbf3>
		{
			i++;
f011e1e4:	ff 45 f4             	incl   -0xc(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011e1e7:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011e1ee:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f011e1f5:	76 ed                	jbe    f011e1e4 <test_kheap_phys_addr+0xbe9>
		{
			i++;
		}
		int ii = i ;
f011e1f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e1fa:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
		i = 0;
f011e200:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011e207:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e20d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e210:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011e217:	e9 13 01 00 00       	jmp    f011e32f <test_kheap_phys_addr+0xd34>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f011e21c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011e21f:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011e224:	83 ec 04             	sub    $0x4,%esp
f011e227:	8d 8d 60 fe ff ff    	lea    -0x1a0(%ebp),%ecx
f011e22d:	51                   	push   %ecx
f011e22e:	52                   	push   %edx
f011e22f:	50                   	push   %eax
f011e230:	e8 d8 a1 fe ff       	call   f010840d <get_page_table>
f011e235:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e238:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e23e:	85 c0                	test   %eax,%eax
f011e240:	75 24                	jne    f011e266 <test_kheap_phys_addr+0xc6b>
			{
				if (correct)
f011e242:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e246:	74 1e                	je     f011e266 <test_kheap_phys_addr+0xc6b>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e248:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e24f:	83 ec 04             	sub    $0x4,%esp
f011e252:	68 58 e2 12 f0       	push   $0xf012e258
f011e257:	68 c2 05 00 00       	push   $0x5c2
f011e25c:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011e261:	e8 b4 20 fe ff       	call   f010031a <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011e266:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011e26d:	e9 9a 00 00 00       	jmp    f011e30c <test_kheap_phys_addr+0xd11>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f011e272:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e275:	c1 e0 0c             	shl    $0xc,%eax
f011e278:	89 c2                	mov    %eax,%edx
f011e27a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e280:	01 d0                	add    %edx,%eax
f011e282:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f011e288:	83 ec 0c             	sub    $0xc,%esp
f011e28b:	ff b5 68 ff ff ff    	pushl  -0x98(%ebp)
f011e291:	e8 6e a8 fe ff       	call   f0108b04 <kheap_physical_address>
f011e296:	83 c4 10             	add    $0x10,%esp
f011e299:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : page_va & 0x00000FFF)) != supposed_kheap_phys_add)
f011e29f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e2a5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011e2a8:	c1 e2 02             	shl    $0x2,%edx
f011e2ab:	01 d0                	add    %edx,%eax
f011e2ad:	8b 00                	mov    (%eax),%eax
f011e2af:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e2b4:	89 c1                	mov    %eax,%ecx
f011e2b6:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e2bc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011e2bf:	c1 e2 02             	shl    $0x2,%edx
f011e2c2:	01 d0                	add    %edx,%eax
f011e2c4:	8b 00                	mov    (%eax),%eax
f011e2c6:	83 e0 01             	and    $0x1,%eax
f011e2c9:	85 c0                	test   %eax,%eax
f011e2cb:	74 0d                	je     f011e2da <test_kheap_phys_addr+0xcdf>
f011e2cd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e2d3:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e2d8:	eb 05                	jmp    f011e2df <test_kheap_phys_addr+0xce4>
f011e2da:	b8 00 00 00 00       	mov    $0x0,%eax
f011e2df:	01 c8                	add    %ecx,%eax
f011e2e1:	3b 85 64 ff ff ff    	cmp    -0x9c(%ebp),%eax
f011e2e7:	74 1d                	je     f011e306 <test_kheap_phys_addr+0xd0b>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011e2e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e2ed:	74 17                	je     f011e306 <test_kheap_phys_addr+0xd0b>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e2ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e2f6:	83 ec 0c             	sub    $0xc,%esp
f011e2f9:	68 ca e2 12 f0       	push   $0xf012e2ca
f011e2fe:	e8 69 2c fe ff       	call   f0100f6c <cprintf>
f011e303:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
			{
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011e306:	ff 45 cc             	incl   -0x34(%ebp)
f011e309:	ff 45 f4             	incl   -0xc(%ebp)
f011e30c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e30f:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f011e315:	7d 0d                	jge    f011e324 <test_kheap_phys_addr+0xd29>
f011e317:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011e31e:	0f 8e 4e ff ff ff    	jle    f011e272 <test_kheap_phys_addr+0xc77>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011e324:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f011e32b:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011e32f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011e333:	0f 88 e3 fe ff ff    	js     f011e21c <test_kheap_phys_addr+0xc21>
f011e339:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011e33d:	7f 0d                	jg     f011e34c <test_kheap_phys_addr+0xd51>
f011e33f:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f011e346:	0f 86 d0 fe ff ff    	jbe    f011e21c <test_kheap_phys_addr+0xc21>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011e34c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e350:	74 04                	je     f011e356 <test_kheap_phys_addr+0xd5b>
f011e352:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	cprintf("\ntest kheap_physical_address completed. Eval = %d%\n", eval);
f011e356:	83 ec 08             	sub    $0x8,%esp
f011e359:	ff 75 f0             	pushl  -0x10(%ebp)
f011e35c:	68 e8 e2 12 f0       	push   $0xf012e2e8
f011e361:	e8 06 2c fe ff       	call   f0100f6c <cprintf>
f011e366:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e369:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011e36e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e371:	5b                   	pop    %ebx
f011e372:	5f                   	pop    %edi
f011e373:	5d                   	pop    %ebp
f011e374:	c3                   	ret    

f011e375 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f011e375:	55                   	push   %ebp
f011e376:	89 e5                	mov    %esp,%ebp
f011e378:	57                   	push   %edi
f011e379:	56                   	push   %esi
f011e37a:	53                   	push   %ebx
f011e37b:	81 ec 9c 01 00 00    	sub    $0x19c,%esp
f011e381:	89 e0                	mov    %esp,%eax
f011e383:	89 c6                	mov    %eax,%esi
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011e385:	83 ec 0c             	sub    $0xc,%esp
f011e388:	68 40 db 12 f0       	push   $0xf012db40
f011e38d:	e8 da 2b fe ff       	call   f0100f6c <cprintf>
f011e392:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e395:	83 ec 0c             	sub    $0xc,%esp
f011e398:	68 70 db 12 f0       	push   $0xf012db70
f011e39d:	e8 ca 2b fe ff       	call   f0100f6c <cprintf>
f011e3a2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e3a5:	83 ec 0c             	sub    $0xc,%esp
f011e3a8:	68 40 db 12 f0       	push   $0xf012db40
f011e3ad:	e8 ba 2b fe ff       	call   f0100f6c <cprintf>
f011e3b2:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011e3b5:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
	char maxByte = 0x7F;
f011e3b9:	c6 45 c6 7f          	movb   $0x7f,-0x3a(%ebp)
	short minShort = 1<<15 ;
f011e3bd:	66 c7 45 c4 00 80    	movw   $0x8000,-0x3c(%ebp)
	short maxShort = 0x7FFF;
f011e3c3:	66 c7 45 c2 ff 7f    	movw   $0x7fff,-0x3e(%ebp)
	int minInt = 1<<31 ;
f011e3c9:	c7 45 bc 00 00 00 80 	movl   $0x80000000,-0x44(%ebp)
	int maxInt = 0x7FFFFFFF;
f011e3d0:	c7 45 b8 ff ff ff 7f 	movl   $0x7fffffff,-0x48(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011e3d7:	e8 2d f6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e3dc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011e3df:	8d 95 0c ff ff ff    	lea    -0xf4(%ebp),%edx
f011e3e5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e3ea:	b8 00 00 00 00       	mov    $0x0,%eax
f011e3ef:	89 d7                	mov    %edx,%edi
f011e3f1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011e3f3:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011e3f9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e3fe:	b8 00 00 00 00       	mov    $0x0,%eax
f011e403:	89 d7                	mov    %edx,%edi
f011e405:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011e407:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011e40e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011e415:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011e41b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e420:	b8 00 00 00 00       	mov    $0x0,%eax
f011e425:	89 d7                	mov    %edx,%edi
f011e427:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e429:	e8 db f5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e42e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e431:	e8 0a 64 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e436:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e439:	83 ec 0c             	sub    $0xc,%esp
f011e43c:	68 00 fc 1f 00       	push   $0x1ffc00
f011e441:	e8 70 a6 fe ff       	call   f0108ab6 <kmalloc>
f011e446:	83 c4 10             	add    $0x10,%esp
f011e449:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e44f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011e455:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011e45a:	74 17                	je     f011e473 <test_kheap_virt_addr+0xfe>
f011e45c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e463:	83 ec 0c             	sub    $0xc,%esp
f011e466:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011e46b:	e8 fc 2a fe ff       	call   f0100f6c <cprintf>
f011e470:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e473:	e8 c8 63 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e478:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e47b:	74 17                	je     f011e494 <test_kheap_virt_addr+0x11f>
f011e47d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e484:	83 ec 0c             	sub    $0xc,%esp
f011e487:	68 00 dc 12 f0       	push   $0xf012dc00
f011e48c:	e8 db 2a fe ff       	call   f0100f6c <cprintf>
f011e491:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e494:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e497:	e8 6d f5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e49c:	29 c3                	sub    %eax,%ebx
f011e49e:	89 d8                	mov    %ebx,%eax
f011e4a0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e4a5:	77 17                	ja     f011e4be <test_kheap_virt_addr+0x149>
f011e4a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e4ae:	83 ec 0c             	sub    $0xc,%esp
f011e4b1:	68 6c dc 12 f0       	push   $0xf012dc6c
f011e4b6:	e8 b1 2a fe ff       	call   f0100f6c <cprintf>
f011e4bb:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e4be:	e8 46 f5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e4c3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4c6:	e8 75 63 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e4cb:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e4ce:	83 ec 0c             	sub    $0xc,%esp
f011e4d1:	68 00 fc 1f 00       	push   $0x1ffc00
f011e4d6:	e8 db a5 fe ff       	call   f0108ab6 <kmalloc>
f011e4db:	83 c4 10             	add    $0x10,%esp
f011e4de:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e4e4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011e4ea:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011e4ef:	74 17                	je     f011e508 <test_kheap_virt_addr+0x193>
f011e4f1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e4f8:	83 ec 0c             	sub    $0xc,%esp
f011e4fb:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011e500:	e8 67 2a fe ff       	call   f0100f6c <cprintf>
f011e505:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e508:	e8 33 63 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e50d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e510:	74 17                	je     f011e529 <test_kheap_virt_addr+0x1b4>
f011e512:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e519:	83 ec 0c             	sub    $0xc,%esp
f011e51c:	68 00 dc 12 f0       	push   $0xf012dc00
f011e521:	e8 46 2a fe ff       	call   f0100f6c <cprintf>
f011e526:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e529:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e52c:	e8 d8 f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e531:	29 c3                	sub    %eax,%ebx
f011e533:	89 d8                	mov    %ebx,%eax
f011e535:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e53a:	77 17                	ja     f011e553 <test_kheap_virt_addr+0x1de>
f011e53c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e543:	83 ec 0c             	sub    $0xc,%esp
f011e546:	68 6c dc 12 f0       	push   $0xf012dc6c
f011e54b:	e8 1c 2a fe ff       	call   f0100f6c <cprintf>
f011e550:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011e553:	e8 b1 f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e558:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e55b:	e8 e0 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e560:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011e563:	83 ec 0c             	sub    $0xc,%esp
f011e566:	68 00 04 00 00       	push   $0x400
f011e56b:	e8 46 a5 fe ff       	call   f0108ab6 <kmalloc>
f011e570:	83 c4 10             	add    $0x10,%esp
f011e573:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011e579:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e57f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e584:	76 28                	jbe    f011e5ae <test_kheap_virt_addr+0x239>
f011e586:	8b 9d 74 fe ff ff    	mov    -0x18c(%ebp),%ebx
f011e58c:	83 ec 0c             	sub    $0xc,%esp
f011e58f:	6a 00                	push   $0x0
f011e591:	e8 16 a5 fe ff       	call   f0108aac <sbrk>
f011e596:	83 c4 10             	add    $0x10,%esp
f011e599:	39 c3                	cmp    %eax,%ebx
f011e59b:	73 11                	jae    f011e5ae <test_kheap_virt_addr+0x239>
f011e59d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e5a3:	89 c2                	mov    %eax,%edx
f011e5a5:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011e5aa:	39 c2                	cmp    %eax,%edx
f011e5ac:	72 17                	jb     f011e5c5 <test_kheap_virt_addr+0x250>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e5ae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e5b5:	83 ec 0c             	sub    $0xc,%esp
f011e5b8:	68 00 dd 12 f0       	push   $0xf012dd00
f011e5bd:	e8 aa 29 fe ff       	call   f0100f6c <cprintf>
f011e5c2:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e5c5:	e8 76 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e5ca:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e5cd:	74 17                	je     f011e5e6 <test_kheap_virt_addr+0x271>
f011e5cf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e5d6:	83 ec 0c             	sub    $0xc,%esp
f011e5d9:	68 00 dc 12 f0       	push   $0xf012dc00
f011e5de:	e8 89 29 fe ff       	call   f0100f6c <cprintf>
f011e5e3:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011e5e6:	e8 1e f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e5eb:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e5ee:	e8 4d 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e5f3:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011e5f6:	83 ec 0c             	sub    $0xc,%esp
f011e5f9:	68 00 08 00 00       	push   $0x800
f011e5fe:	e8 b3 a4 fe ff       	call   f0108ab6 <kmalloc>
f011e603:	83 c4 10             	add    $0x10,%esp
f011e606:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011e60c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e612:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e617:	76 28                	jbe    f011e641 <test_kheap_virt_addr+0x2cc>
f011e619:	8b 9d 78 fe ff ff    	mov    -0x188(%ebp),%ebx
f011e61f:	83 ec 0c             	sub    $0xc,%esp
f011e622:	6a 00                	push   $0x0
f011e624:	e8 83 a4 fe ff       	call   f0108aac <sbrk>
f011e629:	83 c4 10             	add    $0x10,%esp
f011e62c:	39 c3                	cmp    %eax,%ebx
f011e62e:	73 11                	jae    f011e641 <test_kheap_virt_addr+0x2cc>
f011e630:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e636:	89 c2                	mov    %eax,%edx
f011e638:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011e63d:	39 c2                	cmp    %eax,%edx
f011e63f:	72 17                	jb     f011e658 <test_kheap_virt_addr+0x2e3>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e641:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e648:	83 ec 0c             	sub    $0xc,%esp
f011e64b:	68 00 dd 12 f0       	push   $0xf012dd00
f011e650:	e8 17 29 fe ff       	call   f0100f6c <cprintf>
f011e655:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e658:	e8 e3 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e65d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e660:	74 17                	je     f011e679 <test_kheap_virt_addr+0x304>
f011e662:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e669:	83 ec 0c             	sub    $0xc,%esp
f011e66c:	68 00 dc 12 f0       	push   $0xf012dc00
f011e671:	e8 f6 28 fe ff       	call   f0100f6c <cprintf>
f011e676:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011e679:	e8 8b f3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e67e:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e681:	e8 ba 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e686:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011e689:	83 ec 0c             	sub    $0xc,%esp
f011e68c:	68 00 06 00 00       	push   $0x600
f011e691:	e8 20 a4 fe ff       	call   f0108ab6 <kmalloc>
f011e696:	83 c4 10             	add    $0x10,%esp
f011e699:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011e69f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e6a5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e6aa:	76 28                	jbe    f011e6d4 <test_kheap_virt_addr+0x35f>
f011e6ac:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011e6b2:	83 ec 0c             	sub    $0xc,%esp
f011e6b5:	6a 00                	push   $0x0
f011e6b7:	e8 f0 a3 fe ff       	call   f0108aac <sbrk>
f011e6bc:	83 c4 10             	add    $0x10,%esp
f011e6bf:	39 c3                	cmp    %eax,%ebx
f011e6c1:	73 11                	jae    f011e6d4 <test_kheap_virt_addr+0x35f>
f011e6c3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e6c9:	89 c2                	mov    %eax,%edx
f011e6cb:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011e6d0:	39 c2                	cmp    %eax,%edx
f011e6d2:	72 17                	jb     f011e6eb <test_kheap_virt_addr+0x376>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e6d4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e6db:	83 ec 0c             	sub    $0xc,%esp
f011e6de:	68 00 dd 12 f0       	push   $0xf012dd00
f011e6e3:	e8 84 28 fe ff       	call   f0100f6c <cprintf>
f011e6e8:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e6eb:	e8 50 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e6f0:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e6f3:	74 17                	je     f011e70c <test_kheap_virt_addr+0x397>
f011e6f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e6fc:	83 ec 0c             	sub    $0xc,%esp
f011e6ff:	68 00 dc 12 f0       	push   $0xf012dc00
f011e704:	e8 63 28 fe ff       	call   f0100f6c <cprintf>
f011e709:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e70c:	e8 f8 f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e711:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e714:	e8 27 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e719:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011e71c:	83 ec 0c             	sub    $0xc,%esp
f011e71f:	68 00 1c 00 00       	push   $0x1c00
f011e724:	e8 8d a3 fe ff       	call   f0108ab6 <kmalloc>
f011e729:	83 c4 10             	add    $0x10,%esp
f011e72c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e732:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011e738:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011e73d:	74 17                	je     f011e756 <test_kheap_virt_addr+0x3e1>
f011e73f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e746:	83 ec 0c             	sub    $0xc,%esp
f011e749:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011e74e:	e8 19 28 fe ff       	call   f0100f6c <cprintf>
f011e753:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e756:	e8 e5 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e75b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e75e:	74 17                	je     f011e777 <test_kheap_virt_addr+0x402>
f011e760:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e767:	83 ec 0c             	sub    $0xc,%esp
f011e76a:	68 00 dc 12 f0       	push   $0xf012dc00
f011e76f:	e8 f8 27 fe ff       	call   f0100f6c <cprintf>
f011e774:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e777:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e77a:	e8 8a f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e77f:	29 c3                	sub    %eax,%ebx
f011e781:	89 d8                	mov    %ebx,%eax
f011e783:	83 f8 01             	cmp    $0x1,%eax
f011e786:	77 17                	ja     f011e79f <test_kheap_virt_addr+0x42a>
f011e788:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e78f:	83 ec 0c             	sub    $0xc,%esp
f011e792:	68 6c dc 12 f0       	push   $0xf012dc6c
f011e797:	e8 d0 27 fe ff       	call   f0100f6c <cprintf>
f011e79c:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e79f:	e8 65 f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e7a4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7a7:	e8 94 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e7ac:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011e7af:	83 ec 0c             	sub    $0xc,%esp
f011e7b2:	68 00 fc 2f 00       	push   $0x2ffc00
f011e7b7:	e8 fa a2 fe ff       	call   f0108ab6 <kmalloc>
f011e7bc:	83 c4 10             	add    $0x10,%esp
f011e7bf:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e7c5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e7cb:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011e7d0:	74 17                	je     f011e7e9 <test_kheap_virt_addr+0x474>
f011e7d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e7d9:	83 ec 0c             	sub    $0xc,%esp
f011e7dc:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011e7e1:	e8 86 27 fe ff       	call   f0100f6c <cprintf>
f011e7e6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e7e9:	e8 52 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e7ee:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e7f1:	74 17                	je     f011e80a <test_kheap_virt_addr+0x495>
f011e7f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e7fa:	83 ec 0c             	sub    $0xc,%esp
f011e7fd:	68 00 dc 12 f0       	push   $0xf012dc00
f011e802:	e8 65 27 fe ff       	call   f0100f6c <cprintf>
f011e807:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e80a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e80d:	e8 f7 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e812:	29 c3                	sub    %eax,%ebx
f011e814:	89 d8                	mov    %ebx,%eax
f011e816:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011e81b:	77 17                	ja     f011e834 <test_kheap_virt_addr+0x4bf>
f011e81d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e824:	83 ec 0c             	sub    $0xc,%esp
f011e827:	68 6c dc 12 f0       	push   $0xf012dc6c
f011e82c:	e8 3b 27 fe ff       	call   f0100f6c <cprintf>
f011e831:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011e834:	e8 d0 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e839:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e83c:	e8 ff 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e841:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011e844:	83 ec 0c             	sub    $0xc,%esp
f011e847:	68 00 fc 5f 00       	push   $0x5ffc00
f011e84c:	e8 65 a2 fe ff       	call   f0108ab6 <kmalloc>
f011e851:	83 c4 10             	add    $0x10,%esp
f011e854:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e85a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011e860:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011e865:	74 17                	je     f011e87e <test_kheap_virt_addr+0x509>
f011e867:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e86e:	83 ec 0c             	sub    $0xc,%esp
f011e871:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011e876:	e8 f1 26 fe ff       	call   f0100f6c <cprintf>
f011e87b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e87e:	e8 bd 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e883:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e886:	74 17                	je     f011e89f <test_kheap_virt_addr+0x52a>
f011e888:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e88f:	83 ec 0c             	sub    $0xc,%esp
f011e892:	68 00 dc 12 f0       	push   $0xf012dc00
f011e897:	e8 d0 26 fe ff       	call   f0100f6c <cprintf>
f011e89c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e89f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e8a2:	e8 62 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e8a7:	29 c3                	sub    %eax,%ebx
f011e8a9:	89 d8                	mov    %ebx,%eax
f011e8ab:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011e8b0:	77 17                	ja     f011e8c9 <test_kheap_virt_addr+0x554>
f011e8b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e8b9:	83 ec 0c             	sub    $0xc,%esp
f011e8bc:	68 6c dc 12 f0       	push   $0xf012dc6c
f011e8c1:	e8 a6 26 fe ff       	call   f0100f6c <cprintf>
f011e8c6:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011e8c9:	e8 3b f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e8ce:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e8d1:	e8 6a 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e8d6:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011e8d9:	83 ec 0c             	sub    $0xc,%esp
f011e8dc:	68 00 38 00 00       	push   $0x3800
f011e8e1:	e8 d0 a1 fe ff       	call   f0108ab6 <kmalloc>
f011e8e6:	83 c4 10             	add    $0x10,%esp
f011e8e9:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e8ef:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e8f5:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011e8fa:	74 17                	je     f011e913 <test_kheap_virt_addr+0x59e>
f011e8fc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e903:	83 ec 0c             	sub    $0xc,%esp
f011e906:	68 b0 dc 12 f0       	push   $0xf012dcb0
f011e90b:	e8 5c 26 fe ff       	call   f0100f6c <cprintf>
f011e910:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e913:	e8 28 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e918:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e91b:	74 17                	je     f011e934 <test_kheap_virt_addr+0x5bf>
f011e91d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e924:	83 ec 0c             	sub    $0xc,%esp
f011e927:	68 00 dc 12 f0       	push   $0xf012dc00
f011e92c:	e8 3b 26 fe ff       	call   f0100f6c <cprintf>
f011e931:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e934:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e937:	e8 cd f0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e93c:	29 c3                	sub    %eax,%ebx
f011e93e:	89 d8                	mov    %ebx,%eax
f011e940:	83 f8 03             	cmp    $0x3,%eax
f011e943:	77 17                	ja     f011e95c <test_kheap_virt_addr+0x5e7>
f011e945:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e94c:	83 ec 0c             	sub    $0xc,%esp
f011e94f:	68 6c dc 12 f0       	push   $0xf012dc6c
f011e954:	e8 13 26 fe ff       	call   f0100f6c <cprintf>
f011e959:	83 c4 10             	add    $0x10,%esp
	}

	uint32 allocatedSpace = (13*Mega + 24*kilo + (INITIAL_KHEAP_ALLOCATIONS));
f011e95c:	c7 45 a8 00 60 d0 00 	movl   $0xd06000,-0x58(%ebp)
	uint32 allPAs[allocatedSpace/PAGE_SIZE] ;
f011e963:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e966:	c1 e8 0c             	shr    $0xc,%eax
f011e969:	89 c2                	mov    %eax,%edx
f011e96b:	4a                   	dec    %edx
f011e96c:	89 55 a4             	mov    %edx,-0x5c(%ebp)
f011e96f:	c1 e0 02             	shl    $0x2,%eax
f011e972:	8d 50 03             	lea    0x3(%eax),%edx
f011e975:	b8 10 00 00 00       	mov    $0x10,%eax
f011e97a:	48                   	dec    %eax
f011e97b:	01 d0                	add    %edx,%eax
f011e97d:	bf 10 00 00 00       	mov    $0x10,%edi
f011e982:	ba 00 00 00 00       	mov    $0x0,%edx
f011e987:	f7 f7                	div    %edi
f011e989:	6b c0 10             	imul   $0x10,%eax,%eax
f011e98c:	29 c4                	sub    %eax,%esp
f011e98e:	89 e0                	mov    %esp,%eax
f011e990:	83 c0 03             	add    $0x3,%eax
f011e993:	c1 e8 02             	shr    $0x2,%eax
f011e996:	c1 e0 02             	shl    $0x2,%eax
f011e999:	89 45 a0             	mov    %eax,-0x60(%ebp)
	int numOfFrames = allocatedSpace/PAGE_SIZE ;
f011e99c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e99f:	c1 e8 0c             	shr    $0xc,%eax
f011e9a2:	89 45 9c             	mov    %eax,-0x64(%ebp)

	//test kheap_virtual_address after kmalloc only [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011e9a5:	c7 45 98 00 70 d0 f8 	movl   $0xf8d07000,-0x68(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011e9ac:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011e9b1:	05 00 10 00 00       	add    $0x1000,%eax
f011e9b6:	89 45 94             	mov    %eax,-0x6c(%ebp)
		int i = 0;
f011e9b9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011e9c0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e9c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011e9c6:	e9 2d 01 00 00       	jmp    f011eaf8 <test_kheap_virt_addr+0x783>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e9cb:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011e9d0:	83 ec 04             	sub    $0x4,%esp
f011e9d3:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011e9d9:	52                   	push   %edx
f011e9da:	ff 75 dc             	pushl  -0x24(%ebp)
f011e9dd:	50                   	push   %eax
f011e9de:	e8 2a 9a fe ff       	call   f010840d <get_page_table>
f011e9e3:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e9e6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e9ec:	85 c0                	test   %eax,%eax
f011e9ee:	75 1e                	jne    f011ea0e <test_kheap_virt_addr+0x699>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e9f0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e9f7:	83 ec 04             	sub    $0x4,%esp
f011e9fa:	68 58 e2 12 f0       	push   $0xf012e258
f011e9ff:	68 5e 06 00 00       	push   $0x65e
f011ea04:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011ea09:	e8 0c 19 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011ea0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ea11:	c1 e8 0c             	shr    $0xc,%eax
f011ea14:	25 ff 03 00 00       	and    $0x3ff,%eax
f011ea19:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011ea1c:	e9 ba 00 00 00       	jmp    f011eadb <test_kheap_virt_addr+0x766>
			{
				uint32 offset = j;
f011ea21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ea24:	89 45 90             	mov    %eax,-0x70(%ebp)
				allPAs[i] = (ptr_table[j] & 0xFFFFF000) + offset;
f011ea27:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ea2d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ea30:	c1 e2 02             	shl    $0x2,%edx
f011ea33:	01 d0                	add    %edx,%eax
f011ea35:	8b 00                	mov    (%eax),%eax
f011ea37:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011ea3c:	89 c2                	mov    %eax,%edx
f011ea3e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ea41:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ea44:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea47:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ea4a:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ea4d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea50:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ea53:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ea56:	83 ec 0c             	sub    $0xc,%esp
f011ea59:	50                   	push   %eax
f011ea5a:	e8 8b a0 fe ff       	call   f0108aea <kheap_virtual_address>
f011ea5f:	83 c4 10             	add    $0x10,%esp
f011ea62:	89 45 8c             	mov    %eax,-0x74(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va+offset))
f011ea65:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ea68:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ea6b:	01 d0                	add    %edx,%eax
f011ea6d:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011ea70:	74 5c                	je     f011eace <test_kheap_virt_addr+0x759>
				{
					if (correct)
f011ea72:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ea76:	74 56                	je     f011eace <test_kheap_virt_addr+0x759>
					{
						cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + offset /*+ j*PAGE_SIZE*/, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f011ea78:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea7b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ea7e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ea81:	8b 95 68 fe ff ff    	mov    -0x198(%ebp),%edx
f011ea87:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f011ea8a:	c1 e1 02             	shl    $0x2,%ecx
f011ea8d:	01 ca                	add    %ecx,%edx
f011ea8f:	8b 12                	mov    (%edx),%edx
f011ea91:	89 d1                	mov    %edx,%ecx
f011ea93:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f011ea99:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011ea9c:	8b 55 90             	mov    -0x70(%ebp),%edx
f011ea9f:	01 da                	add    %ebx,%edx
f011eaa1:	83 ec 0c             	sub    $0xc,%esp
f011eaa4:	50                   	push   %eax
f011eaa5:	51                   	push   %ecx
f011eaa6:	52                   	push   %edx
f011eaa7:	ff 75 8c             	pushl  -0x74(%ebp)
f011eaaa:	68 1c e3 12 f0       	push   $0xf012e31c
f011eaaf:	e8 b8 24 fe ff       	call   f0100f6c <cprintf>
f011eab4:	83 c4 20             	add    $0x20,%esp
						correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011eab7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eabe:	83 ec 0c             	sub    $0xc,%esp
f011eac1:	68 5f e3 12 f0       	push   $0xf012e35f
f011eac6:	e8 a1 24 fe ff       	call   f0100f6c <cprintf>
f011eacb:	83 c4 10             	add    $0x10,%esp
					}
				}
				va+=PAGE_SIZE;
f011eace:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011ead5:	ff 45 d4             	incl   -0x2c(%ebp)
f011ead8:	ff 45 d8             	incl   -0x28(%ebp)
f011eadb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eade:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011eae1:	7d 15                	jge    f011eaf8 <test_kheap_virt_addr+0x783>
f011eae3:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f011eaea:	7f 0c                	jg     f011eaf8 <test_kheap_virt_addr+0x783>
f011eaec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011eaef:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011eaf2:	0f 82 29 ff ff ff    	jb     f011ea21 <test_kheap_virt_addr+0x6ac>
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011eaf8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011eafb:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011eafe:	0f 82 c7 fe ff ff    	jb     f011e9cb <test_kheap_virt_addr+0x656>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011eb04:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011eb08:	74 04                	je     f011eb0e <test_kheap_virt_addr+0x799>
f011eb0a:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011eb0e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011eb15:	e8 ef ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011eb1a:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011eb1d:	e8 1e 5d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011eb22:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011eb25:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011eb2b:	83 ec 0c             	sub    $0xc,%esp
f011eb2e:	50                   	push   %eax
f011eb2f:	e8 9c 9f fe ff       	call   f0108ad0 <kfree>
f011eb34:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011eb37:	e8 04 5d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011eb3c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011eb3f:	74 17                	je     f011eb58 <test_kheap_virt_addr+0x7e3>
f011eb41:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eb48:	83 ec 0c             	sub    $0xc,%esp
f011eb4b:	68 00 dc 12 f0       	push   $0xf012dc00
f011eb50:	e8 17 24 fe ff       	call   f0100f6c <cprintf>
f011eb55:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011eb58:	e8 ac ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011eb5d:	89 c2                	mov    %eax,%edx
f011eb5f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011eb62:	29 c2                	sub    %eax,%edx
f011eb64:	89 d0                	mov    %edx,%eax
f011eb66:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011eb6b:	77 17                	ja     f011eb84 <test_kheap_virt_addr+0x80f>
f011eb6d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eb74:	83 ec 0c             	sub    $0xc,%esp
f011eb77:	68 04 e0 12 f0       	push   $0xf012e004
f011eb7c:	e8 eb 23 fe ff       	call   f0100f6c <cprintf>
f011eb81:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011eb84:	e8 80 ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011eb89:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eb8c:	e8 af 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011eb91:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011eb94:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011eb9a:	83 ec 0c             	sub    $0xc,%esp
f011eb9d:	50                   	push   %eax
f011eb9e:	e8 2d 9f fe ff       	call   f0108ad0 <kfree>
f011eba3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011eba6:	e8 95 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ebab:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ebae:	74 17                	je     f011ebc7 <test_kheap_virt_addr+0x852>
f011ebb0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ebb7:	83 ec 0c             	sub    $0xc,%esp
f011ebba:	68 00 dc 12 f0       	push   $0xf012dc00
f011ebbf:	e8 a8 23 fe ff       	call   f0100f6c <cprintf>
f011ebc4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ebc7:	e8 3d ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ebcc:	89 c2                	mov    %eax,%edx
f011ebce:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ebd1:	29 c2                	sub    %eax,%edx
f011ebd3:	89 d0                	mov    %edx,%eax
f011ebd5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ebda:	77 17                	ja     f011ebf3 <test_kheap_virt_addr+0x87e>
f011ebdc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ebe3:	83 ec 0c             	sub    $0xc,%esp
f011ebe6:	68 04 e0 12 f0       	push   $0xf012e004
f011ebeb:	e8 7c 23 fe ff       	call   f0100f6c <cprintf>
f011ebf0:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ebf3:	e8 11 ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ebf8:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ebfb:	e8 40 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ec00:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011ec03:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ec09:	83 ec 0c             	sub    $0xc,%esp
f011ec0c:	50                   	push   %eax
f011ec0d:	e8 be 9e fe ff       	call   f0108ad0 <kfree>
f011ec12:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ec15:	e8 26 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ec1a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ec1d:	74 17                	je     f011ec36 <test_kheap_virt_addr+0x8c1>
f011ec1f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec26:	83 ec 0c             	sub    $0xc,%esp
f011ec29:	68 00 dc 12 f0       	push   $0xf012dc00
f011ec2e:	e8 39 23 fe ff       	call   f0100f6c <cprintf>
f011ec33:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ec36:	e8 ce ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ec3b:	89 c2                	mov    %eax,%edx
f011ec3d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ec40:	29 c2                	sub    %eax,%edx
f011ec42:	89 d0                	mov    %edx,%eax
f011ec44:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011ec49:	77 17                	ja     f011ec62 <test_kheap_virt_addr+0x8ed>
f011ec4b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec52:	83 ec 0c             	sub    $0xc,%esp
f011ec55:	68 04 e0 12 f0       	push   $0xf012e004
f011ec5a:	e8 0d 23 fe ff       	call   f0100f6c <cprintf>
f011ec5f:	83 c4 10             	add    $0x10,%esp


	//test kheap_virtual_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011ec62:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011ec69:	a1 98 dd 17 f0       	mov    0xf017dd98,%eax
f011ec6e:	05 00 10 00 00       	add    $0x1000,%eax
f011ec73:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		int i = 0;
f011ec79:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f011ec80:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f011ec87:	00 00 00 
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011ec8a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ec90:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ec93:	eb 44                	jmp    f011ecd9 <test_kheap_virt_addr+0x964>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ec95:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec98:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ec9b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ec9e:	83 ec 0c             	sub    $0xc,%esp
f011eca1:	50                   	push   %eax
f011eca2:	e8 43 9e fe ff       	call   f0108aea <kheap_virtual_address>
f011eca7:	83 c4 10             	add    $0x10,%esp
f011ecaa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			if (retrievedVA != 0)
f011ecb0:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
f011ecb7:	74 1d                	je     f011ecd6 <test_kheap_virt_addr+0x961>
			{
				if (correct)
f011ecb9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ecbd:	74 17                	je     f011ecd6 <test_kheap_virt_addr+0x961>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ecbf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ecc6:	83 ec 0c             	sub    $0xc,%esp
f011ecc9:	68 5f e3 12 f0       	push   $0xf012e35f
f011ecce:	e8 99 22 fe ff       	call   f0100f6c <cprintf>
f011ecd3:	83 c4 10             	add    $0x10,%esp
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011ecd6:	ff 45 d0             	incl   -0x30(%ebp)
f011ecd9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ecdf:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011ece5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ece8:	39 c2                	cmp    %eax,%edx
f011ecea:	77 a9                	ja     f011ec95 <test_kheap_virt_addr+0x920>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ecec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ecf2:	05 00 04 00 00       	add    $0x400,%eax
f011ecf7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ecfa:	eb 64                	jmp    f011ed60 <test_kheap_virt_addr+0x9eb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ecfc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ecff:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ed02:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ed05:	83 ec 0c             	sub    $0xc,%esp
f011ed08:	50                   	push   %eax
f011ed09:	e8 dc 9d fe ff       	call   f0108aea <kheap_virtual_address>
f011ed0e:	83 c4 10             	add    $0x10,%esp
f011ed11:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011ed17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ed1a:	c1 e0 0c             	shl    $0xc,%eax
f011ed1d:	89 c2                	mov    %eax,%edx
f011ed1f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ed25:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ed28:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ed2b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ed2e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ed31:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ed36:	01 c8                	add    %ecx,%eax
f011ed38:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f011ed3e:	74 1d                	je     f011ed5d <test_kheap_virt_addr+0x9e8>
			{
				if (correct)
f011ed40:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ed44:	74 17                	je     f011ed5d <test_kheap_virt_addr+0x9e8>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ed46:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ed4d:	83 ec 0c             	sub    $0xc,%esp
f011ed50:	68 5f e3 12 f0       	push   $0xf012e35f
f011ed55:	e8 12 22 fe ff       	call   f0100f6c <cprintf>
f011ed5a:	83 c4 10             	add    $0x10,%esp
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ed5d:	ff 45 d0             	incl   -0x30(%ebp)
f011ed60:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed66:	8d 90 02 07 00 00    	lea    0x702(%eax),%edx
f011ed6c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ed6f:	39 c2                	cmp    %eax,%edx
f011ed71:	77 89                	ja     f011ecfc <test_kheap_virt_addr+0x987>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ed73:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed79:	05 02 07 00 00       	add    $0x702,%eax
f011ed7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ed81:	eb 44                	jmp    f011edc7 <test_kheap_virt_addr+0xa52>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ed83:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ed86:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ed89:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ed8c:	83 ec 0c             	sub    $0xc,%esp
f011ed8f:	50                   	push   %eax
f011ed90:	e8 55 9d fe ff       	call   f0108aea <kheap_virtual_address>
f011ed95:	83 c4 10             	add    $0x10,%esp
f011ed98:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
			if (retrievedVA != 0)
f011ed9e:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%ebp)
f011eda5:	74 1d                	je     f011edc4 <test_kheap_virt_addr+0xa4f>
			{
				if (correct)
f011eda7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011edab:	74 17                	je     f011edc4 <test_kheap_virt_addr+0xa4f>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011edad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011edb4:	83 ec 0c             	sub    $0xc,%esp
f011edb7:	68 5f e3 12 f0       	push   $0xf012e35f
f011edbc:	e8 ab 21 fe ff       	call   f0100f6c <cprintf>
f011edc1:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011edc4:	ff 45 d0             	incl   -0x30(%ebp)
f011edc7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011edcd:	8d 90 02 0d 00 00    	lea    0xd02(%eax),%edx
f011edd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011edd6:	39 c2                	cmp    %eax,%edx
f011edd8:	77 a9                	ja     f011ed83 <test_kheap_virt_addr+0xa0e>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011edda:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ede0:	05 02 0d 00 00       	add    $0xd02,%eax
f011ede5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ede8:	eb 64                	jmp    f011ee4e <test_kheap_virt_addr+0xad9>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011edea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eded:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011edf0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011edf3:	83 ec 0c             	sub    $0xc,%esp
f011edf6:	50                   	push   %eax
f011edf7:	e8 ee 9c fe ff       	call   f0108aea <kheap_virtual_address>
f011edfc:	83 c4 10             	add    $0x10,%esp
f011edff:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011ee05:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ee08:	c1 e0 0c             	shl    $0xc,%eax
f011ee0b:	89 c2                	mov    %eax,%edx
f011ee0d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ee13:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ee16:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ee19:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ee1c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ee1f:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ee24:	01 c8                	add    %ecx,%eax
f011ee26:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
f011ee2c:	74 1d                	je     f011ee4b <test_kheap_virt_addr+0xad6>
			{
				if (correct)
f011ee2e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ee32:	74 17                	je     f011ee4b <test_kheap_virt_addr+0xad6>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ee34:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ee3b:	83 ec 0c             	sub    $0xc,%esp
f011ee3e:	68 5f e3 12 f0       	push   $0xf012e35f
f011ee43:	e8 24 21 fe ff       	call   f0100f6c <cprintf>
f011ee48:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011ee4b:	ff 45 d0             	incl   -0x30(%ebp)
f011ee4e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee54:	8d 90 06 0d 00 00    	lea    0xd06(%eax),%edx
f011ee5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ee5d:	39 c2                	cmp    %eax,%edx
f011ee5f:	77 89                	ja     f011edea <test_kheap_virt_addr+0xa75>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
	}
	if (correct)	eval+=20 ;
f011ee61:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ee65:	74 04                	je     f011ee6b <test_kheap_virt_addr+0xaf6>
f011ee67:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011ee6b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011ee72:	c7 45 cc 00 00 00 f6 	movl   $0xf6000000,-0x34(%ebp)
f011ee79:	e9 d1 00 00 00       	jmp    f011ef4f <test_kheap_virt_addr+0xbda>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011ee7e:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f011ee83:	83 ec 04             	sub    $0x4,%esp
f011ee86:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011ee8c:	52                   	push   %edx
f011ee8d:	ff 75 cc             	pushl  -0x34(%ebp)
f011ee90:	50                   	push   %eax
f011ee91:	e8 77 95 fe ff       	call   f010840d <get_page_table>
f011ee96:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011ee99:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ee9f:	85 c0                	test   %eax,%eax
f011eea1:	75 1e                	jne    f011eec1 <test_kheap_virt_addr+0xb4c>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011eea3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eeaa:	83 ec 04             	sub    $0x4,%esp
f011eead:	68 58 e2 12 f0       	push   $0xf012e258
f011eeb2:	68 cb 06 00 00       	push   $0x6cb
f011eeb7:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011eebc:	e8 59 14 fe ff       	call   f010031a <_panic>
			pa = (ptr_table[PTX(va)] & 0xFFFFF000) + (va & 0xFFF);
f011eec1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011eec7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011eeca:	c1 ea 0c             	shr    $0xc,%edx
f011eecd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011eed3:	c1 e2 02             	shl    $0x2,%edx
f011eed6:	01 d0                	add    %edx,%eax
f011eed8:	8b 00                	mov    (%eax),%eax
f011eeda:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011eedf:	89 c2                	mov    %eax,%edx
f011eee1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011eee4:	25 ff 0f 00 00       	and    $0xfff,%eax
f011eee9:	01 d0                	add    %edx,%eax
f011eeeb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
			uint32 retrievedVA = kheap_virtual_address(pa);
f011eef1:	83 ec 0c             	sub    $0xc,%esp
f011eef4:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011eefa:	e8 eb 9b fe ff       	call   f0108aea <kheap_virtual_address>
f011eeff:	83 c4 10             	add    $0x10,%esp
f011ef02:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			if (retrievedVA != va)
f011ef08:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ef0e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ef11:	74 39                	je     f011ef4c <test_kheap_virt_addr+0xbd7>
			{
				if (correct)
f011ef13:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ef17:	74 33                	je     f011ef4c <test_kheap_virt_addr+0xbd7>
				{
					cprintf("\nPA = %x, retrievedVA = %x expectedVA = %x\n", pa, retrievedVA, va);
f011ef19:	ff 75 cc             	pushl  -0x34(%ebp)
f011ef1c:	ff b5 60 ff ff ff    	pushl  -0xa0(%ebp)
f011ef22:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011ef28:	68 7c e3 12 f0       	push   $0xf012e37c
f011ef2d:	e8 3a 20 fe ff       	call   f0100f6c <cprintf>
f011ef32:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011ef35:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ef3c:	83 ec 0c             	sub    $0xc,%esp
f011ef3f:	68 5f e3 12 f0       	push   $0xf012e35f
f011ef44:	e8 23 20 fe ff       	call   f0100f6c <cprintf>
f011ef49:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011ef4c:	ff 45 cc             	incl   -0x34(%ebp)
f011ef4f:	83 ec 0c             	sub    $0xc,%esp
f011ef52:	6a 00                	push   $0x0
f011ef54:	e8 53 9b fe ff       	call   f0108aac <sbrk>
f011ef59:	83 c4 10             	add    $0x10,%esp
f011ef5c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ef5f:	0f 87 19 ff ff ff    	ja     f011ee7e <test_kheap_virt_addr+0xb09>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=40 ;
f011ef65:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ef69:	74 04                	je     f011ef6f <test_kheap_virt_addr+0xbfa>
f011ef6b:	83 45 e4 28          	addl   $0x28,-0x1c(%ebp)

	correct = 1 ;
f011ef6f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011ef76:	c7 45 c8 00 00 10 00 	movl   $0x100000,-0x38(%ebp)
f011ef7d:	eb 5a                	jmp    f011efd9 <test_kheap_virt_addr+0xc64>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011ef7f:	83 ec 0c             	sub    $0xc,%esp
f011ef82:	ff 75 c8             	pushl  -0x38(%ebp)
f011ef85:	e8 60 9b fe ff       	call   f0108aea <kheap_virtual_address>
f011ef8a:	83 c4 10             	add    $0x10,%esp
f011ef8d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			if (retrievedVA != 0)
f011ef93:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%ebp)
f011ef9a:	74 36                	je     f011efd2 <test_kheap_virt_addr+0xc5d>
			{
				if (correct)
f011ef9c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011efa0:	74 30                	je     f011efd2 <test_kheap_virt_addr+0xc5d>
				{
					cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011efa2:	83 ec 04             	sub    $0x4,%esp
f011efa5:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f011efab:	ff 75 c8             	pushl  -0x38(%ebp)
f011efae:	68 a8 e3 12 f0       	push   $0xf012e3a8
f011efb3:	e8 b4 1f fe ff       	call   f0100f6c <cprintf>
f011efb8:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011efbb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011efc2:	83 ec 0c             	sub    $0xc,%esp
f011efc5:	68 5f e3 12 f0       	push   $0xf012e35f
f011efca:	e8 9d 1f fe ff       	call   f0100f6c <cprintf>
f011efcf:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011efd2:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f011efd9:	b8 a8 b9 57 00       	mov    $0x57b9a8,%eax
f011efde:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f011efe1:	72 9c                	jb     f011ef7f <test_kheap_virt_addr+0xc0a>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=20 ;
f011efe3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011efe7:	74 04                	je     f011efed <test_kheap_virt_addr+0xc78>
f011efe9:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	cprintf("\ntest kheap_virtual_address completed. Eval = %d%\n", eval);
f011efed:	83 ec 08             	sub    $0x8,%esp
f011eff0:	ff 75 e4             	pushl  -0x1c(%ebp)
f011eff3:	68 c4 e3 12 f0       	push   $0xf012e3c4
f011eff8:	e8 6f 1f fe ff       	call   f0100f6c <cprintf>
f011effd:	83 c4 10             	add    $0x10,%esp

	return 1;
f011f000:	b8 01 00 00 00       	mov    $0x1,%eax
f011f005:	89 f4                	mov    %esi,%esp

}
f011f007:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011f00a:	5b                   	pop    %ebx
f011f00b:	5e                   	pop    %esi
f011f00c:	5f                   	pop    %edi
f011f00d:	5d                   	pop    %ebp
f011f00e:	c3                   	ret    

f011f00f <test_ksbrk>:


// 2023
int test_ksbrk()
{
f011f00f:	55                   	push   %ebp
f011f010:	89 e5                	mov    %esp,%ebp
f011f012:	57                   	push   %edi
f011f013:	56                   	push   %esi
f011f014:	53                   	push   %ebx
f011f015:	81 ec 1c 01 00 00    	sub    $0x11c,%esp

	// malloc some spaces
	int i, freeFrames, freeDiskFrames;
	char *ptr;
	// int lastIndices[20] = {0};
	int sums[20] = {0};
f011f01b:	8d 95 7c ff ff ff    	lea    -0x84(%ebp),%edx
f011f021:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f026:	b8 00 00 00 00       	mov    $0x0,%eax
f011f02b:	89 d7                	mov    %edx,%edi
f011f02d:	f3 ab                	rep stos %eax,%es:(%edi)
	void *ptr_allocations[20] = {0};
f011f02f:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f011f035:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f03a:	b8 00 00 00 00       	mov    $0x0,%eax
f011f03f:	89 d7                	mov    %edx,%edi
f011f041:	f3 ab                	rep stos %eax,%es:(%edi)

	// uint32 inputIncrementValues[] = {0, kilo, 2*kilo, -512, -2 * kilo, -2* kilo, 128, kilo};
	uint32 expectedVAs[] = {
f011f043:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011f049:	bb 60 e9 12 f0       	mov    $0xf012e960,%ebx
f011f04e:	ba 0a 00 00 00       	mov    $0xa,%edx
f011f053:	89 c7                	mov    %eax,%edi
f011f055:	89 de                	mov    %ebx,%esi
f011f057:	89 d1                	mov    %edx,%ecx
f011f059:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x1E00, // 128
			KERNEL_HEAP_START + 0x2000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x0C00, // +6*kilo
	};
	uint32 expectedSbrks[] = {
f011f05b:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011f061:	bb a0 e9 12 f0       	mov    $0xf012e9a0,%ebx
f011f066:	ba 0a 00 00 00       	mov    $0xa,%edx
f011f06b:	89 c7                	mov    %eax,%edi
f011f06d:	89 de                	mov    %ebx,%esi
f011f06f:	89 d1                	mov    %edx,%ecx
f011f071:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x3000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x4000, // +10*kilo
	};
	uint32 oldBrk, newBrk;
	int eval = 0;
f011f073:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011f07a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	cprintf("STEP A: checking increment with ZERO\n");
f011f081:	83 ec 0c             	sub    $0xc,%esp
f011f084:	68 f8 e3 12 f0       	push   $0xf012e3f8
f011f089:	e8 de 1e fe ff       	call   f0100f6c <cprintf>
f011f08e:	83 c4 10             	add    $0x10,%esp
	{
		freeFrames = (int)sys_calculate_free_frames();
f011f091:	e8 73 e9 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f096:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f099:	e8 a2 57 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f09e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = sbrk(0);
f011f0a1:	83 ec 0c             	sub    $0xc,%esp
f011f0a4:	6a 00                	push   $0x0
f011f0a6:	e8 01 9a fe ff       	call   f0108aac <sbrk>
f011f0ab:	83 c4 10             	add    $0x10,%esp
f011f0ae:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f0b4:	e8 87 57 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f0b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f0bc:	74 17                	je     f011f0d5 <test_ksbrk+0xc6>
		{
			correct = 0;
f011f0be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f0c5:	83 ec 0c             	sub    $0xc,%esp
f011f0c8:	68 20 e4 12 f0       	push   $0xf012e420
f011f0cd:	e8 9a 1e fe ff       	call   f0100f6c <cprintf>
f011f0d2:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f0d5:	e8 2f e9 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f0da:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f0dd:	74 17                	je     f011f0f6 <test_ksbrk+0xe7>
		{
			correct = 0;
f011f0df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f0e6:	83 ec 0c             	sub    $0xc,%esp
f011f0e9:	68 88 e4 12 f0       	push   $0xf012e488
f011f0ee:	e8 79 1e fe ff       	call   f0100f6c <cprintf>
f011f0f3:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[0] != expectedVAs[0])
f011f0f6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f0fc:	89 c2                	mov    %eax,%edx
f011f0fe:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f104:	39 c2                	cmp    %eax,%edx
f011f106:	74 25                	je     f011f12d <test_ksbrk+0x11e>
		{
			correct = 0;
f011f108:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[0], ptr_allocations[0]);
f011f10f:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011f115:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f11b:	83 ec 04             	sub    $0x4,%esp
f011f11e:	52                   	push   %edx
f011f11f:	50                   	push   %eax
f011f120:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f125:	e8 42 1e fe ff       	call   f0100f6c <cprintf>
f011f12a:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f12d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f131:	74 04                	je     f011f137 <test_ksbrk+0x128>
			eval += 5;
f011f133:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP B: checking increment with +ve value\n");
f011f137:	83 ec 0c             	sub    $0xc,%esp
f011f13a:	68 f8 e4 12 f0       	push   $0xf012e4f8
f011f13f:	e8 28 1e fe ff       	call   f0100f6c <cprintf>
f011f144:	83 c4 10             	add    $0x10,%esp
	{ // +1 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f147:	e8 bd e8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f14c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f14f:	e8 ec 56 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f154:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f157:	83 ec 0c             	sub    $0xc,%esp
f011f15a:	6a 00                	push   $0x0
f011f15c:	e8 4b 99 fe ff       	call   f0108aac <sbrk>
f011f161:	83 c4 10             	add    $0x10,%esp
f011f164:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[1] = sbrk(kilo);
f011f167:	83 ec 0c             	sub    $0xc,%esp
f011f16a:	68 00 04 00 00       	push   $0x400
f011f16f:	e8 38 99 fe ff       	call   f0108aac <sbrk>
f011f174:	83 c4 10             	add    $0x10,%esp
f011f177:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f17d:	83 ec 0c             	sub    $0xc,%esp
f011f180:	6a 00                	push   $0x0
f011f182:	e8 25 99 fe ff       	call   f0108aac <sbrk>
f011f187:	83 c4 10             	add    $0x10,%esp
f011f18a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f18d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f194:	e8 a7 56 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f199:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f19c:	74 17                	je     f011f1b5 <test_ksbrk+0x1a6>
		{
			correct = 0;
f011f19e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1a5:	83 ec 0c             	sub    $0xc,%esp
f011f1a8:	68 20 e4 12 f0       	push   $0xf012e420
f011f1ad:	e8 ba 1d fe ff       	call   f0100f6c <cprintf>
f011f1b2:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011f1b5:	e8 4f e8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f1ba:	89 c2                	mov    %eax,%edx
f011f1bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f1bf:	29 d0                	sub    %edx,%eax
f011f1c1:	83 f8 01             	cmp    $0x1,%eax
f011f1c4:	74 17                	je     f011f1dd <test_ksbrk+0x1ce>
		{
			correct = 0;
f011f1c6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f1cd:	83 ec 0c             	sub    $0xc,%esp
f011f1d0:	68 88 e4 12 f0       	push   $0xf012e488
f011f1d5:	e8 92 1d fe ff       	call   f0100f6c <cprintf>
f011f1da:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[1] != expectedVAs[1])
f011f1dd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f1e3:	89 c2                	mov    %eax,%edx
f011f1e5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f1eb:	39 c2                	cmp    %eax,%edx
f011f1ed:	74 25                	je     f011f214 <test_ksbrk+0x205>
		{
			correct = 0;
f011f1ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[1], ptr_allocations[1]);
f011f1f6:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011f1fc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f202:	83 ec 04             	sub    $0x4,%esp
f011f205:	52                   	push   %edx
f011f206:	50                   	push   %eax
f011f207:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f20c:	e8 5b 1d fe ff       	call   f0100f6c <cprintf>
f011f211:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[1])
f011f214:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f21a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f21d:	74 21                	je     f011f240 <test_ksbrk+0x231>
		{
			correct = 0;
f011f21f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[1]);
f011f226:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f22c:	83 ec 04             	sub    $0x4,%esp
f011f22f:	50                   	push   %eax
f011f230:	ff 75 d0             	pushl  -0x30(%ebp)
f011f233:	68 24 e5 12 f0       	push   $0xf012e524
f011f238:	e8 2f 1d fe ff       	call   f0100f6c <cprintf>
f011f23d:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f240:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f244:	74 04                	je     f011f24a <test_ksbrk+0x23b>
			eval += 5;
f011f246:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	{ // +2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f24a:	e8 ba e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f24f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f252:	e8 e9 55 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f257:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f25a:	83 ec 0c             	sub    $0xc,%esp
f011f25d:	6a 00                	push   $0x0
f011f25f:	e8 48 98 fe ff       	call   f0108aac <sbrk>
f011f264:	83 c4 10             	add    $0x10,%esp
f011f267:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[2] = sbrk(2 * kilo);
f011f26a:	83 ec 0c             	sub    $0xc,%esp
f011f26d:	68 00 08 00 00       	push   $0x800
f011f272:	e8 35 98 fe ff       	call   f0108aac <sbrk>
f011f277:	83 c4 10             	add    $0x10,%esp
f011f27a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		newBrk = (uint32)sbrk(0);
f011f280:	83 ec 0c             	sub    $0xc,%esp
f011f283:	6a 00                	push   $0x0
f011f285:	e8 22 98 fe ff       	call   f0108aac <sbrk>
f011f28a:	83 c4 10             	add    $0x10,%esp
f011f28d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f290:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f297:	e8 a4 55 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f29c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f29f:	74 17                	je     f011f2b8 <test_ksbrk+0x2a9>
		{
			correct = 0;
f011f2a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2a8:	83 ec 0c             	sub    $0xc,%esp
f011f2ab:	68 20 e4 12 f0       	push   $0xf012e420
f011f2b0:	e8 b7 1c fe ff       	call   f0100f6c <cprintf>
f011f2b5:	83 c4 10             	add    $0x10,%esp
		}
		int x = (freeFrames - (int)sys_calculate_free_frames());
f011f2b8:	e8 4c e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f2bd:	89 c2                	mov    %eax,%edx
f011f2bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f2c2:	29 d0                	sub    %edx,%eax
f011f2c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011f2c7:	e8 3d e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f2cc:	89 c2                	mov    %eax,%edx
f011f2ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f2d1:	29 d0                	sub    %edx,%eax
f011f2d3:	83 f8 01             	cmp    $0x1,%eax
f011f2d6:	74 17                	je     f011f2ef <test_ksbrk+0x2e0>
		{
			correct = 0;
f011f2d8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f2df:	83 ec 0c             	sub    $0xc,%esp
f011f2e2:	68 88 e4 12 f0       	push   $0xf012e488
f011f2e7:	e8 80 1c fe ff       	call   f0100f6c <cprintf>
f011f2ec:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[2] != expectedVAs[2])
f011f2ef:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f2f5:	89 c2                	mov    %eax,%edx
f011f2f7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f2fd:	39 c2                	cmp    %eax,%edx
f011f2ff:	74 25                	je     f011f326 <test_ksbrk+0x317>
		{
			correct = 0;
f011f301:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[2], ptr_allocations[2]);
f011f308:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011f30e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f314:	83 ec 04             	sub    $0x4,%esp
f011f317:	52                   	push   %edx
f011f318:	50                   	push   %eax
f011f319:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f31e:	e8 49 1c fe ff       	call   f0100f6c <cprintf>
f011f323:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[2])
f011f326:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f32c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f32f:	74 21                	je     f011f352 <test_ksbrk+0x343>
		{
			correct = 0;
f011f331:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[2]);
f011f338:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f33e:	83 ec 04             	sub    $0x4,%esp
f011f341:	50                   	push   %eax
f011f342:	ff 75 d0             	pushl  -0x30(%ebp)
f011f345:	68 24 e5 12 f0       	push   $0xf012e524
f011f34a:	e8 1d 1c fe ff       	call   f0100f6c <cprintf>
f011f34f:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f352:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f356:	74 04                	je     f011f35c <test_ksbrk+0x34d>
			eval += 5;
f011f358:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP C: checking increment with -ve value [No Frames to be Deallocated]\n");
f011f35c:	83 ec 0c             	sub    $0xc,%esp
f011f35f:	68 50 e5 12 f0       	push   $0xf012e550
f011f364:	e8 03 1c fe ff       	call   f0100f6c <cprintf>
f011f369:	83 c4 10             	add    $0x10,%esp
	{ // -512 Bytes
		freeFrames = (int)sys_calculate_free_frames();
f011f36c:	e8 98 e6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f371:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f374:	e8 c7 54 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f379:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f37c:	83 ec 0c             	sub    $0xc,%esp
f011f37f:	6a 00                	push   $0x0
f011f381:	e8 26 97 fe ff       	call   f0108aac <sbrk>
f011f386:	83 c4 10             	add    $0x10,%esp
f011f389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[3] = sbrk(-512);
f011f38c:	83 ec 0c             	sub    $0xc,%esp
f011f38f:	68 00 fe ff ff       	push   $0xfffffe00
f011f394:	e8 13 97 fe ff       	call   f0108aac <sbrk>
f011f399:	83 c4 10             	add    $0x10,%esp
f011f39c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		newBrk = (uint32)sbrk(0);
f011f3a2:	83 ec 0c             	sub    $0xc,%esp
f011f3a5:	6a 00                	push   $0x0
f011f3a7:	e8 00 97 fe ff       	call   f0108aac <sbrk>
f011f3ac:	83 c4 10             	add    $0x10,%esp
f011f3af:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f3b2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f3b9:	e8 82 54 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f3be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f3c1:	74 17                	je     f011f3da <test_ksbrk+0x3cb>
		{
			correct = 0;
f011f3c3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3ca:	83 ec 0c             	sub    $0xc,%esp
f011f3cd:	68 20 e4 12 f0       	push   $0xf012e420
f011f3d2:	e8 95 1b fe ff       	call   f0100f6c <cprintf>
f011f3d7:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f3da:	e8 2a e6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f3df:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f3e2:	74 17                	je     f011f3fb <test_ksbrk+0x3ec>
		{
			correct = 0;
f011f3e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f3eb:	83 ec 0c             	sub    $0xc,%esp
f011f3ee:	68 88 e4 12 f0       	push   $0xf012e488
f011f3f3:	e8 74 1b fe ff       	call   f0100f6c <cprintf>
f011f3f8:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[3] != expectedVAs[3])
f011f3fb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f401:	89 c2                	mov    %eax,%edx
f011f403:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f409:	39 c2                	cmp    %eax,%edx
f011f40b:	74 25                	je     f011f432 <test_ksbrk+0x423>
		{
			correct = 0;
f011f40d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[3], ptr_allocations[3]);
f011f414:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f011f41a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f420:	83 ec 04             	sub    $0x4,%esp
f011f423:	52                   	push   %edx
f011f424:	50                   	push   %eax
f011f425:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f42a:	e8 3d 1b fe ff       	call   f0100f6c <cprintf>
f011f42f:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[3])
f011f432:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f438:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f43b:	74 21                	je     f011f45e <test_ksbrk+0x44f>
		{
			correct = 0;
f011f43d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[3]);
f011f444:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f44a:	83 ec 04             	sub    $0x4,%esp
f011f44d:	50                   	push   %eax
f011f44e:	ff 75 d0             	pushl  -0x30(%ebp)
f011f451:	68 24 e5 12 f0       	push   $0xf012e524
f011f456:	e8 11 1b fe ff       	call   f0100f6c <cprintf>
f011f45b:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f45e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f462:	74 04                	je     f011f468 <test_ksbrk+0x459>
			eval += 10;
f011f464:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f468:	e8 9c e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f46d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f470:	e8 cb 53 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f475:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f478:	83 ec 0c             	sub    $0xc,%esp
f011f47b:	6a 00                	push   $0x0
f011f47d:	e8 2a 96 fe ff       	call   f0108aac <sbrk>
f011f482:	83 c4 10             	add    $0x10,%esp
f011f485:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[4] = sbrk(-2 * kilo);
f011f488:	83 ec 0c             	sub    $0xc,%esp
f011f48b:	68 00 f8 ff ff       	push   $0xfffff800
f011f490:	e8 17 96 fe ff       	call   f0108aac <sbrk>
f011f495:	83 c4 10             	add    $0x10,%esp
f011f498:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		newBrk = (uint32)sbrk(0);
f011f49e:	83 ec 0c             	sub    $0xc,%esp
f011f4a1:	6a 00                	push   $0x0
f011f4a3:	e8 04 96 fe ff       	call   f0108aac <sbrk>
f011f4a8:	83 c4 10             	add    $0x10,%esp
f011f4ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f4ae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f4b5:	e8 86 53 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f4ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f4bd:	74 17                	je     f011f4d6 <test_ksbrk+0x4c7>
		{
			correct = 0;
f011f4bf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4c6:	83 ec 0c             	sub    $0xc,%esp
f011f4c9:	68 20 e4 12 f0       	push   $0xf012e420
f011f4ce:	e8 99 1a fe ff       	call   f0100f6c <cprintf>
f011f4d3:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f4d6:	e8 2e e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f4db:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f4de:	74 17                	je     f011f4f7 <test_ksbrk+0x4e8>
		{
			correct = 0;
f011f4e0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f4e7:	83 ec 0c             	sub    $0xc,%esp
f011f4ea:	68 88 e4 12 f0       	push   $0xf012e488
f011f4ef:	e8 78 1a fe ff       	call   f0100f6c <cprintf>
f011f4f4:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[4] != expectedVAs[4])
f011f4f7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f4fd:	89 c2                	mov    %eax,%edx
f011f4ff:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f505:	39 c2                	cmp    %eax,%edx
f011f507:	74 25                	je     f011f52e <test_ksbrk+0x51f>
		{
			correct = 0;
f011f509:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[4], ptr_allocations[4]);
f011f510:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
f011f516:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f51c:	83 ec 04             	sub    $0x4,%esp
f011f51f:	52                   	push   %edx
f011f520:	50                   	push   %eax
f011f521:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f526:	e8 41 1a fe ff       	call   f0100f6c <cprintf>
f011f52b:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[4])
f011f52e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f534:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f537:	74 21                	je     f011f55a <test_ksbrk+0x54b>
		{
			correct = 0;
f011f539:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[4]);
f011f540:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f546:	83 ec 04             	sub    $0x4,%esp
f011f549:	50                   	push   %eax
f011f54a:	ff 75 d0             	pushl  -0x30(%ebp)
f011f54d:	68 24 e5 12 f0       	push   $0xf012e524
f011f552:	e8 15 1a fe ff       	call   f0100f6c <cprintf>
f011f557:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f55a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f55e:	74 04                	je     f011f564 <test_ksbrk+0x555>
			eval += 10;
f011f560:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP D: checking increment with -ve value [ONE Frame should be Deallocated]\n");
f011f564:	83 ec 0c             	sub    $0xc,%esp
f011f567:	68 9c e5 12 f0       	push   $0xf012e59c
f011f56c:	e8 fb 19 fe ff       	call   f0100f6c <cprintf>
f011f571:	83 c4 10             	add    $0x10,%esp
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f574:	e8 90 e4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f579:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f57c:	e8 bf 52 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f581:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f584:	83 ec 0c             	sub    $0xc,%esp
f011f587:	6a 00                	push   $0x0
f011f589:	e8 1e 95 fe ff       	call   f0108aac <sbrk>
f011f58e:	83 c4 10             	add    $0x10,%esp
f011f591:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[5] = sbrk(-2 * kilo);
f011f594:	83 ec 0c             	sub    $0xc,%esp
f011f597:	68 00 f8 ff ff       	push   $0xfffff800
f011f59c:	e8 0b 95 fe ff       	call   f0108aac <sbrk>
f011f5a1:	83 c4 10             	add    $0x10,%esp
f011f5a4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f5aa:	83 ec 0c             	sub    $0xc,%esp
f011f5ad:	6a 00                	push   $0x0
f011f5af:	e8 f8 94 fe ff       	call   f0108aac <sbrk>
f011f5b4:	83 c4 10             	add    $0x10,%esp
f011f5b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f5ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f5c1:	e8 7a 52 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f5c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f5c9:	74 17                	je     f011f5e2 <test_ksbrk+0x5d3>
		{
			correct = 0;
f011f5cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5d2:	83 ec 0c             	sub    $0xc,%esp
f011f5d5:	68 20 e4 12 f0       	push   $0xf012e420
f011f5da:	e8 8d 19 fe ff       	call   f0100f6c <cprintf>
f011f5df:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 1)
f011f5e2:	e8 22 e4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f5e7:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011f5ea:	83 f8 01             	cmp    $0x1,%eax
f011f5ed:	74 17                	je     f011f606 <test_ksbrk+0x5f7>
		{
			correct = 0;
f011f5ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f5f6:	83 ec 0c             	sub    $0xc,%esp
f011f5f9:	68 88 e4 12 f0       	push   $0xf012e488
f011f5fe:	e8 69 19 fe ff       	call   f0100f6c <cprintf>
f011f603:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[5] != expectedVAs[5])
f011f606:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f60c:	89 c2                	mov    %eax,%edx
f011f60e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f614:	39 c2                	cmp    %eax,%edx
f011f616:	74 25                	je     f011f63d <test_ksbrk+0x62e>
		{
			correct = 0;
f011f618:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011f61f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011f625:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f62b:	83 ec 04             	sub    $0x4,%esp
f011f62e:	52                   	push   %edx
f011f62f:	50                   	push   %eax
f011f630:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f635:	e8 32 19 fe ff       	call   f0100f6c <cprintf>
f011f63a:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[5])
f011f63d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f643:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f646:	74 21                	je     f011f669 <test_ksbrk+0x65a>
		{
			correct = 0;
f011f648:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011f64f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f655:	83 ec 04             	sub    $0x4,%esp
f011f658:	50                   	push   %eax
f011f659:	ff 75 d0             	pushl  -0x30(%ebp)
f011f65c:	68 24 e5 12 f0       	push   $0xf012e524
f011f661:	e8 06 19 fe ff       	call   f0100f6c <cprintf>
f011f666:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f669:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f66d:	74 04                	je     f011f673 <test_ksbrk+0x664>
			eval += 15;
f011f66f:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP E: checking increment with +ve value [No Frames to be Allocated]\n");
f011f673:	83 ec 0c             	sub    $0xc,%esp
f011f676:	68 ec e5 12 f0       	push   $0xf012e5ec
f011f67b:	e8 ec 18 fe ff       	call   f0100f6c <cprintf>
f011f680:	83 c4 10             	add    $0x10,%esp
	{ // 128 Bytes
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f683:	e8 81 e3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f688:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)(int)pf_calculate_free_frames();
f011f68b:	e8 b0 51 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f690:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f693:	83 ec 0c             	sub    $0xc,%esp
f011f696:	6a 00                	push   $0x0
f011f698:	e8 0f 94 fe ff       	call   f0108aac <sbrk>
f011f69d:	83 c4 10             	add    $0x10,%esp
f011f6a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[6] = sbrk(128);
f011f6a3:	83 ec 0c             	sub    $0xc,%esp
f011f6a6:	68 80 00 00 00       	push   $0x80
f011f6ab:	e8 fc 93 fe ff       	call   f0108aac <sbrk>
f011f6b0:	83 c4 10             	add    $0x10,%esp
f011f6b3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		newBrk = (uint32)sbrk(0);
f011f6b9:	83 ec 0c             	sub    $0xc,%esp
f011f6bc:	6a 00                	push   $0x0
f011f6be:	e8 e9 93 fe ff       	call   f0108aac <sbrk>
f011f6c3:	83 c4 10             	add    $0x10,%esp
f011f6c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f6c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f6d0:	e8 6b 51 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f6d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f6d8:	74 17                	je     f011f6f1 <test_ksbrk+0x6e2>
		{
			correct = 0;
f011f6da:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6e1:	83 ec 0c             	sub    $0xc,%esp
f011f6e4:	68 20 e4 12 f0       	push   $0xf012e420
f011f6e9:	e8 7e 18 fe ff       	call   f0100f6c <cprintf>
f011f6ee:	83 c4 10             	add    $0x10,%esp
		}
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 0)
f011f6f1:	e8 13 e3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f6f6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f6f9:	74 17                	je     f011f712 <test_ksbrk+0x703>
		{
			correct = 0;
f011f6fb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f702:	83 ec 0c             	sub    $0xc,%esp
f011f705:	68 88 e4 12 f0       	push   $0xf012e488
f011f70a:	e8 5d 18 fe ff       	call   f0100f6c <cprintf>
f011f70f:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[6] != expectedVAs[6])
f011f712:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f718:	89 c2                	mov    %eax,%edx
f011f71a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f720:	39 c2                	cmp    %eax,%edx
f011f722:	74 25                	je     f011f749 <test_ksbrk+0x73a>
		{
			correct = 0;
f011f724:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[6], ptr_allocations[6]);
f011f72b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011f731:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f737:	83 ec 04             	sub    $0x4,%esp
f011f73a:	52                   	push   %edx
f011f73b:	50                   	push   %eax
f011f73c:	68 c8 e4 12 f0       	push   $0xf012e4c8
f011f741:	e8 26 18 fe ff       	call   f0100f6c <cprintf>
f011f746:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[6])
f011f749:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f74f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f752:	74 21                	je     f011f775 <test_ksbrk+0x766>
		{
			correct = 0;
f011f754:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[6]);
f011f75b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f761:	83 ec 04             	sub    $0x4,%esp
f011f764:	50                   	push   %eax
f011f765:	ff 75 d0             	pushl  -0x30(%ebp)
f011f768:	68 24 e5 12 f0       	push   $0xf012e524
f011f76d:	e8 fa 17 fe ff       	call   f0100f6c <cprintf>
f011f772:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f775:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f779:	74 04                	je     f011f77f <test_ksbrk+0x770>
			eval += 15;
f011f77b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP F: checking increment with +ve value [ONE Frame should be Allocated]\n");
f011f77f:	83 ec 0c             	sub    $0xc,%esp
f011f782:	68 34 e6 12 f0       	push   $0xf012e634
f011f787:	e8 e0 17 fe ff       	call   f0100f6c <cprintf>
f011f78c:	83 c4 10             	add    $0x10,%esp
	{ // 1 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f78f:	e8 75 e2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f794:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f797:	e8 a4 50 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f79c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f79f:	83 ec 0c             	sub    $0xc,%esp
f011f7a2:	6a 00                	push   $0x0
f011f7a4:	e8 03 93 fe ff       	call   f0108aac <sbrk>
f011f7a9:	83 c4 10             	add    $0x10,%esp
f011f7ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[7] = sbrk(kilo);
f011f7af:	83 ec 0c             	sub    $0xc,%esp
f011f7b2:	68 00 04 00 00       	push   $0x400
f011f7b7:	e8 f0 92 fe ff       	call   f0108aac <sbrk>
f011f7bc:	83 c4 10             	add    $0x10,%esp
f011f7bf:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		newBrk = (uint32)sbrk(0);
f011f7c5:	83 ec 0c             	sub    $0xc,%esp
f011f7c8:	6a 00                	push   $0x0
f011f7ca:	e8 dd 92 fe ff       	call   f0108aac <sbrk>
f011f7cf:	83 c4 10             	add    $0x10,%esp
f011f7d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f7d5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f7dc:	e8 5f 50 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f7e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f7e4:	74 17                	je     f011f7fd <test_ksbrk+0x7ee>
		{
			correct = 0;
f011f7e6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7ed:	83 ec 0c             	sub    $0xc,%esp
f011f7f0:	68 20 e4 12 f0       	push   $0xf012e420
f011f7f5:	e8 72 17 fe ff       	call   f0100f6c <cprintf>
f011f7fa:	83 c4 10             	add    $0x10,%esp
		}
		//cprintf("((int)(int)sys_calculate_free_frames() - freeFrames) = %d\n", ((int)(int)sys_calculate_free_frames() - freeFrames));
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 1)
f011f7fd:	e8 07 e2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f802:	89 c2                	mov    %eax,%edx
f011f804:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f807:	29 d0                	sub    %edx,%eax
f011f809:	83 f8 01             	cmp    $0x1,%eax
f011f80c:	74 17                	je     f011f825 <test_ksbrk+0x816>
		{
			correct = 0;
f011f80e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong allocation: pages are not loaded successfully into memory");
f011f815:	83 ec 0c             	sub    $0xc,%esp
f011f818:	68 80 e6 12 f0       	push   $0xf012e680
f011f81d:	e8 4a 17 fe ff       	call   f0100f6c <cprintf>
f011f822:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[7] != expectedVAs[7])
f011f825:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f82b:	89 c2                	mov    %eax,%edx
f011f82d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f833:	39 c2                	cmp    %eax,%edx
f011f835:	74 25                	je     f011f85c <test_ksbrk+0x84d>
		{
			correct = 0;
f011f837:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011f83e:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011f844:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f84a:	83 ec 04             	sub    $0x4,%esp
f011f84d:	52                   	push   %edx
f011f84e:	50                   	push   %eax
f011f84f:	68 c4 e6 12 f0       	push   $0xf012e6c4
f011f854:	e8 13 17 fe ff       	call   f0100f6c <cprintf>
f011f859:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[7])
f011f85c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f862:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f865:	74 21                	je     f011f888 <test_ksbrk+0x879>
		{
			correct = 0;
f011f867:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011f86e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f874:	83 ec 04             	sub    $0x4,%esp
f011f877:	50                   	push   %eax
f011f878:	ff 75 d0             	pushl  -0x30(%ebp)
f011f87b:	68 f8 e6 12 f0       	push   $0xf012e6f8
f011f880:	e8 e7 16 fe ff       	call   f0100f6c <cprintf>
f011f885:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f888:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f88c:	74 04                	je     f011f892 <test_ksbrk+0x883>
			eval += 15;
f011f88e:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP G: checking increment with -ve value [TWO Frames should be Deallocated]\n");
f011f892:	83 ec 0c             	sub    $0xc,%esp
f011f895:	68 28 e7 12 f0       	push   $0xf012e728
f011f89a:	e8 cd 16 fe ff       	call   f0100f6c <cprintf>
f011f89f:	83 c4 10             	add    $0x10,%esp
	{ // -9 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f8a2:	e8 62 e1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f8a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f8aa:	e8 91 4f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f8af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f8b2:	83 ec 0c             	sub    $0xc,%esp
f011f8b5:	6a 00                	push   $0x0
f011f8b7:	e8 f0 91 fe ff       	call   f0108aac <sbrk>
f011f8bc:	83 c4 10             	add    $0x10,%esp
f011f8bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[8] = sbrk(-9 * kilo);
f011f8c2:	83 ec 0c             	sub    $0xc,%esp
f011f8c5:	68 00 dc ff ff       	push   $0xffffdc00
f011f8ca:	e8 dd 91 fe ff       	call   f0108aac <sbrk>
f011f8cf:	83 c4 10             	add    $0x10,%esp
f011f8d2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		newBrk = (uint32)sbrk(0);
f011f8d8:	83 ec 0c             	sub    $0xc,%esp
f011f8db:	6a 00                	push   $0x0
f011f8dd:	e8 ca 91 fe ff       	call   f0108aac <sbrk>
f011f8e2:	83 c4 10             	add    $0x10,%esp
f011f8e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f8e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f8ef:	e8 4c 4f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f8f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f8f7:	74 17                	je     f011f910 <test_ksbrk+0x901>
		{
			correct = 0;
f011f8f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f900:	83 ec 0c             	sub    $0xc,%esp
f011f903:	68 20 e4 12 f0       	push   $0xf012e420
f011f908:	e8 5f 16 fe ff       	call   f0100f6c <cprintf>
f011f90d:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 2)
f011f910:	e8 f4 e0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f915:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011f918:	83 f8 02             	cmp    $0x2,%eax
f011f91b:	74 17                	je     f011f934 <test_ksbrk+0x925>
		{
			correct = 0;
f011f91d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong allocation: pages are not loaded successfully into memory");
f011f924:	83 ec 0c             	sub    $0xc,%esp
f011f927:	68 78 e7 12 f0       	push   $0xf012e778
f011f92c:	e8 3b 16 fe ff       	call   f0100f6c <cprintf>
f011f931:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[8] != expectedVAs[8])
f011f934:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f93a:	89 c2                	mov    %eax,%edx
f011f93c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f942:	39 c2                	cmp    %eax,%edx
f011f944:	74 25                	je     f011f96b <test_ksbrk+0x95c>
		{
			correct = 0;
f011f946:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011f94d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011f953:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f959:	83 ec 04             	sub    $0x4,%esp
f011f95c:	52                   	push   %edx
f011f95d:	50                   	push   %eax
f011f95e:	68 bc e7 12 f0       	push   $0xf012e7bc
f011f963:	e8 04 16 fe ff       	call   f0100f6c <cprintf>
f011f968:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[8])
f011f96b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f971:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f974:	74 21                	je     f011f997 <test_ksbrk+0x988>
		{
			correct = 0;
f011f976:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011f97d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f983:	83 ec 04             	sub    $0x4,%esp
f011f986:	50                   	push   %eax
f011f987:	ff 75 d0             	pushl  -0x30(%ebp)
f011f98a:	68 f0 e7 12 f0       	push   $0xf012e7f0
f011f98f:	e8 d8 15 fe ff       	call   f0100f6c <cprintf>
f011f994:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f997:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f99b:	74 04                	je     f011f9a1 <test_ksbrk+0x992>
			eval += 10;
f011f99d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP H: checking increment with +ve value [THREE Frames should be Allocated]\n");
f011f9a1:	83 ec 0c             	sub    $0xc,%esp
f011f9a4:	68 20 e8 12 f0       	push   $0xf012e820
f011f9a9:	e8 be 15 fe ff       	call   f0100f6c <cprintf>
f011f9ae:	83 c4 10             	add    $0x10,%esp
	{ // 10 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f9b1:	e8 53 e0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f9b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f9b9:	e8 82 4e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f9be:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f9c1:	83 ec 0c             	sub    $0xc,%esp
f011f9c4:	6a 00                	push   $0x0
f011f9c6:	e8 e1 90 fe ff       	call   f0108aac <sbrk>
f011f9cb:	83 c4 10             	add    $0x10,%esp
f011f9ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[9] = sbrk(10*kilo);
f011f9d1:	83 ec 0c             	sub    $0xc,%esp
f011f9d4:	68 00 28 00 00       	push   $0x2800
f011f9d9:	e8 ce 90 fe ff       	call   f0108aac <sbrk>
f011f9de:	83 c4 10             	add    $0x10,%esp
f011f9e1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f9e7:	83 ec 0c             	sub    $0xc,%esp
f011f9ea:	6a 00                	push   $0x0
f011f9ec:	e8 bb 90 fe ff       	call   f0108aac <sbrk>
f011f9f1:	83 c4 10             	add    $0x10,%esp
f011f9f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f9f7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f9fe:	e8 3d 4e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fa03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011fa06:	74 17                	je     f011fa1f <test_ksbrk+0xa10>
		{
			correct = 0;
f011fa08:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa0f:	83 ec 0c             	sub    $0xc,%esp
f011fa12:	68 20 e4 12 f0       	push   $0xf012e420
f011fa17:	e8 50 15 fe ff       	call   f0100f6c <cprintf>
f011fa1c:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 3)
f011fa1f:	e8 e5 df fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fa24:	89 c2                	mov    %eax,%edx
f011fa26:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fa29:	29 d0                	sub    %edx,%eax
f011fa2b:	83 f8 03             	cmp    $0x3,%eax
f011fa2e:	74 17                	je     f011fa47 <test_ksbrk+0xa38>
		{
			correct = 0;
f011fa30:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong allocation: pages are not loaded successfully into memory");
f011fa37:	83 ec 0c             	sub    $0xc,%esp
f011fa3a:	68 70 e8 12 f0       	push   $0xf012e870
f011fa3f:	e8 28 15 fe ff       	call   f0100f6c <cprintf>
f011fa44:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[9] != expectedVAs[9])
f011fa47:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fa4d:	89 c2                	mov    %eax,%edx
f011fa4f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fa55:	39 c2                	cmp    %eax,%edx
f011fa57:	74 25                	je     f011fa7e <test_ksbrk+0xa6f>
		{
			correct = 0;
f011fa59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011fa60:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011fa66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fa6c:	83 ec 04             	sub    $0x4,%esp
f011fa6f:	52                   	push   %edx
f011fa70:	50                   	push   %eax
f011fa71:	68 b4 e8 12 f0       	push   $0xf012e8b4
f011fa76:	e8 f1 14 fe ff       	call   f0100f6c <cprintf>
f011fa7b:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[9])
f011fa7e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011fa84:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011fa87:	74 21                	je     f011faaa <test_ksbrk+0xa9b>
		{
			correct = 0;
f011fa89:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011fa90:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fa96:	83 ec 04             	sub    $0x4,%esp
f011fa99:	50                   	push   %eax
f011fa9a:	ff 75 d0             	pushl  -0x30(%ebp)
f011fa9d:	68 e8 e8 12 f0       	push   $0xf012e8e8
f011faa2:	e8 c5 14 fe ff       	call   f0100f6c <cprintf>
f011faa7:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011faaa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011faae:	74 04                	je     f011fab4 <test_ksbrk+0xaa5>
			eval += 10;
f011fab0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}

	//cprintf("Test kheap sbrk completed. Evaluation = %d%%\n", eval);
	cprintf("[AUTO_GR@DING_PARTIAL]%d\n", eval);
f011fab4:	83 ec 08             	sub    $0x8,%esp
f011fab7:	ff 75 e4             	pushl  -0x1c(%ebp)
f011faba:	68 15 e9 12 f0       	push   $0xf012e915
f011fabf:	e8 a8 14 fe ff       	call   f0100f6c <cprintf>
f011fac4:	83 c4 10             	add    $0x10,%esp

	cprintf("=================\n\n");
f011fac7:	83 ec 0c             	sub    $0xc,%esp
f011faca:	68 2f e9 12 f0       	push   $0xf012e92f
f011facf:	e8 98 14 fe ff       	call   f0100f6c <cprintf>
f011fad4:	83 c4 10             	add    $0x10,%esp
	return 0;
f011fad7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011fadc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011fadf:	5b                   	pop    %ebx
f011fae0:	5e                   	pop    %esi
f011fae1:	5f                   	pop    %edi
f011fae2:	5d                   	pop    %ebp
f011fae3:	c3                   	ret    

f011fae4 <test_kmalloc_nextfit>:




int test_kmalloc_nextfit()
{
f011fae4:	55                   	push   %ebp
f011fae5:	89 e5                	mov    %esp,%ebp
f011fae7:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011faed:	83 ec 04             	sub    $0x4,%esp
f011faf0:	68 c8 e9 12 f0       	push   $0xf012e9c8
f011faf5:	68 76 08 00 00       	push   $0x876
f011fafa:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011faff:	e8 16 08 fe ff       	call   f010031a <_panic>

f011fb04 <test_kmalloc_bestfit1>:
	return 1;

}

int test_kmalloc_bestfit1()
{
f011fb04:	55                   	push   %ebp
f011fb05:	89 e5                	mov    %esp,%ebp
f011fb07:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb0a:	83 ec 04             	sub    $0x4,%esp
f011fb0d:	68 c8 e9 12 f0       	push   $0xf012e9c8
f011fb12:	68 1c 09 00 00       	push   $0x91c
f011fb17:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fb1c:	e8 f9 07 fe ff       	call   f010031a <_panic>

f011fb21 <test_kmalloc_bestfit2>:
	return 1;

}

int test_kmalloc_bestfit2()
{
f011fb21:	55                   	push   %ebp
f011fb22:	89 e5                	mov    %esp,%ebp
f011fb24:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb27:	83 ec 04             	sub    $0x4,%esp
f011fb2a:	68 c8 e9 12 f0       	push   $0xf012e9c8
f011fb2f:	68 c8 09 00 00       	push   $0x9c8
f011fb34:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fb39:	e8 dc 07 fe ff       	call   f010031a <_panic>

f011fb3e <test_kmalloc_worstfit>:
	return 1;

}

int test_kmalloc_worstfit()
{
f011fb3e:	55                   	push   %ebp
f011fb3f:	89 e5                	mov    %esp,%ebp
f011fb41:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb47:	83 ec 04             	sub    $0x4,%esp
f011fb4a:	68 c8 e9 12 f0       	push   $0xf012e9c8
f011fb4f:	68 6e 0a 00 00       	push   $0xa6e
f011fb54:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fb59:	e8 bc 07 fe ff       	call   f010031a <_panic>

f011fb5e <test_kfree>:

	return 1;
}

int test_kfree()
{
f011fb5e:	55                   	push   %ebp
f011fb5f:	89 e5                	mov    %esp,%ebp
f011fb61:	81 ec 08 01 00 00    	sub    $0x108,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb67:	83 ec 04             	sub    $0x4,%esp
f011fb6a:	68 c8 e9 12 f0       	push   $0xf012e9c8
f011fb6f:	68 14 0b 00 00       	push   $0xb14
f011fb74:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fb79:	e8 9c 07 fe ff       	call   f010031a <_panic>

f011fb7e <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011fb7e:	55                   	push   %ebp
f011fb7f:	89 e5                	mov    %esp,%ebp
f011fb81:	57                   	push   %edi
f011fb82:	56                   	push   %esi
f011fb83:	53                   	push   %ebx
f011fb84:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	if (firstCall)
f011fb8a:	a0 9c dd 17 f0       	mov    0xf017dd9c,%al
f011fb8f:	84 c0                	test   %al,%al
f011fb91:	74 56                	je     f011fbe9 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011fb93:	c6 05 9c dd 17 f0 00 	movb   $0x0,0xf017dd9c
		initFreeFrames = sys_calculate_free_frames() ;
f011fb9a:	e8 6a de fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fb9f:	a3 c8 b8 57 f0       	mov    %eax,0xf057b8c8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f011fba4:	e8 97 4c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fba9:	a3 c4 b8 57 f0       	mov    %eax,0xf057b8c4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011fbae:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011fbb4:	bb 25 eb 12 f0       	mov    $0xf012eb25,%ebx
f011fbb9:	ba 11 00 00 00       	mov    $0x11,%edx
f011fbbe:	89 c7                	mov    %eax,%edi
f011fbc0:	89 de                	mov    %ebx,%esi
f011fbc2:	89 d1                	mov    %edx,%ecx
f011fbc4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011fbc6:	8d 95 7d ff ff ff    	lea    -0x83(%ebp),%edx
f011fbcc:	b9 53 00 00 00       	mov    $0x53,%ecx
f011fbd1:	b0 00                	mov    $0x0,%al
f011fbd3:	89 d7                	mov    %edx,%edi
f011fbd5:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f011fbd7:	83 ec 0c             	sub    $0xc,%esp
f011fbda:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011fbe0:	50                   	push   %eax
f011fbe1:	e8 f6 22 fe ff       	call   f0101edc <execute_command>
f011fbe6:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f011fbe9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011fbf0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011fbf7:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f011fbfc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fbff:	eb 2b                	jmp    f011fc2c <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011fc01:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fc04:	83 c0 20             	add    $0x20,%eax
f011fc07:	83 ec 08             	sub    $0x8,%esp
f011fc0a:	68 0d ea 12 f0       	push   $0xf012ea0d
f011fc0f:	50                   	push   %eax
f011fc10:	e8 a6 27 00 00       	call   f01223bb <strcmp>
f011fc15:	83 c4 10             	add    $0x10,%esp
f011fc18:	85 c0                	test   %eax,%eax
f011fc1a:	75 08                	jne    f011fc24 <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f011fc1c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fc1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f011fc22:	eb 2f                	jmp    f011fc53 <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011fc24:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f011fc29:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fc2c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fc30:	74 08                	je     f011fc3a <test_three_creation_functions+0xbc>
f011fc32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fc35:	8b 40 08             	mov    0x8(%eax),%eax
f011fc38:	eb 05                	jmp    f011fc3f <test_three_creation_functions+0xc1>
f011fc3a:	b8 00 00 00 00       	mov    $0x0,%eax
f011fc3f:	a3 e8 64 55 f0       	mov    %eax,0xf05564e8
f011fc44:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f011fc49:	85 c0                	test   %eax,%eax
f011fc4b:	75 b4                	jne    f011fc01 <test_three_creation_functions+0x83>
f011fc4d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fc51:	75 ae                	jne    f011fc01 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f011fc53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fc56:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f011fc5c:	85 c0                	test   %eax,%eax
f011fc5e:	74 17                	je     f011fc77 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f011fc60:	83 ec 04             	sub    $0x4,%esp
f011fc63:	68 18 ea 12 f0       	push   $0xf012ea18
f011fc68:	68 f0 0c 00 00       	push   $0xcf0
f011fc6d:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fc72:	e8 a3 06 fe ff       	call   f010031a <_panic>

#if USE_KHEAP
		int pagesInWS = LIST_SIZE(&(e->page_WS_list));
#else
		int pagesInWS = env_page_ws_get_size(e);
f011fc77:	83 ec 0c             	sub    $0xc,%esp
f011fc7a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fc7d:	e8 dc 90 fe ff       	call   f0108d5e <env_page_ws_get_size>
f011fc82:	83 c4 10             	add    $0x10,%esp
f011fc85:	89 45 dc             	mov    %eax,-0x24(%ebp)
#endif
		int curFreeFrames = sys_calculate_free_frames() ;
f011fc88:	e8 7c dd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fc8d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011fc90:	e8 ab 4b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fc95:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc98:	a1 c4 b8 57 f0       	mov    0xf057b8c4,%eax
f011fc9d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011fca0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fca3:	74 17                	je     f011fcbc <test_three_creation_functions+0x13e>
f011fca5:	83 ec 04             	sub    $0x4,%esp
f011fca8:	68 20 e4 12 f0       	push   $0xf012e420
f011fcad:	68 fa 0c 00 00       	push   $0xcfa
f011fcb2:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fcb7:	e8 5e 06 fe ff       	call   f010031a <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fcbc:	a1 c8 b8 57 f0       	mov    0xf057b8c8,%eax
f011fcc1:	2b 45 d8             	sub    -0x28(%ebp),%eax
f011fcc4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011fcc7:	83 c2 15             	add    $0x15,%edx
f011fcca:	39 d0                	cmp    %edx,%eax
f011fccc:	74 17                	je     f011fce5 <test_three_creation_functions+0x167>
f011fcce:	83 ec 04             	sub    $0x4,%esp
f011fcd1:	68 88 e4 12 f0       	push   $0xf012e488
f011fcd6:	68 fc 0c 00 00       	push   $0xcfc
f011fcdb:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fce0:	e8 35 06 fe ff       	call   f010031a <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f011fce5:	83 ec 0c             	sub    $0xc,%esp
f011fce8:	68 00 10 00 00       	push   $0x1000
f011fced:	e8 c4 8d fe ff       	call   f0108ab6 <kmalloc>
f011fcf2:	83 c4 10             	add    $0x10,%esp
f011fcf5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f011fcf8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011fcfb:	3d 00 60 01 f8       	cmp    $0xf8016000,%eax
f011fd00:	74 17                	je     f011fd19 <test_three_creation_functions+0x19b>
f011fd02:	83 ec 04             	sub    $0x4,%esp
f011fd05:	68 68 ea 12 f0       	push   $0xf012ea68
f011fd0a:	68 00 0d 00 00       	push   $0xd00
f011fd0f:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fd14:	e8 01 06 fe ff       	call   f010031a <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f011fd19:	83 ec 0c             	sub    $0xc,%esp
f011fd1c:	68 d8 ea 12 f0       	push   $0xf012ead8
f011fd21:	e8 46 12 fe ff       	call   f0100f6c <cprintf>
f011fd26:	83 c4 10             	add    $0x10,%esp

	return 1;
f011fd29:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fd2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011fd31:	5b                   	pop    %ebx
f011fd32:	5e                   	pop    %esi
f011fd33:	5f                   	pop    %edi
f011fd34:	5d                   	pop    %ebp
f011fd35:	c3                   	ret    

f011fd36 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f011fd36:	55                   	push   %ebp
f011fd37:	89 e5                	mov    %esp,%ebp
f011fd39:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fd3c:	83 ec 04             	sub    $0x4,%esp
f011fd3f:	68 89 eb 12 f0       	push   $0xf012eb89
f011fd44:	68 0e 0d 00 00       	push   $0xd0e
f011fd49:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fd4e:	e8 c7 05 fe ff       	call   f010031a <_panic>

f011fd53 <test_kexpand>:

	return 1;

}
int test_kexpand(){
f011fd53:	55                   	push   %ebp
f011fd54:	89 e5                	mov    %esp,%ebp
f011fd56:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fd59:	83 ec 04             	sub    $0x4,%esp
f011fd5c:	68 89 eb 12 f0       	push   $0xf012eb89
f011fd61:	68 14 0d 00 00       	push   $0xd14
f011fd66:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fd6b:	e8 aa 05 fe ff       	call   f010031a <_panic>

f011fd70 <test_kshrink>:
	return 1;
}

int test_kshrink(){
f011fd70:	55                   	push   %ebp
f011fd71:	89 e5                	mov    %esp,%ebp
f011fd73:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fd76:	83 ec 04             	sub    $0x4,%esp
f011fd79:	68 89 eb 12 f0       	push   $0xf012eb89
f011fd7e:	68 19 0d 00 00       	push   $0xd19
f011fd83:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fd88:	e8 8d 05 fe ff       	call   f010031a <_panic>

f011fd8d <test_kfreelast>:
	return 1;
}
int test_kfreelast(){
f011fd8d:	55                   	push   %ebp
f011fd8e:	89 e5                	mov    %esp,%ebp
f011fd90:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fd93:	83 ec 04             	sub    $0x4,%esp
f011fd96:	68 89 eb 12 f0       	push   $0xf012eb89
f011fd9b:	68 1d 0d 00 00       	push   $0xd1d
f011fda0:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fda5:	e8 70 05 fe ff       	call   f010031a <_panic>

f011fdaa <test_krealloc>:
	return 1;
}

int test_krealloc() {
f011fdaa:	55                   	push   %ebp
f011fdab:	89 e5                	mov    %esp,%ebp
f011fdad:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011fdb0:	83 ec 0c             	sub    $0xc,%esp
f011fdb3:	68 40 db 12 f0       	push   $0xf012db40
f011fdb8:	e8 af 11 fe ff       	call   f0100f6c <cprintf>
f011fdbd:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011fdc0:	83 ec 0c             	sub    $0xc,%esp
f011fdc3:	68 70 db 12 f0       	push   $0xf012db70
f011fdc8:	e8 9f 11 fe ff       	call   f0100f6c <cprintf>
f011fdcd:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011fdd0:	83 ec 0c             	sub    $0xc,%esp
f011fdd3:	68 40 db 12 f0       	push   $0xf012db40
f011fdd8:	e8 8f 11 fe ff       	call   f0100f6c <cprintf>
f011fddd:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011fde0:	83 ec 04             	sub    $0x4,%esp
f011fde3:	68 89 eb 12 f0       	push   $0xf012eb89
f011fde8:	68 26 0d 00 00       	push   $0xd26
f011fded:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fdf2:	e8 23 05 fe ff       	call   f010031a <_panic>

f011fdf7 <test_krealloc_BF>:
	return 0;
}


int test_krealloc_BF() {
f011fdf7:	55                   	push   %ebp
f011fdf8:	89 e5                	mov    %esp,%ebp
f011fdfa:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011fdfd:	83 ec 0c             	sub    $0xc,%esp
f011fe00:	68 40 db 12 f0       	push   $0xf012db40
f011fe05:	e8 62 11 fe ff       	call   f0100f6c <cprintf>
f011fe0a:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011fe0d:	83 ec 0c             	sub    $0xc,%esp
f011fe10:	68 70 db 12 f0       	push   $0xf012db70
f011fe15:	e8 52 11 fe ff       	call   f0100f6c <cprintf>
f011fe1a:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011fe1d:	83 ec 0c             	sub    $0xc,%esp
f011fe20:	68 40 db 12 f0       	push   $0xf012db40
f011fe25:	e8 42 11 fe ff       	call   f0100f6c <cprintf>
f011fe2a:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011fe2d:	83 ec 04             	sub    $0x4,%esp
f011fe30:	68 89 eb 12 f0       	push   $0xf012eb89
f011fe35:	68 30 0d 00 00       	push   $0xd30
f011fe3a:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fe3f:	e8 d6 04 fe ff       	call   f010031a <_panic>

f011fe44 <test_krealloc_FF1>:
	return 0;
}

int test_krealloc_FF1()
{
f011fe44:	55                   	push   %ebp
f011fe45:	89 e5                	mov    %esp,%ebp
f011fe47:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011fe4a:	83 ec 0c             	sub    $0xc,%esp
f011fe4d:	68 a0 eb 12 f0       	push   $0xf012eba0
f011fe52:	e8 15 11 fe ff       	call   f0100f6c <cprintf>
f011fe57:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [BLOCK ALLOCATOR]******\n") ;
f011fe5a:	83 ec 0c             	sub    $0xc,%esp
f011fe5d:	68 d8 eb 12 f0       	push   $0xf012ebd8
f011fe62:	e8 05 11 fe ff       	call   f0100f6c <cprintf>
f011fe67:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011fe6a:	83 ec 0c             	sub    $0xc,%esp
f011fe6d:	68 a0 eb 12 f0       	push   $0xf012eba0
f011fe72:	e8 f5 10 fe ff       	call   f0100f6c <cprintf>
f011fe77:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011fe7a:	83 ec 04             	sub    $0x4,%esp
f011fe7d:	68 89 eb 12 f0       	push   $0xf012eb89
f011fe82:	68 3a 0d 00 00       	push   $0xd3a
f011fe87:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fe8c:	e8 89 04 fe ff       	call   f010031a <_panic>

f011fe91 <test_krealloc_FF2>:
	return 0;

}
int test_krealloc_FF2()
{
f011fe91:	55                   	push   %ebp
f011fe92:	89 e5                	mov    %esp,%ebp
f011fe94:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011fe97:	83 ec 0c             	sub    $0xc,%esp
f011fe9a:	68 a0 eb 12 f0       	push   $0xf012eba0
f011fe9f:	e8 c8 10 fe ff       	call   f0100f6c <cprintf>
f011fea4:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [PAGE ALLOCATOR]******\n") ;
f011fea7:	83 ec 0c             	sub    $0xc,%esp
f011feaa:	68 24 ec 12 f0       	push   $0xf012ec24
f011feaf:	e8 b8 10 fe ff       	call   f0100f6c <cprintf>
f011feb4:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011feb7:	83 ec 0c             	sub    $0xc,%esp
f011feba:	68 a0 eb 12 f0       	push   $0xf012eba0
f011febf:	e8 a8 10 fe ff       	call   f0100f6c <cprintf>
f011fec4:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011fec7:	83 ec 04             	sub    $0x4,%esp
f011feca:	68 89 eb 12 f0       	push   $0xf012eb89
f011fecf:	68 44 0d 00 00       	push   $0xd44
f011fed4:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011fed9:	e8 3c 04 fe ff       	call   f010031a <_panic>

f011fede <test_krealloc_FF3>:
	return 0;
}

int test_krealloc_FF3()
{
f011fede:	55                   	push   %ebp
f011fedf:	89 e5                	mov    %esp,%ebp
f011fee1:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011fee4:	83 ec 0c             	sub    $0xc,%esp
f011fee7:	68 a0 eb 12 f0       	push   $0xf012eba0
f011feec:	e8 7b 10 fe ff       	call   f0100f6c <cprintf>
f011fef1:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [SWITCH FROM PAGE ALLOCATOR TO DYNAMIC ALLOCATOR AND VICE VERSA]******\n") ;
f011fef4:	83 ec 0c             	sub    $0xc,%esp
f011fef7:	68 6c ec 12 f0       	push   $0xf012ec6c
f011fefc:	e8 6b 10 fe ff       	call   f0100f6c <cprintf>
f011ff01:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011ff04:	83 ec 0c             	sub    $0xc,%esp
f011ff07:	68 a0 eb 12 f0       	push   $0xf012eba0
f011ff0c:	e8 5b 10 fe ff       	call   f0100f6c <cprintf>
f011ff11:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011ff14:	83 ec 04             	sub    $0x4,%esp
f011ff17:	68 89 eb 12 f0       	push   $0xf012eb89
f011ff1c:	68 4e 0d 00 00       	push   $0xd4e
f011ff21:	68 b2 e2 12 f0       	push   $0xf012e2b2
f011ff26:	e8 ef 03 fe ff       	call   f010031a <_panic>

f011ff2b <print_order>:
uint8 firstTimeTestBSD = 1;
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
f011ff2b:	55                   	push   %ebp
f011ff2c:	89 e5                	mov    %esp,%ebp
f011ff2e:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011ff31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff38:	e9 84 00 00 00       	jmp    f011ffc1 <print_order+0x96>
	{
		cprintf("\t[%d]: ", i);
f011ff3d:	83 ec 08             	sub    $0x8,%esp
f011ff40:	ff 75 f4             	pushl  -0xc(%ebp)
f011ff43:	68 e4 ec 12 f0       	push   $0xf012ece4
f011ff48:	e8 1f 10 fe ff       	call   f0100f6c <cprintf>
f011ff4d:	83 c4 10             	add    $0x10,%esp
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f011ff50:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ff57:	eb 4c                	jmp    f011ffa5 <print_order+0x7a>
		{
			if (prog_orders[i][j] == 0)
f011ff59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff5c:	89 d0                	mov    %edx,%eax
f011ff5e:	c1 e0 02             	shl    $0x2,%eax
f011ff61:	01 d0                	add    %edx,%eax
f011ff63:	c1 e0 03             	shl    $0x3,%eax
f011ff66:	89 c2                	mov    %eax,%edx
f011ff68:	8b 45 08             	mov    0x8(%ebp),%eax
f011ff6b:	01 c2                	add    %eax,%edx
f011ff6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ff70:	8b 04 82             	mov    (%edx,%eax,4),%eax
f011ff73:	85 c0                	test   %eax,%eax
f011ff75:	74 36                	je     f011ffad <print_order+0x82>
				break;
			cprintf("%d, ", prog_orders[i][j]);
f011ff77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff7a:	89 d0                	mov    %edx,%eax
f011ff7c:	c1 e0 02             	shl    $0x2,%eax
f011ff7f:	01 d0                	add    %edx,%eax
f011ff81:	c1 e0 03             	shl    $0x3,%eax
f011ff84:	89 c2                	mov    %eax,%edx
f011ff86:	8b 45 08             	mov    0x8(%ebp),%eax
f011ff89:	01 c2                	add    %eax,%edx
f011ff8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ff8e:	8b 04 82             	mov    (%edx,%eax,4),%eax
f011ff91:	83 ec 08             	sub    $0x8,%esp
f011ff94:	50                   	push   %eax
f011ff95:	68 ec ec 12 f0       	push   $0xf012ecec
f011ff9a:	e8 cd 0f fe ff       	call   f0100f6c <cprintf>
f011ff9f:	83 c4 10             	add    $0x10,%esp
void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
	{
		cprintf("\t[%d]: ", i);
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f011ffa2:	ff 45 f0             	incl   -0x10(%ebp)
f011ffa5:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f011ffa9:	7e ae                	jle    f011ff59 <print_order+0x2e>
f011ffab:	eb 01                	jmp    f011ffae <print_order+0x83>
		{
			if (prog_orders[i][j] == 0)
				break;
f011ffad:	90                   	nop
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
f011ffae:	83 ec 0c             	sub    $0xc,%esp
f011ffb1:	68 f1 ec 12 f0       	push   $0xf012ecf1
f011ffb6:	e8 b1 0f fe ff       	call   f0100f6c <cprintf>
f011ffbb:	83 c4 10             	add    $0x10,%esp
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011ffbe:	ff 45 f4             	incl   -0xc(%ebp)
f011ffc1:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
f011ffc5:	0f 8e 72 ff ff ff    	jle    f011ff3d <print_order+0x12>
				break;
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
	}
}
f011ffcb:	90                   	nop
f011ffcc:	c9                   	leave  
f011ffcd:	c3                   	ret    

f011ffce <find_in_range>:

int find_in_range(int env_id, int start, int count)
{
f011ffce:	55                   	push   %ebp
f011ffcf:	89 e5                	mov    %esp,%ebp
f011ffd1:	83 ec 28             	sub    $0x28,%esp
	int ret = -1;
f011ffd4:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	acquire_spinlock(&ProcessQueues.qlock);
f011ffdb:	83 ec 0c             	sub    $0xc,%esp
f011ffde:	68 60 64 55 f0       	push   $0xf0556460
f011ffe3:	e8 ef ea fe ff       	call   f010ead7 <acquire_spinlock>
f011ffe8:	83 c4 10             	add    $0x10,%esp
	{
		struct Env *env = NULL;
f011ffeb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		int i = 0, end = start + count;
f011fff2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011fff9:	8b 55 0c             	mov    0xc(%ebp),%edx
f011fffc:	8b 45 10             	mov    0x10(%ebp),%eax
f011ffff:	01 d0                	add    %edx,%eax
f0120001:	89 45 e8             	mov    %eax,-0x18(%ebp)

		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f0120004:	a1 ec 64 55 f0       	mov    0xf05564ec,%eax
f0120009:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		env = LIST_LAST(&ProcessQueues.env_exit_queue);
f012000c:	a1 e4 64 55 f0       	mov    0xf05564e4,%eax
f0120011:	89 45 f0             	mov    %eax,-0x10(%ebp)

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
f0120014:	ff 75 e8             	pushl  -0x18(%ebp)
f0120017:	ff 75 0c             	pushl  0xc(%ebp)
f012001a:	ff 75 08             	pushl  0x8(%ebp)
f012001d:	68 f4 ec 12 f0       	push   $0xf012ecf4
f0120022:	e8 45 0f fe ff       	call   f0100f6c <cprintf>
f0120027:	83 c4 10             	add    $0x10,%esp
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f012002a:	eb 34                	jmp    f0120060 <find_in_range+0x92>
			//LIST_FOREACH_R(env, &env_exit_queue)
		{
			if (i < start)
f012002c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012002f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120032:	7d 05                	jge    f0120039 <find_in_range+0x6b>
			{
				i++;
f0120034:	ff 45 ec             	incl   -0x14(%ebp)
				continue;
f0120037:	eb 1e                	jmp    f0120057 <find_in_range+0x89>
			}
			if (i >= end)
f0120039:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012003c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012003f:	7d 29                	jge    f012006a <find_in_range+0x9c>
				//return -1;
				break;

			if (env_id == env->env_id)
f0120041:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120044:	8b 40 10             	mov    0x10(%eax),%eax
f0120047:	3b 45 08             	cmp    0x8(%ebp),%eax
f012004a:	75 08                	jne    f0120054 <find_in_range+0x86>
			{
				ret = i;
f012004c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012004f:	89 45 f4             	mov    %eax,-0xc(%ebp)
				break;
f0120052:	eb 17                	jmp    f012006b <find_in_range+0x9d>
			}
			i++;
f0120054:	ff 45 ec             	incl   -0x14(%ebp)
		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
		env = LIST_LAST(&ProcessQueues.env_exit_queue);

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f0120057:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012005a:	8b 40 0c             	mov    0xc(%eax),%eax
f012005d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120060:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120063:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0120066:	7c c4                	jl     f012002c <find_in_range+0x5e>
f0120068:	eb 01                	jmp    f012006b <find_in_range+0x9d>
				i++;
				continue;
			}
			if (i >= end)
				//return -1;
				break;
f012006a:	90                   	nop
				break;
			}
			i++;
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f012006b:	83 ec 0c             	sub    $0xc,%esp
f012006e:	68 60 64 55 f0       	push   $0xf0556460
f0120073:	e8 e6 ea fe ff       	call   f010eb5e <release_spinlock>
f0120078:	83 c4 10             	add    $0x10,%esp
	return ret;
f012007b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012007e:	c9                   	leave  
f012007f:	c3                   	ret    

f0120080 <test_bsd_nice_0>:


void test_bsd_nice_0()
{
f0120080:	55                   	push   %ebp
f0120081:	89 e5                	mov    %esp,%ebp
f0120083:	57                   	push   %edi
f0120084:	56                   	push   %esi
f0120085:	53                   	push   %ebx
f0120086:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f0120089:	a0 9d dd 17 f0       	mov    0xf017dd9d,%al
f012008e:	84 c0                	test   %al,%al
f0120090:	0f 84 9b 01 00 00    	je     f0120231 <test_bsd_nice_0+0x1b1>
	{
		firstTimeTestBSD = 0;
f0120096:	c6 05 9d dd 17 f0 00 	movb   $0x0,0xf017dd9d
		int nice_values[] = {-10, -5, 0, 5, 10};
f012009d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01200a0:	bb 6c ee 12 f0       	mov    $0xf012ee6c,%ebx
f01200a5:	ba 05 00 00 00       	mov    $0x5,%edx
f01200aa:	89 c7                	mov    %eax,%edi
f01200ac:	89 de                	mov    %ebx,%esi
f01200ae:	89 d1                	mov    %edx,%ecx
f01200b0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f01200b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01200b9:	e9 44 01 00 00       	jmp    f0120202 <test_bsd_nice_0+0x182>
		{
			struct Env *env = env_create("bsd_fib", 500, 0, 0);
f01200be:	6a 00                	push   $0x0
f01200c0:	6a 00                	push   $0x0
f01200c2:	68 f4 01 00 00       	push   $0x1f4
f01200c7:	68 25 ed 12 f0       	push   $0xf012ed25
f01200cc:	e8 9f 99 fe ff       	call   f0109a70 <env_create>
f01200d1:	83 c4 10             	add    $0x10,%esp
f01200d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f01200d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01200da:	b9 05 00 00 00       	mov    $0x5,%ecx
f01200df:	99                   	cltd   
f01200e0:	f7 f9                	idiv   %ecx
f01200e2:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f01200e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01200e8:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f01200ec:	83 ec 08             	sub    $0x8,%esp
f01200ef:	50                   	push   %eax
f01200f0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01200f3:	e8 af 65 fe ff       	call   f01066a7 <env_set_nice>
f01200f8:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f01200fb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01200ff:	75 14                	jne    f0120115 <test_bsd_nice_0+0x95>
				panic("Loading programs failed\n");
f0120101:	83 ec 04             	sub    $0x4,%esp
f0120104:	68 2d ed 12 f0       	push   $0xf012ed2d
f0120109:	6a 53                	push   $0x53
f012010b:	68 46 ed 12 f0       	push   $0xf012ed46
f0120110:	e8 05 02 fe ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 500)
f0120115:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120118:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f012011e:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f0120123:	74 14                	je     f0120139 <test_bsd_nice_0+0xb9>
				panic("The program working set size is not correct\n");
f0120125:	83 ec 04             	sub    $0x4,%esp
f0120128:	68 64 ed 12 f0       	push   $0xf012ed64
f012012d:	6a 55                	push   $0x55
f012012f:	68 46 ed 12 f0       	push   $0xf012ed46
f0120134:	e8 e1 01 fe ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f0120139:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012013c:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f0120140:	83 c0 0a             	add    $0xa,%eax
f0120143:	83 f8 14             	cmp    $0x14,%eax
f0120146:	0f 87 a5 00 00 00    	ja     f01201f1 <test_bsd_nice_0+0x171>
f012014c:	8b 04 85 80 ee 12 f0 	mov    -0xfed1180(,%eax,4),%eax
f0120153:	ff e0                	jmp    *%eax
			{
			case -10:
				prog_orders[0][nice_count[0]++] = env->env_id;
f0120155:	a1 9c 62 55 f0       	mov    0xf055629c,%eax
f012015a:	8d 50 01             	lea    0x1(%eax),%edx
f012015d:	89 15 9c 62 55 f0    	mov    %edx,0xf055629c
f0120163:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120166:	8b 52 10             	mov    0x10(%edx),%edx
f0120169:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f0120170:	eb 7f                	jmp    f01201f1 <test_bsd_nice_0+0x171>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f0120172:	a1 a0 62 55 f0       	mov    0xf05562a0,%eax
f0120177:	8d 50 01             	lea    0x1(%eax),%edx
f012017a:	89 15 a0 62 55 f0    	mov    %edx,0xf05562a0
f0120180:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120183:	8b 52 10             	mov    0x10(%edx),%edx
f0120186:	83 c0 0a             	add    $0xa,%eax
f0120189:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f0120190:	eb 5f                	jmp    f01201f1 <test_bsd_nice_0+0x171>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f0120192:	a1 a4 62 55 f0       	mov    0xf05562a4,%eax
f0120197:	8d 50 01             	lea    0x1(%eax),%edx
f012019a:	89 15 a4 62 55 f0    	mov    %edx,0xf05562a4
f01201a0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01201a3:	8b 52 10             	mov    0x10(%edx),%edx
f01201a6:	83 c0 14             	add    $0x14,%eax
f01201a9:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f01201b0:	eb 3f                	jmp    f01201f1 <test_bsd_nice_0+0x171>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f01201b2:	a1 a8 62 55 f0       	mov    0xf05562a8,%eax
f01201b7:	8d 50 01             	lea    0x1(%eax),%edx
f01201ba:	89 15 a8 62 55 f0    	mov    %edx,0xf05562a8
f01201c0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01201c3:	8b 52 10             	mov    0x10(%edx),%edx
f01201c6:	83 c0 1e             	add    $0x1e,%eax
f01201c9:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f01201d0:	eb 1f                	jmp    f01201f1 <test_bsd_nice_0+0x171>
			case 10:
				prog_orders[4][nice_count[4]++] = env->env_id;
f01201d2:	a1 ac 62 55 f0       	mov    0xf05562ac,%eax
f01201d7:	8d 50 01             	lea    0x1(%eax),%edx
f01201da:	89 15 ac 62 55 f0    	mov    %edx,0xf05562ac
f01201e0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01201e3:	8b 52 10             	mov    0x10(%edx),%edx
f01201e6:	83 c0 28             	add    $0x28,%eax
f01201e9:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f01201f0:	90                   	nop
			}
			sched_new_env(env);
f01201f1:	83 ec 0c             	sub    $0xc,%esp
f01201f4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01201f7:	e8 a9 54 fe ff       	call   f01056a5 <sched_new_env>
f01201fc:	83 c4 10             	add    $0x10,%esp
{
	if (firstTimeTestBSD)
	{
		firstTimeTestBSD = 0;
		int nice_values[] = {-10, -5, 0, 5, 10};
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f01201ff:	ff 45 e4             	incl   -0x1c(%ebp)
f0120202:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
f0120206:	0f 8e b2 fe ff ff    	jle    f01200be <test_bsd_nice_0+0x3e>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f012020c:	83 ec 0c             	sub    $0xc,%esp
f012020f:	68 94 ed 12 f0       	push   $0xf012ed94
f0120214:	e8 53 0d fe ff       	call   f0100f6c <cprintf>
f0120219:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f012021c:	83 ec 0c             	sub    $0xc,%esp
f012021f:	68 e3 ed 12 f0       	push   $0xf012ede3
f0120224:	e8 b3 1c fe ff       	call   f0101edc <execute_command>
f0120229:	83 c4 10             	add    $0x10,%esp
f012022c:	e9 c0 00 00 00       	jmp    f01202f1 <test_bsd_nice_0+0x271>
	}
	else
	{
		cprintf("> Checking...\n");
f0120231:	83 ec 0c             	sub    $0xc,%esp
f0120234:	68 ea ed 12 f0       	push   $0xf012edea
f0120239:	e8 2e 0d fe ff       	call   f0100f6c <cprintf>
f012023e:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f0120241:	e8 db 5b fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f0120246:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012024d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0120254:	e9 87 00 00 00       	jmp    f01202e0 <test_bsd_nice_0+0x260>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f0120259:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0120260:	eb 52                	jmp    f01202b4 <test_bsd_nice_0+0x234>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f0120262:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120265:	8b 14 85 9c 62 55 f0 	mov    -0xfaa9d64(,%eax,4),%edx
f012026c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012026f:	89 c8                	mov    %ecx,%eax
f0120271:	c1 e0 02             	shl    $0x2,%eax
f0120274:	01 c8                	add    %ecx,%eax
f0120276:	01 c0                	add    %eax,%eax
f0120278:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012027b:	01 c8                	add    %ecx,%eax
f012027d:	8b 04 85 e0 b8 57 f0 	mov    -0xfa84720(,%eax,4),%eax
f0120284:	83 ec 04             	sub    $0x4,%esp
f0120287:	52                   	push   %edx
f0120288:	ff 75 e0             	pushl  -0x20(%ebp)
f012028b:	50                   	push   %eax
f012028c:	e8 3d fd ff ff       	call   f011ffce <find_in_range>
f0120291:	83 c4 10             	add    $0x10,%esp
f0120294:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f0120297:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f012029b:	75 14                	jne    f01202b1 <test_bsd_nice_0+0x231>
					panic("The programs' order of finishing is not correct\n");
f012029d:	83 ec 04             	sub    $0x4,%esp
f01202a0:	68 fc ed 12 f0       	push   $0xf012edfc
f01202a5:	6a 7b                	push   $0x7b
f01202a7:	68 46 ed 12 f0       	push   $0xf012ed46
f01202ac:	e8 69 00 fe ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f01202b1:	ff 45 d8             	incl   -0x28(%ebp)
f01202b4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01202b7:	89 d0                	mov    %edx,%eax
f01202b9:	c1 e0 02             	shl    $0x2,%eax
f01202bc:	01 d0                	add    %edx,%eax
f01202be:	01 c0                	add    %eax,%eax
f01202c0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01202c3:	01 d0                	add    %edx,%eax
f01202c5:	8b 04 85 e0 b8 57 f0 	mov    -0xfa84720(,%eax,4),%eax
f01202cc:	85 c0                	test   %eax,%eax
f01202ce:	75 92                	jne    f0120262 <test_bsd_nice_0+0x1e2>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f01202d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01202d3:	8b 04 85 9c 62 55 f0 	mov    -0xfaa9d64(,%eax,4),%eax
f01202da:	01 45 e0             	add    %eax,-0x20(%ebp)
	{
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f01202dd:	ff 45 dc             	incl   -0x24(%ebp)
f01202e0:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f01202e4:	0f 8e 6f ff ff ff    	jle    f0120259 <test_bsd_nice_0+0x1d9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f01202ea:	c6 05 9d dd 17 f0 00 	movb   $0x0,0xf017dd9d
	}
	cprintf("\nCongratulations!! test_bsd_nice_0 completed successfully.\n");
f01202f1:	83 ec 0c             	sub    $0xc,%esp
f01202f4:	68 30 ee 12 f0       	push   $0xf012ee30
f01202f9:	e8 6e 0c fe ff       	call   f0100f6c <cprintf>
f01202fe:	83 c4 10             	add    $0x10,%esp
}
f0120301:	90                   	nop
f0120302:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0120305:	5b                   	pop    %ebx
f0120306:	5e                   	pop    %esi
f0120307:	5f                   	pop    %edi
f0120308:	5d                   	pop    %ebp
f0120309:	c3                   	ret    

f012030a <test_bsd_nice_1>:


void test_bsd_nice_1()
{
f012030a:	55                   	push   %ebp
f012030b:	89 e5                	mov    %esp,%ebp
f012030d:	83 ec 28             	sub    $0x28,%esp
	if (firstTimeTestBSD)
f0120310:	a0 9d dd 17 f0       	mov    0xf017dd9d,%al
f0120315:	84 c0                	test   %al,%al
f0120317:	0f 84 50 01 00 00    	je     f012046d <test_bsd_nice_1+0x163>
	{
		firstTimeTestBSD = 0;
f012031d:	c6 05 9d dd 17 f0 00 	movb   $0x0,0xf017dd9d
		struct Env *fibEnv = env_create("bsd_fib", 500, 0, 0);
f0120324:	6a 00                	push   $0x0
f0120326:	6a 00                	push   $0x0
f0120328:	68 f4 01 00 00       	push   $0x1f4
f012032d:	68 25 ed 12 f0       	push   $0xf012ed25
f0120332:	e8 39 97 fe ff       	call   f0109a70 <env_create>
f0120337:	83 c4 10             	add    $0x10,%esp
f012033a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		struct Env *fibposnEnv = env_create("bsd_fib_posn", 500, 0, 0);
f012033d:	6a 00                	push   $0x0
f012033f:	6a 00                	push   $0x0
f0120341:	68 f4 01 00 00       	push   $0x1f4
f0120346:	68 d4 ee 12 f0       	push   $0xf012eed4
f012034b:	e8 20 97 fe ff       	call   f0109a70 <env_create>
f0120350:	83 c4 10             	add    $0x10,%esp
f0120353:	89 45 e8             	mov    %eax,-0x18(%ebp)
		struct Env *fibnegnEnv = env_create("bsd_fib_negn", 500, 0, 0);
f0120356:	6a 00                	push   $0x0
f0120358:	6a 00                	push   $0x0
f012035a:	68 f4 01 00 00       	push   $0x1f4
f012035f:	68 e1 ee 12 f0       	push   $0xf012eee1
f0120364:	e8 07 97 fe ff       	call   f0109a70 <env_create>
f0120369:	83 c4 10             	add    $0x10,%esp
f012036c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (fibEnv == NULL || fibposnEnv == NULL || fibnegnEnv == NULL)
f012036f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120373:	74 0c                	je     f0120381 <test_bsd_nice_1+0x77>
f0120375:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0120379:	74 06                	je     f0120381 <test_bsd_nice_1+0x77>
f012037b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012037f:	75 17                	jne    f0120398 <test_bsd_nice_1+0x8e>
			panic("Loading programs failed\n");
f0120381:	83 ec 04             	sub    $0x4,%esp
f0120384:	68 2d ed 12 f0       	push   $0xf012ed2d
f0120389:	68 8e 00 00 00       	push   $0x8e
f012038e:	68 46 ed 12 f0       	push   $0xf012ed46
f0120393:	e8 82 ff fd ff       	call   f010031a <_panic>
		if (fibEnv->page_WS_max_size != 500 || fibposnEnv->page_WS_max_size != 500 || fibnegnEnv->page_WS_max_size != 500)
f0120398:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012039b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01203a1:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f01203a6:	75 20                	jne    f01203c8 <test_bsd_nice_1+0xbe>
f01203a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01203ab:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01203b1:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f01203b6:	75 10                	jne    f01203c8 <test_bsd_nice_1+0xbe>
f01203b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01203bb:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01203c1:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f01203c6:	74 35                	je     f01203fd <test_bsd_nice_1+0xf3>
			panic("The programs should be initially loaded with the given working set size. fib: %d, fibposn: %d, fibnegn: %d\n", fibEnv->page_WS_max_size, fibposnEnv->page_WS_max_size, fibnegnEnv->page_WS_max_size);
f01203c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01203cb:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f01203d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01203d4:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f01203da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01203dd:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01203e3:	83 ec 08             	sub    $0x8,%esp
f01203e6:	51                   	push   %ecx
f01203e7:	52                   	push   %edx
f01203e8:	50                   	push   %eax
f01203e9:	68 f0 ee 12 f0       	push   $0xf012eef0
f01203ee:	68 90 00 00 00       	push   $0x90
f01203f3:	68 46 ed 12 f0       	push   $0xf012ed46
f01203f8:	e8 1d ff fd ff       	call   f010031a <_panic>
		sched_new_env(fibEnv);
f01203fd:	83 ec 0c             	sub    $0xc,%esp
f0120400:	ff 75 ec             	pushl  -0x14(%ebp)
f0120403:	e8 9d 52 fe ff       	call   f01056a5 <sched_new_env>
f0120408:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibposnEnv);
f012040b:	83 ec 0c             	sub    $0xc,%esp
f012040e:	ff 75 e8             	pushl  -0x18(%ebp)
f0120411:	e8 8f 52 fe ff       	call   f01056a5 <sched_new_env>
f0120416:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibnegnEnv);
f0120419:	83 ec 0c             	sub    $0xc,%esp
f012041c:	ff 75 e4             	pushl  -0x1c(%ebp)
f012041f:	e8 81 52 fe ff       	call   f01056a5 <sched_new_env>
f0120424:	83 c4 10             	add    $0x10,%esp
		prog_orders[0][0] = fibnegnEnv->env_id;
f0120427:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012042a:	8b 40 10             	mov    0x10(%eax),%eax
f012042d:	a3 e0 b8 57 f0       	mov    %eax,0xf057b8e0
		prog_orders[1][0] = fibEnv->env_id;
f0120432:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120435:	8b 40 10             	mov    0x10(%eax),%eax
f0120438:	a3 08 b9 57 f0       	mov    %eax,0xf057b908
		prog_orders[2][0] = fibposnEnv->env_id;
f012043d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120440:	8b 40 10             	mov    0x10(%eax),%eax
f0120443:	a3 30 b9 57 f0       	mov    %eax,0xf057b930
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f0120448:	83 ec 0c             	sub    $0xc,%esp
f012044b:	68 94 ed 12 f0       	push   $0xf012ed94
f0120450:	e8 17 0b fe ff       	call   f0100f6c <cprintf>
f0120455:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f0120458:	83 ec 0c             	sub    $0xc,%esp
f012045b:	68 e3 ed 12 f0       	push   $0xf012ede3
f0120460:	e8 77 1a fe ff       	call   f0101edc <execute_command>
f0120465:	83 c4 10             	add    $0x10,%esp
f0120468:	e9 9e 00 00 00       	jmp    f012050b <test_bsd_nice_1+0x201>
	}
	else
	{
		cprintf("> Checking...\n");
f012046d:	83 ec 0c             	sub    $0xc,%esp
f0120470:	68 ea ed 12 f0       	push   $0xf012edea
f0120475:	e8 f2 0a fe ff       	call   f0100f6c <cprintf>
f012047a:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f012047d:	e8 9f 59 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int i = 0;
f0120482:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		struct Env *env = NULL;
f0120489:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
f0120490:	83 ec 0c             	sub    $0xc,%esp
f0120493:	68 60 64 55 f0       	push   $0xf0556460
f0120498:	e8 3a e6 fe ff       	call   f010ead7 <acquire_spinlock>
f012049d:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f01204a0:	a1 ec 64 55 f0       	mov    0xf05564ec,%eax
f01204a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f01204a8:	a1 e4 64 55 f0       	mov    0xf05564e4,%eax
f01204ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f01204b0:	eb 41                	jmp    f01204f3 <test_bsd_nice_1+0x1e9>
				//LIST_FOREACH_R(env, &env_exit_queue)
			{
				//cprintf("%s - id=%d, priority=%d, nice=%d\n", env->prog_name, env->env_id, env->priority, env->nice);
				if (prog_orders[i][0] != env->env_id)
f01204b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01204b5:	89 d0                	mov    %edx,%eax
f01204b7:	c1 e0 02             	shl    $0x2,%eax
f01204ba:	01 d0                	add    %edx,%eax
f01204bc:	c1 e0 03             	shl    $0x3,%eax
f01204bf:	05 e0 b8 57 f0       	add    $0xf057b8e0,%eax
f01204c4:	8b 10                	mov    (%eax),%edx
f01204c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01204c9:	8b 40 10             	mov    0x10(%eax),%eax
f01204cc:	39 c2                	cmp    %eax,%edx
f01204ce:	74 17                	je     f01204e7 <test_bsd_nice_1+0x1dd>
					panic("The programs' order of finishing is not correct\n");
f01204d0:	83 ec 04             	sub    $0x4,%esp
f01204d3:	68 fc ed 12 f0       	push   $0xf012edfc
f01204d8:	68 ab 00 00 00       	push   $0xab
f01204dd:	68 46 ed 12 f0       	push   $0xf012ed46
f01204e2:	e8 33 fe fd ff       	call   f010031a <_panic>
				i++;
f01204e7:	ff 45 f4             	incl   -0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f01204ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01204ed:	8b 40 0c             	mov    0xc(%eax),%eax
f01204f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01204f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01204f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01204f9:	7c b7                	jl     f01204b2 <test_bsd_nice_1+0x1a8>
				if (prog_orders[i][0] != env->env_id)
					panic("The programs' order of finishing is not correct\n");
				i++;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f01204fb:	83 ec 0c             	sub    $0xc,%esp
f01204fe:	68 60 64 55 f0       	push   $0xf0556460
f0120503:	e8 56 e6 fe ff       	call   f010eb5e <release_spinlock>
f0120508:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\nCongratulations!! test_bsd_nice_1 completed successfully.\n");
f012050b:	83 ec 0c             	sub    $0xc,%esp
f012050e:	68 5c ef 12 f0       	push   $0xf012ef5c
f0120513:	e8 54 0a fe ff       	call   f0100f6c <cprintf>
f0120518:	83 c4 10             	add    $0x10,%esp
}
f012051b:	90                   	nop
f012051c:	c9                   	leave  
f012051d:	c3                   	ret    

f012051e <test_bsd_nice_2>:

void test_bsd_nice_2()
{
f012051e:	55                   	push   %ebp
f012051f:	89 e5                	mov    %esp,%ebp
f0120521:	57                   	push   %edi
f0120522:	56                   	push   %esi
f0120523:	53                   	push   %ebx
f0120524:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f0120527:	a0 9d dd 17 f0       	mov    0xf017dd9d,%al
f012052c:	84 c0                	test   %al,%al
f012052e:	0f 84 ae 01 00 00    	je     f01206e2 <test_bsd_nice_2+0x1c4>
	{
		chksch(1);
f0120534:	83 ec 0c             	sub    $0xc,%esp
f0120537:	6a 01                	push   $0x1
f0120539:	e8 ce 0e 00 00       	call   f012140c <chksch>
f012053e:	83 c4 10             	add    $0x10,%esp
		firstTimeTestBSD = 0;
f0120541:	c6 05 9d dd 17 f0 00 	movb   $0x0,0xf017dd9d
		int nice_values[] = {15, 5, 0, -5, -15};
f0120548:	8d 45 b8             	lea    -0x48(%ebp),%eax
f012054b:	bb e0 ef 12 f0       	mov    $0xf012efe0,%ebx
f0120550:	ba 05 00 00 00       	mov    $0x5,%edx
f0120555:	89 c7                	mov    %eax,%edi
f0120557:	89 de                	mov    %ebx,%esi
f0120559:	89 d1                	mov    %edx,%ecx
f012055b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f012055d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0120564:	e9 4a 01 00 00       	jmp    f01206b3 <test_bsd_nice_2+0x195>
		{
			struct Env *env = env_create("bsd_matops", 10000, 0, 0);
f0120569:	6a 00                	push   $0x0
f012056b:	6a 00                	push   $0x0
f012056d:	68 10 27 00 00       	push   $0x2710
f0120572:	68 98 ef 12 f0       	push   $0xf012ef98
f0120577:	e8 f4 94 fe ff       	call   f0109a70 <env_create>
f012057c:	83 c4 10             	add    $0x10,%esp
f012057f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f0120582:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120585:	b9 05 00 00 00       	mov    $0x5,%ecx
f012058a:	99                   	cltd   
f012058b:	f7 f9                	idiv   %ecx
f012058d:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f0120590:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120593:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f0120597:	83 ec 08             	sub    $0x8,%esp
f012059a:	50                   	push   %eax
f012059b:	ff 75 d4             	pushl  -0x2c(%ebp)
f012059e:	e8 04 61 fe ff       	call   f01066a7 <env_set_nice>
f01205a3:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f01205a6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01205aa:	75 17                	jne    f01205c3 <test_bsd_nice_2+0xa5>
				panic("Loading programs failed\n");
f01205ac:	83 ec 04             	sub    $0x4,%esp
f01205af:	68 2d ed 12 f0       	push   $0xf012ed2d
f01205b4:	68 c1 00 00 00       	push   $0xc1
f01205b9:	68 46 ed 12 f0       	push   $0xf012ed46
f01205be:	e8 57 fd fd ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 10000)
f01205c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01205c6:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01205cc:	3d 10 27 00 00       	cmp    $0x2710,%eax
f01205d1:	74 17                	je     f01205ea <test_bsd_nice_2+0xcc>
				panic("The program working set size is not correct\n");
f01205d3:	83 ec 04             	sub    $0x4,%esp
f01205d6:	68 64 ed 12 f0       	push   $0xf012ed64
f01205db:	68 c3 00 00 00       	push   $0xc3
f01205e0:	68 46 ed 12 f0       	push   $0xf012ed46
f01205e5:	e8 30 fd fd ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f01205ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01205ed:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f01205f1:	83 c0 0f             	add    $0xf,%eax
f01205f4:	83 f8 1e             	cmp    $0x1e,%eax
f01205f7:	0f 87 a5 00 00 00    	ja     f01206a2 <test_bsd_nice_2+0x184>
f01205fd:	8b 04 85 f4 ef 12 f0 	mov    -0xfed100c(,%eax,4),%eax
f0120604:	ff e0                	jmp    *%eax
			{
			case -15:
				prog_orders[0][nice_count[0]++] = env->env_id;
f0120606:	a1 9c 62 55 f0       	mov    0xf055629c,%eax
f012060b:	8d 50 01             	lea    0x1(%eax),%edx
f012060e:	89 15 9c 62 55 f0    	mov    %edx,0xf055629c
f0120614:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120617:	8b 52 10             	mov    0x10(%edx),%edx
f012061a:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f0120621:	eb 7f                	jmp    f01206a2 <test_bsd_nice_2+0x184>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f0120623:	a1 a0 62 55 f0       	mov    0xf05562a0,%eax
f0120628:	8d 50 01             	lea    0x1(%eax),%edx
f012062b:	89 15 a0 62 55 f0    	mov    %edx,0xf05562a0
f0120631:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120634:	8b 52 10             	mov    0x10(%edx),%edx
f0120637:	83 c0 0a             	add    $0xa,%eax
f012063a:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f0120641:	eb 5f                	jmp    f01206a2 <test_bsd_nice_2+0x184>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f0120643:	a1 a4 62 55 f0       	mov    0xf05562a4,%eax
f0120648:	8d 50 01             	lea    0x1(%eax),%edx
f012064b:	89 15 a4 62 55 f0    	mov    %edx,0xf05562a4
f0120651:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120654:	8b 52 10             	mov    0x10(%edx),%edx
f0120657:	83 c0 14             	add    $0x14,%eax
f012065a:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f0120661:	eb 3f                	jmp    f01206a2 <test_bsd_nice_2+0x184>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f0120663:	a1 a8 62 55 f0       	mov    0xf05562a8,%eax
f0120668:	8d 50 01             	lea    0x1(%eax),%edx
f012066b:	89 15 a8 62 55 f0    	mov    %edx,0xf05562a8
f0120671:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120674:	8b 52 10             	mov    0x10(%edx),%edx
f0120677:	83 c0 1e             	add    $0x1e,%eax
f012067a:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f0120681:	eb 1f                	jmp    f01206a2 <test_bsd_nice_2+0x184>
			case 15:
				prog_orders[4][nice_count[4]++] = env->env_id;
f0120683:	a1 ac 62 55 f0       	mov    0xf05562ac,%eax
f0120688:	8d 50 01             	lea    0x1(%eax),%edx
f012068b:	89 15 ac 62 55 f0    	mov    %edx,0xf05562ac
f0120691:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120694:	8b 52 10             	mov    0x10(%edx),%edx
f0120697:	83 c0 28             	add    $0x28,%eax
f012069a:	89 14 85 e0 b8 57 f0 	mov    %edx,-0xfa84720(,%eax,4)
				break;
f01206a1:	90                   	nop
			}
			sched_new_env(env);
f01206a2:	83 ec 0c             	sub    $0xc,%esp
f01206a5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01206a8:	e8 f8 4f fe ff       	call   f01056a5 <sched_new_env>
f01206ad:	83 c4 10             	add    $0x10,%esp
	if (firstTimeTestBSD)
	{
		chksch(1);
		firstTimeTestBSD = 0;
		int nice_values[] = {15, 5, 0, -5, -15};
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f01206b0:	ff 45 e4             	incl   -0x1c(%ebp)
f01206b3:	83 7d e4 09          	cmpl   $0x9,-0x1c(%ebp)
f01206b7:	0f 8e ac fe ff ff    	jle    f0120569 <test_bsd_nice_2+0x4b>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f01206bd:	83 ec 0c             	sub    $0xc,%esp
f01206c0:	68 94 ed 12 f0       	push   $0xf012ed94
f01206c5:	e8 a2 08 fe ff       	call   f0100f6c <cprintf>
f01206ca:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f01206cd:	83 ec 0c             	sub    $0xc,%esp
f01206d0:	68 e3 ed 12 f0       	push   $0xf012ede3
f01206d5:	e8 02 18 fe ff       	call   f0101edc <execute_command>
f01206da:	83 c4 10             	add    $0x10,%esp
f01206dd:	e9 d0 00 00 00       	jmp    f01207b2 <test_bsd_nice_2+0x294>
	}
	else
	{
		chksch(0);
f01206e2:	83 ec 0c             	sub    $0xc,%esp
f01206e5:	6a 00                	push   $0x0
f01206e7:	e8 20 0d 00 00       	call   f012140c <chksch>
f01206ec:	83 c4 10             	add    $0x10,%esp
		cprintf("> Checking...\n");
f01206ef:	83 ec 0c             	sub    $0xc,%esp
f01206f2:	68 ea ed 12 f0       	push   $0xf012edea
f01206f7:	e8 70 08 fe ff       	call   f0100f6c <cprintf>
f01206fc:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f01206ff:	e8 1d 57 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f0120704:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012070b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0120712:	e9 8a 00 00 00       	jmp    f01207a1 <test_bsd_nice_2+0x283>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f0120717:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012071e:	eb 55                	jmp    f0120775 <test_bsd_nice_2+0x257>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f0120720:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120723:	8b 14 85 9c 62 55 f0 	mov    -0xfaa9d64(,%eax,4),%edx
f012072a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012072d:	89 c8                	mov    %ecx,%eax
f012072f:	c1 e0 02             	shl    $0x2,%eax
f0120732:	01 c8                	add    %ecx,%eax
f0120734:	01 c0                	add    %eax,%eax
f0120736:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f0120739:	01 c8                	add    %ecx,%eax
f012073b:	8b 04 85 e0 b8 57 f0 	mov    -0xfa84720(,%eax,4),%eax
f0120742:	83 ec 04             	sub    $0x4,%esp
f0120745:	52                   	push   %edx
f0120746:	ff 75 e0             	pushl  -0x20(%ebp)
f0120749:	50                   	push   %eax
f012074a:	e8 7f f8 ff ff       	call   f011ffce <find_in_range>
f012074f:	83 c4 10             	add    $0x10,%esp
f0120752:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f0120755:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f0120759:	75 17                	jne    f0120772 <test_bsd_nice_2+0x254>
					panic("The programs' order of finishing is not correct\n");
f012075b:	83 ec 04             	sub    $0x4,%esp
f012075e:	68 fc ed 12 f0       	push   $0xf012edfc
f0120763:	68 ea 00 00 00       	push   $0xea
f0120768:	68 46 ed 12 f0       	push   $0xf012ed46
f012076d:	e8 a8 fb fd ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f0120772:	ff 45 d8             	incl   -0x28(%ebp)
f0120775:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0120778:	89 d0                	mov    %edx,%eax
f012077a:	c1 e0 02             	shl    $0x2,%eax
f012077d:	01 d0                	add    %edx,%eax
f012077f:	01 c0                	add    %eax,%eax
f0120781:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0120784:	01 d0                	add    %edx,%eax
f0120786:	8b 04 85 e0 b8 57 f0 	mov    -0xfa84720(,%eax,4),%eax
f012078d:	85 c0                	test   %eax,%eax
f012078f:	75 8f                	jne    f0120720 <test_bsd_nice_2+0x202>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f0120791:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120794:	8b 04 85 9c 62 55 f0 	mov    -0xfaa9d64(,%eax,4),%eax
f012079b:	01 45 e0             	add    %eax,-0x20(%ebp)
		chksch(0);
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012079e:	ff 45 dc             	incl   -0x24(%ebp)
f01207a1:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f01207a5:	0f 8e 6c ff ff ff    	jle    f0120717 <test_bsd_nice_2+0x1f9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f01207ab:	c6 05 9d dd 17 f0 00 	movb   $0x0,0xf017dd9d
	}
	cprintf("\nCongratulations!! test_bsd_nice_2 completed successfully.\n");
f01207b2:	83 ec 0c             	sub    $0xc,%esp
f01207b5:	68 a4 ef 12 f0       	push   $0xf012efa4
f01207ba:	e8 ad 07 fe ff       	call   f0100f6c <cprintf>
f01207bf:	83 c4 10             	add    $0x10,%esp
}
f01207c2:	90                   	nop
f01207c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01207c6:	5b                   	pop    %ebx
f01207c7:	5e                   	pop    %esi
f01207c8:	5f                   	pop    %edi
f01207c9:	5d                   	pop    %ebp
f01207ca:	c3                   	ret    

f01207cb <__mk_fix>:
fixed_point_t;

/* Returns a fixed-point number with F as its internal value. */
static inline fixed_point_t
__mk_fix (int f)
{
f01207cb:	55                   	push   %ebp
f01207cc:	89 e5                	mov    %esp,%ebp
f01207ce:	83 ec 10             	sub    $0x10,%esp
  fixed_point_t x;
  x.f = f;
f01207d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01207d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return x;
f01207d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01207da:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01207dd:	89 10                	mov    %edx,(%eax)
}
f01207df:	8b 45 08             	mov    0x8(%ebp),%eax
f01207e2:	c9                   	leave  
f01207e3:	c2 04 00             	ret    $0x4

f01207e6 <fix_round>:
}

/* Returns X rounded to the nearest integer. */
static inline int
fix_round (fixed_point_t x)
{
f01207e6:	55                   	push   %ebp
f01207e7:	89 e5                	mov    %esp,%ebp
	if (x.f >= 0)
f01207e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01207ec:	85 c0                	test   %eax,%eax
f01207ee:	78 16                	js     f0120806 <fix_round+0x20>
		return (x.f + FIX_F / 2) / FIX_F;
f01207f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01207f3:	05 00 20 00 00       	add    $0x2000,%eax
f01207f8:	85 c0                	test   %eax,%eax
f01207fa:	79 05                	jns    f0120801 <fix_round+0x1b>
f01207fc:	05 ff 3f 00 00       	add    $0x3fff,%eax
f0120801:	c1 f8 0e             	sar    $0xe,%eax
f0120804:	eb 14                	jmp    f012081a <fix_round+0x34>
	else
		return (x.f - FIX_F / 2) / FIX_F;
f0120806:	8b 45 08             	mov    0x8(%ebp),%eax
f0120809:	2d 00 20 00 00       	sub    $0x2000,%eax
f012080e:	85 c0                	test   %eax,%eax
f0120810:	79 05                	jns    f0120817 <fix_round+0x31>
f0120812:	05 ff 3f 00 00       	add    $0x3fff,%eax
f0120817:	c1 f8 0e             	sar    $0xe,%eax
}
f012081a:	5d                   	pop    %ebp
f012081b:	c3                   	ret    

f012081c <fix_scale>:
}

/* Returns X * N. */
static inline fixed_point_t
fix_scale (fixed_point_t x, int n)
{
f012081c:	55                   	push   %ebp
f012081d:	89 e5                	mov    %esp,%ebp
f012081f:	83 ec 08             	sub    $0x8,%esp
	assert (n >= 0);
f0120822:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120826:	79 16                	jns    f012083e <fix_scale+0x22>
f0120828:	68 70 f0 12 f0       	push   $0xf012f070
f012082d:	68 77 f0 12 f0       	push   $0xf012f077
f0120832:	6a 5a                	push   $0x5a
f0120834:	68 8c f0 12 f0       	push   $0xf012f08c
f0120839:	e8 dc fa fd ff       	call   f010031a <_panic>
  return __mk_fix (x.f * n);
f012083e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120841:	0f af 45 10          	imul   0x10(%ebp),%eax
f0120845:	89 c2                	mov    %eax,%edx
f0120847:	8b 45 08             	mov    0x8(%ebp),%eax
f012084a:	83 ec 08             	sub    $0x8,%esp
f012084d:	52                   	push   %edx
f012084e:	50                   	push   %eax
f012084f:	e8 77 ff ff ff       	call   f01207cb <__mk_fix>
f0120854:	83 c4 0c             	add    $0xc,%esp
}
f0120857:	8b 45 08             	mov    0x8(%ebp),%eax
f012085a:	c9                   	leave  
f012085b:	c2 04 00             	ret    $0x4

f012085e <rsttst>:
#include "../cons/console.h"

#include <kern/trap/fault_handler.h>

void rsttst()
{
f012085e:	55                   	push   %ebp
f012085f:	89 e5                	mov    %esp,%ebp
f0120861:	83 ec 08             	sub    $0x8,%esp
	init_spinlock(&tstcntlock, "tstcnt lock");
f0120864:	83 ec 08             	sub    $0x8,%esp
f0120867:	68 a0 f0 12 f0       	push   $0xf012f0a0
f012086c:	68 00 92 55 f0       	push   $0xf0559200
f0120871:	e8 30 e2 fe ff       	call   f010eaa6 <init_spinlock>
f0120876:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&tstcntlock);
f0120879:	83 ec 0c             	sub    $0xc,%esp
f012087c:	68 00 92 55 f0       	push   $0xf0559200
f0120881:	e8 51 e2 fe ff       	call   f010ead7 <acquire_spinlock>
f0120886:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt = 0;
f0120889:	c7 05 e8 63 55 f0 00 	movl   $0x0,0xf05563e8
f0120890:	00 00 00 
	}
	release_spinlock(&tstcntlock);
f0120893:	83 ec 0c             	sub    $0xc,%esp
f0120896:	68 00 92 55 f0       	push   $0xf0559200
f012089b:	e8 be e2 fe ff       	call   f010eb5e <release_spinlock>
f01208a0:	83 c4 10             	add    $0x10,%esp
}
f01208a3:	90                   	nop
f01208a4:	c9                   	leave  
f01208a5:	c3                   	ret    

f01208a6 <inctst>:
void inctst()
{
f01208a6:	55                   	push   %ebp
f01208a7:	89 e5                	mov    %esp,%ebp
f01208a9:	83 ec 08             	sub    $0x8,%esp
	acquire_spinlock(&tstcntlock);
f01208ac:	83 ec 0c             	sub    $0xc,%esp
f01208af:	68 00 92 55 f0       	push   $0xf0559200
f01208b4:	e8 1e e2 fe ff       	call   f010ead7 <acquire_spinlock>
f01208b9:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++;
f01208bc:	a1 e8 63 55 f0       	mov    0xf05563e8,%eax
f01208c1:	40                   	inc    %eax
f01208c2:	a3 e8 63 55 f0       	mov    %eax,0xf05563e8
	}
	release_spinlock(&tstcntlock);
f01208c7:	83 ec 0c             	sub    $0xc,%esp
f01208ca:	68 00 92 55 f0       	push   $0xf0559200
f01208cf:	e8 8a e2 fe ff       	call   f010eb5e <release_spinlock>
f01208d4:	83 c4 10             	add    $0x10,%esp
}
f01208d7:	90                   	nop
f01208d8:	c9                   	leave  
f01208d9:	c3                   	ret    

f01208da <gettst>:
uint32 gettst()
{
f01208da:	55                   	push   %ebp
f01208db:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f01208dd:	a1 e8 63 55 f0       	mov    0xf05563e8,%eax
}
f01208e2:	5d                   	pop    %ebp
f01208e3:	c3                   	ret    

f01208e4 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f01208e4:	55                   	push   %ebp
f01208e5:	89 e5                	mov    %esp,%ebp
f01208e7:	83 ec 28             	sub    $0x28,%esp
f01208ea:	8b 45 14             	mov    0x14(%ebp),%eax
f01208ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f01208f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f01208f7:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f01208fb:	83 f8 65             	cmp    $0x65,%eax
f01208fe:	74 5d                	je     f012095d <tst+0x79>
f0120900:	83 f8 65             	cmp    $0x65,%eax
f0120903:	7f 0a                	jg     f012090f <tst+0x2b>
f0120905:	83 f8 62             	cmp    $0x62,%eax
f0120908:	74 73                	je     f012097d <tst+0x99>
f012090a:	e9 91 00 00 00       	jmp    f01209a0 <tst+0xbc>
f012090f:	83 f8 67             	cmp    $0x67,%eax
f0120912:	74 29                	je     f012093d <tst+0x59>
f0120914:	83 f8 6c             	cmp    $0x6c,%eax
f0120917:	0f 85 83 00 00 00    	jne    f01209a0 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012091d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120920:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120923:	73 09                	jae    f012092e <tst+0x4a>
			chk = 1;
f0120925:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012092c:	eb 68                	jmp    f0120996 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012092e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120932:	74 62                	je     f0120996 <tst+0xb2>
			chk = 1;
f0120934:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012093b:	eb 59                	jmp    f0120996 <tst+0xb2>
	case 'g':
		if (n > v1)
f012093d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120940:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120943:	76 09                	jbe    f012094e <tst+0x6a>
			chk = 1;
f0120945:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012094c:	eb 4b                	jmp    f0120999 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012094e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120952:	74 45                	je     f0120999 <tst+0xb5>
			chk = 1;
f0120954:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012095b:	eb 3c                	jmp    f0120999 <tst+0xb5>
	case 'e':
		if (n == v1)
f012095d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120960:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120963:	75 09                	jne    f012096e <tst+0x8a>
			chk = 1;
f0120965:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012096c:	eb 2e                	jmp    f012099c <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012096e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120972:	74 28                	je     f012099c <tst+0xb8>
			chk = 1;
f0120974:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012097b:	eb 1f                	jmp    f012099c <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012097d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120980:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120983:	72 1a                	jb     f012099f <tst+0xbb>
f0120985:	8b 45 08             	mov    0x8(%ebp),%eax
f0120988:	3b 45 10             	cmp    0x10(%ebp),%eax
f012098b:	77 12                	ja     f012099f <tst+0xbb>
			chk = 1;
f012098d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f0120994:	eb 09                	jmp    f012099f <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f0120996:	90                   	nop
f0120997:	eb 07                	jmp    f01209a0 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f0120999:	90                   	nop
f012099a:	eb 04                	jmp    f01209a0 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012099c:	90                   	nop
f012099d:	eb 01                	jmp    f01209a0 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012099f:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f01209a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01209a4:	75 14                	jne    f01209ba <tst+0xd6>
f01209a6:	83 ec 04             	sub    $0x4,%esp
f01209a9:	68 ac f0 12 f0       	push   $0xf012f0ac
f01209ae:	6a 47                	push   $0x47
f01209b0:	68 bf f0 12 f0       	push   $0xf012f0bf
f01209b5:	e8 60 f9 fd ff       	call   f010031a <_panic>

	acquire_spinlock(&tstcntlock);
f01209ba:	83 ec 0c             	sub    $0xc,%esp
f01209bd:	68 00 92 55 f0       	push   $0xf0559200
f01209c2:	e8 10 e1 fe ff       	call   f010ead7 <acquire_spinlock>
f01209c7:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++ ;
f01209ca:	a1 e8 63 55 f0       	mov    0xf05563e8,%eax
f01209cf:	40                   	inc    %eax
f01209d0:	a3 e8 63 55 f0       	mov    %eax,0xf05563e8
	}
	release_spinlock(&tstcntlock);
f01209d5:	83 ec 0c             	sub    $0xc,%esp
f01209d8:	68 00 92 55 f0       	push   $0xf0559200
f01209dd:	e8 7c e1 fe ff       	call   f010eb5e <release_spinlock>
f01209e2:	83 c4 10             	add    $0x10,%esp

	return;
f01209e5:	90                   	nop
}
f01209e6:	c9                   	leave  
f01209e7:	c3                   	ret    

f01209e8 <chktst>:

void chktst(uint32 n)
{
f01209e8:	55                   	push   %ebp
f01209e9:	89 e5                	mov    %esp,%ebp
f01209eb:	83 ec 18             	sub    $0x18,%esp
	int __tstcnt;
	acquire_spinlock(&tstcntlock);
f01209ee:	83 ec 0c             	sub    $0xc,%esp
f01209f1:	68 00 92 55 f0       	push   $0xf0559200
f01209f6:	e8 dc e0 fe ff       	call   f010ead7 <acquire_spinlock>
f01209fb:	83 c4 10             	add    $0x10,%esp
	{
		__tstcnt = tstcnt;
f01209fe:	a1 e8 63 55 f0       	mov    0xf05563e8,%eax
f0120a03:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	release_spinlock(&tstcntlock);
f0120a06:	83 ec 0c             	sub    $0xc,%esp
f0120a09:	68 00 92 55 f0       	push   $0xf0559200
f0120a0e:	e8 4b e1 fe ff       	call   f010eb5e <release_spinlock>
f0120a13:	83 c4 10             	add    $0x10,%esp
	if (__tstcnt == n)
f0120a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120a19:	3b 45 08             	cmp    0x8(%ebp),%eax
f0120a1c:	75 12                	jne    f0120a30 <chktst+0x48>
		cprintf("\nCongratulations... test runs successfully\n");
f0120a1e:	83 ec 0c             	sub    $0xc,%esp
f0120a21:	68 d8 f0 12 f0       	push   $0xf012f0d8
f0120a26:	e8 41 05 fe ff       	call   f0100f6c <cprintf>
f0120a2b:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f0120a2e:	eb 14                	jmp    f0120a44 <chktst+0x5c>
	}
	release_spinlock(&tstcntlock);
	if (__tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f0120a30:	83 ec 04             	sub    $0x4,%esp
f0120a33:	68 04 f1 12 f0       	push   $0xf012f104
f0120a38:	6a 5d                	push   $0x5d
f0120a3a:	68 bf f0 12 f0       	push   $0xf012f0bf
f0120a3f:	e8 d6 f8 fd ff       	call   f010031a <_panic>
}
f0120a44:	c9                   	leave  
f0120a45:	c3                   	ret    

f0120a46 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0120a46:	55                   	push   %ebp
f0120a47:	89 e5                	mov    %esp,%ebp
f0120a49:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f0120a4c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120a50:	77 07                	ja     f0120a59 <nearest_pow2_ceil+0x13>
f0120a52:	b8 01 00 00 00       	mov    $0x1,%eax
f0120a57:	eb 20                	jmp    f0120a79 <nearest_pow2_ceil+0x33>
	int power = 2;
f0120a59:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f0120a60:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f0120a63:	eb 08                	jmp    f0120a6d <nearest_pow2_ceil+0x27>
		power <<= 1;
f0120a65:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120a68:	01 c0                	add    %eax,%eax
f0120a6a:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	int power = 2;
	x--;
	while (x >>= 1) {
f0120a6d:	d1 6d 08             	shrl   0x8(%ebp)
f0120a70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120a74:	75 ef                	jne    f0120a65 <nearest_pow2_ceil+0x1f>
		power <<= 1;
	}
	return power;
f0120a76:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120a79:	c9                   	leave  
f0120a7a:	c3                   	ret    

f0120a7b <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0120a7b:	55                   	push   %ebp
f0120a7c:	89 e5                	mov    %esp,%ebp
f0120a7e:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f0120a81:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120a85:	77 07                	ja     f0120a8e <log2_ceil+0x13>
f0120a87:	b8 01 00 00 00       	mov    $0x1,%eax
f0120a8c:	eb 1b                	jmp    f0120aa9 <log2_ceil+0x2e>
	//int power = 2;
	int bits_cnt = 2 ;
f0120a8e:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f0120a95:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f0120a98:	eb 03                	jmp    f0120a9d <log2_ceil+0x22>
		//power <<= 1;
		bits_cnt++ ;
f0120a9a:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	//int power = 2;
	int bits_cnt = 2 ;
	x--;
	while (x >>= 1) {
f0120a9d:	d1 6d 08             	shrl   0x8(%ebp)
f0120aa0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120aa4:	75 f4                	jne    f0120a9a <log2_ceil+0x1f>
		//power <<= 1;
		bits_cnt++ ;
	}
	return bits_cnt;
f0120aa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120aa9:	c9                   	leave  
f0120aaa:	c3                   	ret    

f0120aab <fixedPt2Str>:

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
f0120aab:	55                   	push   %ebp
f0120aac:	89 e5                	mov    %esp,%ebp
f0120aae:	83 ec 78             	sub    $0x78,%esp
	int mulFactor = 1;
f0120ab1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	for (int i = 0; i < num_dec_digits; ++i) {
f0120ab8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0120abf:	eb 12                	jmp    f0120ad3 <fixedPt2Str+0x28>
		mulFactor *= 10;
f0120ac1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120ac4:	89 d0                	mov    %edx,%eax
f0120ac6:	c1 e0 02             	shl    $0x2,%eax
f0120ac9:	01 d0                	add    %edx,%eax
f0120acb:	01 c0                	add    %eax,%eax
f0120acd:	89 45 f4             	mov    %eax,-0xc(%ebp)

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
	int mulFactor = 1;
	for (int i = 0; i < num_dec_digits; ++i) {
f0120ad0:	ff 45 f0             	incl   -0x10(%ebp)
f0120ad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120ad6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120ad9:	7c e6                	jl     f0120ac1 <fixedPt2Str+0x16>
		mulFactor *= 10;
	}
	int scaledVal = fix_round(fix_scale(f, mulFactor)) ;
f0120adb:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0120ade:	83 ec 04             	sub    $0x4,%esp
f0120ae1:	ff 75 f4             	pushl  -0xc(%ebp)
f0120ae4:	ff 75 08             	pushl  0x8(%ebp)
f0120ae7:	50                   	push   %eax
f0120ae8:	e8 2f fd ff ff       	call   f012081c <fix_scale>
f0120aed:	83 c4 0c             	add    $0xc,%esp
f0120af0:	83 ec 0c             	sub    $0xc,%esp
f0120af3:	ff 75 dc             	pushl  -0x24(%ebp)
f0120af6:	e8 eb fc ff ff       	call   f01207e6 <fix_round>
f0120afb:	83 c4 10             	add    $0x10,%esp
f0120afe:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int integer = scaledVal/mulFactor;
f0120b01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120b04:	99                   	cltd   
f0120b05:	f7 7d f4             	idivl  -0xc(%ebp)
f0120b08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int fraction = scaledVal%mulFactor;
f0120b0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120b0e:	99                   	cltd   
f0120b0f:	f7 7d f4             	idivl  -0xc(%ebp)
f0120b12:	89 55 e0             	mov    %edx,-0x20(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
f0120b15:	83 ec 08             	sub    $0x8,%esp
f0120b18:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120b1b:	50                   	push   %eax
f0120b1c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0120b1f:	e8 31 1c 00 00       	call   f0122755 <ltostr>
f0120b24:	83 c4 10             	add    $0x10,%esp
	char fractPart[20] ; ltostr(fraction, fractPart);
f0120b27:	83 ec 08             	sub    $0x8,%esp
f0120b2a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0120b2d:	50                   	push   %eax
f0120b2e:	ff 75 e0             	pushl  -0x20(%ebp)
f0120b31:	e8 1f 1c 00 00       	call   f0122755 <ltostr>
f0120b36:	83 c4 10             	add    $0x10,%esp
	int tmp = mulFactor / 10;
f0120b39:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120b3c:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120b41:	f7 e9                	imul   %ecx
f0120b43:	c1 fa 02             	sar    $0x2,%edx
f0120b46:	89 c8                	mov    %ecx,%eax
f0120b48:	c1 f8 1f             	sar    $0x1f,%eax
f0120b4b:	29 c2                	sub    %eax,%edx
f0120b4d:	89 d0                	mov    %edx,%eax
f0120b4f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	char zeros[10] = "";
f0120b52:	c7 45 aa 00 00 00 00 	movl   $0x0,-0x56(%ebp)
f0120b59:	c7 45 ae 00 00 00 00 	movl   $0x0,-0x52(%ebp)
f0120b60:	66 c7 45 b2 00 00    	movw   $0x0,-0x4e(%ebp)
	while (fraction < tmp)
f0120b66:	eb 31                	jmp    f0120b99 <fixedPt2Str+0xee>
	{
		strcconcat("0", zeros, zeros);
f0120b68:	83 ec 04             	sub    $0x4,%esp
f0120b6b:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120b6e:	50                   	push   %eax
f0120b6f:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120b72:	50                   	push   %eax
f0120b73:	68 20 f1 12 f0       	push   $0xf012f120
f0120b78:	e8 b1 1c 00 00       	call   f012282e <strcconcat>
f0120b7d:	83 c4 10             	add    $0x10,%esp
		tmp /= 10;
f0120b80:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0120b83:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120b88:	f7 e9                	imul   %ecx
f0120b8a:	c1 fa 02             	sar    $0x2,%edx
f0120b8d:	89 c8                	mov    %ecx,%eax
f0120b8f:	c1 f8 1f             	sar    $0x1f,%eax
f0120b92:	29 c2                	sub    %eax,%edx
f0120b94:	89 d0                	mov    %edx,%eax
f0120b96:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
	char fractPart[20] ; ltostr(fraction, fractPart);
	int tmp = mulFactor / 10;

	char zeros[10] = "";
	while (fraction < tmp)
f0120b99:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0120b9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120b9f:	7c c7                	jl     f0120b68 <fixedPt2Str+0xbd>
	{
		strcconcat("0", zeros, zeros);
		tmp /= 10;
	}
	char fractPart2[20];
	strcconcat(zeros, fractPart, fractPart2);
f0120ba1:	83 ec 04             	sub    $0x4,%esp
f0120ba4:	8d 45 96             	lea    -0x6a(%ebp),%eax
f0120ba7:	50                   	push   %eax
f0120ba8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0120bab:	50                   	push   %eax
f0120bac:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120baf:	50                   	push   %eax
f0120bb0:	e8 79 1c 00 00       	call   f012282e <strcconcat>
f0120bb5:	83 c4 10             	add    $0x10,%esp

	//cprintf("integer = %d, intPart = %s - fraction = %d, fractPart = %s\n", integer, intPart, fraction , fractPart2);
	strcconcat(intPart, ".", intPart);
f0120bb8:	83 ec 04             	sub    $0x4,%esp
f0120bbb:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120bbe:	50                   	push   %eax
f0120bbf:	68 22 f1 12 f0       	push   $0xf012f122
f0120bc4:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120bc7:	50                   	push   %eax
f0120bc8:	e8 61 1c 00 00       	call   f012282e <strcconcat>
f0120bcd:	83 c4 10             	add    $0x10,%esp
	strcconcat(intPart, fractPart2, output);
f0120bd0:	83 ec 04             	sub    $0x4,%esp
f0120bd3:	ff 75 10             	pushl  0x10(%ebp)
f0120bd6:	8d 45 96             	lea    -0x6a(%ebp),%eax
f0120bd9:	50                   	push   %eax
f0120bda:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120bdd:	50                   	push   %eax
f0120bde:	e8 4b 1c 00 00       	call   f012282e <strcconcat>
f0120be3:	83 c4 10             	add    $0x10,%esp

}
f0120be6:	90                   	nop
f0120be7:	c9                   	leave  
f0120be8:	c3                   	ret    

f0120be9 <sys_utilities>:

void sys_utilities(char* utilityName, int value)
{
f0120be9:	55                   	push   %ebp
f0120bea:	89 e5                	mov    %esp,%ebp
f0120bec:	83 ec 78             	sub    $0x78,%esp
	if (strncmp(utilityName, "__BSDSetNice@", strlen("__BSDSetNice@")) == 0)
f0120bef:	83 ec 0c             	sub    $0xc,%esp
f0120bf2:	68 24 f1 12 f0       	push   $0xf012f124
f0120bf7:	e8 b3 16 00 00       	call   f01222af <strlen>
f0120bfc:	83 c4 10             	add    $0x10,%esp
f0120bff:	83 ec 04             	sub    $0x4,%esp
f0120c02:	50                   	push   %eax
f0120c03:	68 24 f1 12 f0       	push   $0xf012f124
f0120c08:	ff 75 08             	pushl  0x8(%ebp)
f0120c0b:	e8 e3 17 00 00       	call   f01223f3 <strncmp>
f0120c10:	83 c4 10             	add    $0x10,%esp
f0120c13:	85 c0                	test   %eax,%eax
f0120c15:	0f 85 84 00 00 00    	jne    f0120c9f <sys_utilities+0xb6>
	{
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f0120c1b:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0120c1e:	50                   	push   %eax
f0120c1f:	8d 45 88             	lea    -0x78(%ebp),%eax
f0120c22:	50                   	push   %eax
f0120c23:	68 32 f1 12 f0       	push   $0xf012f132
f0120c28:	ff 75 08             	pushl  0x8(%ebp)
f0120c2b:	e8 94 1c 00 00       	call   f01228c4 <strsplit>
f0120c30:	83 c4 10             	add    $0x10,%esp
		int envID = strtol(tokens[1], NULL, 10);
f0120c33:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120c36:	83 ec 04             	sub    $0x4,%esp
f0120c39:	6a 0a                	push   $0xa
f0120c3b:	6a 00                	push   $0x0
f0120c3d:	50                   	push   %eax
f0120c3e:	e8 cc 19 00 00       	call   f012260f <strtol>
f0120c43:	83 c4 10             	add    $0x10,%esp
f0120c46:	89 45 e0             	mov    %eax,-0x20(%ebp)
		struct Env* env = NULL ;
f0120c49:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		envid2env(envID, &env, 0);
f0120c50:	83 ec 04             	sub    $0x4,%esp
f0120c53:	6a 00                	push   $0x0
f0120c55:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0120c58:	50                   	push   %eax
f0120c59:	ff 75 e0             	pushl  -0x20(%ebp)
f0120c5c:	e8 5f 9b fe ff       	call   f010a7c0 <envid2env>
f0120c61:	83 c4 10             	add    $0x10,%esp
		assert(env->env_id == envID) ;
f0120c64:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0120c67:	8b 40 10             	mov    0x10(%eax),%eax
f0120c6a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0120c6d:	74 19                	je     f0120c88 <sys_utilities+0x9f>
f0120c6f:	68 34 f1 12 f0       	push   $0xf012f134
f0120c74:	68 77 f0 12 f0       	push   $0xf012f077
f0120c79:	68 9d 00 00 00       	push   $0x9d
f0120c7e:	68 bf f0 12 f0       	push   $0xf012f0bf
f0120c83:	e8 92 f6 fd ff       	call   f010031a <_panic>
		env_set_nice(env, value);
f0120c88:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0120c8b:	83 ec 08             	sub    $0x8,%esp
f0120c8e:	ff 75 0c             	pushl  0xc(%ebp)
f0120c91:	50                   	push   %eax
f0120c92:	e8 10 5a fe ff       	call   f01066a7 <env_set_nice>
f0120c97:	83 c4 10             	add    $0x10,%esp
f0120c9a:	e9 c4 01 00 00       	jmp    f0120e63 <sys_utilities+0x27a>
	}
	else if (strncmp(utilityName, "__CheckExitOrder@", strlen("__CheckExitOrder@")) == 0)
f0120c9f:	83 ec 0c             	sub    $0xc,%esp
f0120ca2:	68 49 f1 12 f0       	push   $0xf012f149
f0120ca7:	e8 03 16 00 00       	call   f01222af <strlen>
f0120cac:	83 c4 10             	add    $0x10,%esp
f0120caf:	83 ec 04             	sub    $0x4,%esp
f0120cb2:	50                   	push   %eax
f0120cb3:	68 49 f1 12 f0       	push   $0xf012f149
f0120cb8:	ff 75 08             	pushl  0x8(%ebp)
f0120cbb:	e8 33 17 00 00       	call   f01223f3 <strncmp>
f0120cc0:	83 c4 10             	add    $0x10,%esp
f0120cc3:	85 c0                	test   %eax,%eax
f0120cc5:	0f 85 98 01 00 00    	jne    f0120e63 <sys_utilities+0x27a>
	{
		int* numOfInstances = (int*) value ;
f0120ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120cce:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f0120cd1:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120cd4:	50                   	push   %eax
f0120cd5:	8d 45 88             	lea    -0x78(%ebp),%eax
f0120cd8:	50                   	push   %eax
f0120cd9:	68 32 f1 12 f0       	push   $0xf012f132
f0120cde:	ff 75 08             	pushl  0x8(%ebp)
f0120ce1:	e8 de 1b 00 00       	call   f01228c4 <strsplit>
f0120ce6:	83 c4 10             	add    $0x10,%esp
		char *progName = tokens[1];
f0120ce9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120cec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		struct Env* env = NULL ;
f0120cef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		bool chkAscending = 1;
f0120cf6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		int prevEnvID = -1 ;
f0120cfd:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)

		if (*numOfInstances < 0)
f0120d04:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d07:	8b 00                	mov    (%eax),%eax
f0120d09:	85 c0                	test   %eax,%eax
f0120d0b:	79 1c                	jns    f0120d29 <sys_utilities+0x140>
		{
			chkAscending = 0;
f0120d0d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			*numOfInstances *= -1;
f0120d14:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d17:	8b 00                	mov    (%eax),%eax
f0120d19:	f7 d8                	neg    %eax
f0120d1b:	89 c2                	mov    %eax,%edx
f0120d1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d20:	89 10                	mov    %edx,(%eax)
			prevEnvID = 1<<30 ;
f0120d22:	c7 45 ec 00 00 00 40 	movl   $0x40000000,-0x14(%ebp)
		}
		bool success = 1;
f0120d29:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)

		acquire_spinlock(&ProcessQueues.qlock);
f0120d30:	83 ec 0c             	sub    $0xc,%esp
f0120d33:	68 60 64 55 f0       	push   $0xf0556460
f0120d38:	e8 9a dd fe ff       	call   f010ead7 <acquire_spinlock>
f0120d3d:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f0120d40:	a1 ec 64 55 f0       	mov    0xf05564ec,%eax
f0120d45:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f0120d48:	a1 e4 64 55 f0       	mov    0xf05564e4,%eax
f0120d4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f0120d50:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120d53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0120d56:	eb 6c                	jmp    f0120dc4 <sys_utilities+0x1db>
			{
				if (strcmp(env->prog_name, progName) != 0)
f0120d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d5b:	83 c0 20             	add    $0x20,%eax
f0120d5e:	83 ec 08             	sub    $0x8,%esp
f0120d61:	ff 75 d8             	pushl  -0x28(%ebp)
f0120d64:	50                   	push   %eax
f0120d65:	e8 51 16 00 00       	call   f01223bb <strcmp>
f0120d6a:	83 c4 10             	add    $0x10,%esp
f0120d6d:	85 c0                	test   %eax,%eax
f0120d6f:	75 46                	jne    f0120db7 <sys_utilities+0x1ce>
					continue;
				(*numOfInstances)-- ;
f0120d71:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d74:	8b 00                	mov    (%eax),%eax
f0120d76:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120d79:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d7c:	89 10                	mov    %edx,(%eax)

				//cprintf("%s: prevID = %d, nextID = %d\n", progName, prevEnvID, env->env_id);
				if (chkAscending)
f0120d7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120d82:	74 14                	je     f0120d98 <sys_utilities+0x1af>
				{
					if (prevEnvID > env->env_id)
f0120d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d87:	8b 40 10             	mov    0x10(%eax),%eax
f0120d8a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120d8d:	7d 1d                	jge    f0120dac <sys_utilities+0x1c3>
					{
						success = 0;
f0120d8f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f0120d96:	eb 32                	jmp    f0120dca <sys_utilities+0x1e1>
					}
				}
				else
				{
					if (prevEnvID < env->env_id)
f0120d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d9b:	8b 40 10             	mov    0x10(%eax),%eax
f0120d9e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120da1:	7e 09                	jle    f0120dac <sys_utilities+0x1c3>
					{
						success = 0;
f0120da3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f0120daa:	eb 1e                	jmp    f0120dca <sys_utilities+0x1e1>
					}
				}
				prevEnvID = env->env_id;
f0120dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120daf:	8b 40 10             	mov    0x10(%eax),%eax
f0120db2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0120db5:	eb 01                	jmp    f0120db8 <sys_utilities+0x1cf>
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
			{
				if (strcmp(env->prog_name, progName) != 0)
					continue;
f0120db7:	90                   	nop
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f0120db8:	ff 4d e4             	decl   -0x1c(%ebp)
f0120dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120dbe:	8b 40 0c             	mov    0xc(%eax),%eax
f0120dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120dc4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120dc8:	7f 8e                	jg     f0120d58 <sys_utilities+0x16f>
					}
				}
				prevEnvID = env->env_id;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f0120dca:	83 ec 0c             	sub    $0xc,%esp
f0120dcd:	68 60 64 55 f0       	push   $0xf0556460
f0120dd2:	e8 87 dd fe ff       	call   f010eb5e <release_spinlock>
f0120dd7:	83 c4 10             	add    $0x10,%esp
		if (*numOfInstances != 0 || success == 0)
f0120dda:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120ddd:	8b 00                	mov    (%eax),%eax
f0120ddf:	85 c0                	test   %eax,%eax
f0120de1:	75 06                	jne    f0120de9 <sys_utilities+0x200>
f0120de3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0120de7:	75 3e                	jne    f0120e27 <sys_utilities+0x23e>
		{
			cprintf("###########################################\n");
f0120de9:	83 ec 0c             	sub    $0xc,%esp
f0120dec:	68 5c f1 12 f0       	push   $0xf012f15c
f0120df1:	e8 76 01 fe ff       	call   f0100f6c <cprintf>
f0120df6:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is FAILED\n", progName);
f0120df9:	83 ec 08             	sub    $0x8,%esp
f0120dfc:	ff 75 d8             	pushl  -0x28(%ebp)
f0120dff:	68 8c f1 12 f0       	push   $0xf012f18c
f0120e04:	e8 63 01 fe ff       	call   f0100f6c <cprintf>
f0120e09:	83 c4 10             	add    $0x10,%esp
			cprintf("###########################################\n");
f0120e0c:	83 ec 0c             	sub    $0xc,%esp
f0120e0f:	68 5c f1 12 f0       	push   $0xf012f15c
f0120e14:	e8 53 01 fe ff       	call   f0100f6c <cprintf>
f0120e19:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 0; //to indicate the failure of test
f0120e1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0120e25:	eb 3c                	jmp    f0120e63 <sys_utilities+0x27a>
		}
		else
		{
			cprintf("####################################################\n");
f0120e27:	83 ec 0c             	sub    $0xc,%esp
f0120e2a:	68 ac f1 12 f0       	push   $0xf012f1ac
f0120e2f:	e8 38 01 fe ff       	call   f0100f6c <cprintf>
f0120e34:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is SUCCEEDED\n", progName);
f0120e37:	83 ec 08             	sub    $0x8,%esp
f0120e3a:	ff 75 d8             	pushl  -0x28(%ebp)
f0120e3d:	68 e4 f1 12 f0       	push   $0xf012f1e4
f0120e42:	e8 25 01 fe ff       	call   f0100f6c <cprintf>
f0120e47:	83 c4 10             	add    $0x10,%esp
			cprintf("####################################################\n");
f0120e4a:	83 ec 0c             	sub    $0xc,%esp
f0120e4d:	68 ac f1 12 f0       	push   $0xf012f1ac
f0120e52:	e8 15 01 fe ff       	call   f0100f6c <cprintf>
f0120e57:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 1; //to indicate the success of test
f0120e5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e5d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		}
	}
	if ((int)value < 0)
f0120e63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0120e67:	79 5b                	jns    f0120ec4 <sys_utilities+0x2db>
	{
		if (strcmp(utilityName, "__ReplStrat__") == 0)
f0120e69:	83 ec 08             	sub    $0x8,%esp
f0120e6c:	68 07 f2 12 f0       	push   $0xf012f207
f0120e71:	ff 75 08             	pushl  0x8(%ebp)
f0120e74:	e8 42 15 00 00       	call   f01223bb <strcmp>
f0120e79:	83 c4 10             	add    $0x10,%esp
f0120e7c:	85 c0                	test   %eax,%eax
f0120e7e:	75 44                	jne    f0120ec4 <sys_utilities+0x2db>
		{
			switch (value)
f0120e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120e83:	83 f8 fc             	cmp    $0xfffffffc,%eax
f0120e86:	74 07                	je     f0120e8f <sys_utilities+0x2a6>
f0120e88:	83 f8 fe             	cmp    $0xfffffffe,%eax
f0120e8b:	74 19                	je     f0120ea6 <sys_utilities+0x2bd>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
				break;
			default:
				break;
f0120e8d:	eb 35                	jmp    f0120ec4 <sys_utilities+0x2db>
		if (strcmp(utilityName, "__ReplStrat__") == 0)
		{
			switch (value)
			{
			case -PG_REP_FIFO:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO FIFO.\n*************************************\n");
f0120e8f:	83 ec 0c             	sub    $0xc,%esp
f0120e92:	68 18 f2 12 f0       	push   $0xf012f218
f0120e97:	e8 d0 00 fe ff       	call   f0100f6c <cprintf>
f0120e9c:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmFIFO();
f0120e9f:	e8 da d7 fe ff       	call   f010e67e <setPageReplacmentAlgorithmFIFO>
				break;
f0120ea4:	eb 1e                	jmp    f0120ec4 <sys_utilities+0x2db>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
f0120ea6:	83 ec 0c             	sub    $0xc,%esp
f0120ea9:	68 88 f2 12 f0       	push   $0xf012f288
f0120eae:	e8 b9 00 fe ff       	call   f0100f6c <cprintf>
f0120eb3:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
f0120eb6:	83 ec 0c             	sub    $0xc,%esp
f0120eb9:	6a 02                	push   $0x2
f0120ebb:	e8 7b d7 fe ff       	call   f010e63b <setPageReplacmentAlgorithmLRU>
f0120ec0:	83 c4 10             	add    $0x10,%esp
				break;
f0120ec3:	90                   	nop
			}
		}
	}
	/*****************************************************************************************/

}
f0120ec4:	90                   	nop
f0120ec5:	c9                   	leave  
f0120ec6:	c3                   	ret    

f0120ec7 <detect_loop_in_FrameInfo_list>:
/*=======================================*/
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0120ec7:	55                   	push   %ebp
f0120ec8:	89 e5                	mov    %esp,%ebp
f0120eca:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f0120ecd:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ed0:	8b 00                	mov    (%eax),%eax
f0120ed2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0120ed5:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ed8:	8b 00                	mov    (%eax),%eax
f0120eda:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0120edd:	eb 52                	jmp    f0120f31 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0120edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120ee2:	8b 00                	mov    (%eax),%eax
f0120ee4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0120ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120eea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120eed:	75 12                	jne    f0120f01 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0120eef:	83 ec 0c             	sub    $0xc,%esp
f0120ef2:	68 fc f2 12 f0       	push   $0xf012f2fc
f0120ef7:	e8 70 00 fe ff       	call   f0100f6c <cprintf>
f0120efc:	83 c4 10             	add    $0x10,%esp
			break;
f0120eff:	eb 3f                	jmp    f0120f40 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0120f01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120f05:	74 38                	je     f0120f3f <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0120f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120f0a:	8b 00                	mov    (%eax),%eax
f0120f0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0120f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120f12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f15:	75 12                	jne    f0120f29 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f0120f17:	83 ec 0c             	sub    $0xc,%esp
f0120f1a:	68 18 f3 12 f0       	push   $0xf012f318
f0120f1f:	e8 48 00 fe ff       	call   f0100f6c <cprintf>
f0120f24:	83 c4 10             	add    $0x10,%esp
			break;
f0120f27:	eb 17                	jmp    f0120f40 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0120f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120f2c:	8b 00                	mov    (%eax),%eax
f0120f2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0120f31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0120f35:	74 09                	je     f0120f40 <detect_loop_in_FrameInfo_list+0x79>
f0120f37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120f3b:	75 a2                	jne    f0120edf <detect_loop_in_FrameInfo_list+0x18>
f0120f3d:	eb 01                	jmp    f0120f40 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0120f3f:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0120f40:	83 ec 0c             	sub    $0xc,%esp
f0120f43:	68 2f f3 12 f0       	push   $0xf012f32f
f0120f48:	e8 1f 00 fe ff       	call   f0100f6c <cprintf>
f0120f4d:	83 c4 10             	add    $0x10,%esp
}
f0120f50:	90                   	nop
f0120f51:	c9                   	leave  
f0120f52:	c3                   	ret    

f0120f53 <scarce_memory>:

void scarce_memory()
{
f0120f53:	55                   	push   %ebp
f0120f54:	89 e5                	mov    %esp,%ebp
f0120f56:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f0120f59:	a1 e0 8b 55 f0       	mov    0xf0558be0,%eax
f0120f5e:	ba 64 00 00 00       	mov    $0x64,%edx
f0120f63:	29 c2                	sub    %eax,%edx
f0120f65:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0120f6a:	0f af c2             	imul   %edx,%eax
f0120f6d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0120f72:	f7 e2                	mul    %edx
f0120f74:	89 d0                	mov    %edx,%eax
f0120f76:	c1 e8 05             	shr    $0x5,%eax
f0120f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0120f7c:	a1 e0 8b 55 f0       	mov    0xf0558be0,%eax
f0120f81:	ba 64 00 00 00       	mov    $0x64,%edx
f0120f86:	29 c2                	sub    %eax,%edx
f0120f88:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0120f8d:	89 d1                	mov    %edx,%ecx
f0120f8f:	0f af c8             	imul   %eax,%ecx
f0120f92:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0120f97:	f7 e1                	mul    %ecx
f0120f99:	c1 ea 05             	shr    $0x5,%edx
f0120f9c:	89 d0                	mov    %edx,%eax
f0120f9e:	c1 e0 02             	shl    $0x2,%eax
f0120fa1:	01 d0                	add    %edx,%eax
f0120fa3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120faa:	01 d0                	add    %edx,%eax
f0120fac:	c1 e0 02             	shl    $0x2,%eax
f0120faf:	29 c1                	sub    %eax,%ecx
f0120fb1:	89 ca                	mov    %ecx,%edx
f0120fb3:	85 d2                	test   %edx,%edx
f0120fb5:	74 03                	je     f0120fba <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0120fb7:	ff 45 f4             	incl   -0xc(%ebp)

	int fflSize = 0;
f0120fba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	acquire_spinlock(&MemFrameLists.mfllock);
f0120fc1:	83 ec 0c             	sub    $0xc,%esp
f0120fc4:	68 40 65 55 f0       	push   $0xf0556540
f0120fc9:	e8 09 db fe ff       	call   f010ead7 <acquire_spinlock>
f0120fce:	83 c4 10             	add    $0x10,%esp
	{
		fflSize = LIST_SIZE(&MemFrameLists.free_frame_list);
f0120fd1:	a1 2c 65 55 f0       	mov    0xf055652c,%eax
f0120fd6:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 size_of_already_allocated = number_of_frames - fflSize ;
f0120fd9:	8b 15 b8 8c 55 f0    	mov    0xf0558cb8,%edx
f0120fdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120fe2:	29 c2                	sub    %eax,%edx
f0120fe4:	89 d0                	mov    %edx,%eax
f0120fe6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0120fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120fec:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0120fef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
f0120ff2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f0120ff9:	eb 12                	jmp    f012100d <scarce_memory+0xba>
		{
			allocate_frame(&ptr_tmp_FI) ;
f0120ffb:	83 ec 0c             	sub    $0xc,%esp
f0120ffe:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0121001:	50                   	push   %eax
f0121002:	e8 c9 71 fe ff       	call   f01081d0 <allocate_frame>
f0121007:	83 c4 10             	add    $0x10,%esp
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f012100a:	ff 45 f0             	incl   -0x10(%ebp)
f012100d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121010:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0121013:	76 e6                	jbe    f0120ffb <scarce_memory+0xa8>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f0121015:	83 ec 0c             	sub    $0xc,%esp
f0121018:	68 40 65 55 f0       	push   $0xf0556540
f012101d:	e8 3c db fe ff       	call   f010eb5e <release_spinlock>
f0121022:	83 c4 10             	add    $0x10,%esp

}
f0121025:	90                   	nop
f0121026:	c9                   	leave  
f0121027:	c3                   	ret    

f0121028 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f0121028:	55                   	push   %ebp
f0121029:	89 e5                	mov    %esp,%ebp
f012102b:	83 ec 48             	sub    $0x48,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012102e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f0121035:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012103c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc();
f0121043:	e8 28 97 fe ff       	call   f010a770 <get_cpu_proc>
f0121048:	89 45 d0             	mov    %eax,-0x30(%ebp)
	assert(cur_env != NULL);
f012104b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f012104f:	75 19                	jne    f012106a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x42>
f0121051:	68 49 f3 12 f0       	push   $0xf012f349
f0121056:	68 77 f0 12 f0       	push   $0xf012f077
f012105b:	68 38 01 00 00       	push   $0x138
f0121060:	68 bf f0 12 f0       	push   $0xf012f0bf
f0121065:	e8 b0 f2 fd ff       	call   f010031a <_panic>
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012106a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012106e:	0f 85 f7 01 00 00    	jne    f012126b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x243>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f0121074:	83 ec 0c             	sub    $0xc,%esp
f0121077:	68 60 64 55 f0       	push   $0xf0556460
f012107c:	e8 56 da fe ff       	call   f010ead7 <acquire_spinlock>
f0121081:	83 c4 10             	add    $0x10,%esp
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f0121084:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012108b:	e9 e9 00 00 00       	jmp    f0121179 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x151>
			{
				struct Env * ptr_ready_env = NULL;
f0121090:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f0121097:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012109a:	83 c0 09             	add    $0x9,%eax
f012109d:	c1 e0 04             	shl    $0x4,%eax
f01210a0:	05 60 64 55 f0       	add    $0xf0556460,%eax
f01210a5:	8b 00                	mov    (%eax),%eax
f01210a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01210aa:	e9 81 00 00 00       	jmp    f0121130 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x108>
				{
#if USE_KHEAP
					int num_of_pages_in_WS = LIST_SIZE(&(ptr_ready_env->page_WS_list));
#else
					int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f01210af:	83 ec 0c             	sub    $0xc,%esp
f01210b2:	ff 75 e4             	pushl  -0x1c(%ebp)
f01210b5:	e8 a4 7c fe ff       	call   f0108d5e <env_page_ws_get_size>
f01210ba:	83 c4 10             	add    $0x10,%esp
f01210bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
#endif
					int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01210c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210c3:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f01210c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01210cc:	0f af c2             	imul   %edx,%eax
f01210cf:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01210d4:	f7 e2                	mul    %edx
f01210d6:	89 d0                	mov    %edx,%eax
f01210d8:	c1 e8 05             	shr    $0x5,%eax
f01210db:	89 45 e0             	mov    %eax,-0x20(%ebp)
					if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01210de:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210e1:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f01210e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01210ea:	89 d1                	mov    %edx,%ecx
f01210ec:	0f af c8             	imul   %eax,%ecx
f01210ef:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01210f4:	f7 e1                	mul    %ecx
f01210f6:	c1 ea 05             	shr    $0x5,%edx
f01210f9:	89 d0                	mov    %edx,%eax
f01210fb:	c1 e0 02             	shl    $0x2,%eax
f01210fe:	01 d0                	add    %edx,%eax
f0121100:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121107:	01 d0                	add    %edx,%eax
f0121109:	c1 e0 02             	shl    $0x2,%eax
f012110c:	29 c1                	sub    %eax,%ecx
f012110e:	89 ca                	mov    %ecx,%edx
f0121110:	85 d2                	test   %edx,%edx
f0121112:	74 03                	je     f0121117 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
						num_of_pages_to_be_removed++;
f0121114:	ff 45 e0             	incl   -0x20(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0121117:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012111a:	01 45 f4             	add    %eax,-0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
			{
				struct Env * ptr_ready_env = NULL;
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f012111d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121120:	83 c0 09             	add    $0x9,%eax
f0121123:	c1 e0 04             	shl    $0x4,%eax
f0121126:	05 68 64 55 f0       	add    $0xf0556468,%eax
f012112b:	8b 00                	mov    (%eax),%eax
f012112d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121130:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121134:	74 08                	je     f012113e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x116>
f0121136:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121139:	8b 40 08             	mov    0x8(%eax),%eax
f012113c:	eb 05                	jmp    f0121143 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x11b>
f012113e:	b8 00 00 00 00       	mov    $0x0,%eax
f0121143:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121146:	83 c2 09             	add    $0x9,%edx
f0121149:	c1 e2 04             	shl    $0x4,%edx
f012114c:	81 c2 68 64 55 f0    	add    $0xf0556468,%edx
f0121152:	89 02                	mov    %eax,(%edx)
f0121154:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121157:	83 c0 09             	add    $0x9,%eax
f012115a:	c1 e0 04             	shl    $0x4,%eax
f012115d:	05 68 64 55 f0       	add    $0xf0556468,%eax
f0121162:	8b 00                	mov    (%eax),%eax
f0121164:	85 c0                	test   %eax,%eax
f0121166:	0f 85 43 ff ff ff    	jne    f01210af <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
f012116c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121170:	0f 85 39 ff ff ff    	jne    f01210af <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
	assert(cur_env != NULL);
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f0121176:	ff 45 e8             	incl   -0x18(%ebp)
f0121179:	a0 60 91 55 f0       	mov    0xf0559160,%al
f012117e:	0f b6 c0             	movzbl %al,%eax
f0121181:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0121184:	0f 8f 06 ff ff ff    	jg     f0121090 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x68>
						num_of_pages_to_be_removed++;
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
f012118a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f0121191:	a1 e0 64 55 f0       	mov    0xf05564e0,%eax
f0121196:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0121199:	eb 1f                	jmp    f01211ba <calc_no_pages_tobe_removed_from_ready_exit_queues+0x192>
			{
#if USE_KHEAP
				int num_of_pages_in_WS = LIST_SIZE(&(ptr_exit_env->page_WS_list));
#else
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
f012119b:	83 ec 0c             	sub    $0xc,%esp
f012119e:	ff 75 dc             	pushl  -0x24(%ebp)
f01211a1:	e8 b8 7b fe ff       	call   f0108d5e <env_page_ws_get_size>
f01211a6:	83 c4 10             	add    $0x10,%esp
f01211a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f01211ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01211af:	01 45 f0             	add    %eax,-0x10(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f01211b2:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f01211b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01211ba:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01211be:	74 08                	je     f01211c8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a0>
f01211c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01211c3:	8b 40 08             	mov    0x8(%eax),%eax
f01211c6:	eb 05                	jmp    f01211cd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a5>
f01211c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01211cd:	a3 e8 64 55 f0       	mov    %eax,0xf05564e8
f01211d2:	a1 e8 64 55 f0       	mov    0xf05564e8,%eax
f01211d7:	85 c0                	test   %eax,%eax
f01211d9:	75 c0                	jne    f012119b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
f01211db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01211df:	75 ba                	jne    f012119b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f01211e1:	83 ec 0c             	sub    $0xc,%esp
f01211e4:	68 60 64 55 f0       	push   $0xf0556460
f01211e9:	e8 70 d9 fe ff       	call   f010eb5e <release_spinlock>
f01211ee:	83 c4 10             	add    $0x10,%esp
		if(cur_env != NULL)
f01211f1:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01211f5:	0f 84 de 00 00 00    	je     f01212d9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
		{
#if USE_KHEAP
			int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
			int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f01211fb:	83 ec 0c             	sub    $0xc,%esp
f01211fe:	ff 75 d0             	pushl  -0x30(%ebp)
f0121201:	e8 58 7b fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121206:	83 c4 10             	add    $0x10,%esp
f0121209:	89 45 c4             	mov    %eax,-0x3c(%ebp)
#endif
			int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012120c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012120f:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121215:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121218:	0f af c2             	imul   %edx,%eax
f012121b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0121220:	f7 e2                	mul    %edx
f0121222:	89 d0                	mov    %edx,%eax
f0121224:	c1 e8 05             	shr    $0x5,%eax
f0121227:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012122a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012122d:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121233:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121236:	89 d1                	mov    %edx,%ecx
f0121238:	0f af c8             	imul   %eax,%ecx
f012123b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121240:	f7 e1                	mul    %ecx
f0121242:	c1 ea 05             	shr    $0x5,%edx
f0121245:	89 d0                	mov    %edx,%eax
f0121247:	c1 e0 02             	shl    $0x2,%eax
f012124a:	01 d0                	add    %edx,%eax
f012124c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121253:	01 d0                	add    %edx,%eax
f0121255:	c1 e0 02             	shl    $0x2,%eax
f0121258:	29 c1                	sub    %eax,%ecx
f012125a:	89 ca                	mov    %ecx,%edx
f012125c:	85 d2                	test   %edx,%edx
f012125e:	74 03                	je     f0121263 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x23b>
				num_of_pages_to_be_removed++;
f0121260:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0121263:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0121266:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0121269:	eb 6e                	jmp    f01212d9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
#if USE_KHEAP
		int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
		int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f012126b:	83 ec 0c             	sub    $0xc,%esp
f012126e:	ff 75 d0             	pushl  -0x30(%ebp)
f0121271:	e8 e8 7a fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121276:	83 c4 10             	add    $0x10,%esp
f0121279:	89 45 c0             	mov    %eax,-0x40(%ebp)
#endif
		int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012127c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012127f:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121285:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121288:	0f af c2             	imul   %edx,%eax
f012128b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0121290:	f7 e2                	mul    %edx
f0121292:	89 d0                	mov    %edx,%eax
f0121294:	c1 e8 05             	shr    $0x5,%eax
f0121297:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012129a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012129d:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f01212a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01212a6:	89 d1                	mov    %edx,%ecx
f01212a8:	0f af c8             	imul   %eax,%ecx
f01212ab:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01212b0:	f7 e1                	mul    %ecx
f01212b2:	c1 ea 05             	shr    $0x5,%edx
f01212b5:	89 d0                	mov    %edx,%eax
f01212b7:	c1 e0 02             	shl    $0x2,%eax
f01212ba:	01 d0                	add    %edx,%eax
f01212bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01212c3:	01 d0                	add    %edx,%eax
f01212c5:	c1 e0 02             	shl    $0x2,%eax
f01212c8:	29 c1                	sub    %eax,%ecx
f01212ca:	89 ca                	mov    %ecx,%edx
f01212cc:	85 d2                	test   %edx,%edx
f01212ce:	74 03                	je     f01212d3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2ab>
			num_of_pages_to_be_removed++;
f01212d0:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01212d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01212d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f01212d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01212dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01212df:	01 c2                	add    %eax,%edx
f01212e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01212e4:	01 d0                	add    %edx,%eax
}
f01212e6:	c9                   	leave  
f01212e7:	c3                   	ret    

f01212e8 <schenv>:


void schenv()
{
f01212e8:	55                   	push   %ebp
f01212e9:	89 e5                	mov    %esp,%ebp
f01212eb:	83 ec 18             	sub    $0x18,%esp

	__nl = 0;
f01212ee:	c6 05 e0 91 55 f0 00 	movb   $0x0,0xf05591e0
	__ne = NULL;
f01212f5:	c7 05 0c 8f 55 f0 00 	movl   $0x0,0xf0558f0c
f01212fc:	00 00 00 
	acquire_spinlock(&ProcessQueues.qlock);
f01212ff:	83 ec 0c             	sub    $0xc,%esp
f0121302:	68 60 64 55 f0       	push   $0xf0556460
f0121307:	e8 cb d7 fe ff       	call   f010ead7 <acquire_spinlock>
f012130c:	83 c4 10             	add    $0x10,%esp
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f012130f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121316:	eb 40                	jmp    f0121358 <schenv+0x70>
		{
			if (queue_size(&(ProcessQueues.env_ready_queues[i])))
f0121318:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012131b:	83 c0 09             	add    $0x9,%eax
f012131e:	c1 e0 04             	shl    $0x4,%eax
f0121321:	05 60 64 55 f0       	add    $0xf0556460,%eax
f0121326:	83 ec 0c             	sub    $0xc,%esp
f0121329:	50                   	push   %eax
f012132a:	e8 31 3c fe ff       	call   f0104f60 <queue_size>
f012132f:	83 c4 10             	add    $0x10,%esp
f0121332:	85 c0                	test   %eax,%eax
f0121334:	74 1f                	je     f0121355 <schenv+0x6d>
			{
				__ne = LIST_LAST(&(ProcessQueues.env_ready_queues[i]));
f0121336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121339:	83 c0 09             	add    $0x9,%eax
f012133c:	c1 e0 04             	shl    $0x4,%eax
f012133f:	05 64 64 55 f0       	add    $0xf0556464,%eax
f0121344:	8b 00                	mov    (%eax),%eax
f0121346:	a3 0c 8f 55 f0       	mov    %eax,0xf0558f0c
				__nl = i;
f012134b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012134e:	a2 e0 91 55 f0       	mov    %al,0xf05591e0
				break;
f0121353:	eb 10                	jmp    f0121365 <schenv+0x7d>

	__nl = 0;
	__ne = NULL;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f0121355:	ff 45 f4             	incl   -0xc(%ebp)
f0121358:	a0 60 91 55 f0       	mov    0xf0559160,%al
f012135d:	0f b6 c0             	movzbl %al,%eax
f0121360:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121363:	7f b3                	jg     f0121318 <schenv+0x30>
				__nl = i;
				break;
			}
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f0121365:	83 ec 0c             	sub    $0xc,%esp
f0121368:	68 60 64 55 f0       	push   $0xf0556460
f012136d:	e8 ec d7 fe ff       	call   f010eb5e <release_spinlock>
f0121372:	83 c4 10             	add    $0x10,%esp
	struct Env* cur_env = get_cpu_proc();
f0121375:	e8 f6 93 fe ff       	call   f010a770 <get_cpu_proc>
f012137a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL)
f012137d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121381:	0f 84 82 00 00 00    	je     f0121409 <schenv+0x121>
	{
		if (__ne != NULL)
f0121387:	a1 0c 8f 55 f0       	mov    0xf0558f0c,%eax
f012138c:	85 c0                	test   %eax,%eax
f012138e:	74 49                	je     f01213d9 <schenv+0xf1>
		{
			if ((__pl + 1) < __nl)
f0121390:	a0 51 64 55 f0       	mov    0xf0556451,%al
f0121395:	0f b6 c0             	movzbl %al,%eax
f0121398:	8d 50 01             	lea    0x1(%eax),%edx
f012139b:	a0 e0 91 55 f0       	mov    0xf05591e0,%al
f01213a0:	0f b6 c0             	movzbl %al,%eax
f01213a3:	39 c2                	cmp    %eax,%edx
f01213a5:	7d 62                	jge    f0121409 <schenv+0x121>
			{
				__ne = cur_env;
f01213a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01213aa:	a3 0c 8f 55 f0       	mov    %eax,0xf0558f0c
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01213af:	a0 51 64 55 f0       	mov    0xf0556451,%al
f01213b4:	0f b6 c0             	movzbl %al,%eax
f01213b7:	8a 15 60 91 55 f0    	mov    0xf0559160,%dl
f01213bd:	0f b6 d2             	movzbl %dl,%edx
f01213c0:	4a                   	dec    %edx
f01213c1:	39 d0                	cmp    %edx,%eax
f01213c3:	7d 08                	jge    f01213cd <schenv+0xe5>
f01213c5:	a0 51 64 55 f0       	mov    0xf0556451,%al
f01213ca:	40                   	inc    %eax
f01213cb:	eb 05                	jmp    f01213d2 <schenv+0xea>
f01213cd:	a0 51 64 55 f0       	mov    0xf0556451,%al
f01213d2:	a2 e0 91 55 f0       	mov    %al,0xf05591e0
		{
			__ne = cur_env;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01213d7:	eb 30                	jmp    f0121409 <schenv+0x121>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = cur_env;
f01213d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01213dc:	a3 0c 8f 55 f0       	mov    %eax,0xf0558f0c
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01213e1:	a0 51 64 55 f0       	mov    0xf0556451,%al
f01213e6:	0f b6 c0             	movzbl %al,%eax
f01213e9:	8a 15 60 91 55 f0    	mov    0xf0559160,%dl
f01213ef:	0f b6 d2             	movzbl %dl,%edx
f01213f2:	4a                   	dec    %edx
f01213f3:	39 d0                	cmp    %edx,%eax
f01213f5:	7d 08                	jge    f01213ff <schenv+0x117>
f01213f7:	a0 51 64 55 f0       	mov    0xf0556451,%al
f01213fc:	40                   	inc    %eax
f01213fd:	eb 05                	jmp    f0121404 <schenv+0x11c>
f01213ff:	a0 51 64 55 f0       	mov    0xf0556451,%al
f0121404:	a2 e0 91 55 f0       	mov    %al,0xf05591e0
		}
	}
}
f0121409:	90                   	nop
f012140a:	c9                   	leave  
f012140b:	c3                   	ret    

f012140c <chksch>:

void chksch(uint8 onoff)
{
f012140c:	55                   	push   %ebp
f012140d:	89 e5                	mov    %esp,%ebp
f012140f:	83 ec 18             	sub    $0x18,%esp
f0121412:	8b 45 08             	mov    0x8(%ebp),%eax
f0121415:	88 45 f4             	mov    %al,-0xc(%ebp)
	//		__pl = 0 ;
	//		__nl = 0 ;
	//	}

	/*TEST BSD*/
	if (isSchedMethodBSD())
f0121418:	e8 16 53 fe ff       	call   f0106733 <isSchedMethodBSD>
f012141d:	85 c0                	test   %eax,%eax
f012141f:	74 48                	je     f0121469 <chksch+0x5d>
	{
		__histla = __pla = get_load_average();
f0121421:	e8 bb 52 fe ff       	call   f01066e1 <get_load_average>
f0121426:	a3 7c 91 55 f0       	mov    %eax,0xf055917c
f012142b:	a1 7c 91 55 f0       	mov    0xf055917c,%eax
f0121430:	a3 bc 8c 55 f0       	mov    %eax,0xf0558cbc
		acquire_spinlock(&ProcessQueues.qlock);
f0121435:	83 ec 0c             	sub    $0xc,%esp
f0121438:	68 60 64 55 f0       	push   $0xf0556460
f012143d:	e8 95 d6 fe ff       	call   f010ead7 <acquire_spinlock>
f0121442:	83 c4 10             	add    $0x10,%esp
		{
			__pnexit = LIST_SIZE(&ProcessQueues.env_exit_queue) ;
f0121445:	a1 ec 64 55 f0       	mov    0xf05564ec,%eax
f012144a:	a3 c0 65 55 f0       	mov    %eax,0xf05565c0
		}
		release_spinlock(&ProcessQueues.qlock);
f012144f:	83 ec 0c             	sub    $0xc,%esp
f0121452:	68 60 64 55 f0       	push   $0xf0556460
f0121457:	e8 02 d7 fe ff       	call   f010eb5e <release_spinlock>
f012145c:	83 c4 10             	add    $0x10,%esp
		__firsttime = 1;
f012145f:	c7 05 1c 8f 55 f0 01 	movl   $0x1,0xf0558f1c
f0121466:	00 00 00 
	}
	__chkstatus = onoff;
f0121469:	8a 45 f4             	mov    -0xc(%ebp),%al
f012146c:	a2 08 8f 55 f0       	mov    %al,0xf0558f08
}
f0121471:	90                   	nop
f0121472:	c9                   	leave  
f0121473:	c3                   	ret    

f0121474 <chk1>:
void chk1()
{
f0121474:	55                   	push   %ebp
f0121475:	89 e5                	mov    %esp,%ebp
	//			__pl = 0;
	//		}
	//		//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	//		schenv();
	//	}
}
f0121477:	90                   	nop
f0121478:	5d                   	pop    %ebp
f0121479:	c3                   	ret    

f012147a <chk2>:
void chk2(struct Env* __se)
{
f012147a:	55                   	push   %ebp
f012147b:	89 e5                	mov    %esp,%ebp
f012147d:	83 ec 28             	sub    $0x28,%esp
	if (__chkstatus == 0)
f0121480:	a0 08 8f 55 f0       	mov    0xf0558f08,%al
f0121485:	84 c0                	test   %al,%al
f0121487:	0f 84 59 03 00 00    	je     f01217e6 <chk2+0x36c>
		return ;

	/*TEST BSD*/
	if (isSchedMethodBSD())
f012148d:	e8 a1 52 fe ff       	call   f0106733 <isSchedMethodBSD>
f0121492:	85 c0                	test   %eax,%eax
f0121494:	0f 84 4d 03 00 00    	je     f01217e7 <chk2+0x36d>
	{
		__nla = get_load_average();
f012149a:	e8 42 52 fe ff       	call   f01066e1 <get_load_average>
f012149f:	a3 e4 8b 55 f0       	mov    %eax,0xf0558be4
		acquire_spinlock(&ProcessQueues.qlock);
f01214a4:	83 ec 0c             	sub    $0xc,%esp
f01214a7:	68 60 64 55 f0       	push   $0xf0556460
f01214ac:	e8 26 d6 fe ff       	call   f010ead7 <acquire_spinlock>
f01214b1:	83 c4 10             	add    $0x10,%esp
		{
			__nnexit = LIST_SIZE(&ProcessQueues.env_exit_queue);
f01214b4:	a1 ec 64 55 f0       	mov    0xf05564ec,%eax
f01214b9:	a3 10 8f 55 f0       	mov    %eax,0xf0558f10
		}
		release_spinlock(&ProcessQueues.qlock);
f01214be:	83 ec 0c             	sub    $0xc,%esp
f01214c1:	68 60 64 55 f0       	push   $0xf0556460
f01214c6:	e8 93 d6 fe ff       	call   f010eb5e <release_spinlock>
f01214cb:	83 c4 10             	add    $0x10,%esp

		if (__firsttime)
f01214ce:	a1 1c 8f 55 f0       	mov    0xf0558f1c,%eax
f01214d3:	85 c0                	test   %eax,%eax
f01214d5:	74 72                	je     f0121549 <chk2+0xcf>
		{
			acquire_spinlock(&ProcessQueues.qlock);
f01214d7:	83 ec 0c             	sub    $0xc,%esp
f01214da:	68 60 64 55 f0       	push   $0xf0556460
f01214df:	e8 f3 d5 fe ff       	call   f010ead7 <acquire_spinlock>
f01214e4:	83 c4 10             	add    $0x10,%esp
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
f01214e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01214eb:	0f 95 c0             	setne  %al
f01214ee:	0f b6 c0             	movzbl %al,%eax
f01214f1:	a3 d4 90 55 f0       	mov    %eax,0xf05590d4
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f01214f6:	a0 60 91 55 f0       	mov    0xf0559160,%al
f01214fb:	0f b6 c0             	movzbl %al,%eax
f01214fe:	48                   	dec    %eax
f01214ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0121502:	eb 20                	jmp    f0121524 <chk2+0xaa>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f0121504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121507:	83 c0 09             	add    $0x9,%eax
f012150a:	c1 e0 04             	shl    $0x4,%eax
f012150d:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f0121512:	8b 00                	mov    (%eax),%eax
f0121514:	8b 15 d4 90 55 f0    	mov    0xf05590d4,%edx
f012151a:	01 d0                	add    %edx,%eax
f012151c:	a3 d4 90 55 f0       	mov    %eax,0xf05590d4
		{
			acquire_spinlock(&ProcessQueues.qlock);
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f0121521:	ff 4d f4             	decl   -0xc(%ebp)
f0121524:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0121528:	79 da                	jns    f0121504 <chk2+0x8a>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
				}
				__firsttime = 0;
f012152a:	c7 05 1c 8f 55 f0 00 	movl   $0x0,0xf0558f1c
f0121531:	00 00 00 
			}
			release_spinlock(&ProcessQueues.qlock);
f0121534:	83 ec 0c             	sub    $0xc,%esp
f0121537:	68 60 64 55 f0       	push   $0xf0556460
f012153c:	e8 1d d6 fe ff       	call   f010eb5e <release_spinlock>
f0121541:	83 c4 10             	add    $0x10,%esp
f0121544:	e9 91 02 00 00       	jmp    f01217da <chk2+0x360>
		}
		else
		{
			if (__pnexit != __nnexit)
f0121549:	8b 15 c0 65 55 f0    	mov    0xf05565c0,%edx
f012154f:	a1 10 8f 55 f0       	mov    0xf0558f10,%eax
f0121554:	39 c2                	cmp    %eax,%edx
f0121556:	74 63                	je     f01215bb <chk2+0x141>
			{
				acquire_spinlock(&ProcessQueues.qlock);
f0121558:	83 ec 0c             	sub    $0xc,%esp
f012155b:	68 60 64 55 f0       	push   $0xf0556460
f0121560:	e8 72 d5 fe ff       	call   f010ead7 <acquire_spinlock>
f0121565:	83 c4 10             	add    $0x10,%esp
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
f0121568:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012156c:	0f 95 c0             	setne  %al
f012156f:	0f b6 c0             	movzbl %al,%eax
f0121572:	a3 d4 90 55 f0       	mov    %eax,0xf05590d4
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f0121577:	a0 60 91 55 f0       	mov    0xf0559160,%al
f012157c:	0f b6 c0             	movzbl %al,%eax
f012157f:	48                   	dec    %eax
f0121580:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121583:	eb 20                	jmp    f01215a5 <chk2+0x12b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f0121585:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121588:	83 c0 09             	add    $0x9,%eax
f012158b:	c1 e0 04             	shl    $0x4,%eax
f012158e:	05 6c 64 55 f0       	add    $0xf055646c,%eax
f0121593:	8b 00                	mov    (%eax),%eax
f0121595:	8b 15 d4 90 55 f0    	mov    0xf05590d4,%edx
f012159b:	01 d0                	add    %edx,%eax
f012159d:	a3 d4 90 55 f0       	mov    %eax,0xf05590d4
			{
				acquire_spinlock(&ProcessQueues.qlock);
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f01215a2:	ff 4d f0             	decl   -0x10(%ebp)
f01215a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01215a9:	79 da                	jns    f0121585 <chk2+0x10b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
					}
				}
				release_spinlock(&ProcessQueues.qlock);
f01215ab:	83 ec 0c             	sub    $0xc,%esp
f01215ae:	68 60 64 55 f0       	push   $0xf0556460
f01215b3:	e8 a6 d5 fe ff       	call   f010eb5e <release_spinlock>
f01215b8:	83 c4 10             	add    $0x10,%esp
			}

			//Make sure that the la is changed over long period of time
			if (timer_ticks() % 1000 == 0)
f01215bb:	e8 ba 50 fe ff       	call   f010667a <timer_ticks>
f01215c0:	6a 00                	push   $0x0
f01215c2:	68 e8 03 00 00       	push   $0x3e8
f01215c7:	52                   	push   %edx
f01215c8:	50                   	push   %eax
f01215c9:	e8 f6 1b 00 00       	call   f01231c4 <__moddi3>
f01215ce:	83 c4 10             	add    $0x10,%esp
f01215d1:	09 d0                	or     %edx,%eax
f01215d3:	85 c0                	test   %eax,%eax
f01215d5:	75 32                	jne    f0121609 <chk2+0x18f>
			{
				assert_endall(__histla != __nla) ;
f01215d7:	8b 15 bc 8c 55 f0    	mov    0xf0558cbc,%edx
f01215dd:	a1 e4 8b 55 f0       	mov    0xf0558be4,%eax
f01215e2:	39 c2                	cmp    %eax,%edx
f01215e4:	75 19                	jne    f01215ff <chk2+0x185>
f01215e6:	68 59 f3 12 f0       	push   $0xf012f359
f01215eb:	68 77 f0 12 f0       	push   $0xf012f077
f01215f0:	68 f4 01 00 00       	push   $0x1f4
f01215f5:	68 bf f0 12 f0       	push   $0xf012f0bf
f01215fa:	e8 ab ed fd ff       	call   f01003aa <_panic_all>
				__histla = __nla;
f01215ff:	a1 e4 8b 55 f0       	mov    0xf0558be4,%eax
f0121604:	a3 bc 8c 55 f0       	mov    %eax,0xf0558cbc
			}

			//check every 1 sec, assuming quantum >= 10
			if (timer_ticks() % 100 == 0)
f0121609:	e8 6c 50 fe ff       	call   f010667a <timer_ticks>
f012160e:	6a 00                	push   $0x0
f0121610:	6a 64                	push   $0x64
f0121612:	52                   	push   %edx
f0121613:	50                   	push   %eax
f0121614:	e8 ab 1b 00 00       	call   f01231c4 <__moddi3>
f0121619:	83 c4 10             	add    $0x10,%esp
f012161c:	09 d0                	or     %edx,%eax
f012161e:	85 c0                	test   %eax,%eax
f0121620:	0f 85 b4 01 00 00    	jne    f01217da <chk2+0x360>
			{
				int plaint = __pla / 100 ;
f0121626:	8b 0d 7c 91 55 f0    	mov    0xf055917c,%ecx
f012162c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121631:	f7 e9                	imul   %ecx
f0121633:	c1 fa 05             	sar    $0x5,%edx
f0121636:	89 c8                	mov    %ecx,%eax
f0121638:	c1 f8 1f             	sar    $0x1f,%eax
f012163b:	29 c2                	sub    %eax,%edx
f012163d:	89 d0                	mov    %edx,%eax
f012163f:	89 45 ec             	mov    %eax,-0x14(%ebp)
				int plafrc = __pla % 100 ;
f0121642:	8b 0d 7c 91 55 f0    	mov    0xf055917c,%ecx
f0121648:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012164d:	f7 e9                	imul   %ecx
f012164f:	c1 fa 05             	sar    $0x5,%edx
f0121652:	89 c8                	mov    %ecx,%eax
f0121654:	c1 f8 1f             	sar    $0x1f,%eax
f0121657:	29 c2                	sub    %eax,%edx
f0121659:	89 d0                	mov    %edx,%eax
f012165b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012165e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121661:	89 d0                	mov    %edx,%eax
f0121663:	c1 e0 02             	shl    $0x2,%eax
f0121666:	01 d0                	add    %edx,%eax
f0121668:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012166f:	01 d0                	add    %edx,%eax
f0121671:	c1 e0 02             	shl    $0x2,%eax
f0121674:	29 c1                	sub    %eax,%ecx
f0121676:	89 c8                	mov    %ecx,%eax
f0121678:	89 45 e8             	mov    %eax,-0x18(%ebp)

				int nlaint = __nla / 100 ;
f012167b:	8b 0d e4 8b 55 f0    	mov    0xf0558be4,%ecx
f0121681:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121686:	f7 e9                	imul   %ecx
f0121688:	c1 fa 05             	sar    $0x5,%edx
f012168b:	89 c8                	mov    %ecx,%eax
f012168d:	c1 f8 1f             	sar    $0x1f,%eax
f0121690:	29 c2                	sub    %eax,%edx
f0121692:	89 d0                	mov    %edx,%eax
f0121694:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				int nlafrc = __nla % 100 ;
f0121697:	8b 0d e4 8b 55 f0    	mov    0xf0558be4,%ecx
f012169d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01216a2:	f7 e9                	imul   %ecx
f01216a4:	c1 fa 05             	sar    $0x5,%edx
f01216a7:	89 c8                	mov    %ecx,%eax
f01216a9:	c1 f8 1f             	sar    $0x1f,%eax
f01216ac:	29 c2                	sub    %eax,%edx
f01216ae:	89 d0                	mov    %edx,%eax
f01216b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01216b3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01216b6:	89 d0                	mov    %edx,%eax
f01216b8:	c1 e0 02             	shl    $0x2,%eax
f01216bb:	01 d0                	add    %edx,%eax
f01216bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01216c4:	01 d0                	add    %edx,%eax
f01216c6:	c1 e0 02             	shl    $0x2,%eax
f01216c9:	29 c1                	sub    %eax,%ecx
f01216cb:	89 c8                	mov    %ecx,%eax
f01216cd:	89 45 e0             	mov    %eax,-0x20(%ebp)

				//Check at steady state of nproc (include equality)
				if (__nnexit == __pnexit)
f01216d0:	8b 15 10 8f 55 f0    	mov    0xf0558f10,%edx
f01216d6:	a1 c0 65 55 f0       	mov    0xf05565c0,%eax
f01216db:	39 c2                	cmp    %eax,%edx
f01216dd:	0f 85 ed 00 00 00    	jne    f01217d0 <chk2+0x356>
				{
					//cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
					if (__nproc > plaint)
f01216e3:	a1 d4 90 55 f0       	mov    0xf05590d4,%eax
f01216e8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01216eb:	7e 5b                	jle    f0121748 <chk2+0x2ce>
					{
						cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f01216ed:	a1 d4 90 55 f0       	mov    0xf05590d4,%eax
f01216f2:	83 ec 08             	sub    $0x8,%esp
f01216f5:	ff 75 e0             	pushl  -0x20(%ebp)
f01216f8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01216fb:	ff 75 e8             	pushl  -0x18(%ebp)
f01216fe:	ff 75 ec             	pushl  -0x14(%ebp)
f0121701:	50                   	push   %eax
f0121702:	68 6c f3 12 f0       	push   $0xf012f36c
f0121707:	e8 60 f8 fd ff       	call   f0100f6c <cprintf>
f012170c:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla > __pla);
						assert_endall((nlaint > plaint) || ((nlaint == plaint) && (nlafrc >= plafrc)));
f012170f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121712:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121715:	0f 8f b5 00 00 00    	jg     f01217d0 <chk2+0x356>
f012171b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012171e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121721:	75 0c                	jne    f012172f <chk2+0x2b5>
f0121723:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121726:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0121729:	0f 8d a1 00 00 00    	jge    f01217d0 <chk2+0x356>
f012172f:	68 b4 f3 12 f0       	push   $0xf012f3b4
f0121734:	68 77 f0 12 f0       	push   $0xf012f077
f0121739:	68 09 02 00 00       	push   $0x209
f012173e:	68 bf f0 12 f0       	push   $0xf012f0bf
f0121743:	e8 62 ec fd ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc < plaint)
f0121748:	a1 d4 90 55 f0       	mov    0xf05590d4,%eax
f012174d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121750:	7d 53                	jge    f01217a5 <chk2+0x32b>
					{
						cprintf("------------------# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f0121752:	a1 d4 90 55 f0       	mov    0xf05590d4,%eax
f0121757:	83 ec 08             	sub    $0x8,%esp
f012175a:	ff 75 e0             	pushl  -0x20(%ebp)
f012175d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0121760:	ff 75 e8             	pushl  -0x18(%ebp)
f0121763:	ff 75 ec             	pushl  -0x14(%ebp)
f0121766:	50                   	push   %eax
f0121767:	68 f4 f3 12 f0       	push   $0xf012f3f4
f012176c:	e8 fb f7 fd ff       	call   f0100f6c <cprintf>
f0121771:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla < __pla);
						assert_endall((nlaint < plaint) || ((nlaint == plaint) && (nlafrc <= plafrc)));
f0121774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121777:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012177a:	7c 54                	jl     f01217d0 <chk2+0x356>
f012177c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012177f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121782:	75 08                	jne    f012178c <chk2+0x312>
f0121784:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121787:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012178a:	7e 44                	jle    f01217d0 <chk2+0x356>
f012178c:	68 3c f4 12 f0       	push   $0xf012f43c
f0121791:	68 77 f0 12 f0       	push   $0xf012f077
f0121796:	68 0f 02 00 00       	push   $0x20f
f012179b:	68 bf f0 12 f0       	push   $0xf012f0bf
f01217a0:	e8 05 ec fd ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc == plaint)
f01217a5:	a1 d4 90 55 f0       	mov    0xf05590d4,%eax
f01217aa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01217ad:	75 21                	jne    f01217d0 <chk2+0x356>
					{
						assert_endall((nlaint == plaint));
f01217af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01217b2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01217b5:	74 19                	je     f01217d0 <chk2+0x356>
f01217b7:	68 7c f4 12 f0       	push   $0xf012f47c
f01217bc:	68 77 f0 12 f0       	push   $0xf012f077
f01217c1:	68 13 02 00 00       	push   $0x213
f01217c6:	68 bf f0 12 f0       	push   $0xf012f0bf
f01217cb:	e8 da eb fd ff       	call   f01003aa <_panic_all>
					}
				}
				__pla = __nla;
f01217d0:	a1 e4 8b 55 f0       	mov    0xf0558be4,%eax
f01217d5:	a3 7c 91 55 f0       	mov    %eax,0xf055917c
			}
		}
		__pnexit = __nnexit;
f01217da:	a1 10 8f 55 f0       	mov    0xf0558f10,%eax
f01217df:	a3 c0 65 55 f0       	mov    %eax,0xf05565c0
f01217e4:	eb 01                	jmp    f01217e7 <chk2+0x36d>
	//	}
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01217e6:	90                   	nop
	//				if (i == __tl) continue;
	//				assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
	//			}
	//		}
	//	}
}
f01217e7:	c9                   	leave  
f01217e8:	c3                   	ret    

f01217e9 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f01217e9:	55                   	push   %ebp
f01217ea:	89 e5                	mov    %esp,%ebp
f01217ec:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f01217ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217f6:	eb 40                	jmp    f0121838 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f01217f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01217fb:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0121801:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0121806:	83 ec 08             	sub    $0x8,%esp
f0121809:	52                   	push   %edx
f012180a:	50                   	push   %eax
f012180b:	e8 a6 01 00 00       	call   f01219b6 <check_va2pa>
f0121810:	83 c4 10             	add    $0x10,%esp
f0121813:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121816:	74 19                	je     f0121831 <check_boot_pgdir+0x48>
f0121818:	68 90 f4 12 f0       	push   $0xf012f490
f012181d:	68 77 f0 12 f0       	push   $0xf012f077
f0121822:	68 5f 02 00 00       	push   $0x25f
f0121827:	68 bf f0 12 f0       	push   $0xf012f0bf
f012182c:	e8 e9 ea fd ff       	call   f010031a <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0121831:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0121838:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012183f:	75 b7                	jne    f01217f8 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0121841:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121848:	e9 81 00 00 00       	jmp    f01218ce <check_boot_pgdir+0xe5>
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
f012184d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121850:	25 ff 7f 00 00       	and    $0x7fff,%eax
f0121855:	85 c0                	test   %eax,%eax
f0121857:	74 6d                	je     f01218c6 <check_boot_pgdir+0xdd>
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0121859:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012185c:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0121862:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0121867:	83 ec 08             	sub    $0x8,%esp
f012186a:	52                   	push   %edx
f012186b:	50                   	push   %eax
f012186c:	e8 45 01 00 00       	call   f01219b6 <check_va2pa>
f0121871:	83 c4 10             	add    $0x10,%esp
f0121874:	c7 45 f0 00 50 17 f0 	movl   $0xf0175000,-0x10(%ebp)
f012187b:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0121882:	77 17                	ja     f012189b <check_boot_pgdir+0xb2>
f0121884:	ff 75 f0             	pushl  -0x10(%ebp)
f0121887:	68 c8 f4 12 f0       	push   $0xf012f4c8
f012188c:	68 68 02 00 00       	push   $0x268
f0121891:	68 bf f0 12 f0       	push   $0xf012f0bf
f0121896:	e8 7f ea fd ff       	call   f010031a <_panic>
f012189b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012189e:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f01218a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01218a7:	01 ca                	add    %ecx,%edx
f01218a9:	39 d0                	cmp    %edx,%eax
f01218ab:	74 1a                	je     f01218c7 <check_boot_pgdir+0xde>
f01218ad:	68 fc f4 12 f0       	push   $0xf012f4fc
f01218b2:	68 77 f0 12 f0       	push   $0xf012f077
f01218b7:	68 68 02 00 00       	push   $0x268
f01218bc:	68 bf f0 12 f0       	push   $0xf012f0bf
f01218c1:	e8 54 ea fd ff       	call   f010031a <_panic>
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
f01218c6:	90                   	nop
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01218c7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01218ce:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01218d5:	0f 86 72 ff ff ff    	jbe    f012184d <check_boot_pgdir+0x64>
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01218db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01218e2:	e9 af 00 00 00       	jmp    f0121996 <check_boot_pgdir+0x1ad>
		switch (i) {
f01218e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01218ea:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01218ef:	74 11                	je     f0121902 <check_boot_pgdir+0x119>
f01218f1:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01218f6:	72 36                	jb     f012192e <check_boot_pgdir+0x145>
f01218f8:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01218fd:	83 f8 02             	cmp    $0x2,%eax
f0121900:	77 2c                	ja     f012192e <check_boot_pgdir+0x145>
		case PDX(UVPT):
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0121902:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0121907:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012190a:	c1 e2 02             	shl    $0x2,%edx
f012190d:	01 d0                	add    %edx,%eax
f012190f:	8b 00                	mov    (%eax),%eax
f0121911:	85 c0                	test   %eax,%eax
f0121913:	75 7a                	jne    f012198f <check_boot_pgdir+0x1a6>
f0121915:	68 82 f5 12 f0       	push   $0xf012f582
f012191a:	68 77 f0 12 f0       	push   $0xf012f077
f012191f:	68 73 02 00 00       	push   $0x273
f0121924:	68 bf f0 12 f0       	push   $0xf012f0bf
f0121929:	e8 ec e9 fd ff       	call   f010031a <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012192e:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0121935:	76 2c                	jbe    f0121963 <check_boot_pgdir+0x17a>
				assert(ptr_page_directory[i]);
f0121937:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f012193c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012193f:	c1 e2 02             	shl    $0x2,%edx
f0121942:	01 d0                	add    %edx,%eax
f0121944:	8b 00                	mov    (%eax),%eax
f0121946:	85 c0                	test   %eax,%eax
f0121948:	75 48                	jne    f0121992 <check_boot_pgdir+0x1a9>
f012194a:	68 82 f5 12 f0       	push   $0xf012f582
f012194f:	68 77 f0 12 f0       	push   $0xf012f077
f0121954:	68 77 02 00 00       	push   $0x277
f0121959:	68 bf f0 12 f0       	push   $0xf012f0bf
f012195e:	e8 b7 e9 fd ff       	call   f010031a <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0121963:	a1 dc 90 55 f0       	mov    0xf05590dc,%eax
f0121968:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012196b:	c1 e2 02             	shl    $0x2,%edx
f012196e:	01 d0                	add    %edx,%eax
f0121970:	8b 00                	mov    (%eax),%eax
f0121972:	85 c0                	test   %eax,%eax
f0121974:	74 1c                	je     f0121992 <check_boot_pgdir+0x1a9>
f0121976:	68 98 f5 12 f0       	push   $0xf012f598
f012197b:	68 77 f0 12 f0       	push   $0xf012f077
f0121980:	68 79 02 00 00       	push   $0x279
f0121985:	68 bf f0 12 f0       	push   $0xf012f0bf
f012198a:	e8 8b e9 fd ff       	call   f010031a <_panic>
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012198f:	90                   	nop
f0121990:	eb 01                	jmp    f0121993 <check_boot_pgdir+0x1aa>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0121992:	90                   	nop
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0121993:	ff 45 f4             	incl   -0xc(%ebp)
f0121996:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012199d:	0f 86 44 ff ff ff    	jbe    f01218e7 <check_boot_pgdir+0xfe>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("*	check_boot_pgdir() succeeded!\n");
f01219a3:	83 ec 0c             	sub    $0xc,%esp
f01219a6:	68 b4 f5 12 f0       	push   $0xf012f5b4
f01219ab:	e8 bc f5 fd ff       	call   f0100f6c <cprintf>
f01219b0:	83 c4 10             	add    $0x10,%esp
}
f01219b3:	90                   	nop
f01219b4:	c9                   	leave  
f01219b5:	c3                   	ret    

f01219b6 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01219b6:	55                   	push   %ebp
f01219b7:	89 e5                	mov    %esp,%ebp
f01219b9:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01219bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01219bf:	c1 e8 16             	shr    $0x16,%eax
f01219c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01219c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01219cc:	01 d0                	add    %edx,%eax
f01219ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f01219d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01219d4:	8b 00                	mov    (%eax),%eax
f01219d6:	83 e0 01             	and    $0x1,%eax
f01219d9:	85 c0                	test   %eax,%eax
f01219db:	75 0a                	jne    f01219e7 <check_va2pa+0x31>
		return ~0;
f01219dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01219e2:	e9 87 00 00 00       	jmp    f0121a6e <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01219e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01219ea:	8b 00                	mov    (%eax),%eax
f01219ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01219f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01219f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01219f7:	c1 e8 0c             	shr    $0xc,%eax
f01219fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01219fd:	a1 b8 8c 55 f0       	mov    0xf0558cb8,%eax
f0121a02:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0121a05:	72 17                	jb     f0121a1e <check_va2pa+0x68>
f0121a07:	ff 75 f0             	pushl  -0x10(%ebp)
f0121a0a:	68 d8 f5 12 f0       	push   $0xf012f5d8
f0121a0f:	68 8f 02 00 00       	push   $0x28f
f0121a14:	68 bf f0 12 f0       	push   $0xf012f0bf
f0121a19:	e8 fc e8 fd ff       	call   f010031a <_panic>
f0121a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121a21:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0121a26:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0121a29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121a2c:	c1 e8 0c             	shr    $0xc,%eax
f0121a2f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0121a34:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121a3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121a3e:	01 d0                	add    %edx,%eax
f0121a40:	8b 00                	mov    (%eax),%eax
f0121a42:	83 e0 01             	and    $0x1,%eax
f0121a45:	85 c0                	test   %eax,%eax
f0121a47:	75 07                	jne    f0121a50 <check_va2pa+0x9a>
		return ~0;
f0121a49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0121a4e:	eb 1e                	jmp    f0121a6e <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0121a50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121a53:	c1 e8 0c             	shr    $0xc,%eax
f0121a56:	25 ff 03 00 00       	and    $0x3ff,%eax
f0121a5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121a62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121a65:	01 d0                	add    %edx,%eax
f0121a67:	8b 00                	mov    (%eax),%eax
f0121a69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0121a6e:	c9                   	leave  
f0121a6f:	c3                   	ret    

f0121a70 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0121a70:	55                   	push   %ebp
f0121a71:	89 e5                	mov    %esp,%ebp
f0121a73:	53                   	push   %ebx
f0121a74:	83 ec 14             	sub    $0x14,%esp
f0121a77:	8b 45 10             	mov    0x10(%ebp),%eax
f0121a7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121a7d:	8b 45 14             	mov    0x14(%ebp),%eax
f0121a80:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0121a83:	8b 45 18             	mov    0x18(%ebp),%eax
f0121a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a8b:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0121a8e:	77 55                	ja     f0121ae5 <printnum+0x75>
f0121a90:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0121a93:	72 05                	jb     f0121a9a <printnum+0x2a>
f0121a95:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0121a98:	77 4b                	ja     f0121ae5 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0121a9a:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0121a9d:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0121aa0:	8b 45 18             	mov    0x18(%ebp),%eax
f0121aa3:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aa8:	52                   	push   %edx
f0121aa9:	50                   	push   %eax
f0121aaa:	ff 75 f4             	pushl  -0xc(%ebp)
f0121aad:	ff 75 f0             	pushl  -0x10(%ebp)
f0121ab0:	e8 a7 18 00 00       	call   f012335c <__udivdi3>
f0121ab5:	83 c4 10             	add    $0x10,%esp
f0121ab8:	83 ec 04             	sub    $0x4,%esp
f0121abb:	ff 75 20             	pushl  0x20(%ebp)
f0121abe:	53                   	push   %ebx
f0121abf:	ff 75 18             	pushl  0x18(%ebp)
f0121ac2:	52                   	push   %edx
f0121ac3:	50                   	push   %eax
f0121ac4:	ff 75 0c             	pushl  0xc(%ebp)
f0121ac7:	ff 75 08             	pushl  0x8(%ebp)
f0121aca:	e8 a1 ff ff ff       	call   f0121a70 <printnum>
f0121acf:	83 c4 20             	add    $0x20,%esp
f0121ad2:	eb 1a                	jmp    f0121aee <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0121ad4:	83 ec 08             	sub    $0x8,%esp
f0121ad7:	ff 75 0c             	pushl  0xc(%ebp)
f0121ada:	ff 75 20             	pushl  0x20(%ebp)
f0121add:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ae0:	ff d0                	call   *%eax
f0121ae2:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0121ae5:	ff 4d 1c             	decl   0x1c(%ebp)
f0121ae8:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0121aec:	7f e6                	jg     f0121ad4 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0121aee:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0121af1:	bb 00 00 00 00       	mov    $0x0,%ebx
f0121af6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121af9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121afc:	53                   	push   %ebx
f0121afd:	51                   	push   %ecx
f0121afe:	52                   	push   %edx
f0121aff:	50                   	push   %eax
f0121b00:	e8 67 19 00 00       	call   f012346c <__umoddi3>
f0121b05:	83 c4 10             	add    $0x10,%esp
f0121b08:	05 34 f8 12 f0       	add    $0xf012f834,%eax
f0121b0d:	8a 00                	mov    (%eax),%al
f0121b0f:	0f be c0             	movsbl %al,%eax
f0121b12:	83 ec 08             	sub    $0x8,%esp
f0121b15:	ff 75 0c             	pushl  0xc(%ebp)
f0121b18:	50                   	push   %eax
f0121b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b1c:	ff d0                	call   *%eax
f0121b1e:	83 c4 10             	add    $0x10,%esp
}
f0121b21:	90                   	nop
f0121b22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0121b25:	c9                   	leave  
f0121b26:	c3                   	ret    

f0121b27 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0121b27:	55                   	push   %ebp
f0121b28:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121b2a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121b2e:	7e 1c                	jle    f0121b4c <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0121b30:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b33:	8b 00                	mov    (%eax),%eax
f0121b35:	8d 50 08             	lea    0x8(%eax),%edx
f0121b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b3b:	89 10                	mov    %edx,(%eax)
f0121b3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b40:	8b 00                	mov    (%eax),%eax
f0121b42:	83 e8 08             	sub    $0x8,%eax
f0121b45:	8b 50 04             	mov    0x4(%eax),%edx
f0121b48:	8b 00                	mov    (%eax),%eax
f0121b4a:	eb 40                	jmp    f0121b8c <getuint+0x65>
	else if (lflag)
f0121b4c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121b50:	74 1e                	je     f0121b70 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0121b52:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b55:	8b 00                	mov    (%eax),%eax
f0121b57:	8d 50 04             	lea    0x4(%eax),%edx
f0121b5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b5d:	89 10                	mov    %edx,(%eax)
f0121b5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b62:	8b 00                	mov    (%eax),%eax
f0121b64:	83 e8 04             	sub    $0x4,%eax
f0121b67:	8b 00                	mov    (%eax),%eax
f0121b69:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b6e:	eb 1c                	jmp    f0121b8c <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0121b70:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b73:	8b 00                	mov    (%eax),%eax
f0121b75:	8d 50 04             	lea    0x4(%eax),%edx
f0121b78:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b7b:	89 10                	mov    %edx,(%eax)
f0121b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b80:	8b 00                	mov    (%eax),%eax
f0121b82:	83 e8 04             	sub    $0x4,%eax
f0121b85:	8b 00                	mov    (%eax),%eax
f0121b87:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0121b8c:	5d                   	pop    %ebp
f0121b8d:	c3                   	ret    

f0121b8e <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0121b8e:	55                   	push   %ebp
f0121b8f:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121b91:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121b95:	7e 1c                	jle    f0121bb3 <getint+0x25>
		return va_arg(*ap, long long);
f0121b97:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b9a:	8b 00                	mov    (%eax),%eax
f0121b9c:	8d 50 08             	lea    0x8(%eax),%edx
f0121b9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ba2:	89 10                	mov    %edx,(%eax)
f0121ba4:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ba7:	8b 00                	mov    (%eax),%eax
f0121ba9:	83 e8 08             	sub    $0x8,%eax
f0121bac:	8b 50 04             	mov    0x4(%eax),%edx
f0121baf:	8b 00                	mov    (%eax),%eax
f0121bb1:	eb 38                	jmp    f0121beb <getint+0x5d>
	else if (lflag)
f0121bb3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121bb7:	74 1a                	je     f0121bd3 <getint+0x45>
		return va_arg(*ap, long);
f0121bb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bbc:	8b 00                	mov    (%eax),%eax
f0121bbe:	8d 50 04             	lea    0x4(%eax),%edx
f0121bc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bc4:	89 10                	mov    %edx,(%eax)
f0121bc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bc9:	8b 00                	mov    (%eax),%eax
f0121bcb:	83 e8 04             	sub    $0x4,%eax
f0121bce:	8b 00                	mov    (%eax),%eax
f0121bd0:	99                   	cltd   
f0121bd1:	eb 18                	jmp    f0121beb <getint+0x5d>
	else
		return va_arg(*ap, int);
f0121bd3:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bd6:	8b 00                	mov    (%eax),%eax
f0121bd8:	8d 50 04             	lea    0x4(%eax),%edx
f0121bdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0121bde:	89 10                	mov    %edx,(%eax)
f0121be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0121be3:	8b 00                	mov    (%eax),%eax
f0121be5:	83 e8 04             	sub    $0x4,%eax
f0121be8:	8b 00                	mov    (%eax),%eax
f0121bea:	99                   	cltd   
}
f0121beb:	5d                   	pop    %ebp
f0121bec:	c3                   	ret    

f0121bed <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0121bed:	55                   	push   %ebp
f0121bee:	89 e5                	mov    %esp,%ebp
f0121bf0:	56                   	push   %esi
f0121bf1:	53                   	push   %ebx
f0121bf2:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121bf5:	eb 17                	jmp    f0121c0e <vprintfmt+0x21>
			if (ch == '\0')
f0121bf7:	85 db                	test   %ebx,%ebx
f0121bf9:	0f 84 c1 03 00 00    	je     f0121fc0 <vprintfmt+0x3d3>
				return;
			putch(ch, putdat);
f0121bff:	83 ec 08             	sub    $0x8,%esp
f0121c02:	ff 75 0c             	pushl  0xc(%ebp)
f0121c05:	53                   	push   %ebx
f0121c06:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c09:	ff d0                	call   *%eax
f0121c0b:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121c0e:	8b 45 10             	mov    0x10(%ebp),%eax
f0121c11:	8d 50 01             	lea    0x1(%eax),%edx
f0121c14:	89 55 10             	mov    %edx,0x10(%ebp)
f0121c17:	8a 00                	mov    (%eax),%al
f0121c19:	0f b6 d8             	movzbl %al,%ebx
f0121c1c:	83 fb 25             	cmp    $0x25,%ebx
f0121c1f:	75 d6                	jne    f0121bf7 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0121c21:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0121c25:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0121c2c:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0121c33:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0121c3a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0121c41:	8b 45 10             	mov    0x10(%ebp),%eax
f0121c44:	8d 50 01             	lea    0x1(%eax),%edx
f0121c47:	89 55 10             	mov    %edx,0x10(%ebp)
f0121c4a:	8a 00                	mov    (%eax),%al
f0121c4c:	0f b6 d8             	movzbl %al,%ebx
f0121c4f:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0121c52:	83 f8 5b             	cmp    $0x5b,%eax
f0121c55:	0f 87 3d 03 00 00    	ja     f0121f98 <vprintfmt+0x3ab>
f0121c5b:	8b 04 85 58 f8 12 f0 	mov    -0xfed07a8(,%eax,4),%eax
f0121c62:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0121c64:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0121c68:	eb d7                	jmp    f0121c41 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0121c6a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0121c6e:	eb d1                	jmp    f0121c41 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0121c70:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0121c77:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0121c7a:	89 d0                	mov    %edx,%eax
f0121c7c:	c1 e0 02             	shl    $0x2,%eax
f0121c7f:	01 d0                	add    %edx,%eax
f0121c81:	01 c0                	add    %eax,%eax
f0121c83:	01 d8                	add    %ebx,%eax
f0121c85:	83 e8 30             	sub    $0x30,%eax
f0121c88:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0121c8b:	8b 45 10             	mov    0x10(%ebp),%eax
f0121c8e:	8a 00                	mov    (%eax),%al
f0121c90:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0121c93:	83 fb 2f             	cmp    $0x2f,%ebx
f0121c96:	7e 3e                	jle    f0121cd6 <vprintfmt+0xe9>
f0121c98:	83 fb 39             	cmp    $0x39,%ebx
f0121c9b:	7f 39                	jg     f0121cd6 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0121c9d:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0121ca0:	eb d5                	jmp    f0121c77 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0121ca2:	8b 45 14             	mov    0x14(%ebp),%eax
f0121ca5:	83 c0 04             	add    $0x4,%eax
f0121ca8:	89 45 14             	mov    %eax,0x14(%ebp)
f0121cab:	8b 45 14             	mov    0x14(%ebp),%eax
f0121cae:	83 e8 04             	sub    $0x4,%eax
f0121cb1:	8b 00                	mov    (%eax),%eax
f0121cb3:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0121cb6:	eb 1f                	jmp    f0121cd7 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0121cb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121cbc:	79 83                	jns    f0121c41 <vprintfmt+0x54>
				width = 0;
f0121cbe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0121cc5:	e9 77 ff ff ff       	jmp    f0121c41 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0121cca:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0121cd1:	e9 6b ff ff ff       	jmp    f0121c41 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0121cd6:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0121cd7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121cdb:	0f 89 60 ff ff ff    	jns    f0121c41 <vprintfmt+0x54>
				width = precision, precision = -1;
f0121ce1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121ce4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121ce7:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0121cee:	e9 4e ff ff ff       	jmp    f0121c41 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0121cf3:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0121cf6:	e9 46 ff ff ff       	jmp    f0121c41 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0121cfb:	8b 45 14             	mov    0x14(%ebp),%eax
f0121cfe:	83 c0 04             	add    $0x4,%eax
f0121d01:	89 45 14             	mov    %eax,0x14(%ebp)
f0121d04:	8b 45 14             	mov    0x14(%ebp),%eax
f0121d07:	83 e8 04             	sub    $0x4,%eax
f0121d0a:	8b 00                	mov    (%eax),%eax
f0121d0c:	83 ec 08             	sub    $0x8,%esp
f0121d0f:	ff 75 0c             	pushl  0xc(%ebp)
f0121d12:	50                   	push   %eax
f0121d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d16:	ff d0                	call   *%eax
f0121d18:	83 c4 10             	add    $0x10,%esp
			break;
f0121d1b:	e9 9b 02 00 00       	jmp    f0121fbb <vprintfmt+0x3ce>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0121d20:	8b 45 14             	mov    0x14(%ebp),%eax
f0121d23:	83 c0 04             	add    $0x4,%eax
f0121d26:	89 45 14             	mov    %eax,0x14(%ebp)
f0121d29:	8b 45 14             	mov    0x14(%ebp),%eax
f0121d2c:	83 e8 04             	sub    $0x4,%eax
f0121d2f:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0121d31:	85 db                	test   %ebx,%ebx
f0121d33:	79 02                	jns    f0121d37 <vprintfmt+0x14a>
				err = -err;
f0121d35:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0121d37:	83 fb 64             	cmp    $0x64,%ebx
f0121d3a:	7f 0b                	jg     f0121d47 <vprintfmt+0x15a>
f0121d3c:	8b 34 9d a0 f6 12 f0 	mov    -0xfed0960(,%ebx,4),%esi
f0121d43:	85 f6                	test   %esi,%esi
f0121d45:	75 19                	jne    f0121d60 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0121d47:	53                   	push   %ebx
f0121d48:	68 45 f8 12 f0       	push   $0xf012f845
f0121d4d:	ff 75 0c             	pushl  0xc(%ebp)
f0121d50:	ff 75 08             	pushl  0x8(%ebp)
f0121d53:	e8 70 02 00 00       	call   f0121fc8 <printfmt>
f0121d58:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0121d5b:	e9 5b 02 00 00       	jmp    f0121fbb <vprintfmt+0x3ce>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0121d60:	56                   	push   %esi
f0121d61:	68 4e f8 12 f0       	push   $0xf012f84e
f0121d66:	ff 75 0c             	pushl  0xc(%ebp)
f0121d69:	ff 75 08             	pushl  0x8(%ebp)
f0121d6c:	e8 57 02 00 00       	call   f0121fc8 <printfmt>
f0121d71:	83 c4 10             	add    $0x10,%esp
			break;
f0121d74:	e9 42 02 00 00       	jmp    f0121fbb <vprintfmt+0x3ce>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0121d79:	8b 45 14             	mov    0x14(%ebp),%eax
f0121d7c:	83 c0 04             	add    $0x4,%eax
f0121d7f:	89 45 14             	mov    %eax,0x14(%ebp)
f0121d82:	8b 45 14             	mov    0x14(%ebp),%eax
f0121d85:	83 e8 04             	sub    $0x4,%eax
f0121d88:	8b 30                	mov    (%eax),%esi
f0121d8a:	85 f6                	test   %esi,%esi
f0121d8c:	75 05                	jne    f0121d93 <vprintfmt+0x1a6>
				p = "(null)";
f0121d8e:	be 51 f8 12 f0       	mov    $0xf012f851,%esi
			if (width > 0 && padc != '-')
f0121d93:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121d97:	7e 6d                	jle    f0121e06 <vprintfmt+0x219>
f0121d99:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0121d9d:	74 67                	je     f0121e06 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0121d9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121da2:	83 ec 08             	sub    $0x8,%esp
f0121da5:	50                   	push   %eax
f0121da6:	56                   	push   %esi
f0121da7:	e8 26 05 00 00       	call   f01222d2 <strnlen>
f0121dac:	83 c4 10             	add    $0x10,%esp
f0121daf:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0121db2:	eb 16                	jmp    f0121dca <vprintfmt+0x1dd>
					putch(padc, putdat);
f0121db4:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0121db8:	83 ec 08             	sub    $0x8,%esp
f0121dbb:	ff 75 0c             	pushl  0xc(%ebp)
f0121dbe:	50                   	push   %eax
f0121dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dc2:	ff d0                	call   *%eax
f0121dc4:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0121dc7:	ff 4d e4             	decl   -0x1c(%ebp)
f0121dca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121dce:	7f e4                	jg     f0121db4 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0121dd0:	eb 34                	jmp    f0121e06 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0121dd2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0121dd6:	74 1c                	je     f0121df4 <vprintfmt+0x207>
f0121dd8:	83 fb 1f             	cmp    $0x1f,%ebx
f0121ddb:	7e 05                	jle    f0121de2 <vprintfmt+0x1f5>
f0121ddd:	83 fb 7e             	cmp    $0x7e,%ebx
f0121de0:	7e 12                	jle    f0121df4 <vprintfmt+0x207>
					putch('?', putdat);
f0121de2:	83 ec 08             	sub    $0x8,%esp
f0121de5:	ff 75 0c             	pushl  0xc(%ebp)
f0121de8:	6a 3f                	push   $0x3f
f0121dea:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ded:	ff d0                	call   *%eax
f0121def:	83 c4 10             	add    $0x10,%esp
f0121df2:	eb 0f                	jmp    f0121e03 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0121df4:	83 ec 08             	sub    $0x8,%esp
f0121df7:	ff 75 0c             	pushl  0xc(%ebp)
f0121dfa:	53                   	push   %ebx
f0121dfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dfe:	ff d0                	call   *%eax
f0121e00:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0121e03:	ff 4d e4             	decl   -0x1c(%ebp)
f0121e06:	89 f0                	mov    %esi,%eax
f0121e08:	8d 70 01             	lea    0x1(%eax),%esi
f0121e0b:	8a 00                	mov    (%eax),%al
f0121e0d:	0f be d8             	movsbl %al,%ebx
f0121e10:	85 db                	test   %ebx,%ebx
f0121e12:	74 24                	je     f0121e38 <vprintfmt+0x24b>
f0121e14:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0121e18:	78 b8                	js     f0121dd2 <vprintfmt+0x1e5>
f0121e1a:	ff 4d e0             	decl   -0x20(%ebp)
f0121e1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0121e21:	79 af                	jns    f0121dd2 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0121e23:	eb 13                	jmp    f0121e38 <vprintfmt+0x24b>
				putch(' ', putdat);
f0121e25:	83 ec 08             	sub    $0x8,%esp
f0121e28:	ff 75 0c             	pushl  0xc(%ebp)
f0121e2b:	6a 20                	push   $0x20
f0121e2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e30:	ff d0                	call   *%eax
f0121e32:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0121e35:	ff 4d e4             	decl   -0x1c(%ebp)
f0121e38:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121e3c:	7f e7                	jg     f0121e25 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0121e3e:	e9 78 01 00 00       	jmp    f0121fbb <vprintfmt+0x3ce>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0121e43:	83 ec 08             	sub    $0x8,%esp
f0121e46:	ff 75 e8             	pushl  -0x18(%ebp)
f0121e49:	8d 45 14             	lea    0x14(%ebp),%eax
f0121e4c:	50                   	push   %eax
f0121e4d:	e8 3c fd ff ff       	call   f0121b8e <getint>
f0121e52:	83 c4 10             	add    $0x10,%esp
f0121e55:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121e58:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0121e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121e5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121e61:	85 d2                	test   %edx,%edx
f0121e63:	79 23                	jns    f0121e88 <vprintfmt+0x29b>
				putch('-', putdat);
f0121e65:	83 ec 08             	sub    $0x8,%esp
f0121e68:	ff 75 0c             	pushl  0xc(%ebp)
f0121e6b:	6a 2d                	push   $0x2d
f0121e6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e70:	ff d0                	call   *%eax
f0121e72:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0121e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121e78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121e7b:	f7 d8                	neg    %eax
f0121e7d:	83 d2 00             	adc    $0x0,%edx
f0121e80:	f7 da                	neg    %edx
f0121e82:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121e85:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0121e88:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0121e8f:	e9 bc 00 00 00       	jmp    f0121f50 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0121e94:	83 ec 08             	sub    $0x8,%esp
f0121e97:	ff 75 e8             	pushl  -0x18(%ebp)
f0121e9a:	8d 45 14             	lea    0x14(%ebp),%eax
f0121e9d:	50                   	push   %eax
f0121e9e:	e8 84 fc ff ff       	call   f0121b27 <getuint>
f0121ea3:	83 c4 10             	add    $0x10,%esp
f0121ea6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121ea9:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0121eac:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0121eb3:	e9 98 00 00 00       	jmp    f0121f50 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0121eb8:	83 ec 08             	sub    $0x8,%esp
f0121ebb:	ff 75 0c             	pushl  0xc(%ebp)
f0121ebe:	6a 58                	push   $0x58
f0121ec0:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ec3:	ff d0                	call   *%eax
f0121ec5:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0121ec8:	83 ec 08             	sub    $0x8,%esp
f0121ecb:	ff 75 0c             	pushl  0xc(%ebp)
f0121ece:	6a 58                	push   $0x58
f0121ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ed3:	ff d0                	call   *%eax
f0121ed5:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0121ed8:	83 ec 08             	sub    $0x8,%esp
f0121edb:	ff 75 0c             	pushl  0xc(%ebp)
f0121ede:	6a 58                	push   $0x58
f0121ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ee3:	ff d0                	call   *%eax
f0121ee5:	83 c4 10             	add    $0x10,%esp
			break;
f0121ee8:	e9 ce 00 00 00       	jmp    f0121fbb <vprintfmt+0x3ce>

		// pointer
		case 'p':
			putch('0', putdat);
f0121eed:	83 ec 08             	sub    $0x8,%esp
f0121ef0:	ff 75 0c             	pushl  0xc(%ebp)
f0121ef3:	6a 30                	push   $0x30
f0121ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ef8:	ff d0                	call   *%eax
f0121efa:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0121efd:	83 ec 08             	sub    $0x8,%esp
f0121f00:	ff 75 0c             	pushl  0xc(%ebp)
f0121f03:	6a 78                	push   $0x78
f0121f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f08:	ff d0                	call   *%eax
f0121f0a:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0121f0d:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f10:	83 c0 04             	add    $0x4,%eax
f0121f13:	89 45 14             	mov    %eax,0x14(%ebp)
f0121f16:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f19:	83 e8 04             	sub    $0x4,%eax
f0121f1c:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0121f1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121f21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0121f28:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0121f2f:	eb 1f                	jmp    f0121f50 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0121f31:	83 ec 08             	sub    $0x8,%esp
f0121f34:	ff 75 e8             	pushl  -0x18(%ebp)
f0121f37:	8d 45 14             	lea    0x14(%ebp),%eax
f0121f3a:	50                   	push   %eax
f0121f3b:	e8 e7 fb ff ff       	call   f0121b27 <getuint>
f0121f40:	83 c4 10             	add    $0x10,%esp
f0121f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121f46:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0121f49:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0121f50:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0121f54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0121f57:	83 ec 04             	sub    $0x4,%esp
f0121f5a:	52                   	push   %edx
f0121f5b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0121f5e:	50                   	push   %eax
f0121f5f:	ff 75 f4             	pushl  -0xc(%ebp)
f0121f62:	ff 75 f0             	pushl  -0x10(%ebp)
f0121f65:	ff 75 0c             	pushl  0xc(%ebp)
f0121f68:	ff 75 08             	pushl  0x8(%ebp)
f0121f6b:	e8 00 fb ff ff       	call   f0121a70 <printnum>
f0121f70:	83 c4 20             	add    $0x20,%esp
			break;
f0121f73:	eb 46                	jmp    f0121fbb <vprintfmt+0x3ce>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0121f75:	83 ec 08             	sub    $0x8,%esp
f0121f78:	ff 75 0c             	pushl  0xc(%ebp)
f0121f7b:	53                   	push   %ebx
f0121f7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f7f:	ff d0                	call   *%eax
f0121f81:	83 c4 10             	add    $0x10,%esp
			break;
f0121f84:	eb 35                	jmp    f0121fbb <vprintfmt+0x3ce>

		/**********************************/
		/*2023*/
		// DON'T Print Program Name & UD
		case '~':
			printProgName = 0;
f0121f86:	c6 05 50 64 55 f0 00 	movb   $0x0,0xf0556450
			break;
f0121f8d:	eb 2c                	jmp    f0121fbb <vprintfmt+0x3ce>
		// Print Program Name & UD
		case '@':
			printProgName = 1;
f0121f8f:	c6 05 50 64 55 f0 01 	movb   $0x1,0xf0556450
			break;
f0121f96:	eb 23                	jmp    f0121fbb <vprintfmt+0x3ce>
		/**********************************/

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0121f98:	83 ec 08             	sub    $0x8,%esp
f0121f9b:	ff 75 0c             	pushl  0xc(%ebp)
f0121f9e:	6a 25                	push   $0x25
f0121fa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0121fa3:	ff d0                	call   *%eax
f0121fa5:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0121fa8:	ff 4d 10             	decl   0x10(%ebp)
f0121fab:	eb 03                	jmp    f0121fb0 <vprintfmt+0x3c3>
f0121fad:	ff 4d 10             	decl   0x10(%ebp)
f0121fb0:	8b 45 10             	mov    0x10(%ebp),%eax
f0121fb3:	48                   	dec    %eax
f0121fb4:	8a 00                	mov    (%eax),%al
f0121fb6:	3c 25                	cmp    $0x25,%al
f0121fb8:	75 f3                	jne    f0121fad <vprintfmt+0x3c0>
				/* do nothing */;
			break;
f0121fba:	90                   	nop
		}
	}
f0121fbb:	e9 35 fc ff ff       	jmp    f0121bf5 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0121fc0:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0121fc1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121fc4:	5b                   	pop    %ebx
f0121fc5:	5e                   	pop    %esi
f0121fc6:	5d                   	pop    %ebp
f0121fc7:	c3                   	ret    

f0121fc8 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0121fc8:	55                   	push   %ebp
f0121fc9:	89 e5                	mov    %esp,%ebp
f0121fcb:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0121fce:	8d 45 10             	lea    0x10(%ebp),%eax
f0121fd1:	83 c0 04             	add    $0x4,%eax
f0121fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0121fd7:	8b 45 10             	mov    0x10(%ebp),%eax
f0121fda:	ff 75 f4             	pushl  -0xc(%ebp)
f0121fdd:	50                   	push   %eax
f0121fde:	ff 75 0c             	pushl  0xc(%ebp)
f0121fe1:	ff 75 08             	pushl  0x8(%ebp)
f0121fe4:	e8 04 fc ff ff       	call   f0121bed <vprintfmt>
f0121fe9:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0121fec:	90                   	nop
f0121fed:	c9                   	leave  
f0121fee:	c3                   	ret    

f0121fef <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0121fef:	55                   	push   %ebp
f0121ff0:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0121ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121ff5:	8b 40 08             	mov    0x8(%eax),%eax
f0121ff8:	8d 50 01             	lea    0x1(%eax),%edx
f0121ffb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121ffe:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0122001:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122004:	8b 10                	mov    (%eax),%edx
f0122006:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122009:	8b 40 04             	mov    0x4(%eax),%eax
f012200c:	39 c2                	cmp    %eax,%edx
f012200e:	73 12                	jae    f0122022 <sprintputch+0x33>
		*b->buf++ = ch;
f0122010:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122013:	8b 00                	mov    (%eax),%eax
f0122015:	8d 48 01             	lea    0x1(%eax),%ecx
f0122018:	8b 55 0c             	mov    0xc(%ebp),%edx
f012201b:	89 0a                	mov    %ecx,(%edx)
f012201d:	8b 55 08             	mov    0x8(%ebp),%edx
f0122020:	88 10                	mov    %dl,(%eax)
}
f0122022:	90                   	nop
f0122023:	5d                   	pop    %ebp
f0122024:	c3                   	ret    

f0122025 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0122025:	55                   	push   %ebp
f0122026:	89 e5                	mov    %esp,%ebp
f0122028:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012202b:	8b 45 08             	mov    0x8(%ebp),%eax
f012202e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0122031:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122034:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122037:	8b 45 08             	mov    0x8(%ebp),%eax
f012203a:	01 d0                	add    %edx,%eax
f012203c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012203f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0122046:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012204a:	74 06                	je     f0122052 <vsnprintf+0x2d>
f012204c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122050:	7f 07                	jg     f0122059 <vsnprintf+0x34>
		return -E_INVAL;
f0122052:	b8 03 00 00 00       	mov    $0x3,%eax
f0122057:	eb 20                	jmp    f0122079 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0122059:	ff 75 14             	pushl  0x14(%ebp)
f012205c:	ff 75 10             	pushl  0x10(%ebp)
f012205f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0122062:	50                   	push   %eax
f0122063:	68 ef 1f 12 f0       	push   $0xf0121fef
f0122068:	e8 80 fb ff ff       	call   f0121bed <vprintfmt>
f012206d:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0122070:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122073:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0122076:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0122079:	c9                   	leave  
f012207a:	c3                   	ret    

f012207b <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012207b:	55                   	push   %ebp
f012207c:	89 e5                	mov    %esp,%ebp
f012207e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0122081:	8d 45 10             	lea    0x10(%ebp),%eax
f0122084:	83 c0 04             	add    $0x4,%eax
f0122087:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012208a:	8b 45 10             	mov    0x10(%ebp),%eax
f012208d:	ff 75 f4             	pushl  -0xc(%ebp)
f0122090:	50                   	push   %eax
f0122091:	ff 75 0c             	pushl  0xc(%ebp)
f0122094:	ff 75 08             	pushl  0x8(%ebp)
f0122097:	e8 89 ff ff ff       	call   f0122025 <vsnprintf>
f012209c:	83 c4 10             	add    $0x10,%esp
f012209f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01220a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01220a5:	c9                   	leave  
f01220a6:	c3                   	ret    

f01220a7 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01220a7:	55                   	push   %ebp
f01220a8:	89 e5                	mov    %esp,%ebp
f01220aa:	83 ec 18             	sub    $0x18,%esp
	int i, c, echoing;

	if (prompt != NULL)
f01220ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01220b1:	74 13                	je     f01220c6 <readline+0x1f>
		cprintf("%s", prompt);
f01220b3:	83 ec 08             	sub    $0x8,%esp
f01220b6:	ff 75 08             	pushl  0x8(%ebp)
f01220b9:	68 c8 f9 12 f0       	push   $0xf012f9c8
f01220be:	e8 a9 ee fd ff       	call   f0100f6c <cprintf>
f01220c3:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01220c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01220cd:	83 ec 0c             	sub    $0xc,%esp
f01220d0:	6a 00                	push   $0x0
f01220d2:	e8 a2 ed fd ff       	call   f0100e79 <iscons>
f01220d7:	83 c4 10             	add    $0x10,%esp
f01220da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01220dd:	e8 7e ed fd ff       	call   f0100e60 <getchar>
f01220e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01220e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01220e9:	79 22                	jns    f012210d <readline+0x66>
			if (c != -E_EOF)
f01220eb:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01220ef:	0f 84 ad 00 00 00    	je     f01221a2 <readline+0xfb>
				cprintf("read error: %e\n", c);
f01220f5:	83 ec 08             	sub    $0x8,%esp
f01220f8:	ff 75 ec             	pushl  -0x14(%ebp)
f01220fb:	68 cb f9 12 f0       	push   $0xf012f9cb
f0122100:	e8 67 ee fd ff       	call   f0100f6c <cprintf>
f0122105:	83 c4 10             	add    $0x10,%esp
			break;
f0122108:	e9 95 00 00 00       	jmp    f01221a2 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012210d:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0122111:	7e 34                	jle    f0122147 <readline+0xa0>
f0122113:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012211a:	7f 2b                	jg     f0122147 <readline+0xa0>
			if (echoing)
f012211c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122120:	74 0e                	je     f0122130 <readline+0x89>
				cputchar(c);
f0122122:	83 ec 0c             	sub    $0xc,%esp
f0122125:	ff 75 ec             	pushl  -0x14(%ebp)
f0122128:	e8 1c ed fd ff       	call   f0100e49 <cputchar>
f012212d:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0122130:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122133:	8d 50 01             	lea    0x1(%eax),%edx
f0122136:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0122139:	89 c2                	mov    %eax,%edx
f012213b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012213e:	01 d0                	add    %edx,%eax
f0122140:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122143:	88 10                	mov    %dl,(%eax)
f0122145:	eb 56                	jmp    f012219d <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0122147:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012214b:	75 1f                	jne    f012216c <readline+0xc5>
f012214d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122151:	7e 19                	jle    f012216c <readline+0xc5>
			if (echoing)
f0122153:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122157:	74 0e                	je     f0122167 <readline+0xc0>
				cputchar(c);
f0122159:	83 ec 0c             	sub    $0xc,%esp
f012215c:	ff 75 ec             	pushl  -0x14(%ebp)
f012215f:	e8 e5 ec fd ff       	call   f0100e49 <cputchar>
f0122164:	83 c4 10             	add    $0x10,%esp

			i--;
f0122167:	ff 4d f4             	decl   -0xc(%ebp)
f012216a:	eb 31                	jmp    f012219d <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012216c:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0122170:	74 0a                	je     f012217c <readline+0xd5>
f0122172:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0122176:	0f 85 61 ff ff ff    	jne    f01220dd <readline+0x36>
			if (echoing)
f012217c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122180:	74 0e                	je     f0122190 <readline+0xe9>
				cputchar(c);
f0122182:	83 ec 0c             	sub    $0xc,%esp
f0122185:	ff 75 ec             	pushl  -0x14(%ebp)
f0122188:	e8 bc ec fd ff       	call   f0100e49 <cputchar>
f012218d:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0122190:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122193:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122196:	01 d0                	add    %edx,%eax
f0122198:	c6 00 00             	movb   $0x0,(%eax)
			break;
f012219b:	eb 06                	jmp    f01221a3 <readline+0xfc>
		}
	}
f012219d:	e9 3b ff ff ff       	jmp    f01220dd <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			break;
f01221a2:	90                   	nop

			buf[i] = 0;
			break;
		}
	}
}
f01221a3:	90                   	nop
f01221a4:	c9                   	leave  
f01221a5:	c3                   	ret    

f01221a6 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01221a6:	55                   	push   %ebp
f01221a7:	89 e5                	mov    %esp,%ebp
f01221a9:	83 ec 18             	sub    $0x18,%esp
	sys_lock_cons();
f01221ac:	e8 e0 b6 fe ff       	call   f010d891 <sys_lock_cons>
	{
		int i, c, echoing;

		if (prompt != NULL)
f01221b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01221b5:	74 13                	je     f01221ca <atomic_readline+0x24>
			cprintf("%s", prompt);
f01221b7:	83 ec 08             	sub    $0x8,%esp
f01221ba:	ff 75 08             	pushl  0x8(%ebp)
f01221bd:	68 c8 f9 12 f0       	push   $0xf012f9c8
f01221c2:	e8 a5 ed fd ff       	call   f0100f6c <cprintf>
f01221c7:	83 c4 10             	add    $0x10,%esp

		i = 0;
f01221ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		echoing = iscons(0);
f01221d1:	83 ec 0c             	sub    $0xc,%esp
f01221d4:	6a 00                	push   $0x0
f01221d6:	e8 9e ec fd ff       	call   f0100e79 <iscons>
f01221db:	83 c4 10             	add    $0x10,%esp
f01221de:	89 45 f0             	mov    %eax,-0x10(%ebp)
		while (1) {
			c = getchar();
f01221e1:	e8 7a ec fd ff       	call   f0100e60 <getchar>
f01221e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (c < 0) {
f01221e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01221ed:	79 22                	jns    f0122211 <atomic_readline+0x6b>
				if (c != -E_EOF)
f01221ef:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01221f3:	0f 84 ad 00 00 00    	je     f01222a6 <atomic_readline+0x100>
					cprintf("read error: %e\n", c);
f01221f9:	83 ec 08             	sub    $0x8,%esp
f01221fc:	ff 75 ec             	pushl  -0x14(%ebp)
f01221ff:	68 cb f9 12 f0       	push   $0xf012f9cb
f0122204:	e8 63 ed fd ff       	call   f0100f6c <cprintf>
f0122209:	83 c4 10             	add    $0x10,%esp
				break;
f012220c:	e9 95 00 00 00       	jmp    f01222a6 <atomic_readline+0x100>
			} else if (c >= ' ' && i < BUFLEN-1) {
f0122211:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0122215:	7e 34                	jle    f012224b <atomic_readline+0xa5>
f0122217:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012221e:	7f 2b                	jg     f012224b <atomic_readline+0xa5>
				if (echoing)
f0122220:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122224:	74 0e                	je     f0122234 <atomic_readline+0x8e>
					cputchar(c);
f0122226:	83 ec 0c             	sub    $0xc,%esp
f0122229:	ff 75 ec             	pushl  -0x14(%ebp)
f012222c:	e8 18 ec fd ff       	call   f0100e49 <cputchar>
f0122231:	83 c4 10             	add    $0x10,%esp
				buf[i++] = c;
f0122234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122237:	8d 50 01             	lea    0x1(%eax),%edx
f012223a:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012223d:	89 c2                	mov    %eax,%edx
f012223f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122242:	01 d0                	add    %edx,%eax
f0122244:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122247:	88 10                	mov    %dl,(%eax)
f0122249:	eb 56                	jmp    f01222a1 <atomic_readline+0xfb>
			} else if (c == '\b' && i > 0) {
f012224b:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012224f:	75 1f                	jne    f0122270 <atomic_readline+0xca>
f0122251:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122255:	7e 19                	jle    f0122270 <atomic_readline+0xca>
				if (echoing)
f0122257:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012225b:	74 0e                	je     f012226b <atomic_readline+0xc5>
					cputchar(c);
f012225d:	83 ec 0c             	sub    $0xc,%esp
f0122260:	ff 75 ec             	pushl  -0x14(%ebp)
f0122263:	e8 e1 eb fd ff       	call   f0100e49 <cputchar>
f0122268:	83 c4 10             	add    $0x10,%esp
				i--;
f012226b:	ff 4d f4             	decl   -0xc(%ebp)
f012226e:	eb 31                	jmp    f01222a1 <atomic_readline+0xfb>
			} else if (c == '\n' || c == '\r') {
f0122270:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0122274:	74 0a                	je     f0122280 <atomic_readline+0xda>
f0122276:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012227a:	0f 85 61 ff ff ff    	jne    f01221e1 <atomic_readline+0x3b>
				if (echoing)
f0122280:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122284:	74 0e                	je     f0122294 <atomic_readline+0xee>
					cputchar(c);
f0122286:	83 ec 0c             	sub    $0xc,%esp
f0122289:	ff 75 ec             	pushl  -0x14(%ebp)
f012228c:	e8 b8 eb fd ff       	call   f0100e49 <cputchar>
f0122291:	83 c4 10             	add    $0x10,%esp
				buf[i] = 0;
f0122294:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122297:	8b 45 0c             	mov    0xc(%ebp),%eax
f012229a:	01 d0                	add    %edx,%eax
f012229c:	c6 00 00             	movb   $0x0,(%eax)
				break;
f012229f:	eb 06                	jmp    f01222a7 <atomic_readline+0x101>
			}
		}
f01222a1:	e9 3b ff ff ff       	jmp    f01221e1 <atomic_readline+0x3b>
		while (1) {
			c = getchar();
			if (c < 0) {
				if (c != -E_EOF)
					cprintf("read error: %e\n", c);
				break;
f01222a6:	90                   	nop
				buf[i] = 0;
				break;
			}
		}
	}
	sys_unlock_cons();
f01222a7:	e8 f3 b5 fe ff       	call   f010d89f <sys_unlock_cons>
}
f01222ac:	90                   	nop
f01222ad:	c9                   	leave  
f01222ae:	c3                   	ret    

f01222af <strlen>:
#include <inc/string.h>
#include <inc/assert.h>

int
strlen(const char *s)
{
f01222af:	55                   	push   %ebp
f01222b0:	89 e5                	mov    %esp,%ebp
f01222b2:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01222b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01222bc:	eb 06                	jmp    f01222c4 <strlen+0x15>
		n++;
f01222be:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01222c1:	ff 45 08             	incl   0x8(%ebp)
f01222c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01222c7:	8a 00                	mov    (%eax),%al
f01222c9:	84 c0                	test   %al,%al
f01222cb:	75 f1                	jne    f01222be <strlen+0xf>
		n++;
	return n;
f01222cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01222d0:	c9                   	leave  
f01222d1:	c3                   	ret    

f01222d2 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01222d2:	55                   	push   %ebp
f01222d3:	89 e5                	mov    %esp,%ebp
f01222d5:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01222d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01222df:	eb 09                	jmp    f01222ea <strnlen+0x18>
		n++;
f01222e1:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01222e4:	ff 45 08             	incl   0x8(%ebp)
f01222e7:	ff 4d 0c             	decl   0xc(%ebp)
f01222ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01222ee:	74 09                	je     f01222f9 <strnlen+0x27>
f01222f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01222f3:	8a 00                	mov    (%eax),%al
f01222f5:	84 c0                	test   %al,%al
f01222f7:	75 e8                	jne    f01222e1 <strnlen+0xf>
		n++;
	return n;
f01222f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01222fc:	c9                   	leave  
f01222fd:	c3                   	ret    

f01222fe <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01222fe:	55                   	push   %ebp
f01222ff:	89 e5                	mov    %esp,%ebp
f0122301:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0122304:	8b 45 08             	mov    0x8(%ebp),%eax
f0122307:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012230a:	90                   	nop
f012230b:	8b 45 08             	mov    0x8(%ebp),%eax
f012230e:	8d 50 01             	lea    0x1(%eax),%edx
f0122311:	89 55 08             	mov    %edx,0x8(%ebp)
f0122314:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122317:	8d 4a 01             	lea    0x1(%edx),%ecx
f012231a:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012231d:	8a 12                	mov    (%edx),%dl
f012231f:	88 10                	mov    %dl,(%eax)
f0122321:	8a 00                	mov    (%eax),%al
f0122323:	84 c0                	test   %al,%al
f0122325:	75 e4                	jne    f012230b <strcpy+0xd>
		/* do nothing */;
	return ret;
f0122327:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012232a:	c9                   	leave  
f012232b:	c3                   	ret    

f012232c <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012232c:	55                   	push   %ebp
f012232d:	89 e5                	mov    %esp,%ebp
f012232f:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0122332:	8b 45 08             	mov    0x8(%ebp),%eax
f0122335:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0122338:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012233f:	eb 1f                	jmp    f0122360 <strncpy+0x34>
		*dst++ = *src;
f0122341:	8b 45 08             	mov    0x8(%ebp),%eax
f0122344:	8d 50 01             	lea    0x1(%eax),%edx
f0122347:	89 55 08             	mov    %edx,0x8(%ebp)
f012234a:	8b 55 0c             	mov    0xc(%ebp),%edx
f012234d:	8a 12                	mov    (%edx),%dl
f012234f:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0122351:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122354:	8a 00                	mov    (%eax),%al
f0122356:	84 c0                	test   %al,%al
f0122358:	74 03                	je     f012235d <strncpy+0x31>
			src++;
f012235a:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012235d:	ff 45 fc             	incl   -0x4(%ebp)
f0122360:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122363:	3b 45 10             	cmp    0x10(%ebp),%eax
f0122366:	72 d9                	jb     f0122341 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0122368:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012236b:	c9                   	leave  
f012236c:	c3                   	ret    

f012236d <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012236d:	55                   	push   %ebp
f012236e:	89 e5                	mov    %esp,%ebp
f0122370:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0122373:	8b 45 08             	mov    0x8(%ebp),%eax
f0122376:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0122379:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012237d:	74 30                	je     f01223af <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012237f:	eb 16                	jmp    f0122397 <strlcpy+0x2a>
			*dst++ = *src++;
f0122381:	8b 45 08             	mov    0x8(%ebp),%eax
f0122384:	8d 50 01             	lea    0x1(%eax),%edx
f0122387:	89 55 08             	mov    %edx,0x8(%ebp)
f012238a:	8b 55 0c             	mov    0xc(%ebp),%edx
f012238d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0122390:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0122393:	8a 12                	mov    (%edx),%dl
f0122395:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0122397:	ff 4d 10             	decl   0x10(%ebp)
f012239a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012239e:	74 09                	je     f01223a9 <strlcpy+0x3c>
f01223a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01223a3:	8a 00                	mov    (%eax),%al
f01223a5:	84 c0                	test   %al,%al
f01223a7:	75 d8                	jne    f0122381 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f01223a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01223ac:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01223af:	8b 55 08             	mov    0x8(%ebp),%edx
f01223b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01223b5:	29 c2                	sub    %eax,%edx
f01223b7:	89 d0                	mov    %edx,%eax
}
f01223b9:	c9                   	leave  
f01223ba:	c3                   	ret    

f01223bb <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01223bb:	55                   	push   %ebp
f01223bc:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01223be:	eb 06                	jmp    f01223c6 <strcmp+0xb>
		p++, q++;
f01223c0:	ff 45 08             	incl   0x8(%ebp)
f01223c3:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01223c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01223c9:	8a 00                	mov    (%eax),%al
f01223cb:	84 c0                	test   %al,%al
f01223cd:	74 0e                	je     f01223dd <strcmp+0x22>
f01223cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01223d2:	8a 10                	mov    (%eax),%dl
f01223d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01223d7:	8a 00                	mov    (%eax),%al
f01223d9:	38 c2                	cmp    %al,%dl
f01223db:	74 e3                	je     f01223c0 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01223dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01223e0:	8a 00                	mov    (%eax),%al
f01223e2:	0f b6 d0             	movzbl %al,%edx
f01223e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01223e8:	8a 00                	mov    (%eax),%al
f01223ea:	0f b6 c0             	movzbl %al,%eax
f01223ed:	29 c2                	sub    %eax,%edx
f01223ef:	89 d0                	mov    %edx,%eax
}
f01223f1:	5d                   	pop    %ebp
f01223f2:	c3                   	ret    

f01223f3 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01223f3:	55                   	push   %ebp
f01223f4:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01223f6:	eb 09                	jmp    f0122401 <strncmp+0xe>
		n--, p++, q++;
f01223f8:	ff 4d 10             	decl   0x10(%ebp)
f01223fb:	ff 45 08             	incl   0x8(%ebp)
f01223fe:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0122401:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122405:	74 17                	je     f012241e <strncmp+0x2b>
f0122407:	8b 45 08             	mov    0x8(%ebp),%eax
f012240a:	8a 00                	mov    (%eax),%al
f012240c:	84 c0                	test   %al,%al
f012240e:	74 0e                	je     f012241e <strncmp+0x2b>
f0122410:	8b 45 08             	mov    0x8(%ebp),%eax
f0122413:	8a 10                	mov    (%eax),%dl
f0122415:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122418:	8a 00                	mov    (%eax),%al
f012241a:	38 c2                	cmp    %al,%dl
f012241c:	74 da                	je     f01223f8 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012241e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122422:	75 07                	jne    f012242b <strncmp+0x38>
		return 0;
f0122424:	b8 00 00 00 00       	mov    $0x0,%eax
f0122429:	eb 14                	jmp    f012243f <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012242b:	8b 45 08             	mov    0x8(%ebp),%eax
f012242e:	8a 00                	mov    (%eax),%al
f0122430:	0f b6 d0             	movzbl %al,%edx
f0122433:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122436:	8a 00                	mov    (%eax),%al
f0122438:	0f b6 c0             	movzbl %al,%eax
f012243b:	29 c2                	sub    %eax,%edx
f012243d:	89 d0                	mov    %edx,%eax
}
f012243f:	5d                   	pop    %ebp
f0122440:	c3                   	ret    

f0122441 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0122441:	55                   	push   %ebp
f0122442:	89 e5                	mov    %esp,%ebp
f0122444:	83 ec 04             	sub    $0x4,%esp
f0122447:	8b 45 0c             	mov    0xc(%ebp),%eax
f012244a:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012244d:	eb 12                	jmp    f0122461 <strchr+0x20>
		if (*s == c)
f012244f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122452:	8a 00                	mov    (%eax),%al
f0122454:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0122457:	75 05                	jne    f012245e <strchr+0x1d>
			return (char *) s;
f0122459:	8b 45 08             	mov    0x8(%ebp),%eax
f012245c:	eb 11                	jmp    f012246f <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012245e:	ff 45 08             	incl   0x8(%ebp)
f0122461:	8b 45 08             	mov    0x8(%ebp),%eax
f0122464:	8a 00                	mov    (%eax),%al
f0122466:	84 c0                	test   %al,%al
f0122468:	75 e5                	jne    f012244f <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012246a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012246f:	c9                   	leave  
f0122470:	c3                   	ret    

f0122471 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0122471:	55                   	push   %ebp
f0122472:	89 e5                	mov    %esp,%ebp
f0122474:	83 ec 04             	sub    $0x4,%esp
f0122477:	8b 45 0c             	mov    0xc(%ebp),%eax
f012247a:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012247d:	eb 0d                	jmp    f012248c <strfind+0x1b>
		if (*s == c)
f012247f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122482:	8a 00                	mov    (%eax),%al
f0122484:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0122487:	74 0e                	je     f0122497 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0122489:	ff 45 08             	incl   0x8(%ebp)
f012248c:	8b 45 08             	mov    0x8(%ebp),%eax
f012248f:	8a 00                	mov    (%eax),%al
f0122491:	84 c0                	test   %al,%al
f0122493:	75 ea                	jne    f012247f <strfind+0xe>
f0122495:	eb 01                	jmp    f0122498 <strfind+0x27>
		if (*s == c)
			break;
f0122497:	90                   	nop
	return (char *) s;
f0122498:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012249b:	c9                   	leave  
f012249c:	c3                   	ret    

f012249d <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012249d:	55                   	push   %ebp
f012249e:	89 e5                	mov    %esp,%ebp
f01224a0:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01224a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01224a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01224a9:	8b 45 10             	mov    0x10(%ebp),%eax
f01224ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01224af:	eb 0e                	jmp    f01224bf <memset+0x22>
		*p++ = c;
f01224b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01224b4:	8d 50 01             	lea    0x1(%eax),%edx
f01224b7:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01224ba:	8b 55 0c             	mov    0xc(%ebp),%edx
f01224bd:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01224bf:	ff 4d f8             	decl   -0x8(%ebp)
f01224c2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01224c6:	79 e9                	jns    f01224b1 <memset+0x14>
		*p++ = c;

	return v;
f01224c8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01224cb:	c9                   	leave  
f01224cc:	c3                   	ret    

f01224cd <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01224cd:	55                   	push   %ebp
f01224ce:	89 e5                	mov    %esp,%ebp
f01224d0:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01224d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01224d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01224d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01224dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01224df:	eb 16                	jmp    f01224f7 <memcpy+0x2a>
		*d++ = *s++;
f01224e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01224e4:	8d 50 01             	lea    0x1(%eax),%edx
f01224e7:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01224ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01224ed:	8d 4a 01             	lea    0x1(%edx),%ecx
f01224f0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01224f3:	8a 12                	mov    (%edx),%dl
f01224f5:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01224f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01224fa:	8d 50 ff             	lea    -0x1(%eax),%edx
f01224fd:	89 55 10             	mov    %edx,0x10(%ebp)
f0122500:	85 c0                	test   %eax,%eax
f0122502:	75 dd                	jne    f01224e1 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0122504:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122507:	c9                   	leave  
f0122508:	c3                   	ret    

f0122509 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0122509:	55                   	push   %ebp
f012250a:	89 e5                	mov    %esp,%ebp
f012250c:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012250f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122512:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0122515:	8b 45 08             	mov    0x8(%ebp),%eax
f0122518:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012251b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012251e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0122521:	73 50                	jae    f0122573 <memmove+0x6a>
f0122523:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122526:	8b 45 10             	mov    0x10(%ebp),%eax
f0122529:	01 d0                	add    %edx,%eax
f012252b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012252e:	76 43                	jbe    f0122573 <memmove+0x6a>
		s += n;
f0122530:	8b 45 10             	mov    0x10(%ebp),%eax
f0122533:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0122536:	8b 45 10             	mov    0x10(%ebp),%eax
f0122539:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012253c:	eb 10                	jmp    f012254e <memmove+0x45>
			*--d = *--s;
f012253e:	ff 4d f8             	decl   -0x8(%ebp)
f0122541:	ff 4d fc             	decl   -0x4(%ebp)
f0122544:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122547:	8a 10                	mov    (%eax),%dl
f0122549:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012254c:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012254e:	8b 45 10             	mov    0x10(%ebp),%eax
f0122551:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122554:	89 55 10             	mov    %edx,0x10(%ebp)
f0122557:	85 c0                	test   %eax,%eax
f0122559:	75 e3                	jne    f012253e <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012255b:	eb 23                	jmp    f0122580 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012255d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122560:	8d 50 01             	lea    0x1(%eax),%edx
f0122563:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0122566:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122569:	8d 4a 01             	lea    0x1(%edx),%ecx
f012256c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012256f:	8a 12                	mov    (%edx),%dl
f0122571:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0122573:	8b 45 10             	mov    0x10(%ebp),%eax
f0122576:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122579:	89 55 10             	mov    %edx,0x10(%ebp)
f012257c:	85 c0                	test   %eax,%eax
f012257e:	75 dd                	jne    f012255d <memmove+0x54>
			*d++ = *s++;

	return dst;
f0122580:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122583:	c9                   	leave  
f0122584:	c3                   	ret    

f0122585 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0122585:	55                   	push   %ebp
f0122586:	89 e5                	mov    %esp,%ebp
f0122588:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012258b:	8b 45 08             	mov    0x8(%ebp),%eax
f012258e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0122591:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122594:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0122597:	eb 2a                	jmp    f01225c3 <memcmp+0x3e>
		if (*s1 != *s2)
f0122599:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012259c:	8a 10                	mov    (%eax),%dl
f012259e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01225a1:	8a 00                	mov    (%eax),%al
f01225a3:	38 c2                	cmp    %al,%dl
f01225a5:	74 16                	je     f01225bd <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f01225a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01225aa:	8a 00                	mov    (%eax),%al
f01225ac:	0f b6 d0             	movzbl %al,%edx
f01225af:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01225b2:	8a 00                	mov    (%eax),%al
f01225b4:	0f b6 c0             	movzbl %al,%eax
f01225b7:	29 c2                	sub    %eax,%edx
f01225b9:	89 d0                	mov    %edx,%eax
f01225bb:	eb 18                	jmp    f01225d5 <memcmp+0x50>
		s1++, s2++;
f01225bd:	ff 45 fc             	incl   -0x4(%ebp)
f01225c0:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01225c3:	8b 45 10             	mov    0x10(%ebp),%eax
f01225c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01225c9:	89 55 10             	mov    %edx,0x10(%ebp)
f01225cc:	85 c0                	test   %eax,%eax
f01225ce:	75 c9                	jne    f0122599 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01225d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01225d5:	c9                   	leave  
f01225d6:	c3                   	ret    

f01225d7 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01225d7:	55                   	push   %ebp
f01225d8:	89 e5                	mov    %esp,%ebp
f01225da:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01225dd:	8b 55 08             	mov    0x8(%ebp),%edx
f01225e0:	8b 45 10             	mov    0x10(%ebp),%eax
f01225e3:	01 d0                	add    %edx,%eax
f01225e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01225e8:	eb 15                	jmp    f01225ff <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01225ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01225ed:	8a 00                	mov    (%eax),%al
f01225ef:	0f b6 d0             	movzbl %al,%edx
f01225f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01225f5:	0f b6 c0             	movzbl %al,%eax
f01225f8:	39 c2                	cmp    %eax,%edx
f01225fa:	74 0d                	je     f0122609 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01225fc:	ff 45 08             	incl   0x8(%ebp)
f01225ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0122602:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0122605:	72 e3                	jb     f01225ea <memfind+0x13>
f0122607:	eb 01                	jmp    f012260a <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0122609:	90                   	nop
	return (void *) s;
f012260a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012260d:	c9                   	leave  
f012260e:	c3                   	ret    

f012260f <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012260f:	55                   	push   %ebp
f0122610:	89 e5                	mov    %esp,%ebp
f0122612:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0122615:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012261c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0122623:	eb 03                	jmp    f0122628 <strtol+0x19>
		s++;
f0122625:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0122628:	8b 45 08             	mov    0x8(%ebp),%eax
f012262b:	8a 00                	mov    (%eax),%al
f012262d:	3c 20                	cmp    $0x20,%al
f012262f:	74 f4                	je     f0122625 <strtol+0x16>
f0122631:	8b 45 08             	mov    0x8(%ebp),%eax
f0122634:	8a 00                	mov    (%eax),%al
f0122636:	3c 09                	cmp    $0x9,%al
f0122638:	74 eb                	je     f0122625 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012263a:	8b 45 08             	mov    0x8(%ebp),%eax
f012263d:	8a 00                	mov    (%eax),%al
f012263f:	3c 2b                	cmp    $0x2b,%al
f0122641:	75 05                	jne    f0122648 <strtol+0x39>
		s++;
f0122643:	ff 45 08             	incl   0x8(%ebp)
f0122646:	eb 13                	jmp    f012265b <strtol+0x4c>
	else if (*s == '-')
f0122648:	8b 45 08             	mov    0x8(%ebp),%eax
f012264b:	8a 00                	mov    (%eax),%al
f012264d:	3c 2d                	cmp    $0x2d,%al
f012264f:	75 0a                	jne    f012265b <strtol+0x4c>
		s++, neg = 1;
f0122651:	ff 45 08             	incl   0x8(%ebp)
f0122654:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012265b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012265f:	74 06                	je     f0122667 <strtol+0x58>
f0122661:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0122665:	75 20                	jne    f0122687 <strtol+0x78>
f0122667:	8b 45 08             	mov    0x8(%ebp),%eax
f012266a:	8a 00                	mov    (%eax),%al
f012266c:	3c 30                	cmp    $0x30,%al
f012266e:	75 17                	jne    f0122687 <strtol+0x78>
f0122670:	8b 45 08             	mov    0x8(%ebp),%eax
f0122673:	40                   	inc    %eax
f0122674:	8a 00                	mov    (%eax),%al
f0122676:	3c 78                	cmp    $0x78,%al
f0122678:	75 0d                	jne    f0122687 <strtol+0x78>
		s += 2, base = 16;
f012267a:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012267e:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0122685:	eb 28                	jmp    f01226af <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0122687:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012268b:	75 15                	jne    f01226a2 <strtol+0x93>
f012268d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122690:	8a 00                	mov    (%eax),%al
f0122692:	3c 30                	cmp    $0x30,%al
f0122694:	75 0c                	jne    f01226a2 <strtol+0x93>
		s++, base = 8;
f0122696:	ff 45 08             	incl   0x8(%ebp)
f0122699:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f01226a0:	eb 0d                	jmp    f01226af <strtol+0xa0>
	else if (base == 0)
f01226a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01226a6:	75 07                	jne    f01226af <strtol+0xa0>
		base = 10;
f01226a8:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f01226af:	8b 45 08             	mov    0x8(%ebp),%eax
f01226b2:	8a 00                	mov    (%eax),%al
f01226b4:	3c 2f                	cmp    $0x2f,%al
f01226b6:	7e 19                	jle    f01226d1 <strtol+0xc2>
f01226b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01226bb:	8a 00                	mov    (%eax),%al
f01226bd:	3c 39                	cmp    $0x39,%al
f01226bf:	7f 10                	jg     f01226d1 <strtol+0xc2>
			dig = *s - '0';
f01226c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01226c4:	8a 00                	mov    (%eax),%al
f01226c6:	0f be c0             	movsbl %al,%eax
f01226c9:	83 e8 30             	sub    $0x30,%eax
f01226cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01226cf:	eb 42                	jmp    f0122713 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01226d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01226d4:	8a 00                	mov    (%eax),%al
f01226d6:	3c 60                	cmp    $0x60,%al
f01226d8:	7e 19                	jle    f01226f3 <strtol+0xe4>
f01226da:	8b 45 08             	mov    0x8(%ebp),%eax
f01226dd:	8a 00                	mov    (%eax),%al
f01226df:	3c 7a                	cmp    $0x7a,%al
f01226e1:	7f 10                	jg     f01226f3 <strtol+0xe4>
			dig = *s - 'a' + 10;
f01226e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01226e6:	8a 00                	mov    (%eax),%al
f01226e8:	0f be c0             	movsbl %al,%eax
f01226eb:	83 e8 57             	sub    $0x57,%eax
f01226ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01226f1:	eb 20                	jmp    f0122713 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01226f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01226f6:	8a 00                	mov    (%eax),%al
f01226f8:	3c 40                	cmp    $0x40,%al
f01226fa:	7e 39                	jle    f0122735 <strtol+0x126>
f01226fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01226ff:	8a 00                	mov    (%eax),%al
f0122701:	3c 5a                	cmp    $0x5a,%al
f0122703:	7f 30                	jg     f0122735 <strtol+0x126>
			dig = *s - 'A' + 10;
f0122705:	8b 45 08             	mov    0x8(%ebp),%eax
f0122708:	8a 00                	mov    (%eax),%al
f012270a:	0f be c0             	movsbl %al,%eax
f012270d:	83 e8 37             	sub    $0x37,%eax
f0122710:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0122713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122716:	3b 45 10             	cmp    0x10(%ebp),%eax
f0122719:	7d 19                	jge    f0122734 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012271b:	ff 45 08             	incl   0x8(%ebp)
f012271e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122721:	0f af 45 10          	imul   0x10(%ebp),%eax
f0122725:	89 c2                	mov    %eax,%edx
f0122727:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012272a:	01 d0                	add    %edx,%eax
f012272c:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012272f:	e9 7b ff ff ff       	jmp    f01226af <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0122734:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0122735:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122739:	74 08                	je     f0122743 <strtol+0x134>
		*endptr = (char *) s;
f012273b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012273e:	8b 55 08             	mov    0x8(%ebp),%edx
f0122741:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0122743:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0122747:	74 07                	je     f0122750 <strtol+0x141>
f0122749:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012274c:	f7 d8                	neg    %eax
f012274e:	eb 03                	jmp    f0122753 <strtol+0x144>
f0122750:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0122753:	c9                   	leave  
f0122754:	c3                   	ret    

f0122755 <ltostr>:

void
ltostr(long value, char *str)
{
f0122755:	55                   	push   %ebp
f0122756:	89 e5                	mov    %esp,%ebp
f0122758:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012275b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0122762:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0122769:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012276d:	79 13                	jns    f0122782 <ltostr+0x2d>
	{
		neg = 1;
f012276f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0122776:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122779:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012277c:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012277f:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0122782:	8b 45 08             	mov    0x8(%ebp),%eax
f0122785:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012278a:	99                   	cltd   
f012278b:	f7 f9                	idiv   %ecx
f012278d:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0122790:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122793:	8d 50 01             	lea    0x1(%eax),%edx
f0122796:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0122799:	89 c2                	mov    %eax,%edx
f012279b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012279e:	01 d0                	add    %edx,%eax
f01227a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01227a3:	83 c2 30             	add    $0x30,%edx
f01227a6:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f01227a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01227ab:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01227b0:	f7 e9                	imul   %ecx
f01227b2:	c1 fa 02             	sar    $0x2,%edx
f01227b5:	89 c8                	mov    %ecx,%eax
f01227b7:	c1 f8 1f             	sar    $0x1f,%eax
f01227ba:	29 c2                	sub    %eax,%edx
f01227bc:	89 d0                	mov    %edx,%eax
f01227be:	89 45 08             	mov    %eax,0x8(%ebp)
	/*2023 FIX el7 :)*/
	//} while (value % 10 != 0);
	} while (value != 0);
f01227c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01227c5:	75 bb                	jne    f0122782 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f01227c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01227ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01227d1:	48                   	dec    %eax
f01227d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01227d5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01227d9:	74 3d                	je     f0122818 <ltostr+0xc3>
		start = 1 ;
f01227db:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01227e2:	eb 34                	jmp    f0122818 <ltostr+0xc3>
	{
		char tmp = str[start] ;
f01227e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01227e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01227ea:	01 d0                	add    %edx,%eax
f01227ec:	8a 00                	mov    (%eax),%al
f01227ee:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01227f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01227f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01227f7:	01 c2                	add    %eax,%edx
f01227f9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01227fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01227ff:	01 c8                	add    %ecx,%eax
f0122801:	8a 00                	mov    (%eax),%al
f0122803:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0122805:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122808:	8b 45 0c             	mov    0xc(%ebp),%eax
f012280b:	01 c2                	add    %eax,%edx
f012280d:	8a 45 eb             	mov    -0x15(%ebp),%al
f0122810:	88 02                	mov    %al,(%edx)
		start++ ;
f0122812:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0122815:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0122818:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012281b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012281e:	7c c4                	jl     f01227e4 <ltostr+0x8f>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0122820:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0122823:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122826:	01 d0                	add    %edx,%eax
f0122828:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012282b:	90                   	nop
f012282c:	c9                   	leave  
f012282d:	c3                   	ret    

f012282e <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012282e:	55                   	push   %ebp
f012282f:	89 e5                	mov    %esp,%ebp
f0122831:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0122834:	ff 75 08             	pushl  0x8(%ebp)
f0122837:	e8 73 fa ff ff       	call   f01222af <strlen>
f012283c:	83 c4 04             	add    $0x4,%esp
f012283f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0122842:	ff 75 0c             	pushl  0xc(%ebp)
f0122845:	e8 65 fa ff ff       	call   f01222af <strlen>
f012284a:	83 c4 04             	add    $0x4,%esp
f012284d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0122850:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0122857:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012285e:	eb 17                	jmp    f0122877 <strcconcat+0x49>
		final[s] = str1[s] ;
f0122860:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122863:	8b 45 10             	mov    0x10(%ebp),%eax
f0122866:	01 c2                	add    %eax,%edx
f0122868:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012286b:	8b 45 08             	mov    0x8(%ebp),%eax
f012286e:	01 c8                	add    %ecx,%eax
f0122870:	8a 00                	mov    (%eax),%al
f0122872:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0122874:	ff 45 fc             	incl   -0x4(%ebp)
f0122877:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012287a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012287d:	7c e1                	jl     f0122860 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012287f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0122886:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012288d:	eb 1f                	jmp    f01228ae <strcconcat+0x80>
		final[s++] = str2[i] ;
f012288f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122892:	8d 50 01             	lea    0x1(%eax),%edx
f0122895:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0122898:	89 c2                	mov    %eax,%edx
f012289a:	8b 45 10             	mov    0x10(%ebp),%eax
f012289d:	01 c2                	add    %eax,%edx
f012289f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f01228a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01228a5:	01 c8                	add    %ecx,%eax
f01228a7:	8a 00                	mov    (%eax),%al
f01228a9:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01228ab:	ff 45 f8             	incl   -0x8(%ebp)
f01228ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01228b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01228b4:	7c d9                	jl     f012288f <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01228b6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01228b9:	8b 45 10             	mov    0x10(%ebp),%eax
f01228bc:	01 d0                	add    %edx,%eax
f01228be:	c6 00 00             	movb   $0x0,(%eax)
}
f01228c1:	90                   	nop
f01228c2:	c9                   	leave  
f01228c3:	c3                   	ret    

f01228c4 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f01228c4:	55                   	push   %ebp
f01228c5:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f01228c7:	8b 45 14             	mov    0x14(%ebp),%eax
f01228ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01228d0:	8b 45 14             	mov    0x14(%ebp),%eax
f01228d3:	8b 00                	mov    (%eax),%eax
f01228d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01228dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01228df:	01 d0                	add    %edx,%eax
f01228e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01228e7:	eb 0c                	jmp    f01228f5 <strsplit+0x31>
			*string++ = 0;
f01228e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01228ec:	8d 50 01             	lea    0x1(%eax),%edx
f01228ef:	89 55 08             	mov    %edx,0x8(%ebp)
f01228f2:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01228f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01228f8:	8a 00                	mov    (%eax),%al
f01228fa:	84 c0                	test   %al,%al
f01228fc:	74 18                	je     f0122916 <strsplit+0x52>
f01228fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0122901:	8a 00                	mov    (%eax),%al
f0122903:	0f be c0             	movsbl %al,%eax
f0122906:	50                   	push   %eax
f0122907:	ff 75 0c             	pushl  0xc(%ebp)
f012290a:	e8 32 fb ff ff       	call   f0122441 <strchr>
f012290f:	83 c4 08             	add    $0x8,%esp
f0122912:	85 c0                	test   %eax,%eax
f0122914:	75 d3                	jne    f01228e9 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0122916:	8b 45 08             	mov    0x8(%ebp),%eax
f0122919:	8a 00                	mov    (%eax),%al
f012291b:	84 c0                	test   %al,%al
f012291d:	74 5a                	je     f0122979 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012291f:	8b 45 14             	mov    0x14(%ebp),%eax
f0122922:	8b 00                	mov    (%eax),%eax
f0122924:	83 f8 0f             	cmp    $0xf,%eax
f0122927:	75 07                	jne    f0122930 <strsplit+0x6c>
		{
			return 0;
f0122929:	b8 00 00 00 00       	mov    $0x0,%eax
f012292e:	eb 66                	jmp    f0122996 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0122930:	8b 45 14             	mov    0x14(%ebp),%eax
f0122933:	8b 00                	mov    (%eax),%eax
f0122935:	8d 48 01             	lea    0x1(%eax),%ecx
f0122938:	8b 55 14             	mov    0x14(%ebp),%edx
f012293b:	89 0a                	mov    %ecx,(%edx)
f012293d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122944:	8b 45 10             	mov    0x10(%ebp),%eax
f0122947:	01 c2                	add    %eax,%edx
f0122949:	8b 45 08             	mov    0x8(%ebp),%eax
f012294c:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012294e:	eb 03                	jmp    f0122953 <strsplit+0x8f>
			string++;
f0122950:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0122953:	8b 45 08             	mov    0x8(%ebp),%eax
f0122956:	8a 00                	mov    (%eax),%al
f0122958:	84 c0                	test   %al,%al
f012295a:	74 8b                	je     f01228e7 <strsplit+0x23>
f012295c:	8b 45 08             	mov    0x8(%ebp),%eax
f012295f:	8a 00                	mov    (%eax),%al
f0122961:	0f be c0             	movsbl %al,%eax
f0122964:	50                   	push   %eax
f0122965:	ff 75 0c             	pushl  0xc(%ebp)
f0122968:	e8 d4 fa ff ff       	call   f0122441 <strchr>
f012296d:	83 c4 08             	add    $0x8,%esp
f0122970:	85 c0                	test   %eax,%eax
f0122972:	74 dc                	je     f0122950 <strsplit+0x8c>
			string++;
	}
f0122974:	e9 6e ff ff ff       	jmp    f01228e7 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0122979:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012297a:	8b 45 14             	mov    0x14(%ebp),%eax
f012297d:	8b 00                	mov    (%eax),%eax
f012297f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122986:	8b 45 10             	mov    0x10(%ebp),%eax
f0122989:	01 d0                	add    %edx,%eax
f012298b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0122991:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0122996:	c9                   	leave  
f0122997:	c3                   	ret    

f0122998 <str2lower>:


char* str2lower(char *dst, const char *src)
{
f0122998:	55                   	push   %ebp
f0122999:	89 e5                	mov    %esp,%ebp
f012299b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT]
	panic("str2lower is not implemented yet!");
f012299e:	83 ec 04             	sub    $0x4,%esp
f01229a1:	68 dc f9 12 f0       	push   $0xf012f9dc
f01229a6:	68 3f 01 00 00       	push   $0x13f
f01229ab:	68 fe f9 12 f0       	push   $0xf012f9fe
f01229b0:	e8 65 d9 fd ff       	call   f010031a <_panic>

f01229b5 <disk_interrupt_handler>:
#define IDE_ERR		0x01

static int diskno = 0;

void disk_interrupt_handler(struct Trapframe *tf)
{
f01229b5:	55                   	push   %ebp
f01229b6:	89 e5                	mov    %esp,%ebp
f01229b8:	83 ec 18             	sub    $0x18,%esp
f01229bb:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01229c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01229c5:	89 c2                	mov    %eax,%edx
f01229c7:	ec                   	in     (%dx),%al
f01229c8:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01229cb:	8a 45 ef             	mov    -0x11(%ebp),%al
	int r;
	//cprintf("\n>>>>>>>> DISK INTERRUPT <<<<<<<<<\n");
	if (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01229ce:	0f b6 c0             	movzbl %al,%eax
f01229d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01229d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01229d7:	25 c0 00 00 00       	and    $0xc0,%eax
f01229dc:	83 f8 40             	cmp    $0x40,%eax
f01229df:	75 10                	jne    f01229f1 <disk_interrupt_handler+0x3c>
	{
		//cprintf("NOT READY\n");
	}
	else
	{
		wakeup_one(&DISKchannel);
f01229e1:	83 ec 0c             	sub    $0xc,%esp
f01229e4:	68 00 64 55 f0       	push   $0xf0556400
f01229e9:	e8 82 c4 fe ff       	call   f010ee70 <wakeup_one>
f01229ee:	83 c4 10             	add    $0x10,%esp
	}

}
f01229f1:	90                   	nop
f01229f2:	c9                   	leave  
f01229f3:	c3                   	ret    

f01229f4 <ide_init>:

void ide_init()
{
f01229f4:	55                   	push   %ebp
f01229f5:	89 e5                	mov    %esp,%ebp
f01229f7:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(14, &disk_interrupt_handler);
f01229fa:	83 ec 08             	sub    $0x8,%esp
f01229fd:	68 b5 29 12 f0       	push   $0xf01229b5
f0122a02:	6a 0e                	push   $0xe
f0122a04:	e8 8f a9 fe ff       	call   f010d398 <irq_install_handler>
f0122a09:	83 c4 10             	add    $0x10,%esp
	//irq_install_handler(15, &disk_interrupt_handler);
	if (DISK_INT_BLK_METHOD == LCK_SLEEP)
	{
		init_channel(&DISKchannel, "DISK channel");
f0122a0c:	83 ec 08             	sub    $0x8,%esp
f0122a0f:	68 0c fa 12 f0       	push   $0xf012fa0c
f0122a14:	68 00 64 55 f0       	push   $0xf0556400
f0122a19:	e8 0b c4 fe ff       	call   f010ee29 <init_channel>
f0122a1e:	83 c4 10             	add    $0x10,%esp
		init_spinlock(&DISKlock, "DISK channel lock");
f0122a21:	83 ec 08             	sub    $0x8,%esp
f0122a24:	68 19 fa 12 f0       	push   $0xf012fa19
f0122a29:	68 40 8f 55 f0       	push   $0xf0558f40
f0122a2e:	e8 73 c0 fe ff       	call   f010eaa6 <init_spinlock>
f0122a33:	83 c4 10             	add    $0x10,%esp
	}
	else if (DISK_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&DISKsem, 0, "DISK semaphore");
	}
}
f0122a36:	90                   	nop
f0122a37:	c9                   	leave  
f0122a38:	c3                   	ret    

f0122a39 <ide_wait_ready>:
//	}
//	return 0;
//}

static int ide_wait_ready(bool check_error)
{
f0122a39:	55                   	push   %ebp
f0122a3a:	89 e5                	mov    %esp,%ebp
f0122a3c:	83 ec 18             	sub    $0x18,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0122a3f:	90                   	nop
f0122a40:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0122a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122a4a:	89 c2                	mov    %eax,%edx
f0122a4c:	ec                   	in     (%dx),%al
f0122a4d:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0122a50:	8a 45 ef             	mov    -0x11(%ebp),%al
f0122a53:	0f b6 c0             	movzbl %al,%eax
f0122a56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122a5c:	25 c0 00 00 00       	and    $0xc0,%eax
f0122a61:	83 f8 40             	cmp    $0x40,%eax
f0122a64:	75 da                	jne    f0122a40 <ide_wait_ready+0x7>
	/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0122a66:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122a6a:	74 24                	je     f0122a90 <ide_wait_ready+0x57>
f0122a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122a6f:	83 e0 21             	and    $0x21,%eax
f0122a72:	85 c0                	test   %eax,%eax
f0122a74:	74 1a                	je     f0122a90 <ide_wait_ready+0x57>
	{
		panic("ERROR @ ide_wait_ready() = %x(%d)\n",r,r);
f0122a76:	83 ec 0c             	sub    $0xc,%esp
f0122a79:	ff 75 f4             	pushl  -0xc(%ebp)
f0122a7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0122a7f:	68 2c fa 12 f0       	push   $0xf012fa2c
f0122a84:	6a 5d                	push   $0x5d
f0122a86:	68 4f fa 12 f0       	push   $0xf012fa4f
f0122a8b:	e8 8a d8 fd ff       	call   f010031a <_panic>
		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
	}
	return 0;
f0122a90:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122a95:	c9                   	leave  
f0122a96:	c3                   	ret    

f0122a97 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0122a97:	55                   	push   %ebp
f0122a98:	89 e5                	mov    %esp,%ebp
f0122a9a:	57                   	push   %edi
f0122a9b:	53                   	push   %ebx
f0122a9c:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0122a9f:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122aa6:	76 16                	jbe    f0122abe <ide_read+0x27>
f0122aa8:	68 5a fa 12 f0       	push   $0xf012fa5a
f0122aad:	68 67 fa 12 f0       	push   $0xf012fa67
f0122ab2:	6a 68                	push   $0x68
f0122ab4:	68 4f fa 12 f0       	push   $0xf012fa4f
f0122ab9:	e8 5c d8 fd ff       	call   f010031a <_panic>

	//FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f0122abe:	83 ec 0c             	sub    $0xc,%esp
f0122ac1:	6a 00                	push   $0x0
f0122ac3:	e8 71 ff ff ff       	call   f0122a39 <ide_wait_ready>
f0122ac8:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0122acb:	8b 45 10             	mov    0x10(%ebp),%eax
f0122ace:	0f b6 c0             	movzbl %al,%eax
f0122ad1:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122ad8:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122adb:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122ade:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122ae1:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0122ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ae5:	0f b6 c0             	movzbl %al,%eax
f0122ae8:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0122aef:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0122af2:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122af5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122af8:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0122afc:	c1 e8 08             	shr    $0x8,%eax
f0122aff:	0f b6 c0             	movzbl %al,%eax
f0122b02:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122b09:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122b0c:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0122b0f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122b12:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0122b13:	8b 45 08             	mov    0x8(%ebp),%eax
f0122b16:	c1 e8 10             	shr    $0x10,%eax
f0122b19:	0f b6 c0             	movzbl %al,%eax
f0122b1c:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0122b23:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122b26:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122b29:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122b2c:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122b2d:	a1 b0 62 55 f0       	mov    0xf05562b0,%eax
f0122b32:	83 e0 01             	and    $0x1,%eax
f0122b35:	c1 e0 04             	shl    $0x4,%eax
f0122b38:	88 c2                	mov    %al,%dl
f0122b3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0122b3d:	c1 e8 18             	shr    $0x18,%eax
f0122b40:	83 e0 0f             	and    $0xf,%eax
f0122b43:	09 d0                	or     %edx,%eax
f0122b45:	83 c8 e0             	or     $0xffffffe0,%eax
f0122b48:	0f b6 c0             	movzbl %al,%eax
f0122b4b:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0122b52:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122b55:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122b58:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122b5b:	ee                   	out    %al,(%dx)
f0122b5c:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0122b63:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0122b67:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122b6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122b6d:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122b6e:	eb 55                	jmp    f0122bc5 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0122b70:	83 ec 0c             	sub    $0xc,%esp
f0122b73:	6a 01                	push   $0x1
f0122b75:	e8 bf fe ff ff       	call   f0122a39 <ide_wait_ready>
f0122b7a:	83 c4 10             	add    $0x10,%esp
f0122b7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0122b80:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122b84:	79 05                	jns    f0122b8b <ide_read+0xf4>
			return r;
f0122b86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122b89:	eb 45                	jmp    f0122bd0 <ide_read+0x139>
f0122b8b:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0122b92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122b95:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0122b98:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0122b9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122ba2:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122ba5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122ba8:	89 cb                	mov    %ecx,%ebx
f0122baa:	89 df                	mov    %ebx,%edi
f0122bac:	89 c1                	mov    %eax,%ecx
f0122bae:	fc                   	cld    
f0122baf:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0122bb1:	89 c8                	mov    %ecx,%eax
f0122bb3:	89 fb                	mov    %edi,%ebx
f0122bb5:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122bb8:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122bbb:	ff 4d 10             	decl   0x10(%ebp)
f0122bbe:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122bc5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122bc9:	75 a5                	jne    f0122b70 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0122bcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122bd0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122bd3:	5b                   	pop    %ebx
f0122bd4:	5f                   	pop    %edi
f0122bd5:	5d                   	pop    %ebp
f0122bd6:	c3                   	ret    

f0122bd7 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0122bd7:	55                   	push   %ebp
f0122bd8:	89 e5                	mov    %esp,%ebp
f0122bda:	56                   	push   %esi
f0122bdb:	53                   	push   %ebx
f0122bdc:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0122bdf:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122be6:	76 19                	jbe    f0122c01 <ide_write+0x2a>
f0122be8:	68 5a fa 12 f0       	push   $0xf012fa5a
f0122bed:	68 67 fa 12 f0       	push   $0xf012fa67
f0122bf2:	68 82 00 00 00       	push   $0x82
f0122bf7:	68 4f fa 12 f0       	push   $0xf012fa4f
f0122bfc:	e8 19 d7 fd ff       	call   f010031a <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0122c01:	83 ec 0c             	sub    $0xc,%esp
f0122c04:	6a 00                	push   $0x0
f0122c06:	e8 2e fe ff ff       	call   f0122a39 <ide_wait_ready>
f0122c0b:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0122c0e:	8b 45 10             	mov    0x10(%ebp),%eax
f0122c11:	0f b6 c0             	movzbl %al,%eax
f0122c14:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122c1b:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122c1e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122c21:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122c24:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0122c25:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c28:	0f b6 c0             	movzbl %al,%eax
f0122c2b:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0122c32:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0122c35:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122c38:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122c3b:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122c3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c3f:	c1 e8 08             	shr    $0x8,%eax
f0122c42:	0f b6 c0             	movzbl %al,%eax
f0122c45:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122c4c:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122c4f:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0122c52:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122c55:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0122c56:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c59:	c1 e8 10             	shr    $0x10,%eax
f0122c5c:	0f b6 c0             	movzbl %al,%eax
f0122c5f:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0122c66:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122c69:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122c6c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122c6f:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122c70:	a1 b0 62 55 f0       	mov    0xf05562b0,%eax
f0122c75:	83 e0 01             	and    $0x1,%eax
f0122c78:	c1 e0 04             	shl    $0x4,%eax
f0122c7b:	88 c2                	mov    %al,%dl
f0122c7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c80:	c1 e8 18             	shr    $0x18,%eax
f0122c83:	83 e0 0f             	and    $0xf,%eax
f0122c86:	09 d0                	or     %edx,%eax
f0122c88:	83 c8 e0             	or     $0xffffffe0,%eax
f0122c8b:	0f b6 c0             	movzbl %al,%eax
f0122c8e:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0122c95:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122c98:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122c9b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122c9e:	ee                   	out    %al,(%dx)
f0122c9f:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0122ca6:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0122caa:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122cad:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122cb0:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122cb1:	eb 55                	jmp    f0122d08 <ide_write+0x131>
		if ((r = ide_wait_ready(1)) < 0)
f0122cb3:	83 ec 0c             	sub    $0xc,%esp
f0122cb6:	6a 01                	push   $0x1
f0122cb8:	e8 7c fd ff ff       	call   f0122a39 <ide_wait_ready>
f0122cbd:	83 c4 10             	add    $0x10,%esp
f0122cc0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0122cc3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122cc7:	79 05                	jns    f0122cce <ide_write+0xf7>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0122cc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122ccc:	eb 45                	jmp    f0122d13 <ide_write+0x13c>
f0122cce:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0122cd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122cd8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0122cdb:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0122ce2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122ce5:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122ce8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122ceb:	89 cb                	mov    %ecx,%ebx
f0122ced:	89 de                	mov    %ebx,%esi
f0122cef:	89 c1                	mov    %eax,%ecx
f0122cf1:	fc                   	cld    
f0122cf2:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0122cf4:	89 c8                	mov    %ecx,%eax
f0122cf6:	89 f3                	mov    %esi,%ebx
f0122cf8:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122cfb:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122cfe:	ff 4d 10             	decl   0x10(%ebp)
f0122d01:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122d08:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122d0c:	75 a5                	jne    f0122cb3 <ide_write+0xdc>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0122d0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122d13:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122d16:	5b                   	pop    %ebx
f0122d17:	5e                   	pop    %esi
f0122d18:	5d                   	pop    %ebp
f0122d19:	c3                   	ret    

f0122d1a <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
__inline__ uint32 get_block_size(void* va)
{
f0122d1a:	55                   	push   %ebp
f0122d1b:	89 e5                	mov    %esp,%ebp
f0122d1d:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0122d20:	8b 45 08             	mov    0x8(%ebp),%eax
f0122d23:	83 e8 04             	sub    $0x4,%eax
f0122d26:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (*curBlkMetaData) & ~(0x1);
f0122d29:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122d2c:	8b 00                	mov    (%eax),%eax
f0122d2e:	83 e0 fe             	and    $0xfffffffe,%eax
}
f0122d31:	c9                   	leave  
f0122d32:	c3                   	ret    

f0122d33 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
__inline__ int8 is_free_block(void* va)
{
f0122d33:	55                   	push   %ebp
f0122d34:	89 e5                	mov    %esp,%ebp
f0122d36:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0122d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0122d3c:	83 e8 04             	sub    $0x4,%eax
f0122d3f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (~(*curBlkMetaData) & 0x1) ;
f0122d42:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122d45:	8b 00                	mov    (%eax),%eax
f0122d47:	83 e0 01             	and    $0x1,%eax
f0122d4a:	85 c0                	test   %eax,%eax
f0122d4c:	0f 94 c0             	sete   %al
}
f0122d4f:	c9                   	leave  
f0122d50:	c3                   	ret    

f0122d51 <alloc_block>:
//===========================
// 3) ALLOCATE BLOCK:
//===========================

void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f0122d51:	55                   	push   %ebp
f0122d52:	89 e5                	mov    %esp,%ebp
f0122d54:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f0122d57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f0122d5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122d61:	83 f8 02             	cmp    $0x2,%eax
f0122d64:	74 2b                	je     f0122d91 <alloc_block+0x40>
f0122d66:	83 f8 02             	cmp    $0x2,%eax
f0122d69:	7f 07                	jg     f0122d72 <alloc_block+0x21>
f0122d6b:	83 f8 01             	cmp    $0x1,%eax
f0122d6e:	74 0e                	je     f0122d7e <alloc_block+0x2d>
f0122d70:	eb 58                	jmp    f0122dca <alloc_block+0x79>
f0122d72:	83 f8 03             	cmp    $0x3,%eax
f0122d75:	74 2d                	je     f0122da4 <alloc_block+0x53>
f0122d77:	83 f8 04             	cmp    $0x4,%eax
f0122d7a:	74 3b                	je     f0122db7 <alloc_block+0x66>
f0122d7c:	eb 4c                	jmp    f0122dca <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f0122d7e:	83 ec 0c             	sub    $0xc,%esp
f0122d81:	ff 75 08             	pushl  0x8(%ebp)
f0122d84:	e8 04 03 00 00       	call   f012308d <alloc_block_FF>
f0122d89:	83 c4 10             	add    $0x10,%esp
f0122d8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122d8f:	eb 4a                	jmp    f0122ddb <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f0122d91:	83 ec 0c             	sub    $0xc,%esp
f0122d94:	ff 75 08             	pushl  0x8(%ebp)
f0122d97:	e8 08 04 00 00       	call   f01231a4 <alloc_block_NF>
f0122d9c:	83 c4 10             	add    $0x10,%esp
f0122d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122da2:	eb 37                	jmp    f0122ddb <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f0122da4:	83 ec 0c             	sub    $0xc,%esp
f0122da7:	ff 75 08             	pushl  0x8(%ebp)
f0122daa:	e8 81 03 00 00       	call   f0123130 <alloc_block_BF>
f0122daf:	83 c4 10             	add    $0x10,%esp
f0122db2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122db5:	eb 24                	jmp    f0122ddb <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f0122db7:	83 ec 0c             	sub    $0xc,%esp
f0122dba:	ff 75 08             	pushl  0x8(%ebp)
f0122dbd:	e8 c5 03 00 00       	call   f0123187 <alloc_block_WF>
f0122dc2:	83 c4 10             	add    $0x10,%esp
f0122dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122dc8:	eb 11                	jmp    f0122ddb <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f0122dca:	83 ec 0c             	sub    $0xc,%esp
f0122dcd:	68 7c fa 12 f0       	push   $0xf012fa7c
f0122dd2:	e8 95 e1 fd ff       	call   f0100f6c <cprintf>
f0122dd7:	83 c4 10             	add    $0x10,%esp
		break;
f0122dda:	90                   	nop
	}
	return va;
f0122ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0122dde:	c9                   	leave  
f0122ddf:	c3                   	ret    

f0122de0 <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f0122de0:	55                   	push   %ebp
f0122de1:	89 e5                	mov    %esp,%ebp
f0122de3:	53                   	push   %ebx
f0122de4:	83 ec 14             	sub    $0x14,%esp
	cprintf("=========================================\n");
f0122de7:	83 ec 0c             	sub    $0xc,%esp
f0122dea:	68 9c fa 12 f0       	push   $0xf012fa9c
f0122def:	e8 78 e1 fd ff       	call   f0100f6c <cprintf>
f0122df4:	83 c4 10             	add    $0x10,%esp
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f0122df7:	83 ec 0c             	sub    $0xc,%esp
f0122dfa:	68 c7 fa 12 f0       	push   $0xf012fac7
f0122dff:	e8 68 e1 fd ff       	call   f0100f6c <cprintf>
f0122e04:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f0122e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0122e0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122e0d:	eb 37                	jmp    f0122e46 <print_blocks_list+0x66>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
f0122e0f:	83 ec 0c             	sub    $0xc,%esp
f0122e12:	ff 75 f4             	pushl  -0xc(%ebp)
f0122e15:	e8 19 ff ff ff       	call   f0122d33 <is_free_block>
f0122e1a:	83 c4 10             	add    $0x10,%esp
f0122e1d:	0f be d8             	movsbl %al,%ebx
f0122e20:	83 ec 0c             	sub    $0xc,%esp
f0122e23:	ff 75 f4             	pushl  -0xc(%ebp)
f0122e26:	e8 ef fe ff ff       	call   f0122d1a <get_block_size>
f0122e2b:	83 c4 10             	add    $0x10,%esp
f0122e2e:	83 ec 04             	sub    $0x4,%esp
f0122e31:	53                   	push   %ebx
f0122e32:	50                   	push   %eax
f0122e33:	68 df fa 12 f0       	push   $0xf012fadf
f0122e38:	e8 2f e1 fd ff       	call   f0100f6c <cprintf>
f0122e3d:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f0122e40:	8b 45 10             	mov    0x10(%ebp),%eax
f0122e43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122e46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122e4a:	74 08                	je     f0122e54 <print_blocks_list+0x74>
f0122e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122e4f:	8b 40 08             	mov    0x8(%eax),%eax
f0122e52:	eb 05                	jmp    f0122e59 <print_blocks_list+0x79>
f0122e54:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e59:	89 45 10             	mov    %eax,0x10(%ebp)
f0122e5c:	8b 45 10             	mov    0x10(%ebp),%eax
f0122e5f:	85 c0                	test   %eax,%eax
f0122e61:	75 ac                	jne    f0122e0f <print_blocks_list+0x2f>
f0122e63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122e67:	75 a6                	jne    f0122e0f <print_blocks_list+0x2f>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
	}
	cprintf("=========================================\n");
f0122e69:	83 ec 0c             	sub    $0xc,%esp
f0122e6c:	68 9c fa 12 f0       	push   $0xf012fa9c
f0122e71:	e8 f6 e0 fd ff       	call   f0100f6c <cprintf>
f0122e76:	83 c4 10             	add    $0x10,%esp

}
f0122e79:	90                   	nop
f0122e7a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0122e7d:	c9                   	leave  
f0122e7e:	c3                   	ret    

f0122e7f <initialize_dynamic_allocator>:
bool is_initialized = 0;
//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f0122e7f:	55                   	push   %ebp
f0122e80:	89 e5                	mov    %esp,%ebp
f0122e82:	57                   	push   %edi
f0122e83:	56                   	push   %esi
f0122e84:	53                   	push   %ebx
f0122e85:	83 ec 1c             	sub    $0x1c,%esp
	//==================================================================================
		//DON'T CHANGE THESE LINES==========================================================
		//==================================================================================
		{
			if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
f0122e88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122e8b:	83 e0 01             	and    $0x1,%eax
f0122e8e:	85 c0                	test   %eax,%eax
f0122e90:	74 03                	je     f0122e95 <initialize_dynamic_allocator+0x16>
f0122e92:	ff 45 0c             	incl   0xc(%ebp)
			if (initSizeOfAllocatedSpace == 0)
f0122e95:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122e99:	0f 84 c8 01 00 00    	je     f0123067 <initialize_dynamic_allocator+0x1e8>
				return ;
			is_initialized = 1;
f0122e9f:	c7 05 b4 62 55 f0 01 	movl   $0x1,0xf05562b4
f0122ea6:	00 00 00 
   /* if ((daStart + initSizeOfAllocatedSpace) - 2*sizeof(struct Block_Start_End) > KERNEL_HEAP_MAX)
        return;
    if(daStart < KERNEL_HEAP_START)
        return;*/

    cprintf("Da Start : %x\n",daStart);
f0122ea9:	83 ec 08             	sub    $0x8,%esp
f0122eac:	ff 75 08             	pushl  0x8(%ebp)
f0122eaf:	68 f7 fa 12 f0       	push   $0xf012faf7
f0122eb4:	e8 b3 e0 fd ff       	call   f0100f6c <cprintf>
f0122eb9:	83 c4 10             	add    $0x10,%esp
    cprintf("Init Alloc : %x\n",initSizeOfAllocatedSpace);
f0122ebc:	83 ec 08             	sub    $0x8,%esp
f0122ebf:	ff 75 0c             	pushl  0xc(%ebp)
f0122ec2:	68 06 fb 12 f0       	push   $0xf012fb06
f0122ec7:	e8 a0 e0 fd ff       	call   f0100f6c <cprintf>
f0122ecc:	83 c4 10             	add    $0x10,%esp
    // Create the BEG Block
    struct Block_Start_End* beg_block = (struct Block_Start_End*) daStart;
f0122ecf:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ed2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    beg_block->info = 1;
f0122ed5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0122ed8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    cprintf("Beg Block : %x \n",beg_block);
f0122ede:	83 ec 08             	sub    $0x8,%esp
f0122ee1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0122ee4:	68 17 fb 12 f0       	push   $0xf012fb17
f0122ee9:	e8 7e e0 fd ff       	call   f0100f6c <cprintf>
f0122eee:	83 c4 10             	add    $0x10,%esp

    // Create the END Block
    struct Block_Start_End* end_block = (struct Block_Start_End*) (daStart + initSizeOfAllocatedSpace - sizeof(struct Block_Start_End));
f0122ef1:	8b 55 08             	mov    0x8(%ebp),%edx
f0122ef4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122ef7:	01 d0                	add    %edx,%eax
f0122ef9:	83 e8 04             	sub    $0x4,%eax
f0122efc:	89 45 e0             	mov    %eax,-0x20(%ebp)
    end_block->info = 1;
f0122eff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122f02:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    cprintf("End Block : %x\n",end_block);
f0122f08:	83 ec 08             	sub    $0x8,%esp
f0122f0b:	ff 75 e0             	pushl  -0x20(%ebp)
f0122f0e:	68 28 fb 12 f0       	push   $0xf012fb28
f0122f13:	e8 54 e0 fd ff       	call   f0100f6c <cprintf>
f0122f18:	83 c4 10             	add    $0x10,%esp
    // Create the first free block
    struct BlockElement* first_free_block = (struct BlockElement*)(daStart+ 2*sizeof(struct Block_Start_End));
f0122f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0122f1e:	83 c0 08             	add    $0x8,%eax
f0122f21:	89 45 dc             	mov    %eax,-0x24(%ebp)

    cprintf("Address : %x\n",first_free_block);
f0122f24:	83 ec 08             	sub    $0x8,%esp
f0122f27:	ff 75 dc             	pushl  -0x24(%ebp)
f0122f2a:	68 38 fb 12 f0       	push   $0xf012fb38
f0122f2f:	e8 38 e0 fd ff       	call   f0100f6c <cprintf>
f0122f34:	83 c4 10             	add    $0x10,%esp
    first_free_block->header = (struct Block_Start_End*) (daStart+sizeof(struct Block_Start_End));
f0122f37:	8b 45 08             	mov    0x8(%ebp),%eax
f0122f3a:	83 c0 04             	add    $0x4,%eax
f0122f3d:	89 c2                	mov    %eax,%edx
f0122f3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f42:	89 10                	mov    %edx,(%eax)
    first_free_block->footer = (struct Block_Start_End*) (daStart + initSizeOfAllocatedSpace - 2*sizeof(struct Block_Start_End));
f0122f44:	8b 55 08             	mov    0x8(%ebp),%edx
f0122f47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122f4a:	01 d0                	add    %edx,%eax
f0122f4c:	83 e8 08             	sub    $0x8,%eax
f0122f4f:	89 c2                	mov    %eax,%edx
f0122f51:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f54:	89 50 04             	mov    %edx,0x4(%eax)
    cprintf("Address H : %x\n",first_free_block->header);
f0122f57:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f5a:	8b 00                	mov    (%eax),%eax
f0122f5c:	83 ec 08             	sub    $0x8,%esp
f0122f5f:	50                   	push   %eax
f0122f60:	68 46 fb 12 f0       	push   $0xf012fb46
f0122f65:	e8 02 e0 fd ff       	call   f0100f6c <cprintf>
f0122f6a:	83 c4 10             	add    $0x10,%esp
    cprintf("Address F : %x\n",first_free_block->footer);
f0122f6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f70:	8b 40 04             	mov    0x4(%eax),%eax
f0122f73:	83 ec 08             	sub    $0x8,%esp
f0122f76:	50                   	push   %eax
f0122f77:	68 56 fb 12 f0       	push   $0xf012fb56
f0122f7c:	e8 eb df fd ff       	call   f0100f6c <cprintf>
f0122f81:	83 c4 10             	add    $0x10,%esp
    // Create Header
    first_free_block->header->info = initSizeOfAllocatedSpace - 2 * sizeof(struct Block_Start_End); // Adjust size
f0122f84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f87:	8b 00                	mov    (%eax),%eax
f0122f89:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122f8c:	83 ea 08             	sub    $0x8,%edx
f0122f8f:	89 10                	mov    %edx,(%eax)


    // Create Footer
    first_free_block->footer->info = initSizeOfAllocatedSpace - 2 * sizeof(struct Block_Start_End);// Match footer info to header
f0122f91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f94:	8b 40 04             	mov    0x4(%eax),%eax
f0122f97:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122f9a:	83 ea 08             	sub    $0x8,%edx
f0122f9d:	89 10                	mov    %edx,(%eax)


    // Initialize links to the END block
   first_free_block->prev_next_info.le_next = NULL; // Link to the END block
f0122f9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122fa2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   first_free_block->prev_next_info.le_prev = NULL;
f0122fa9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122fac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    // Link the first free block into the free block list

    LIST_INSERT_HEAD(&freeBlocksList , first_free_block);
f0122fb3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122fb7:	75 17                	jne    f0122fd0 <initialize_dynamic_allocator+0x151>
f0122fb9:	83 ec 04             	sub    $0x4,%esp
f0122fbc:	68 68 fb 12 f0       	push   $0xf012fb68
f0122fc1:	68 95 00 00 00       	push   $0x95
f0122fc6:	68 8b fb 12 f0       	push   $0xf012fb8b
f0122fcb:	e8 4a d3 fd ff       	call   f010031a <_panic>
f0122fd0:	8b 15 b0 65 55 f0    	mov    0xf05565b0,%edx
f0122fd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122fd9:	89 50 08             	mov    %edx,0x8(%eax)
f0122fdc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122fdf:	8b 40 08             	mov    0x8(%eax),%eax
f0122fe2:	85 c0                	test   %eax,%eax
f0122fe4:	74 0d                	je     f0122ff3 <initialize_dynamic_allocator+0x174>
f0122fe6:	a1 b0 65 55 f0       	mov    0xf05565b0,%eax
f0122feb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0122fee:	89 50 0c             	mov    %edx,0xc(%eax)
f0122ff1:	eb 08                	jmp    f0122ffb <initialize_dynamic_allocator+0x17c>
f0122ff3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122ff6:	a3 b4 65 55 f0       	mov    %eax,0xf05565b4
f0122ffb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122ffe:	a3 b0 65 55 f0       	mov    %eax,0xf05565b0
f0123003:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123006:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f012300d:	a1 bc 65 55 f0       	mov    0xf05565bc,%eax
f0123012:	40                   	inc    %eax
f0123013:	a3 bc 65 55 f0       	mov    %eax,0xf05565bc
    cprintf("Size List : %d\n",freeBlocksList.size);
f0123018:	a1 bc 65 55 f0       	mov    0xf05565bc,%eax
f012301d:	83 ec 08             	sub    $0x8,%esp
f0123020:	50                   	push   %eax
f0123021:	68 a3 fb 12 f0       	push   $0xf012fba3
f0123026:	e8 41 df fd ff       	call   f0100f6c <cprintf>
f012302b:	83 c4 10             	add    $0x10,%esp
    cprintf("First Element List : %x\n",freeBlocksList.lh_first);
f012302e:	a1 b0 65 55 f0       	mov    0xf05565b0,%eax
f0123033:	83 ec 08             	sub    $0x8,%esp
f0123036:	50                   	push   %eax
f0123037:	68 b3 fb 12 f0       	push   $0xf012fbb3
f012303c:	e8 2b df fd ff       	call   f0100f6c <cprintf>
f0123041:	83 c4 10             	add    $0x10,%esp
    print_blocks_list(freeBlocksList);
f0123044:	83 ec 10             	sub    $0x10,%esp
f0123047:	89 e0                	mov    %esp,%eax
f0123049:	89 c2                	mov    %eax,%edx
f012304b:	bb b0 65 55 f0       	mov    $0xf05565b0,%ebx
f0123050:	b8 04 00 00 00       	mov    $0x4,%eax
f0123055:	89 d7                	mov    %edx,%edi
f0123057:	89 de                	mov    %ebx,%esi
f0123059:	89 c1                	mov    %eax,%ecx
f012305b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f012305d:	e8 7e fd ff ff       	call   f0122de0 <print_blocks_list>
f0123062:	83 c4 10             	add    $0x10,%esp
f0123065:	eb 01                	jmp    f0123068 <initialize_dynamic_allocator+0x1e9>
		//DON'T CHANGE THESE LINES==========================================================
		//==================================================================================
		{
			if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
			if (initSizeOfAllocatedSpace == 0)
				return ;
f0123067:	90                   	nop

    LIST_INSERT_HEAD(&freeBlocksList , first_free_block);
    cprintf("Size List : %d\n",freeBlocksList.size);
    cprintf("First Element List : %x\n",freeBlocksList.lh_first);
    print_blocks_list(freeBlocksList);
}
f0123068:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012306b:	5b                   	pop    %ebx
f012306c:	5e                   	pop    %esi
f012306d:	5f                   	pop    %edi
f012306e:	5d                   	pop    %ebp
f012306f:	c3                   	ret    

f0123070 <set_block_data>:

//==================================
// [2] SET BLOCK HEADER & FOOTER:
//==================================
void set_block_data(void* va, uint32 totalSize, bool isAllocated)
{
f0123070:	55                   	push   %ebp
f0123071:	89 e5                	mov    %esp,%ebp
f0123073:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #05] [3] DYNAMIC ALLOCATOR - set_block_data
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("set_block_data is not implemented yet");
f0123076:	83 ec 04             	sub    $0x4,%esp
f0123079:	68 cc fb 12 f0       	push   $0xf012fbcc
f012307e:	68 a3 00 00 00       	push   $0xa3
f0123083:	68 8b fb 12 f0       	push   $0xf012fb8b
f0123088:	e8 8d d2 fd ff       	call   f010031a <_panic>

f012308d <alloc_block_FF>:

//=========================================
// [3] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f012308d:	55                   	push   %ebp
f012308e:	89 e5                	mov    %esp,%ebp
f0123090:	83 ec 28             	sub    $0x28,%esp
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (size % 2 != 0) size++;	//ensure that the size is even (to use LSB as allocation flag)
f0123093:	8b 45 08             	mov    0x8(%ebp),%eax
f0123096:	83 e0 01             	and    $0x1,%eax
f0123099:	85 c0                	test   %eax,%eax
f012309b:	74 03                	je     f01230a0 <alloc_block_FF+0x13>
f012309d:	ff 45 08             	incl   0x8(%ebp)
		if (size < DYN_ALLOC_MIN_BLOCK_SIZE)
f01230a0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
f01230a4:	77 07                	ja     f01230ad <alloc_block_FF+0x20>
			size = DYN_ALLOC_MIN_BLOCK_SIZE ;
f01230a6:	c7 45 08 08 00 00 00 	movl   $0x8,0x8(%ebp)
		if (!is_initialized)
f01230ad:	a1 b4 62 55 f0       	mov    0xf05562b4,%eax
f01230b2:	85 c0                	test   %eax,%eax
f01230b4:	75 63                	jne    f0123119 <alloc_block_FF+0x8c>
		{
			uint32 required_size = size + 2*sizeof(int) /*header & footer*/ + 2*sizeof(int) /*da begin & end*/ ;
f01230b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01230b9:	83 c0 10             	add    $0x10,%eax
f01230bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
			uint32 da_start = (uint32)sbrk(ROUNDUP(required_size, PAGE_SIZE)/PAGE_SIZE);
f01230bf:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01230c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01230c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01230cc:	01 d0                	add    %edx,%eax
f01230ce:	48                   	dec    %eax
f01230cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01230d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01230da:	f7 75 f0             	divl   -0x10(%ebp)
f01230dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230e0:	29 d0                	sub    %edx,%eax
f01230e2:	c1 e8 0c             	shr    $0xc,%eax
f01230e5:	83 ec 0c             	sub    $0xc,%esp
f01230e8:	50                   	push   %eax
f01230e9:	e8 be 59 fe ff       	call   f0108aac <sbrk>
f01230ee:	83 c4 10             	add    $0x10,%esp
f01230f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 da_break = (uint32)sbrk(0);
f01230f4:	83 ec 0c             	sub    $0xc,%esp
f01230f7:	6a 00                	push   $0x0
f01230f9:	e8 ae 59 fe ff       	call   f0108aac <sbrk>
f01230fe:	83 c4 10             	add    $0x10,%esp
f0123101:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			initialize_dynamic_allocator(da_start, da_break - da_start);
f0123104:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123107:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012310a:	83 ec 08             	sub    $0x8,%esp
f012310d:	50                   	push   %eax
f012310e:	ff 75 e8             	pushl  -0x18(%ebp)
f0123111:	e8 69 fd ff ff       	call   f0122e7f <initialize_dynamic_allocator>
f0123116:	83 c4 10             	add    $0x10,%esp
	//==================================================================================
	//==================================================================================

	//TODO: [PROJECT'24.MS1 - #06] [3] DYNAMIC ALLOCATOR - alloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_FF is not implemented yet");
f0123119:	83 ec 04             	sub    $0x4,%esp
f012311c:	68 f4 fb 12 f0       	push   $0xf012fbf4
f0123121:	68 c1 00 00 00       	push   $0xc1
f0123126:	68 8b fb 12 f0       	push   $0xf012fb8b
f012312b:	e8 ea d1 fd ff       	call   f010031a <_panic>

f0123130 <alloc_block_BF>:
}
//=========================================
// [4] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f0123130:	55                   	push   %ebp
f0123131:	89 e5                	mov    %esp,%ebp
f0123133:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_BF is not implemented yet");
f0123136:	83 ec 04             	sub    $0x4,%esp
f0123139:	68 1c fc 12 f0       	push   $0xf012fc1c
f012313e:	68 cc 00 00 00       	push   $0xcc
f0123143:	68 8b fb 12 f0       	push   $0xf012fb8b
f0123148:	e8 cd d1 fd ff       	call   f010031a <_panic>

f012314d <free_block>:

//===================================================
// [5] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012314d:	55                   	push   %ebp
f012314e:	89 e5                	mov    %esp,%ebp
f0123150:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #07] [3] DYNAMIC ALLOCATOR - free_block
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_block is not implemented yet");
f0123153:	83 ec 04             	sub    $0x4,%esp
f0123156:	68 44 fc 12 f0       	push   $0xf012fc44
f012315b:	68 d8 00 00 00       	push   $0xd8
f0123160:	68 8b fb 12 f0       	push   $0xf012fb8b
f0123165:	e8 b0 d1 fd ff       	call   f010031a <_panic>

f012316a <realloc_block_FF>:

//=========================================
// [6] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012316a:	55                   	push   %ebp
f012316b:	89 e5                	mov    %esp,%ebp
f012316d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #08] [3] DYNAMIC ALLOCATOR - realloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("realloc_block_FF is not implemented yet");
f0123170:	83 ec 04             	sub    $0x4,%esp
f0123173:	68 68 fc 12 f0       	push   $0xf012fc68
f0123178:	68 e3 00 00 00       	push   $0xe3
f012317d:	68 8b fb 12 f0       	push   $0xf012fb8b
f0123182:	e8 93 d1 fd ff       	call   f010031a <_panic>

f0123187 <alloc_block_WF>:
/*********************************************************************************************/
//=========================================
// [7] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f0123187:	55                   	push   %ebp
f0123188:	89 e5                	mov    %esp,%ebp
f012318a:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012318d:	83 ec 04             	sub    $0x4,%esp
f0123190:	68 90 fc 12 f0       	push   $0xf012fc90
f0123195:	68 ef 00 00 00       	push   $0xef
f012319a:	68 8b fb 12 f0       	push   $0xf012fb8b
f012319f:	e8 76 d1 fd ff       	call   f010031a <_panic>

f01231a4 <alloc_block_NF>:

//=========================================
// [8] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f01231a4:	55                   	push   %ebp
f01231a5:	89 e5                	mov    %esp,%ebp
f01231a7:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f01231aa:	83 ec 04             	sub    $0x4,%esp
f01231ad:	68 b8 fc 12 f0       	push   $0xf012fcb8
f01231b2:	68 f8 00 00 00       	push   $0xf8
f01231b7:	68 8b fb 12 f0       	push   $0xf012fb8b
f01231bc:	e8 59 d1 fd ff       	call   f010031a <_panic>
f01231c1:	66 90                	xchg   %ax,%ax
f01231c3:	90                   	nop

f01231c4 <__moddi3>:
f01231c4:	55                   	push   %ebp
f01231c5:	57                   	push   %edi
f01231c6:	56                   	push   %esi
f01231c7:	53                   	push   %ebx
f01231c8:	83 ec 2c             	sub    $0x2c,%esp
f01231cb:	8b 74 24 40          	mov    0x40(%esp),%esi
f01231cf:	8b 7c 24 44          	mov    0x44(%esp),%edi
f01231d3:	8b 4c 24 48          	mov    0x48(%esp),%ecx
f01231d7:	8b 5c 24 4c          	mov    0x4c(%esp),%ebx
f01231db:	89 d8                	mov    %ebx,%eax
f01231dd:	85 ff                	test   %edi,%edi
f01231df:	0f 88 d3 00 00 00    	js     f01232b8 <__moddi3+0xf4>
f01231e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
f01231ec:	00 
f01231ed:	85 c0                	test   %eax,%eax
f01231ef:	0f 88 ab 00 00 00    	js     f01232a0 <__moddi3+0xdc>
f01231f5:	89 0c 24             	mov    %ecx,(%esp)
f01231f8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f01231fc:	89 74 24 10          	mov    %esi,0x10(%esp)
f0123200:	89 fb                	mov    %edi,%ebx
f0123202:	8b 14 24             	mov    (%esp),%edx
f0123205:	8b 4c 24 04          	mov    0x4(%esp),%ecx
f0123209:	89 d0                	mov    %edx,%eax
f012320b:	89 54 24 18          	mov    %edx,0x18(%esp)
f012320f:	89 ca                	mov    %ecx,%edx
f0123211:	8b 0c 24             	mov    (%esp),%ecx
f0123214:	89 34 24             	mov    %esi,(%esp)
f0123217:	89 7c 24 14          	mov    %edi,0x14(%esp)
f012321b:	85 d2                	test   %edx,%edx
f012321d:	75 15                	jne    f0123234 <__moddi3+0x70>
f012321f:	89 c7                	mov    %eax,%edi
f0123221:	39 d8                	cmp    %ebx,%eax
f0123223:	76 5b                	jbe    f0123280 <__moddi3+0xbc>
f0123225:	89 f0                	mov    %esi,%eax
f0123227:	89 da                	mov    %ebx,%edx
f0123229:	f7 f7                	div    %edi
f012322b:	89 d3                	mov    %edx,%ebx
f012322d:	89 d8                	mov    %ebx,%eax
f012322f:	31 d2                	xor    %edx,%edx
f0123231:	eb 09                	jmp    f012323c <__moddi3+0x78>
f0123233:	90                   	nop
f0123234:	39 fa                	cmp    %edi,%edx
f0123236:	76 1c                	jbe    f0123254 <__moddi3+0x90>
f0123238:	89 f0                	mov    %esi,%eax
f012323a:	89 fa                	mov    %edi,%edx
f012323c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
f0123240:	85 c9                	test   %ecx,%ecx
f0123242:	74 07                	je     f012324b <__moddi3+0x87>
f0123244:	f7 d8                	neg    %eax
f0123246:	83 d2 00             	adc    $0x0,%edx
f0123249:	f7 da                	neg    %edx
f012324b:	83 c4 2c             	add    $0x2c,%esp
f012324e:	5b                   	pop    %ebx
f012324f:	5e                   	pop    %esi
f0123250:	5f                   	pop    %edi
f0123251:	5d                   	pop    %ebp
f0123252:	c3                   	ret    
f0123253:	90                   	nop
f0123254:	0f bd c2             	bsr    %edx,%eax
f0123257:	83 f0 1f             	xor    $0x1f,%eax
f012325a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
f012325e:	75 6c                	jne    f01232cc <__moddi3+0x108>
f0123260:	39 fa                	cmp    %edi,%edx
f0123262:	72 05                	jb     f0123269 <__moddi3+0xa5>
f0123264:	3b 0c 24             	cmp    (%esp),%ecx
f0123267:	77 0e                	ja     f0123277 <__moddi3+0xb3>
f0123269:	8b 34 24             	mov    (%esp),%esi
f012326c:	29 ce                	sub    %ecx,%esi
f012326e:	19 d3                	sbb    %edx,%ebx
f0123270:	89 5c 24 14          	mov    %ebx,0x14(%esp)
f0123274:	89 34 24             	mov    %esi,(%esp)
f0123277:	8b 04 24             	mov    (%esp),%eax
f012327a:	8b 54 24 14          	mov    0x14(%esp),%edx
f012327e:	eb bc                	jmp    f012323c <__moddi3+0x78>
f0123280:	85 c9                	test   %ecx,%ecx
f0123282:	75 0b                	jne    f012328f <__moddi3+0xcb>
f0123284:	b8 01 00 00 00       	mov    $0x1,%eax
f0123289:	31 d2                	xor    %edx,%edx
f012328b:	f7 f1                	div    %ecx
f012328d:	89 c1                	mov    %eax,%ecx
f012328f:	89 d8                	mov    %ebx,%eax
f0123291:	31 d2                	xor    %edx,%edx
f0123293:	f7 f1                	div    %ecx
f0123295:	8b 04 24             	mov    (%esp),%eax
f0123298:	f7 f1                	div    %ecx
f012329a:	89 d3                	mov    %edx,%ebx
f012329c:	eb 8f                	jmp    f012322d <__moddi3+0x69>
f012329e:	66 90                	xchg   %ax,%ax
f01232a0:	89 c8                	mov    %ecx,%eax
f01232a2:	89 da                	mov    %ebx,%edx
f01232a4:	f7 d8                	neg    %eax
f01232a6:	83 d2 00             	adc    $0x0,%edx
f01232a9:	f7 da                	neg    %edx
f01232ab:	89 04 24             	mov    %eax,(%esp)
f01232ae:	89 54 24 04          	mov    %edx,0x4(%esp)
f01232b2:	e9 45 ff ff ff       	jmp    f01231fc <__moddi3+0x38>
f01232b7:	90                   	nop
f01232b8:	f7 de                	neg    %esi
f01232ba:	83 d7 00             	adc    $0x0,%edi
f01232bd:	f7 df                	neg    %edi
f01232bf:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
f01232c6:	ff 
f01232c7:	e9 21 ff ff ff       	jmp    f01231ed <__moddi3+0x29>
f01232cc:	b8 20 00 00 00       	mov    $0x20,%eax
f01232d1:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f01232d5:	29 f8                	sub    %edi,%eax
f01232d7:	89 c6                	mov    %eax,%esi
f01232d9:	89 44 24 14          	mov    %eax,0x14(%esp)
f01232dd:	89 f9                	mov    %edi,%ecx
f01232df:	d3 e2                	shl    %cl,%edx
f01232e1:	8b 6c 24 18          	mov    0x18(%esp),%ebp
f01232e5:	89 e8                	mov    %ebp,%eax
f01232e7:	89 f1                	mov    %esi,%ecx
f01232e9:	d3 e8                	shr    %cl,%eax
f01232eb:	09 d0                	or     %edx,%eax
f01232ed:	89 04 24             	mov    %eax,(%esp)
f01232f0:	89 ea                	mov    %ebp,%edx
f01232f2:	89 f9                	mov    %edi,%ecx
f01232f4:	d3 e2                	shl    %cl,%edx
f01232f6:	89 d7                	mov    %edx,%edi
f01232f8:	89 da                	mov    %ebx,%edx
f01232fa:	d3 e2                	shl    %cl,%edx
f01232fc:	8b 6c 24 10          	mov    0x10(%esp),%ebp
f0123300:	d3 e5                	shl    %cl,%ebp
f0123302:	8b 44 24 10          	mov    0x10(%esp),%eax
f0123306:	89 f1                	mov    %esi,%ecx
f0123308:	d3 e8                	shr    %cl,%eax
f012330a:	09 d0                	or     %edx,%eax
f012330c:	d3 eb                	shr    %cl,%ebx
f012330e:	89 da                	mov    %ebx,%edx
f0123310:	f7 34 24             	divl   (%esp)
f0123313:	89 d3                	mov    %edx,%ebx
f0123315:	f7 e7                	mul    %edi
f0123317:	89 c6                	mov    %eax,%esi
f0123319:	89 d1                	mov    %edx,%ecx
f012331b:	39 d3                	cmp    %edx,%ebx
f012331d:	72 29                	jb     f0123348 <__moddi3+0x184>
f012331f:	74 33                	je     f0123354 <__moddi3+0x190>
f0123321:	89 e8                	mov    %ebp,%eax
f0123323:	29 f0                	sub    %esi,%eax
f0123325:	19 cb                	sbb    %ecx,%ebx
f0123327:	89 de                	mov    %ebx,%esi
f0123329:	8a 4c 24 14          	mov    0x14(%esp),%cl
f012332d:	d3 e6                	shl    %cl,%esi
f012332f:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f0123333:	89 f9                	mov    %edi,%ecx
f0123335:	d3 e8                	shr    %cl,%eax
f0123337:	09 c6                	or     %eax,%esi
f0123339:	89 f0                	mov    %esi,%eax
f012333b:	89 f9                	mov    %edi,%ecx
f012333d:	d3 eb                	shr    %cl,%ebx
f012333f:	89 da                	mov    %ebx,%edx
f0123341:	e9 f6 fe ff ff       	jmp    f012323c <__moddi3+0x78>
f0123346:	66 90                	xchg   %ax,%ax
f0123348:	29 f8                	sub    %edi,%eax
f012334a:	1b 14 24             	sbb    (%esp),%edx
f012334d:	89 d1                	mov    %edx,%ecx
f012334f:	89 c6                	mov    %eax,%esi
f0123351:	eb ce                	jmp    f0123321 <__moddi3+0x15d>
f0123353:	90                   	nop
f0123354:	39 c5                	cmp    %eax,%ebp
f0123356:	72 f0                	jb     f0123348 <__moddi3+0x184>
f0123358:	89 d9                	mov    %ebx,%ecx
f012335a:	eb c5                	jmp    f0123321 <__moddi3+0x15d>

f012335c <__udivdi3>:
f012335c:	55                   	push   %ebp
f012335d:	57                   	push   %edi
f012335e:	56                   	push   %esi
f012335f:	53                   	push   %ebx
f0123360:	83 ec 1c             	sub    $0x1c,%esp
f0123363:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0123367:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012336b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012336f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0123373:	89 ca                	mov    %ecx,%edx
f0123375:	89 f8                	mov    %edi,%eax
f0123377:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012337b:	85 f6                	test   %esi,%esi
f012337d:	75 2d                	jne    f01233ac <__udivdi3+0x50>
f012337f:	39 cf                	cmp    %ecx,%edi
f0123381:	77 65                	ja     f01233e8 <__udivdi3+0x8c>
f0123383:	89 fd                	mov    %edi,%ebp
f0123385:	85 ff                	test   %edi,%edi
f0123387:	75 0b                	jne    f0123394 <__udivdi3+0x38>
f0123389:	b8 01 00 00 00       	mov    $0x1,%eax
f012338e:	31 d2                	xor    %edx,%edx
f0123390:	f7 f7                	div    %edi
f0123392:	89 c5                	mov    %eax,%ebp
f0123394:	31 d2                	xor    %edx,%edx
f0123396:	89 c8                	mov    %ecx,%eax
f0123398:	f7 f5                	div    %ebp
f012339a:	89 c1                	mov    %eax,%ecx
f012339c:	89 d8                	mov    %ebx,%eax
f012339e:	f7 f5                	div    %ebp
f01233a0:	89 cf                	mov    %ecx,%edi
f01233a2:	89 fa                	mov    %edi,%edx
f01233a4:	83 c4 1c             	add    $0x1c,%esp
f01233a7:	5b                   	pop    %ebx
f01233a8:	5e                   	pop    %esi
f01233a9:	5f                   	pop    %edi
f01233aa:	5d                   	pop    %ebp
f01233ab:	c3                   	ret    
f01233ac:	39 ce                	cmp    %ecx,%esi
f01233ae:	77 28                	ja     f01233d8 <__udivdi3+0x7c>
f01233b0:	0f bd fe             	bsr    %esi,%edi
f01233b3:	83 f7 1f             	xor    $0x1f,%edi
f01233b6:	75 40                	jne    f01233f8 <__udivdi3+0x9c>
f01233b8:	39 ce                	cmp    %ecx,%esi
f01233ba:	72 0a                	jb     f01233c6 <__udivdi3+0x6a>
f01233bc:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01233c0:	0f 87 9e 00 00 00    	ja     f0123464 <__udivdi3+0x108>
f01233c6:	b8 01 00 00 00       	mov    $0x1,%eax
f01233cb:	89 fa                	mov    %edi,%edx
f01233cd:	83 c4 1c             	add    $0x1c,%esp
f01233d0:	5b                   	pop    %ebx
f01233d1:	5e                   	pop    %esi
f01233d2:	5f                   	pop    %edi
f01233d3:	5d                   	pop    %ebp
f01233d4:	c3                   	ret    
f01233d5:	8d 76 00             	lea    0x0(%esi),%esi
f01233d8:	31 ff                	xor    %edi,%edi
f01233da:	31 c0                	xor    %eax,%eax
f01233dc:	89 fa                	mov    %edi,%edx
f01233de:	83 c4 1c             	add    $0x1c,%esp
f01233e1:	5b                   	pop    %ebx
f01233e2:	5e                   	pop    %esi
f01233e3:	5f                   	pop    %edi
f01233e4:	5d                   	pop    %ebp
f01233e5:	c3                   	ret    
f01233e6:	66 90                	xchg   %ax,%ax
f01233e8:	89 d8                	mov    %ebx,%eax
f01233ea:	f7 f7                	div    %edi
f01233ec:	31 ff                	xor    %edi,%edi
f01233ee:	89 fa                	mov    %edi,%edx
f01233f0:	83 c4 1c             	add    $0x1c,%esp
f01233f3:	5b                   	pop    %ebx
f01233f4:	5e                   	pop    %esi
f01233f5:	5f                   	pop    %edi
f01233f6:	5d                   	pop    %ebp
f01233f7:	c3                   	ret    
f01233f8:	bd 20 00 00 00       	mov    $0x20,%ebp
f01233fd:	89 eb                	mov    %ebp,%ebx
f01233ff:	29 fb                	sub    %edi,%ebx
f0123401:	89 f9                	mov    %edi,%ecx
f0123403:	d3 e6                	shl    %cl,%esi
f0123405:	89 c5                	mov    %eax,%ebp
f0123407:	88 d9                	mov    %bl,%cl
f0123409:	d3 ed                	shr    %cl,%ebp
f012340b:	89 e9                	mov    %ebp,%ecx
f012340d:	09 f1                	or     %esi,%ecx
f012340f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0123413:	89 f9                	mov    %edi,%ecx
f0123415:	d3 e0                	shl    %cl,%eax
f0123417:	89 c5                	mov    %eax,%ebp
f0123419:	89 d6                	mov    %edx,%esi
f012341b:	88 d9                	mov    %bl,%cl
f012341d:	d3 ee                	shr    %cl,%esi
f012341f:	89 f9                	mov    %edi,%ecx
f0123421:	d3 e2                	shl    %cl,%edx
f0123423:	8b 44 24 08          	mov    0x8(%esp),%eax
f0123427:	88 d9                	mov    %bl,%cl
f0123429:	d3 e8                	shr    %cl,%eax
f012342b:	09 c2                	or     %eax,%edx
f012342d:	89 d0                	mov    %edx,%eax
f012342f:	89 f2                	mov    %esi,%edx
f0123431:	f7 74 24 0c          	divl   0xc(%esp)
f0123435:	89 d6                	mov    %edx,%esi
f0123437:	89 c3                	mov    %eax,%ebx
f0123439:	f7 e5                	mul    %ebp
f012343b:	39 d6                	cmp    %edx,%esi
f012343d:	72 19                	jb     f0123458 <__udivdi3+0xfc>
f012343f:	74 0b                	je     f012344c <__udivdi3+0xf0>
f0123441:	89 d8                	mov    %ebx,%eax
f0123443:	31 ff                	xor    %edi,%edi
f0123445:	e9 58 ff ff ff       	jmp    f01233a2 <__udivdi3+0x46>
f012344a:	66 90                	xchg   %ax,%ax
f012344c:	8b 54 24 08          	mov    0x8(%esp),%edx
f0123450:	89 f9                	mov    %edi,%ecx
f0123452:	d3 e2                	shl    %cl,%edx
f0123454:	39 c2                	cmp    %eax,%edx
f0123456:	73 e9                	jae    f0123441 <__udivdi3+0xe5>
f0123458:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012345b:	31 ff                	xor    %edi,%edi
f012345d:	e9 40 ff ff ff       	jmp    f01233a2 <__udivdi3+0x46>
f0123462:	66 90                	xchg   %ax,%ax
f0123464:	31 c0                	xor    %eax,%eax
f0123466:	e9 37 ff ff ff       	jmp    f01233a2 <__udivdi3+0x46>
f012346b:	90                   	nop

f012346c <__umoddi3>:
f012346c:	55                   	push   %ebp
f012346d:	57                   	push   %edi
f012346e:	56                   	push   %esi
f012346f:	53                   	push   %ebx
f0123470:	83 ec 1c             	sub    $0x1c,%esp
f0123473:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0123477:	8b 74 24 34          	mov    0x34(%esp),%esi
f012347b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012347f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0123483:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0123487:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012348b:	89 f3                	mov    %esi,%ebx
f012348d:	89 fa                	mov    %edi,%edx
f012348f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0123493:	89 34 24             	mov    %esi,(%esp)
f0123496:	85 c0                	test   %eax,%eax
f0123498:	75 1a                	jne    f01234b4 <__umoddi3+0x48>
f012349a:	39 f7                	cmp    %esi,%edi
f012349c:	0f 86 a2 00 00 00    	jbe    f0123544 <__umoddi3+0xd8>
f01234a2:	89 c8                	mov    %ecx,%eax
f01234a4:	89 f2                	mov    %esi,%edx
f01234a6:	f7 f7                	div    %edi
f01234a8:	89 d0                	mov    %edx,%eax
f01234aa:	31 d2                	xor    %edx,%edx
f01234ac:	83 c4 1c             	add    $0x1c,%esp
f01234af:	5b                   	pop    %ebx
f01234b0:	5e                   	pop    %esi
f01234b1:	5f                   	pop    %edi
f01234b2:	5d                   	pop    %ebp
f01234b3:	c3                   	ret    
f01234b4:	39 f0                	cmp    %esi,%eax
f01234b6:	0f 87 ac 00 00 00    	ja     f0123568 <__umoddi3+0xfc>
f01234bc:	0f bd e8             	bsr    %eax,%ebp
f01234bf:	83 f5 1f             	xor    $0x1f,%ebp
f01234c2:	0f 84 ac 00 00 00    	je     f0123574 <__umoddi3+0x108>
f01234c8:	bf 20 00 00 00       	mov    $0x20,%edi
f01234cd:	29 ef                	sub    %ebp,%edi
f01234cf:	89 fe                	mov    %edi,%esi
f01234d1:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01234d5:	89 e9                	mov    %ebp,%ecx
f01234d7:	d3 e0                	shl    %cl,%eax
f01234d9:	89 d7                	mov    %edx,%edi
f01234db:	89 f1                	mov    %esi,%ecx
f01234dd:	d3 ef                	shr    %cl,%edi
f01234df:	09 c7                	or     %eax,%edi
f01234e1:	89 e9                	mov    %ebp,%ecx
f01234e3:	d3 e2                	shl    %cl,%edx
f01234e5:	89 14 24             	mov    %edx,(%esp)
f01234e8:	89 d8                	mov    %ebx,%eax
f01234ea:	d3 e0                	shl    %cl,%eax
f01234ec:	89 c2                	mov    %eax,%edx
f01234ee:	8b 44 24 08          	mov    0x8(%esp),%eax
f01234f2:	d3 e0                	shl    %cl,%eax
f01234f4:	89 44 24 04          	mov    %eax,0x4(%esp)
f01234f8:	8b 44 24 08          	mov    0x8(%esp),%eax
f01234fc:	89 f1                	mov    %esi,%ecx
f01234fe:	d3 e8                	shr    %cl,%eax
f0123500:	09 d0                	or     %edx,%eax
f0123502:	d3 eb                	shr    %cl,%ebx
f0123504:	89 da                	mov    %ebx,%edx
f0123506:	f7 f7                	div    %edi
f0123508:	89 d3                	mov    %edx,%ebx
f012350a:	f7 24 24             	mull   (%esp)
f012350d:	89 c6                	mov    %eax,%esi
f012350f:	89 d1                	mov    %edx,%ecx
f0123511:	39 d3                	cmp    %edx,%ebx
f0123513:	0f 82 87 00 00 00    	jb     f01235a0 <__umoddi3+0x134>
f0123519:	0f 84 91 00 00 00    	je     f01235b0 <__umoddi3+0x144>
f012351f:	8b 54 24 04          	mov    0x4(%esp),%edx
f0123523:	29 f2                	sub    %esi,%edx
f0123525:	19 cb                	sbb    %ecx,%ebx
f0123527:	89 d8                	mov    %ebx,%eax
f0123529:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012352d:	d3 e0                	shl    %cl,%eax
f012352f:	89 e9                	mov    %ebp,%ecx
f0123531:	d3 ea                	shr    %cl,%edx
f0123533:	09 d0                	or     %edx,%eax
f0123535:	89 e9                	mov    %ebp,%ecx
f0123537:	d3 eb                	shr    %cl,%ebx
f0123539:	89 da                	mov    %ebx,%edx
f012353b:	83 c4 1c             	add    $0x1c,%esp
f012353e:	5b                   	pop    %ebx
f012353f:	5e                   	pop    %esi
f0123540:	5f                   	pop    %edi
f0123541:	5d                   	pop    %ebp
f0123542:	c3                   	ret    
f0123543:	90                   	nop
f0123544:	89 fd                	mov    %edi,%ebp
f0123546:	85 ff                	test   %edi,%edi
f0123548:	75 0b                	jne    f0123555 <__umoddi3+0xe9>
f012354a:	b8 01 00 00 00       	mov    $0x1,%eax
f012354f:	31 d2                	xor    %edx,%edx
f0123551:	f7 f7                	div    %edi
f0123553:	89 c5                	mov    %eax,%ebp
f0123555:	89 f0                	mov    %esi,%eax
f0123557:	31 d2                	xor    %edx,%edx
f0123559:	f7 f5                	div    %ebp
f012355b:	89 c8                	mov    %ecx,%eax
f012355d:	f7 f5                	div    %ebp
f012355f:	89 d0                	mov    %edx,%eax
f0123561:	e9 44 ff ff ff       	jmp    f01234aa <__umoddi3+0x3e>
f0123566:	66 90                	xchg   %ax,%ax
f0123568:	89 c8                	mov    %ecx,%eax
f012356a:	89 f2                	mov    %esi,%edx
f012356c:	83 c4 1c             	add    $0x1c,%esp
f012356f:	5b                   	pop    %ebx
f0123570:	5e                   	pop    %esi
f0123571:	5f                   	pop    %edi
f0123572:	5d                   	pop    %ebp
f0123573:	c3                   	ret    
f0123574:	3b 04 24             	cmp    (%esp),%eax
f0123577:	72 06                	jb     f012357f <__umoddi3+0x113>
f0123579:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012357d:	77 0f                	ja     f012358e <__umoddi3+0x122>
f012357f:	89 f2                	mov    %esi,%edx
f0123581:	29 f9                	sub    %edi,%ecx
f0123583:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0123587:	89 14 24             	mov    %edx,(%esp)
f012358a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012358e:	8b 44 24 04          	mov    0x4(%esp),%eax
f0123592:	8b 14 24             	mov    (%esp),%edx
f0123595:	83 c4 1c             	add    $0x1c,%esp
f0123598:	5b                   	pop    %ebx
f0123599:	5e                   	pop    %esi
f012359a:	5f                   	pop    %edi
f012359b:	5d                   	pop    %ebp
f012359c:	c3                   	ret    
f012359d:	8d 76 00             	lea    0x0(%esi),%esi
f01235a0:	2b 04 24             	sub    (%esp),%eax
f01235a3:	19 fa                	sbb    %edi,%edx
f01235a5:	89 d1                	mov    %edx,%ecx
f01235a7:	89 c6                	mov    %eax,%esi
f01235a9:	e9 71 ff ff ff       	jmp    f012351f <__umoddi3+0xb3>
f01235ae:	66 90                	xchg   %ax,%ax
f01235b0:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01235b4:	72 ea                	jb     f01235a0 <__umoddi3+0x134>
f01235b6:	89 d9                	mov    %ebx,%ecx
f01235b8:	e9 62 ff ff ff       	jmp    f012351f <__umoddi3+0xb3>
